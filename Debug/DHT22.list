
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009988  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001114  08009a98  08009a98  0000aa98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abac  0800abac  0000c1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abac  0800abac  0000bbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb4  0800abb4  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb4  0800abb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abb8  0800abb8  0000bbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800abbc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  200001e8  0800ada4  0000c1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800ada4  0000c964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efd2  00000000  00000000  0000c211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b95  00000000  00000000  0001b1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf7  00000000  00000000  0001ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196b8  00000000  00000000  0001fb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013914  00000000  00000000  000391df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d798  00000000  00000000  0004caf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da28b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  000da2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000df9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a80 	.word	0x08009a80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009a80 	.word	0x08009a80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DHT22_Read>:
    config.dhtIcChannel = channel;
}

// Starts a DHT22 measurement and waits for data to be captured and decoded
DHT22_Data DHT22_Read(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    latestData.ready = 0;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <DHT22_Read+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	725a      	strb	r2, [r3, #9]

    // Reset timer and start input capture via DMA
    __HAL_TIM_SET_COUNTER(config.dhtTimer, 0);
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_IC_Start_DMA(config.dhtTimer, config.dhtIcChannel, (uint32_t*)captureBuffer, DHT_CAPTURE_COUNT);
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f62:	7a9b      	ldrb	r3, [r3, #10]
 8000f64:	4619      	mov	r1, r3
 8000f66:	232b      	movs	r3, #43	@ 0x2b
 8000f68:	4a22      	ldr	r2, [pc, #136]	@ (8000ff4 <DHT22_Read+0xb0>)
 8000f6a:	f004 ff9b 	bl	8005ea4 <HAL_TIM_IC_Start_DMA>

    // Send start signal to DHT22: pull pin low, then high
    DHT22_SetPinOutput();
 8000f6e:	f000 f843 	bl	8000ff8 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(config.dhtPort, config.dhtPin, GPIO_PIN_RESET);
 8000f72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f78:	8911      	ldrh	r1, [r2, #8]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 ffd5 	bl	8002f2c <HAL_GPIO_WritePin>
    delay_us(DHT_START_LOW_US);
 8000f82:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000f86:	f000 f873 	bl	8001070 <delay_us>
    HAL_GPIO_WritePin(config.dhtPort, config.dhtPin, GPIO_PIN_SET);
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <DHT22_Read+0xac>)
 8000f90:	8911      	ldrh	r1, [r2, #8]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 ffc9 	bl	8002f2c <HAL_GPIO_WritePin>
    delay_us(DHT_START_HIGH_US);
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f000 f868 	bl	8001070 <delay_us>
    DHT22_SetPinInput();  // Switch pin to input to receive data
 8000fa0:	f000 f848 	bl	8001034 <DHT22_SetPinInput>

    // Wait for DMA capture to complete (max 10 ms)
    uint32_t timeout = HAL_GetTick() + 10;
 8000fa4:	f001 f912 	bl	80021cc <HAL_GetTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	330a      	adds	r3, #10
 8000fac:	60fb      	str	r3, [r7, #12]
    while (!latestData.ready && HAL_GetTick() < timeout) {
 8000fae:	bf00      	nop
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <DHT22_Read+0xa8>)
 8000fb2:	7a5b      	ldrb	r3, [r3, #9]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <DHT22_Read+0x80>
 8000fb8:	f001 f908 	bl	80021cc <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d8f5      	bhi.n	8000fb0 <DHT22_Read+0x6c>
        // Waiting for DHT22_ProcessCapture() to set latestData.ready = 1
    }

    // If no data was received, mark status as timeout
    if (!latestData.ready) {
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <DHT22_Read+0xa8>)
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <DHT22_Read+0x90>
        latestData.status = 2;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <DHT22_Read+0xa8>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	721a      	strb	r2, [r3, #8]
 8000fd2:	e002      	b.n	8000fda <DHT22_Read+0x96>
    } else {
        latestData.ready = 0;  // Clear ready flag for next read
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <DHT22_Read+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	725a      	strb	r2, [r3, #9]
    }

    return latestData;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	@ (8000fec <DHT22_Read+0xa8>)
 8000fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002b0 	.word	0x200002b0
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000204 	.word	0x20000204

08000ff8 <DHT22_SetPinOutput>:

// Configures GPIO pin as push-pull output (used to send start signal)
void DHT22_SetPinOutput(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = config.dhtPin;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <DHT22_SetPinOutput+0x38>)
 800100c:	891b      	ldrh	r3, [r3, #8]
 800100e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2302      	movs	r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(config.dhtPort, &GPIO_InitStruct);
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <DHT22_SetPinOutput+0x38>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	463a      	mov	r2, r7
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fdff 	bl	8002c24 <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000

08001034 <DHT22_SetPinInput>:

// Configures GPIO pin as input with pull-up (used to receive data)
void DHT22_SetPinInput(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = config.dhtPin;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <DHT22_SetPinInput+0x38>)
 8001048:	891b      	ldrh	r3, [r3, #8]
 800104a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(config.dhtPort, &GPIO_InitStruct);
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <DHT22_SetPinInput+0x38>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	463a      	mov	r2, r7
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fde1 	bl	8002c24 <HAL_GPIO_Init>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000

08001070 <delay_us>:

// Microsecond delay using hardware timer
void delay_us(uint16_t delay)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(config.dhtTimer, 0);
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <delay_us+0x30>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(config.dhtTimer) < delay);
 8001084:	bf00      	nop
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <delay_us+0x30>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3f8      	bcc.n	8001086 <delay_us+0x16>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000000 	.word	0x20000000

080010a4 <DHT22_Decode>:

// Decodes the captured signal into temperature and humidity values
DHT22_Data DHT22_Decode(void)
{
 80010a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a8:	b09d      	sub	sp, #116	@ 0x74
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	466b      	mov	r3, sp
 80010b0:	461e      	mov	r6, r3
    // Step 1: Skip handshake edges and extract timestamps
    int edgeCount = DHT_EDGE_COUNT;
 80010b2:	2329      	movs	r3, #41	@ 0x29
 80010b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint16_t timestamps[edgeCount];
 80010b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80010b8:	1e4b      	subs	r3, r1, #1
 80010ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80010bc:	460a      	mov	r2, r1
 80010be:	2300      	movs	r3, #0
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	0103      	lsls	r3, r0, #4
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	0102      	lsls	r2, r0, #4
 80010da:	460a      	mov	r2, r1
 80010dc:	2300      	movs	r3, #0
 80010de:	4692      	mov	sl, r2
 80010e0:	469b      	mov	fp, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80010ee:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80010f2:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80010f6:	460b      	mov	r3, r1
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	466b      	mov	r3, sp
 8001106:	3301      	adds	r3, #1
 8001108:	085b      	lsrs	r3, r3, #1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	653b      	str	r3, [r7, #80]	@ 0x50
    int idx = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	66fb      	str	r3, [r7, #108]	@ 0x6c
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i++) {
 8001112:	2302      	movs	r3, #2
 8001114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001116:	e00d      	b.n	8001134 <DHT22_Decode+0x90>
        timestamps[idx++] = captureBuffer[i];
 8001118:	4a81      	ldr	r2, [pc, #516]	@ (8001320 <DHT22_Decode+0x27c>)
 800111a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800111c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001126:	b289      	uxth	r1, r1
 8001128:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800112a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i++) {
 800112e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001130:	3301      	adds	r3, #1
 8001132:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001136:	2b2a      	cmp	r3, #42	@ 0x2a
 8001138:	ddee      	ble.n	8001118 <DHT22_Decode+0x74>
    }

    // Step 2: Calculate pulse widths between edges
    uint16_t pulseWidths[edgeCount - 1];
 800113a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800113c:	1e59      	subs	r1, r3, #1
 800113e:	1e4b      	subs	r3, r1, #1
 8001140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001142:	460a      	mov	r2, r1
 8001144:	2300      	movs	r3, #0
 8001146:	4690      	mov	r8, r2
 8001148:	4699      	mov	r9, r3
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001156:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800115a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800115e:	460a      	mov	r2, r1
 8001160:	2300      	movs	r3, #0
 8001162:	4614      	mov	r4, r2
 8001164:	461d      	mov	r5, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	012b      	lsls	r3, r5, #4
 8001170:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001174:	0122      	lsls	r2, r4, #4
 8001176:	460b      	mov	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	3307      	adds	r3, #7
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	ebad 0d03 	sub.w	sp, sp, r3
 8001184:	466b      	mov	r3, sp
 8001186:	3301      	adds	r3, #1
 8001188:	085b      	lsrs	r3, r3, #1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < edgeCount - 1; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	667b      	str	r3, [r7, #100]	@ 0x64
 8001192:	e011      	b.n	80011b8 <DHT22_Decode+0x114>
        pulseWidths[i] = timestamps[i + 1] - timestamps[i];
 8001194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800119a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800119e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011a0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80011a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b299      	uxth	r1, r3
 80011aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80011ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < edgeCount - 1; i++) {
 80011b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011b4:	3301      	adds	r3, #1
 80011b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80011b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbe8      	blt.n	8001194 <DHT22_Decode+0xf0>
    }

    // Step 3: Convert pulse widths to bits (1 or 0 based on threshold)
    uint8_t bits[TOTAL_BITS];
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80011c6:	e012      	b.n	80011ee <DHT22_Decode+0x14a>
        bits[i] = (pulseWidths[i] >= THRESHOLD_US) ? 1 : 0;
 80011c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011d0:	2b63      	cmp	r3, #99	@ 0x63
 80011d2:	bf8c      	ite	hi
 80011d4:	2301      	movhi	r3, #1
 80011d6:	2300      	movls	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4619      	mov	r1, r3
 80011dc:	f107 021c 	add.w	r2, r7, #28
 80011e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011ea:	3301      	adds	r3, #1
 80011ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80011ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011f0:	2b27      	cmp	r3, #39	@ 0x27
 80011f2:	dde9      	ble.n	80011c8 <DHT22_Decode+0x124>
    }

    // Step 4: Pack bits into 5 bytes (40 bits total)
    uint8_t data[5] = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001202:	e02f      	b.n	8001264 <DHT22_Decode+0x1c0>
        data[i / 8] <<= 1;
 8001204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001206:	2b00      	cmp	r3, #0
 8001208:	da00      	bge.n	800120c <DHT22_Decode+0x168>
 800120a:	3307      	adds	r3, #7
 800120c:	10db      	asrs	r3, r3, #3
 800120e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	440a      	add	r2, r1
 8001218:	f812 2c5c 	ldrb.w	r2, [r2, #-92]
 800121c:	0052      	lsls	r2, r2, #1
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	3368      	adds	r3, #104	@ 0x68
 8001222:	f107 0108 	add.w	r1, r7, #8
 8001226:	440b      	add	r3, r1
 8001228:	f803 2c5c 	strb.w	r2, [r3, #-92]
        data[i / 8] |= bits[i];
 800122c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800122e:	2b00      	cmp	r3, #0
 8001230:	da00      	bge.n	8001234 <DHT22_Decode+0x190>
 8001232:	3307      	adds	r3, #7
 8001234:	10db      	asrs	r3, r3, #3
 8001236:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800123a:	f107 0108 	add.w	r1, r7, #8
 800123e:	440a      	add	r2, r1
 8001240:	f812 1c5c 	ldrb.w	r1, [r2, #-92]
 8001244:	f107 001c 	add.w	r0, r7, #28
 8001248:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800124a:	4402      	add	r2, r0
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	3368      	adds	r3, #104	@ 0x68
 8001254:	f107 0108 	add.w	r1, r7, #8
 8001258:	440b      	add	r3, r1
 800125a:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (int i = 0; i < TOTAL_BITS; i++) {
 800125e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001260:	3301      	adds	r3, #1
 8001262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001266:	2b27      	cmp	r3, #39	@ 0x27
 8001268:	ddcc      	ble.n	8001204 <DHT22_Decode+0x160>
    }

    // Step 5: Verify checksum
    uint8_t checksum = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
 800126a:	7d3a      	ldrb	r2, [r7, #20]
 800126c:	7d7b      	ldrb	r3, [r7, #21]
 800126e:	4413      	add	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	4413      	add	r3, r2
 8001276:	b2da      	uxtb	r2, r3
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	4413      	add	r3, r2
 800127c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    latestData.status = 1;  // Assume error by default
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <DHT22_Decode+0x280>)
 8001282:	2201      	movs	r2, #1
 8001284:	721a      	strb	r2, [r3, #8]

    if (checksum == data[4]) {
 8001286:	7e3b      	ldrb	r3, [r7, #24]
 8001288:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800128c:	429a      	cmp	r2, r3
 800128e:	d13b      	bne.n	8001308 <DHT22_Decode+0x264>
        // Decode humidity
        latestData.humidity = (float)((data[0] << 8) | data[1]) / 10;
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	7d7a      	ldrb	r2, [r7, #21]
 8001296:	4313      	orrs	r3, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcaf 	bl	8000bfc <__aeabi_i2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	4921      	ldr	r1, [pc, #132]	@ (8001328 <DHT22_Decode+0x284>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fdb2 	bl	8000e0c <__aeabi_fdiv>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <DHT22_Decode+0x280>)
 80012ae:	605a      	str	r2, [r3, #4]

        // Decode temperature (handle negative values)
        if (data[2] & 0x80) {
 80012b0:	7dbb      	ldrb	r3, [r7, #22]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da14      	bge.n	80012e2 <DHT22_Decode+0x23e>
            latestData.temperature = -(float)(((data[2] & 0x7F) << 8) | data[3]) / 10;
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80012c0:	7dfa      	ldrb	r2, [r7, #23]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fc99 	bl	8000bfc <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012d0:	4915      	ldr	r1, [pc, #84]	@ (8001328 <DHT22_Decode+0x284>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fd9a 	bl	8000e0c <__aeabi_fdiv>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <DHT22_Decode+0x280>)
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	e00f      	b.n	8001302 <DHT22_Decode+0x25e>
        } else {
            latestData.temperature = (float)((data[2] << 8) | data[3]) / 10;
 80012e2:	7dbb      	ldrb	r3, [r7, #22]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	7dfa      	ldrb	r2, [r7, #23]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fc86 	bl	8000bfc <__aeabi_i2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	490d      	ldr	r1, [pc, #52]	@ (8001328 <DHT22_Decode+0x284>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fd89 	bl	8000e0c <__aeabi_fdiv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <DHT22_Decode+0x280>)
 8001300:	601a      	str	r2, [r3, #0]
        }

        latestData.status = 0;  // Success
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <DHT22_Decode+0x280>)
 8001304:	2200      	movs	r2, #0
 8001306:	721a      	strb	r2, [r3, #8]
    }

    return latestData;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <DHT22_Decode+0x280>)
 800130c:	ca07      	ldmia	r2, {r0, r1, r2}
 800130e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001312:	46b5      	mov	sp, r6
}
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	3774      	adds	r7, #116	@ 0x74
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800131e:	bf00      	nop
 8001320:	20000204 	.word	0x20000204
 8001324:	200002b0 	.word	0x200002b0
 8001328:	41200000 	.word	0x41200000

0800132c <DHT22_ProcessCapture>:

// Called from input capture callback to decode and finalize data
void DHT22_ProcessCapture(void)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
    latestData = DHT22_Decode();       // Decode signal into usable data
 8001332:	4c0f      	ldr	r4, [pc, #60]	@ (8001370 <DHT22_ProcessCapture+0x44>)
 8001334:	463b      	mov	r3, r7
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff feb4 	bl	80010a4 <DHT22_Decode>
 800133c:	463b      	mov	r3, r7
 800133e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    latestData.ready = 1;              // Mark data as ready for retrieval
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <DHT22_ProcessCapture+0x44>)
 8001348:	2201      	movs	r2, #1
 800134a:	725a      	strb	r2, [r3, #9]
    HAL_TIM_Base_Stop(config.dhtTimer);
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <DHT22_ProcessCapture+0x48>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fc75 	bl	8005c40 <HAL_TIM_Base_Stop>
    HAL_TIM_IC_Stop(config.dhtTimer, config.dhtIcChannel);
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <DHT22_ProcessCapture+0x48>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <DHT22_ProcessCapture+0x48>)
 800135c:	7a92      	ldrb	r2, [r2, #10]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fd3d 	bl	8005de0 <HAL_TIM_IC_Stop>
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	bf00      	nop
 8001370:	200002b0 	.word	0x200002b0
 8001374:	20000000 	.word	0x20000000

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 fece 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f81a 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 f984 	bl	8001690 <MX_GPIO_Init>
  MX_DMA_Init();
 8001388:	f000 f964 	bl	8001654 <MX_DMA_Init>
  MX_I2C1_Init();
 800138c:	f000 f85a 	bl	8001444 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001390:	f000 f886 	bl	80014a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001394:	f000 f910 	bl	80015b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim1);
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <main+0x38>)
 800139a:	f004 fc77 	bl	8005c8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <main+0x3c>)
 80013a0:	f004 fc74 	bl	8005c8c <HAL_TIM_Base_Start_IT>
  HAL_Delay (100);
 80013a4:	2064      	movs	r0, #100	@ 0x64
 80013a6:	f000 ff1b 	bl	80021e0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <main+0x32>
 80013ae:	bf00      	nop
 80013b0:	20000310 	.word	0x20000310
 80013b4:	20000358 	.word	0x20000358

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	@ 0x40
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	2228      	movs	r2, #40	@ 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 fa83 	bl	80078d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4618      	mov	r0, r3
 8001402:	f003 ff87 	bl	8005314 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800140c:	f000 f9ae 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f9f4 	bl	8005818 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001436:	f000 f999 	bl	800176c <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3740      	adds	r7, #64	@ 0x40
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <MX_I2C1_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_I2C1_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001482:	f001 fd85 	bl	8002f90 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800148c:	f000 f96e 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002bc 	.word	0x200002bc
 8001498:	40005400 	.word	0x40005400
 800149c:	00061a80 	.word	0x00061a80

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 80014a6:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <MX_TIM1_Init+0x108>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a3f      	ldr	r2, [pc, #252]	@ (80015a8 <MX_TIM1_Init+0x108>)
 80014ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <MX_TIM1_Init+0x108>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e4:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <MX_TIM1_Init+0x10c>)
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <MX_TIM1_Init+0x110>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <MX_TIM1_Init+0x10c>)
 80014ec:	2247      	movs	r2, #71	@ 0x47
 80014ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <MX_TIM1_Init+0x10c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <MX_TIM1_Init+0x10c>)
 80014f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <MX_TIM1_Init+0x10c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <MX_TIM1_Init+0x10c>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b28      	ldr	r3, [pc, #160]	@ (80015ac <MX_TIM1_Init+0x10c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001510:	4826      	ldr	r0, [pc, #152]	@ (80015ac <MX_TIM1_Init+0x10c>)
 8001512:	f004 fafb 	bl	8005b0c <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800151c:	f000 f926 	bl	800176c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4619      	mov	r1, r3
 800152c:	481f      	ldr	r0, [pc, #124]	@ (80015ac <MX_TIM1_Init+0x10c>)
 800152e:	f004 ffd3 	bl	80064d8 <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001538:	f000 f918 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800153c:	481b      	ldr	r0, [pc, #108]	@ (80015ac <MX_TIM1_Init+0x10c>)
 800153e:	f004 fbf7 	bl	8005d30 <HAL_TIM_IC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001548:	f000 f910 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	4619      	mov	r1, r3
 800155a:	4814      	ldr	r0, [pc, #80]	@ (80015ac <MX_TIM1_Init+0x10c>)
 800155c:	f005 fbc8 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001566:	f000 f901 	bl	800176c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800156a:	2302      	movs	r3, #2
 800156c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156e:	2301      	movs	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  sConfigIC.ICFilter = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <MX_TIM1_Init+0x10c>)
 8001584:	f004 ff0c 	bl	80063a0 <HAL_TIM_IC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800158e:	f000 f8ed 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_CC1], hdma_tim1_ch1);
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_TIM1_Init+0x10c>)
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <MX_TIM1_Init+0x114>)
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_TIM1_Init+0x114>)
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <MX_TIM1_Init+0x10c>)
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	20000310 	.word	0x20000310
 80015b0:	40012c00 	.word	0x40012c00
 80015b4:	200003a0 	.word	0x200003a0

080015b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <MX_TIM2_Init+0x98>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_TIM2_Init+0x98>)
 80015de:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_TIM2_Init+0x98>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_TIM2_Init+0x98>)
 80015ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_TIM2_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MX_TIM2_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fe:	4814      	ldr	r0, [pc, #80]	@ (8001650 <MX_TIM2_Init+0x98>)
 8001600:	f004 fa84 	bl	8005b0c <HAL_TIM_Base_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800160a:	f000 f8af 	bl	800176c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_TIM2_Init+0x98>)
 800161c:	f004 ff5c 	bl	80064d8 <HAL_TIM_ConfigClockSource>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001626:	f000 f8a1 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	@ (8001650 <MX_TIM2_Init+0x98>)
 8001638:	f005 fb5a 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001642:	f000 f893 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000358 	.word	0x20000358

08001654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_DMA_Init+0x38>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <MX_DMA_Init+0x38>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_DMA_Init+0x38>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	200c      	movs	r0, #12
 8001678:	f000 fead 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800167c:	200c      	movs	r0, #12
 800167e:	f000 fec6 	bl	800240e <HAL_NVIC_EnableIRQ>

}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016bc:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a27      	ldr	r2, [pc, #156]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a21      	ldr	r2, [pc, #132]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_GPIO_Init+0xd0>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170a:	4816      	ldr	r0, [pc, #88]	@ (8001764 <MX_GPIO_Init+0xd4>)
 800170c:	f001 fc0e 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001716:	4814      	ldr	r0, [pc, #80]	@ (8001768 <MX_GPIO_Init+0xd8>)
 8001718:	f001 fc08 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800171c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2302      	movs	r3, #2
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	480b      	ldr	r0, [pc, #44]	@ (8001764 <MX_GPIO_Init+0xd4>)
 8001736:	f001 fa75 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800173a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2302      	movs	r3, #2
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_GPIO_Init+0xd8>)
 8001754:	f001 fa66 	bl	8002c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	40011000 	.word	0x40011000
 8001768:	40010c00 	.word	0x40010c00

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <Error_Handler+0x8>

08001778 <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	e01d      	b.n	80017c0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	3b50      	subs	r3, #80	@ 0x50
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	@ 0x78
 8001790:	f000 f99e 	bl	8001ad0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	@ 0x78
 800179a:	f000 f999 	bl	8001ad0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800179e:	2210      	movs	r2, #16
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	@ 0x78
 80017a4:	f000 f994 	bl	8001ad0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	01db      	lsls	r3, r3, #7
 80017ac:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <SSD1306_UpdateScreen+0x58>)
 80017ae:	441a      	add	r2, r3
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	2140      	movs	r1, #64	@ 0x40
 80017b4:	2078      	movs	r0, #120	@ 0x78
 80017b6:	f000 f925 	bl	8001a04 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3301      	adds	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b07      	cmp	r3, #7
 80017c4:	d9de      	bls.n	8001784 <SSD1306_UpdateScreen+0xc>
	}
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200003e4 	.word	0x200003e4

080017d4 <SSD1306_DrawPixel>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	460b      	mov	r3, r1
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	70fb      	strb	r3, [r7, #3]
	if (
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ea:	d848      	bhi.n	800187e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80017f0:	d845      	bhi.n	800187e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017f2:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <SSD1306_DrawPixel+0xb4>)
 80017f4:	791b      	ldrb	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d11a      	bne.n	8001844 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	88bb      	ldrh	r3, [r7, #4]
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	b298      	uxth	r0, r3
 8001816:	4603      	mov	r3, r0
 8001818:	01db      	lsls	r3, r3, #7
 800181a:	4413      	add	r3, r2
 800181c:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <SSD1306_DrawPixel+0xb8>)
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	b25a      	sxtb	r2, r3
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	b25b      	sxtb	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b259      	sxtb	r1, r3
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	4603      	mov	r3, r0
 8001838:	01db      	lsls	r3, r3, #7
 800183a:	4413      	add	r3, r2
 800183c:	b2c9      	uxtb	r1, r1
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <SSD1306_DrawPixel+0xb8>)
 8001840:	54d1      	strb	r1, [r2, r3]
 8001842:	e01d      	b.n	8001880 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	b298      	uxth	r0, r3
 800184c:	4603      	mov	r3, r0
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	4413      	add	r3, r2
 8001852:	4a0e      	ldr	r2, [pc, #56]	@ (800188c <SSD1306_DrawPixel+0xb8>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	b25a      	sxtb	r2, r3
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	b25b      	sxtb	r3, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	b25b      	sxtb	r3, r3
 800186a:	4013      	ands	r3, r2
 800186c:	b259      	sxtb	r1, r3
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	4603      	mov	r3, r0
 8001872:	01db      	lsls	r3, r3, #7
 8001874:	4413      	add	r3, r2
 8001876:	b2c9      	uxtb	r1, r1
 8001878:	4a04      	ldr	r2, [pc, #16]	@ (800188c <SSD1306_DrawPixel+0xb8>)
 800187a:	54d1      	strb	r1, [r2, r3]
 800187c:	e000      	b.n	8001880 <SSD1306_DrawPixel+0xac>
		return;
 800187e:	bf00      	nop
	}
}
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	200007e4 	.word	0x200007e4
 800188c:	200003e4 	.word	0x200003e4

08001890 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	80fb      	strh	r3, [r7, #6]
 800189c:	4613      	mov	r3, r2
 800189e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018a0:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <SSD1306_GotoXY+0x28>)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <SSD1306_GotoXY+0x28>)
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	8053      	strh	r3, [r2, #2]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200007e4 	.word	0x200007e4

080018bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018cc:	4b39      	ldr	r3, [pc, #228]	@ (80019b4 <SSD1306_Putc+0xf8>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
	if (
 80018d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80018da:	dc07      	bgt.n	80018ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018dc:	4b35      	ldr	r3, [pc, #212]	@ (80019b4 <SSD1306_Putc+0xf8>)
 80018de:	885b      	ldrh	r3, [r3, #2]
 80018e0:	461a      	mov	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80018ea:	dd01      	ble.n	80018f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e05d      	b.n	80019ac <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e04b      	b.n	800198e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	3b20      	subs	r3, #32
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	7849      	ldrb	r1, [r1, #1]
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4619      	mov	r1, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	440b      	add	r3, r1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e030      	b.n	800197c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800192a:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <SSD1306_Putc+0xf8>)
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	b298      	uxth	r0, r3
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <SSD1306_Putc+0xf8>)
 8001938:	885a      	ldrh	r2, [r3, #2]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	79ba      	ldrb	r2, [r7, #6]
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff ff45 	bl	80017d4 <SSD1306_DrawPixel>
 800194a:	e014      	b.n	8001976 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <SSD1306_Putc+0xf8>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4413      	add	r3, r2
 8001956:	b298      	uxth	r0, r3
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <SSD1306_Putc+0xf8>)
 800195a:	885a      	ldrh	r2, [r3, #2]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b299      	uxth	r1, r3
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	f7ff ff2f 	bl	80017d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4293      	cmp	r3, r2
 8001986:	d3c8      	bcc.n	800191a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	461a      	mov	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4293      	cmp	r3, r2
 8001998:	d3ad      	bcc.n	80018f6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SSD1306_Putc+0xf8>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <SSD1306_Putc+0xf8>)
 80019a8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80019aa:	79fb      	ldrb	r3, [r7, #7]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200007e4 	.word	0x200007e4

080019b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019c6:	e012      	b.n	80019ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	79fa      	ldrb	r2, [r7, #7]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff73 	bl	80018bc <SSD1306_Putc>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d002      	beq.n	80019e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	e008      	b.n	80019fa <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e8      	bne.n	80019c8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	781b      	ldrb	r3, [r3, #0]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b0c7      	sub	sp, #284	@ 0x11c
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001a12:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001a16:	600a      	str	r2, [r1, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a1e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a22:	4622      	mov	r2, r4
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a2a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a2e:	4602      	mov	r2, r0
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a4a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a58:	e015      	b.n	8001a86 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a5a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a62:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	441a      	add	r2, r3
 8001a6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a6e:	3301      	adds	r3, #1
 8001a70:	7811      	ldrb	r1, [r2, #0]
 8001a72:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a76:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001a7a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a7c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a80:	3301      	adds	r3, #1
 8001a82:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a86:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a90:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a94:	8812      	ldrh	r2, [r2, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d8df      	bhi.n	8001a5a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a9e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001aaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f107 020c 	add.w	r2, r7, #12
 8001ab8:	200a      	movs	r0, #10
 8001aba:	9000      	str	r0, [sp, #0]
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <ssd1306_I2C_WriteMulti+0xc8>)
 8001abe:	f001 fbbf 	bl	8003240 <HAL_I2C_Master_Transmit>
}
 8001ac2:	bf00      	nop
 8001ac4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	200002bc 	.word	0x200002bc

08001ad0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	460b      	mov	r3, r1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	b299      	uxth	r1, r3
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	230a      	movs	r3, #10
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2302      	movs	r3, #2
 8001af8:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <ssd1306_I2C_Write+0x38>)
 8001afa:	f001 fba1 	bl	8003240 <HAL_I2C_Master_Transmit>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002bc 	.word	0x200002bc

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b12:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <HAL_MspInit+0x8c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_MspInit+0x8c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_MspInit+0x8c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_MspInit+0x8c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001b98 <HAL_MspInit+0x8c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <HAL_MspInit+0x8c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fc45 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f000 fc5e 	bl	800240e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2004      	movs	r0, #4
 8001b58:	f000 fc3d 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	f000 fc56 	bl	800240e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2005      	movs	r0, #5
 8001b68:	f000 fc35 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b6c:	2005      	movs	r0, #5
 8001b6e:	f000 fc4e 	bl	800240e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_MspInit+0x90>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_MspInit+0x90>)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1d      	ldr	r2, [pc, #116]	@ (8001c30 <HAL_I2C_MspInit+0x90>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d133      	bne.n	8001c28 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <HAL_I2C_MspInit+0x94>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <HAL_I2C_MspInit+0x94>)
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_I2C_MspInit+0x94>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd8:	23c0      	movs	r3, #192	@ 0xc0
 8001bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	4813      	ldr	r0, [pc, #76]	@ (8001c38 <HAL_I2C_MspInit+0x98>)
 8001bec:	f001 f81a 	bl	8002c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <HAL_I2C_MspInit+0x94>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c34 <HAL_I2C_MspInit+0x94>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bfa:	61d3      	str	r3, [r2, #28]
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_I2C_MspInit+0x94>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	201f      	movs	r0, #31
 8001c0e:	f000 fbe2 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c12:	201f      	movs	r0, #31
 8001c14:	f000 fbfb 	bl	800240e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2020      	movs	r0, #32
 8001c1e:	f000 fbda 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c22:	2020      	movs	r0, #32
 8001c24:	f000 fbf3 	bl	800240e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	@ 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3b      	ldr	r2, [pc, #236]	@ (8001d44 <HAL_TIM_Base_MspInit+0x108>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d156      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0xce>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a39      	ldr	r2, [pc, #228]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001c62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a33      	ldr	r2, [pc, #204]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	482a      	ldr	r0, [pc, #168]	@ (8001d4c <HAL_TIM_Base_MspInit+0x110>)
 8001ca2:	f000 ffbf 	bl	8002c24 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d54 <HAL_TIM_Base_MspInit+0x118>)
 8001caa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cac:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb2:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cc6:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cd6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001cdc:	481c      	ldr	r0, [pc, #112]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cde:	f000 fbb1 	bl	8002444 <HAL_DMA_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8001ce8:	f7ff fd40 	bl	800176c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a18      	ldr	r2, [pc, #96]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_TIM_Base_MspInit+0x114>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	201b      	movs	r0, #27
 8001cfe:	f000 fb6a 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d02:	201b      	movs	r0, #27
 8001d04:	f000 fb83 	bl	800240e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d08:	e018      	b.n	8001d3c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d12:	d113      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	61d3      	str	r3, [r2, #28]
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_TIM_Base_MspInit+0x10c>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	201c      	movs	r0, #28
 8001d32:	f000 fb50 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d36:	201c      	movs	r0, #28
 8001d38:	f000 fb69 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	@ 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	200003a0 	.word	0x200003a0
 8001d54:	4002001c 	.word	0x4002001c

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x4>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <MemManage_Handler+0x4>

08001d70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f000 f9fe 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001db4:	f003 fa96 	bl	80052e4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001dc0:	f000 fdb2 	bl	8002928 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <DMA1_Channel2_IRQHandler+0x10>)
 8001dda:	f000 fc65 	bl	80026a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */


  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200003a0 	.word	0x200003a0

08001de8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <TIM1_CC_IRQHandler+0x10>)
 8001dee:	f004 f9e7 	bl	80061c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000310 	.word	0x20000310

08001dfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <TIM2_IRQHandler+0x10>)
 8001e02:	f004 f9dd 	bl	80061c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000358 	.word	0x20000358

08001e10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <I2C1_EV_IRQHandler+0x10>)
 8001e16:	f001 fb11 	bl	800343c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200002bc 	.word	0x200002bc

08001e24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <I2C1_ER_IRQHandler+0x10>)
 8001e2a:	f001 fc78 	bl	800371e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002bc 	.word	0x200002bc

08001e38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e48:	d154      	bne.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0xbc>
	{
		HAL_TIM_Base_Start(&htim1);
 8001e4a:	482c      	ldr	r0, [pc, #176]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e4c:	f003 feae 	bl	8005bac <HAL_TIM_Base_Start>
		DHT22_Data data = DHT22_Read();
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f875 	bl	8000f44 <DHT22_Read>

		if(!data.status && !data.ready)
 8001e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d148      	bne.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001e62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d144      	bne.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0xbc>
		{
			char tempStr[8];
			char humStr[8];

			SSD1306_GotoXY (0,0);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fd0f 	bl	8001890 <SSD1306_GotoXY>
			SSD1306_Puts ("Temp: ", &Font_11x18, 1);
 8001e72:	2201      	movs	r2, #1
 8001e74:	4922      	ldr	r1, [pc, #136]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e76:	4823      	ldr	r0, [pc, #140]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001e78:	f7ff fd9e 	bl	80019b8 <SSD1306_Puts>
			sprintf(tempStr,  "%.1f", data.temperature);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fad2 	bl	8000428 <__aeabi_f2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	f107 0014 	add.w	r0, r7, #20
 8001e8c:	491e      	ldr	r1, [pc, #120]	@ (8001f08 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e8e:	f005 fcbb 	bl	8007808 <siprintf>
			SSD1306_GotoXY (60,0);
 8001e92:	2100      	movs	r1, #0
 8001e94:	203c      	movs	r0, #60	@ 0x3c
 8001e96:	f7ff fcfb 	bl	8001890 <SSD1306_GotoXY>
			SSD1306_Puts (tempStr, &Font_11x18, 1);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4917      	ldr	r1, [pc, #92]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fd88 	bl	80019b8 <SSD1306_Puts>
			SSD1306_GotoXY (0, 30);
 8001ea8:	211e      	movs	r1, #30
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff fcf0 	bl	8001890 <SSD1306_GotoXY>
			SSD1306_Puts ("Hum: ", &Font_11x18, 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4913      	ldr	r1, [pc, #76]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001eb4:	4815      	ldr	r0, [pc, #84]	@ (8001f0c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001eb6:	f7ff fd7f 	bl	80019b8 <SSD1306_Puts>
			SSD1306_GotoXY (50, 30);
 8001eba:	211e      	movs	r1, #30
 8001ebc:	2032      	movs	r0, #50	@ 0x32
 8001ebe:	f7ff fce7 	bl	8001890 <SSD1306_GotoXY>
			sprintf(humStr, "%.1f", data.humidity);
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe faaf 	bl	8000428 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	f107 000c 	add.w	r0, r7, #12
 8001ed2:	490d      	ldr	r1, [pc, #52]	@ (8001f08 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001ed4:	f005 fc98 	bl	8007808 <siprintf>
			SSD1306_Puts (humStr, &Font_11x18, 1);
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2201      	movs	r2, #1
 8001ede:	4908      	ldr	r1, [pc, #32]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fd69 	bl	80019b8 <SSD1306_Puts>

			SSD1306_UpdateScreen();
 8001ee6:	f7ff fc47 	bl	8001778 <SSD1306_UpdateScreen>

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001eea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eee:	4808      	ldr	r0, [pc, #32]	@ (8001f10 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ef0:	f001 f834 	bl	8002f5c <HAL_GPIO_TogglePin>



	}

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000310 	.word	0x20000310
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	08009a98 	.word	0x08009a98
 8001f08:	08009aa0 	.word	0x08009aa0
 8001f0c:	08009aa8 	.word	0x08009aa8
 8001f10:	40011000 	.word	0x40011000

08001f14 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d105      	bne.n	8001f32 <HAL_TIM_IC_CaptureCallback+0x1e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		DHT22_ProcessCapture();
 8001f2e:	f7ff f9fd 	bl	800132c <DHT22_ProcessCapture>
	}
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_kill>:

int _kill(int pid, int sig)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f58:	f005 fd0e 	bl	8007978 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2216      	movs	r2, #22
 8001f60:	601a      	str	r2, [r3, #0]
  return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_exit>:

void _exit (int status)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f76:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffe7 	bl	8001f4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <_exit+0x12>

08001f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00a      	b.n	8001fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf0      	blt.n	8001f96 <_read+0x12>
  }

  return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e009      	b.n	8001fe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf1      	blt.n	8001fd0 <_write+0x12>
  }
  return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_close>:

int _close(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201c:	605a      	str	r2, [r3, #4]
  return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <_isatty>:

int _isatty(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f005 fc76 	bl	8007978 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20005000 	.word	0x20005000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	200007ec 	.word	0x200007ec
 80020c0:	20000968 	.word	0x20000968

080020c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d0:	f7ff fff8 	bl	80020c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020d6:	490c      	ldr	r1, [pc, #48]	@ (8002108 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020d8:	4a0c      	ldr	r2, [pc, #48]	@ (800210c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020ec:	4c09      	ldr	r4, [pc, #36]	@ (8002114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f005 fc43 	bl	8007984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020fe:	f7ff f93b 	bl	8001378 <main>
  bx lr
 8002102:	4770      	bx	lr
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800210c:	0800abbc 	.word	0x0800abbc
  ldr r2, =_sbss
 8002110:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002114:	20000964 	.word	0x20000964

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_Init+0x28>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <HAL_Init+0x28>)
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f947 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	200f      	movs	r0, #15
 8002134:	f000 f808 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7ff fce8 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f95f 	bl	800242a <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 f927 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000014 	.word	0x20000014
 80021a0:	2000001c 	.word	0x2000001c
 80021a4:	20000018 	.word	0x20000018

080021a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_IncTick+0x20>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a03      	ldr	r2, [pc, #12]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	2000001c 	.word	0x2000001c
 80021c8:	200007f0 	.word	0x200007f0

080021cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <HAL_GetTick+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	200007f0 	.word	0x200007f0

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fff0 	bl	80021cc <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffe0 	bl	80021cc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000001c 	.word	0x2000001c

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <__NVIC_EnableIRQ+0x34>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff90 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff2d 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff42 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff90 	bl	8002318 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5f 	bl	80022c4 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff35 	bl	800228c <__NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa2 	bl	800237c <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e043      	b.n	80024e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_DMA_Init+0xa8>)
 8002462:	4413      	add	r3, r2
 8002464:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_DMA_Init+0xac>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	009a      	lsls	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_DMA_Init+0xb0>)
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800248e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002492:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	bffdfff8 	.word	0xbffdfff8
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_DMA_Start_IT+0x20>
 8002514:	2302      	movs	r3, #2
 8002516:	e04b      	b.n	80025b0 <HAL_DMA_Start_IT+0xb8>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d13a      	bne.n	80025a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f9bc 	bl	80028ce <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 020e 	orr.w	r2, r2, #14
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e00f      	b.n	8002590 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 020a 	orr.w	r2, r2, #10
 800258e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e005      	b.n	80025ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d005      	beq.n	80025dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e051      	b.n	8002680 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020e 	bic.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	@ (800268c <HAL_DMA_Abort_IT+0xd4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d029      	beq.n	800265a <HAL_DMA_Abort_IT+0xa2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a21      	ldr	r2, [pc, #132]	@ (8002690 <HAL_DMA_Abort_IT+0xd8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d022      	beq.n	8002656 <HAL_DMA_Abort_IT+0x9e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <HAL_DMA_Abort_IT+0xdc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01a      	beq.n	8002650 <HAL_DMA_Abort_IT+0x98>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1e      	ldr	r2, [pc, #120]	@ (8002698 <HAL_DMA_Abort_IT+0xe0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d012      	beq.n	800264a <HAL_DMA_Abort_IT+0x92>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1c      	ldr	r2, [pc, #112]	@ (800269c <HAL_DMA_Abort_IT+0xe4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00a      	beq.n	8002644 <HAL_DMA_Abort_IT+0x8c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1b      	ldr	r2, [pc, #108]	@ (80026a0 <HAL_DMA_Abort_IT+0xe8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_DMA_Abort_IT+0x86>
 8002638:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800263c:	e00e      	b.n	800265c <HAL_DMA_Abort_IT+0xa4>
 800263e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002642:	e00b      	b.n	800265c <HAL_DMA_Abort_IT+0xa4>
 8002644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002648:	e008      	b.n	800265c <HAL_DMA_Abort_IT+0xa4>
 800264a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800264e:	e005      	b.n	800265c <HAL_DMA_Abort_IT+0xa4>
 8002650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002654:	e002      	b.n	800265c <HAL_DMA_Abort_IT+0xa4>
 8002656:	2310      	movs	r3, #16
 8002658:	e000      	b.n	800265c <HAL_DMA_Abort_IT+0xa4>
 800265a:	2301      	movs	r3, #1
 800265c:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <HAL_DMA_Abort_IT+0xec>)
 800265e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
    } 
  }
  return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020008 	.word	0x40020008
 8002690:	4002001c 	.word	0x4002001c
 8002694:	40020030 	.word	0x40020030
 8002698:	40020044 	.word	0x40020044
 800269c:	40020058 	.word	0x40020058
 80026a0:	4002006c 	.word	0x4002006c
 80026a4:	40020000 	.word	0x40020000

080026a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	2204      	movs	r2, #4
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d04f      	beq.n	8002770 <HAL_DMA_IRQHandler+0xc8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a66      	ldr	r2, [pc, #408]	@ (8002898 <HAL_DMA_IRQHandler+0x1f0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d029      	beq.n	8002756 <HAL_DMA_IRQHandler+0xae>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a65      	ldr	r2, [pc, #404]	@ (800289c <HAL_DMA_IRQHandler+0x1f4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMA_IRQHandler+0xaa>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a63      	ldr	r2, [pc, #396]	@ (80028a0 <HAL_DMA_IRQHandler+0x1f8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01a      	beq.n	800274c <HAL_DMA_IRQHandler+0xa4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a62      	ldr	r2, [pc, #392]	@ (80028a4 <HAL_DMA_IRQHandler+0x1fc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d012      	beq.n	8002746 <HAL_DMA_IRQHandler+0x9e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a60      	ldr	r2, [pc, #384]	@ (80028a8 <HAL_DMA_IRQHandler+0x200>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x98>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a5f      	ldr	r2, [pc, #380]	@ (80028ac <HAL_DMA_IRQHandler+0x204>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d102      	bne.n	800273a <HAL_DMA_IRQHandler+0x92>
 8002734:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002738:	e00e      	b.n	8002758 <HAL_DMA_IRQHandler+0xb0>
 800273a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800273e:	e00b      	b.n	8002758 <HAL_DMA_IRQHandler+0xb0>
 8002740:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002744:	e008      	b.n	8002758 <HAL_DMA_IRQHandler+0xb0>
 8002746:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800274a:	e005      	b.n	8002758 <HAL_DMA_IRQHandler+0xb0>
 800274c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002750:	e002      	b.n	8002758 <HAL_DMA_IRQHandler+0xb0>
 8002752:	2340      	movs	r3, #64	@ 0x40
 8002754:	e000      	b.n	8002758 <HAL_DMA_IRQHandler+0xb0>
 8002756:	2304      	movs	r3, #4
 8002758:	4a55      	ldr	r2, [pc, #340]	@ (80028b0 <HAL_DMA_IRQHandler+0x208>)
 800275a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8094 	beq.w	800288e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800276e:	e08e      	b.n	800288e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	2202      	movs	r2, #2
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d056      	beq.n	800282e <HAL_DMA_IRQHandler+0x186>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d051      	beq.n	800282e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020a 	bic.w	r2, r2, #10
 80027a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a38      	ldr	r2, [pc, #224]	@ (8002898 <HAL_DMA_IRQHandler+0x1f0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d029      	beq.n	800280e <HAL_DMA_IRQHandler+0x166>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a37      	ldr	r2, [pc, #220]	@ (800289c <HAL_DMA_IRQHandler+0x1f4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_IRQHandler+0x162>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <HAL_DMA_IRQHandler+0x1f8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01a      	beq.n	8002804 <HAL_DMA_IRQHandler+0x15c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a34      	ldr	r2, [pc, #208]	@ (80028a4 <HAL_DMA_IRQHandler+0x1fc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d012      	beq.n	80027fe <HAL_DMA_IRQHandler+0x156>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a32      	ldr	r2, [pc, #200]	@ (80028a8 <HAL_DMA_IRQHandler+0x200>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00a      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x150>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a31      	ldr	r2, [pc, #196]	@ (80028ac <HAL_DMA_IRQHandler+0x204>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d102      	bne.n	80027f2 <HAL_DMA_IRQHandler+0x14a>
 80027ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027f0:	e00e      	b.n	8002810 <HAL_DMA_IRQHandler+0x168>
 80027f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f6:	e00b      	b.n	8002810 <HAL_DMA_IRQHandler+0x168>
 80027f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fc:	e008      	b.n	8002810 <HAL_DMA_IRQHandler+0x168>
 80027fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002802:	e005      	b.n	8002810 <HAL_DMA_IRQHandler+0x168>
 8002804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002808:	e002      	b.n	8002810 <HAL_DMA_IRQHandler+0x168>
 800280a:	2320      	movs	r3, #32
 800280c:	e000      	b.n	8002810 <HAL_DMA_IRQHandler+0x168>
 800280e:	2302      	movs	r3, #2
 8002810:	4a27      	ldr	r2, [pc, #156]	@ (80028b0 <HAL_DMA_IRQHandler+0x208>)
 8002812:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d034      	beq.n	800288e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800282c:	e02f      	b.n	800288e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	2208      	movs	r2, #8
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_DMA_IRQHandler+0x1e8>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d023      	beq.n	8002890 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 020e 	bic.w	r2, r2, #14
 8002856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
    }
  }
  return;
 800288e:	bf00      	nop
 8002890:	bf00      	nop
}
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40020008 	.word	0x40020008
 800289c:	4002001c 	.word	0x4002001c
 80028a0:	40020030 	.word	0x40020030
 80028a4:	40020044 	.word	0x40020044
 80028a8:	40020058 	.word	0x40020058
 80028ac:	4002006c 	.word	0x4002006c
 80028b0:	40020000 	.word	0x40020000

080028b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028c2:	b2db      	uxtb	r3, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d108      	bne.n	800290e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800290c:	e007      	b.n	800291e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	60da      	str	r2, [r3, #12]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002932:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_FLASH_IRQHandler+0x22>
 800293e:	4b68      	ldr	r3, [pc, #416]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800294a:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002950:	4b64      	ldr	r3, [pc, #400]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002958:	f000 f8f4 	bl	8002b44 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8cc 	bl	8002afa <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002962:	4b60      	ldr	r3, [pc, #384]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002968:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a0 	beq.w	8002ab6 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002976:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002978:	2220      	movs	r2, #32
 800297a:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800297c:	4b59      	ldr	r3, [pc, #356]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8097 	beq.w	8002ab6 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002988:	4b56      	ldr	r3, [pc, #344]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d12d      	bne.n	80029ee <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002992:	4b54      	ldr	r3, [pc, #336]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	4a52      	ldr	r2, [pc, #328]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 800299a:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 800299c:	4b51      	ldr	r3, [pc, #324]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80029a4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f89c 	bl	8002ae8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80029b0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029b8:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80029ba:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80029c0:	4b47      	ldr	r3, [pc, #284]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a46      	ldr	r2, [pc, #280]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 80029c6:	f023 0302 	bic.w	r3, r3, #2
 80029ca:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f909 	bl	8002be4 <FLASH_PageErase>
 80029d2:	e070      	b.n	8002ab6 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	4a42      	ldr	r2, [pc, #264]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80029e0:	4b40      	ldr	r3, [pc, #256]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f87e 	bl	8002ae8 <HAL_FLASH_EndOfOperationCallback>
 80029ec:	e063      	b.n	8002ab6 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d10c      	bne.n	8002a12 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80029f8:	4b39      	ldr	r3, [pc, #228]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4a38      	ldr	r2, [pc, #224]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 80029fe:	f023 0304 	bic.w	r3, r3, #4
 8002a02:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f000 f86f 	bl	8002ae8 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002a0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e051      	b.n	8002ab6 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002a12:	4b34      	ldr	r3, [pc, #208]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a1a:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002a1c:	4b31      	ldr	r3, [pc, #196]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d024      	beq.n	8002a6e <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002a24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	3302      	adds	r3, #2
 8002a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a2c:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002a34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a36:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	0c02      	lsrs	r2, r0, #16
 8002a44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a48:	0c0b      	lsrs	r3, r1, #16
 8002a4a:	4926      	ldr	r1, [pc, #152]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002a50:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4a22      	ldr	r2, [pc, #136]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002a5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a62:	b293      	uxth	r3, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f850 	bl	8002b0c <FLASH_Program_HalfWord>
 8002a6c:	e023      	b.n	8002ab6 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d105      	bne.n	8002a84 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f833 	bl	8002ae8 <HAL_FLASH_EndOfOperationCallback>
 8002a82:	e011      	b.n	8002aa8 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002a84:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d106      	bne.n	8002a9c <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	3b02      	subs	r3, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f827 	bl	8002ae8 <HAL_FLASH_EndOfOperationCallback>
 8002a9a:	e005      	b.n	8002aa8 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	3b06      	subs	r3, #6
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f820 	bl	8002ae8 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002aae:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002ac0:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4a03      	ldr	r2, [pc, #12]	@ (8002ae0 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ad2:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002ad6:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	200007f8 	.word	0x200007f8

08002ae8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <FLASH_Program_HalfWord+0x30>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <FLASH_Program_HalfWord+0x34>)
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <FLASH_Program_HalfWord+0x34>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	801a      	strh	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	200007f8 	.word	0x200007f8
 8002b40:	40022000 	.word	0x40022000

08002b44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002b4e:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b5a:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <FLASH_SetErrorCode+0x9c>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	4a1f      	ldr	r2, [pc, #124]	@ (8002be0 <FLASH_SetErrorCode+0x9c>)
 8002b64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <FLASH_SetErrorCode+0x9c>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <FLASH_SetErrorCode+0x9c>)
 8002b84:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <FLASH_SetErrorCode+0x9c>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8002be0 <FLASH_SetErrorCode+0x9c>)
 8002ba4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f240 1201 	movw	r2, #257	@ 0x101
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d106      	bne.n	8002bca <FLASH_SetErrorCode+0x86>
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4a06      	ldr	r2, [pc, #24]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	61d3      	str	r3, [r2, #28]
}  
 8002bc8:	e002      	b.n	8002bd0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <FLASH_SetErrorCode+0x98>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60d3      	str	r3, [r2, #12]
}  
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	200007f8 	.word	0x200007f8

08002be4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <FLASH_PageErase+0x38>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <FLASH_PageErase+0x3c>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <FLASH_PageErase+0x3c>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002bfe:	4a08      	ldr	r2, [pc, #32]	@ (8002c20 <FLASH_PageErase+0x3c>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <FLASH_PageErase+0x3c>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <FLASH_PageErase+0x3c>)
 8002c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	200007f8 	.word	0x200007f8
 8002c20:	40022000 	.word	0x40022000

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b08b      	sub	sp, #44	@ 0x2c
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c36:	e169      	b.n	8002f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8158 	bne.w	8002f06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a9a      	ldr	r2, [pc, #616]	@ (8002ec4 <HAL_GPIO_Init+0x2a0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d05e      	beq.n	8002d1e <HAL_GPIO_Init+0xfa>
 8002c60:	4a98      	ldr	r2, [pc, #608]	@ (8002ec4 <HAL_GPIO_Init+0x2a0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d875      	bhi.n	8002d52 <HAL_GPIO_Init+0x12e>
 8002c66:	4a98      	ldr	r2, [pc, #608]	@ (8002ec8 <HAL_GPIO_Init+0x2a4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d058      	beq.n	8002d1e <HAL_GPIO_Init+0xfa>
 8002c6c:	4a96      	ldr	r2, [pc, #600]	@ (8002ec8 <HAL_GPIO_Init+0x2a4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d86f      	bhi.n	8002d52 <HAL_GPIO_Init+0x12e>
 8002c72:	4a96      	ldr	r2, [pc, #600]	@ (8002ecc <HAL_GPIO_Init+0x2a8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d052      	beq.n	8002d1e <HAL_GPIO_Init+0xfa>
 8002c78:	4a94      	ldr	r2, [pc, #592]	@ (8002ecc <HAL_GPIO_Init+0x2a8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d869      	bhi.n	8002d52 <HAL_GPIO_Init+0x12e>
 8002c7e:	4a94      	ldr	r2, [pc, #592]	@ (8002ed0 <HAL_GPIO_Init+0x2ac>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d04c      	beq.n	8002d1e <HAL_GPIO_Init+0xfa>
 8002c84:	4a92      	ldr	r2, [pc, #584]	@ (8002ed0 <HAL_GPIO_Init+0x2ac>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d863      	bhi.n	8002d52 <HAL_GPIO_Init+0x12e>
 8002c8a:	4a92      	ldr	r2, [pc, #584]	@ (8002ed4 <HAL_GPIO_Init+0x2b0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d046      	beq.n	8002d1e <HAL_GPIO_Init+0xfa>
 8002c90:	4a90      	ldr	r2, [pc, #576]	@ (8002ed4 <HAL_GPIO_Init+0x2b0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d85d      	bhi.n	8002d52 <HAL_GPIO_Init+0x12e>
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d82a      	bhi.n	8002cf0 <HAL_GPIO_Init+0xcc>
 8002c9a:	2b12      	cmp	r3, #18
 8002c9c:	d859      	bhi.n	8002d52 <HAL_GPIO_Init+0x12e>
 8002c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <HAL_GPIO_Init+0x80>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002d1f 	.word	0x08002d1f
 8002ca8:	08002cf9 	.word	0x08002cf9
 8002cac:	08002d0b 	.word	0x08002d0b
 8002cb0:	08002d4d 	.word	0x08002d4d
 8002cb4:	08002d53 	.word	0x08002d53
 8002cb8:	08002d53 	.word	0x08002d53
 8002cbc:	08002d53 	.word	0x08002d53
 8002cc0:	08002d53 	.word	0x08002d53
 8002cc4:	08002d53 	.word	0x08002d53
 8002cc8:	08002d53 	.word	0x08002d53
 8002ccc:	08002d53 	.word	0x08002d53
 8002cd0:	08002d53 	.word	0x08002d53
 8002cd4:	08002d53 	.word	0x08002d53
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d53 	.word	0x08002d53
 8002ce0:	08002d53 	.word	0x08002d53
 8002ce4:	08002d53 	.word	0x08002d53
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002d15 	.word	0x08002d15
 8002cf0:	4a79      	ldr	r2, [pc, #484]	@ (8002ed8 <HAL_GPIO_Init+0x2b4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cf6:	e02c      	b.n	8002d52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	623b      	str	r3, [r7, #32]
          break;
 8002cfe:	e029      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	3304      	adds	r3, #4
 8002d06:	623b      	str	r3, [r7, #32]
          break;
 8002d08:	e024      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	623b      	str	r3, [r7, #32]
          break;
 8002d12:	e01f      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	623b      	str	r3, [r7, #32]
          break;
 8002d1c:	e01a      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d26:	2304      	movs	r3, #4
 8002d28:	623b      	str	r3, [r7, #32]
          break;
 8002d2a:	e013      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d34:	2308      	movs	r3, #8
 8002d36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	611a      	str	r2, [r3, #16]
          break;
 8002d3e:	e009      	b.n	8002d54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d40:	2308      	movs	r3, #8
 8002d42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	615a      	str	r2, [r3, #20]
          break;
 8002d4a:	e003      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x130>
          break;
 8002d52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2bff      	cmp	r3, #255	@ 0xff
 8002d58:	d801      	bhi.n	8002d5e <HAL_GPIO_Init+0x13a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_Init+0x13e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2bff      	cmp	r3, #255	@ 0xff
 8002d68:	d802      	bhi.n	8002d70 <HAL_GPIO_Init+0x14c>
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x152>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	3b08      	subs	r3, #8
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	210f      	movs	r1, #15
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80b1 	beq.w	8002f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002da4:	4b4d      	ldr	r3, [pc, #308]	@ (8002edc <HAL_GPIO_Init+0x2b8>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4a4c      	ldr	r2, [pc, #304]	@ (8002edc <HAL_GPIO_Init+0x2b8>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6193      	str	r3, [r2, #24]
 8002db0:	4b4a      	ldr	r3, [pc, #296]	@ (8002edc <HAL_GPIO_Init+0x2b8>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dbc:	4a48      	ldr	r2, [pc, #288]	@ (8002ee0 <HAL_GPIO_Init+0x2bc>)
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a40      	ldr	r2, [pc, #256]	@ (8002ee4 <HAL_GPIO_Init+0x2c0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_GPIO_Init+0x1ec>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee8 <HAL_GPIO_Init+0x2c4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00d      	beq.n	8002e0c <HAL_GPIO_Init+0x1e8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3e      	ldr	r2, [pc, #248]	@ (8002eec <HAL_GPIO_Init+0x2c8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x1e4>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef0 <HAL_GPIO_Init+0x2cc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_GPIO_Init+0x1e0>
 8002e00:	2303      	movs	r3, #3
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e04:	2304      	movs	r3, #4
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x1ee>
 8002e10:	2300      	movs	r3, #0
 8002e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e22:	492f      	ldr	r1, [pc, #188]	@ (8002ee0 <HAL_GPIO_Init+0x2bc>)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	492c      	ldr	r1, [pc, #176]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	4928      	ldr	r1, [pc, #160]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e64:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4922      	ldr	r1, [pc, #136]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60cb      	str	r3, [r1, #12]
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e72:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	491e      	ldr	r1, [pc, #120]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4918      	ldr	r1, [pc, #96]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	4914      	ldr	r1, [pc, #80]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d021      	beq.n	8002ef8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e021      	b.n	8002f06 <HAL_GPIO_Init+0x2e2>
 8002ec2:	bf00      	nop
 8002ec4:	10320000 	.word	0x10320000
 8002ec8:	10310000 	.word	0x10310000
 8002ecc:	10220000 	.word	0x10220000
 8002ed0:	10210000 	.word	0x10210000
 8002ed4:	10120000 	.word	0x10120000
 8002ed8:	10110000 	.word	0x10110000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40010800 	.word	0x40010800
 8002ee8:	40010c00 	.word	0x40010c00
 8002eec:	40011000 	.word	0x40011000
 8002ef0:	40011400 	.word	0x40011400
 8002ef4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	4909      	ldr	r1, [pc, #36]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	3301      	adds	r3, #1
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f47f ae8e 	bne.w	8002c38 <HAL_GPIO_Init+0x14>
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	372c      	adds	r7, #44	@ 0x2c
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	43d9      	mvns	r1, r3
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	611a      	str	r2, [r3, #16]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fdf2 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	@ 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f002 fd58 	bl	8005aa8 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	@ (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	@ (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	@ (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	@ (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	2b80      	cmp	r3, #128	@ 0x80
 800322c:	d103      	bne.n	8003236 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
 8003250:	4613      	mov	r3, r2
 8003252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7fe ffba 	bl	80021cc <HAL_GetTick>
 8003258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80e0 	bne.w	8003428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	4970      	ldr	r1, [pc, #448]	@ (8003434 <HAL_I2C_Master_Transmit+0x1f4>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f001 fe12 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	e0d3      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_I2C_Master_Transmit+0x50>
 800328c:	2302      	movs	r3, #2
 800328e:	e0cc      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d007      	beq.n	80032b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	@ 0x21
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2210      	movs	r2, #16
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_I2C_Master_Transmit+0x1f8>)
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f8:	8979      	ldrh	r1, [r7, #10]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f001 fca2 	bl	8004c48 <I2C_MasterRequestWrite>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e08d      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003324:	e066      	b.n	80033f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f001 fed0 	bl	80050d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06b      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11b      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x188>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d017      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6a39      	ldr	r1, [r7, #32]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f001 fec7 	bl	8005160 <I2C_WaitOnBTFFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d107      	bne.n	80033f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01a      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d194      	bne.n	8003326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	00100002 	.word	0x00100002
 8003438:	ffff0000 	.word	0xffff0000

0800343c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800345c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003464:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b10      	cmp	r3, #16
 800346a:	d003      	beq.n	8003474 <HAL_I2C_EV_IRQHandler+0x38>
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	f040 80c1 	bne.w	80035f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_I2C_EV_IRQHandler+0x6e>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003494:	d003      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x62>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_EV_IRQHandler+0x66>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_I2C_EV_IRQHandler+0x68>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f000 8132 	beq.w	800370e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00c      	beq.n	80034ce <HAL_I2C_EV_IRQHandler+0x92>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	0a5b      	lsrs	r3, r3, #9
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f001 fef5 	bl	80052b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fd99 	bl	8003ffe <I2C_Master_SB>
 80034cc:	e092      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08db      	lsrs	r3, r3, #3
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0xb2>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	0a5b      	lsrs	r3, r3, #9
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fe0e 	bl	8004108 <I2C_Master_ADD10>
 80034ec:	e082      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0xd2>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fe27 	bl	800415a <I2C_Master_ADDR>
 800350c:	e072      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03b      	beq.n	8003592 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003528:	f000 80f3 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	09db      	lsrs	r3, r3, #7
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x11c>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x11c>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f9f1 	bl	8003938 <I2C_MasterTransmit_TXE>
 8003556:	e04d      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80d6 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	0a5b      	lsrs	r3, r3, #9
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80cf 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b21      	cmp	r3, #33	@ 0x21
 8003578:	d103      	bne.n	8003582 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa78 	bl	8003a70 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003580:	e0c7      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b40      	cmp	r3, #64	@ 0x40
 8003586:	f040 80c4 	bne.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fae6 	bl	8003b5c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003590:	e0bf      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a0:	f000 80b7 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00f      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x194>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	0a9b      	lsrs	r3, r3, #10
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x194>
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fb5f 	bl	8003c8c <I2C_MasterReceive_RXNE>
 80035ce:	e011      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 809a 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	0a5b      	lsrs	r3, r3, #9
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8093 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc15 	bl	8003e1c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f2:	e08e      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035f4:	e08d      	b.n	8003712 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e007      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x20e>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	0a5b      	lsrs	r3, r3, #9
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00c      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 ffe0 	bl	8004608 <I2C_Slave_ADDR>
 8003648:	e066      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x22e>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	0a5b      	lsrs	r3, r3, #9
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f001 f81a 	bl	800469c <I2C_Slave_STOPF>
 8003668:	e056      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800366a:	7bbb      	ldrb	r3, [r7, #14]
 800366c:	2b21      	cmp	r3, #33	@ 0x21
 800366e:	d002      	beq.n	8003676 <HAL_I2C_EV_IRQHandler+0x23a>
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	2b29      	cmp	r3, #41	@ 0x29
 8003674:	d125      	bne.n	80036c2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	09db      	lsrs	r3, r3, #7
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00f      	beq.n	80036a2 <HAL_I2C_EV_IRQHandler+0x266>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	0a9b      	lsrs	r3, r3, #10
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_I2C_EV_IRQHandler+0x266>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fef8 	bl	8004490 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036a0:	e039      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d033      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	0a5b      	lsrs	r3, r3, #9
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d02d      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 ff25 	bl	800450a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c0:	e029      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00f      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	0a9b      	lsrs	r3, r3, #10
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 ff2f 	bl	800454a <I2C_SlaveReceive_RXNE>
 80036ec:	e014      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	0a5b      	lsrs	r3, r3, #9
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff5d 	bl	80045c6 <I2C_SlaveReceive_BTF>
 800370c:	e004      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003716:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b08a      	sub	sp, #40	@ 0x28
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003740:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_I2C_ER_IRQHandler+0x5e>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d010      	beq.n	800377c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800376a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	0a5b      	lsrs	r3, r3, #9
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <HAL_I2C_ER_IRQHandler+0x88>
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80037a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	0a9b      	lsrs	r3, r3, #10
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d03f      	beq.n	8003832 <HAL_I2C_ER_IRQHandler+0x114>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d039      	beq.n	8003832 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80037be:	7efb      	ldrb	r3, [r7, #27]
 80037c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037d8:	7ebb      	ldrb	r3, [r7, #26]
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d112      	bne.n	8003804 <HAL_I2C_ER_IRQHandler+0xe6>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10f      	bne.n	8003804 <HAL_I2C_ER_IRQHandler+0xe6>
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	2b21      	cmp	r3, #33	@ 0x21
 80037e8:	d008      	beq.n	80037fc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b29      	cmp	r3, #41	@ 0x29
 80037ee:	d005      	beq.n	80037fc <HAL_I2C_ER_IRQHandler+0xde>
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b28      	cmp	r3, #40	@ 0x28
 80037f4:	d106      	bne.n	8003804 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b21      	cmp	r3, #33	@ 0x21
 80037fa:	d103      	bne.n	8003804 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f001 f87d 	bl	80048fc <I2C_Slave_AF>
 8003802:	e016      	b.n	8003832 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800380c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003816:	7efb      	ldrb	r3, [r7, #27]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d002      	beq.n	8003822 <HAL_I2C_ER_IRQHandler+0x104>
 800381c:	7efb      	ldrb	r3, [r7, #27]
 800381e:	2b40      	cmp	r3, #64	@ 0x40
 8003820:	d107      	bne.n	8003832 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003830:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	0adb      	lsrs	r3, r3, #11
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <HAL_I2C_ER_IRQHandler+0x13e>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800385a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 f8b8 	bl	80049e4 <I2C_ITError>
  }
}
 8003874:	bf00      	nop
 8003876:	3728      	adds	r7, #40	@ 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
 80038d0:	4613      	mov	r3, r2
 80038d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003946:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800394e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d150      	bne.n	8003a00 <I2C_MasterTransmit_TXE+0xc8>
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b21      	cmp	r3, #33	@ 0x21
 8003962:	d14d      	bne.n	8003a00 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b08      	cmp	r3, #8
 8003968:	d01d      	beq.n	80039a6 <I2C_MasterTransmit_TXE+0x6e>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b20      	cmp	r3, #32
 800396e:	d01a      	beq.n	80039a6 <I2C_MasterTransmit_TXE+0x6e>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003976:	d016      	beq.n	80039a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003986:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2211      	movs	r2, #17
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ff6c 	bl	800387c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039a4:	e060      	b.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b40      	cmp	r3, #64	@ 0x40
 80039de:	d107      	bne.n	80039f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff81 	bl	80038f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ee:	e03b      	b.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff3f 	bl	800387c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039fe:	e033      	b.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b21      	cmp	r3, #33	@ 0x21
 8003a04:	d005      	beq.n	8003a12 <I2C_MasterTransmit_TXE+0xda>
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	2b40      	cmp	r3, #64	@ 0x40
 8003a0a:	d12d      	bne.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b22      	cmp	r3, #34	@ 0x22
 8003a10:	d12a      	bne.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d108      	bne.n	8003a2e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a2c:	e01c      	b.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d103      	bne.n	8003a42 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f88e 	bl	8003b5c <I2C_MemoryTransmit_TXE_BTF>
}
 8003a40:	e012      	b.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	781a      	ldrb	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a66:	e7ff      	b.n	8003a68 <I2C_MasterTransmit_TXE+0x130>
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b21      	cmp	r3, #33	@ 0x21
 8003a88:	d164      	bne.n	8003b54 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ab8:	e04c      	b.n	8003b54 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d01d      	beq.n	8003afc <I2C_MasterTransmit_BTF+0x8c>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d01a      	beq.n	8003afc <I2C_MasterTransmit_BTF+0x8c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003acc:	d016      	beq.n	8003afc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003adc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2211      	movs	r2, #17
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fec1 	bl	800387c <HAL_I2C_MasterTxCpltCallback>
}
 8003afa:	e02b      	b.n	8003b54 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b0a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d107      	bne.n	8003b46 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fed6 	bl	80038f0 <HAL_I2C_MemTxCpltCallback>
}
 8003b44:	e006      	b.n	8003b54 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fe94 	bl	800387c <HAL_I2C_MasterTxCpltCallback>
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11d      	bne.n	8003bb0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10b      	bne.n	8003b94 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b92:	e077      	b.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	121b      	asrs	r3, r3, #8
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bae:	e069      	b.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10b      	bne.n	8003bd0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bce:	e059      	b.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d152      	bne.n	8003c7e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b22      	cmp	r3, #34	@ 0x22
 8003bdc:	d10d      	bne.n	8003bfa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bf8:	e044      	b.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b21      	cmp	r3, #33	@ 0x21
 8003c08:	d112      	bne.n	8003c30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c2e:	e029      	b.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d124      	bne.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b21      	cmp	r3, #33	@ 0x21
 8003c3e:	d121      	bne.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c4e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff fe3a 	bl	80038f0 <HAL_I2C_MemTxCpltCallback>
}
 8003c7c:	e002      	b.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff faca 	bl	8003218 <I2C_Flush_DR>
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	@ 0x22
 8003c9e:	f040 80b9 	bne.w	8003e14 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d921      	bls.n	8003cfa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	f040 8096 	bne.w	8003e14 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cf8:	e08c      	b.n	8003e14 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d07f      	beq.n	8003e02 <I2C_MasterReceive_RXNE+0x176>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d002      	beq.n	8003d0e <I2C_MasterReceive_RXNE+0x82>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d179      	bne.n	8003e02 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f001 fa6e 	bl	80051f0 <I2C_WaitOnSTOPRequestThroughIT>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d14c      	bne.n	8003db4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d28:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	d10a      	bne.n	8003d8a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fdbd 	bl	8003902 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d88:	e044      	b.n	8003e14 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d002      	beq.n	8003d9e <I2C_MasterReceive_RXNE+0x112>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d103      	bne.n	8003da6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003da4:	e002      	b.n	8003dac <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2212      	movs	r2, #18
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fd6e 	bl	800388e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003db2:	e02f      	b.n	8003e14 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fd8a 	bl	8003914 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e00:	e008      	b.n	8003e14 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e10:	605a      	str	r2, [r3, #4]
}
 8003e12:	e7ff      	b.n	8003e14 <I2C_MasterReceive_RXNE+0x188>
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d11b      	bne.n	8003e6c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e42:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e6a:	e0c4      	b.n	8003ff6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d129      	bne.n	8003eca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e84:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00a      	beq.n	8003ea2 <I2C_MasterReceive_BTF+0x86>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d007      	beq.n	8003ea2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ec8:	e095      	b.n	8003ff6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d17d      	bne.n	8003fd0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d002      	beq.n	8003ee0 <I2C_MasterReceive_BTF+0xc4>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d108      	bne.n	8003ef2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e016      	b.n	8003f20 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d002      	beq.n	8003efe <I2C_MasterReceive_BTF+0xe2>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d108      	bne.n	8003f10 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e007      	b.n	8003f20 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d10a      	bne.n	8003fa6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fcaf 	bl	8003902 <HAL_I2C_MemRxCpltCallback>
}
 8003fa4:	e027      	b.n	8003ff6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d002      	beq.n	8003fba <I2C_MasterReceive_BTF+0x19e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d103      	bne.n	8003fc2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fc0:	e002      	b.n	8003fc8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2212      	movs	r2, #18
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fc60 	bl	800388e <HAL_I2C_MasterRxCpltCallback>
}
 8003fce:	e012      	b.n	8003ff6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b40      	cmp	r3, #64	@ 0x40
 8004010:	d117      	bne.n	8004042 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800402a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800402c:	e067      	b.n	80040fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]
}
 8004040:	e05d      	b.n	80040fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800404a:	d133      	bne.n	80040b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b21      	cmp	r3, #33	@ 0x21
 8004056:	d109      	bne.n	800406c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004068:	611a      	str	r2, [r3, #16]
 800406a:	e008      	b.n	800407e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	b2da      	uxtb	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <I2C_Master_SB+0x92>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d032      	beq.n	80040fe <I2C_Master_SB+0x100>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02d      	beq.n	80040fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b0:	605a      	str	r2, [r3, #4]
}
 80040b2:	e024      	b.n	80040fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10e      	bne.n	80040da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	11db      	asrs	r3, r3, #7
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0306 	and.w	r3, r3, #6
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f063 030f 	orn	r3, r3, #15
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]
}
 80040d8:	e011      	b.n	80040fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10d      	bne.n	80040fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	11db      	asrs	r3, r3, #7
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f003 0306 	and.w	r3, r3, #6
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f063 030e 	orn	r3, r3, #14
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004114:	b2da      	uxtb	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <I2C_Master_ADD10+0x26>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d108      	bne.n	8004140 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <I2C_Master_ADD10+0x48>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800414e:	605a      	str	r2, [r3, #4]
  }
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800415a:	b480      	push	{r7}
 800415c:	b091      	sub	sp, #68	@ 0x44
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004168:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b22      	cmp	r3, #34	@ 0x22
 8004182:	f040 8174 	bne.w	800446e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <I2C_Master_ADDR+0x54>
 800418e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d10b      	bne.n	80041ae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004196:	2300      	movs	r3, #0
 8004198:	633b      	str	r3, [r7, #48]	@ 0x30
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	e16b      	b.n	8004486 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11d      	bne.n	80041f2 <I2C_Master_ADDR+0x98>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041be:	d118      	bne.n	80041f2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80041f0:	e149      	b.n	8004486 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d113      	bne.n	8004224 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fc:	2300      	movs	r3, #0
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004210:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e120      	b.n	8004466 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	f040 808a 	bne.w	8004344 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004236:	d137      	bne.n	80042a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004246:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004256:	d113      	bne.n	8004280 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004266:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	e0f2      	b.n	8004466 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004280:	2300      	movs	r3, #0
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	623b      	str	r3, [r7, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e0de      	b.n	8004466 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d02e      	beq.n	800430c <I2C_Master_ADDR+0x1b2>
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d02b      	beq.n	800430c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	2b12      	cmp	r3, #18
 80042b8:	d102      	bne.n	80042c0 <I2C_Master_ADDR+0x166>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d125      	bne.n	800430c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d00e      	beq.n	80042e4 <I2C_Master_ADDR+0x18a>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d00b      	beq.n	80042e4 <I2C_Master_ADDR+0x18a>
 80042cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d008      	beq.n	80042e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e007      	b.n	80042f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	e0ac      	b.n	8004466 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e090      	b.n	8004466 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d158      	bne.n	8004400 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	2b04      	cmp	r3, #4
 8004352:	d021      	beq.n	8004398 <I2C_Master_ADDR+0x23e>
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	2b02      	cmp	r3, #2
 8004358:	d01e      	beq.n	8004398 <I2C_Master_ADDR+0x23e>
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	2b10      	cmp	r3, #16
 800435e:	d01b      	beq.n	8004398 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800436e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e012      	b.n	80043be <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043cc:	d14b      	bne.n	8004466 <I2C_Master_ADDR+0x30c>
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043d4:	d00b      	beq.n	80043ee <I2C_Master_ADDR+0x294>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d008      	beq.n	80043ee <I2C_Master_ADDR+0x294>
 80043dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d005      	beq.n	80043ee <I2C_Master_ADDR+0x294>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d002      	beq.n	80043ee <I2C_Master_ADDR+0x294>
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d13b      	bne.n	8004466 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e032      	b.n	8004466 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800440e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800441e:	d117      	bne.n	8004450 <I2C_Master_ADDR+0x2f6>
 8004420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004422:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004426:	d00b      	beq.n	8004440 <I2C_Master_ADDR+0x2e6>
 8004428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442a:	2b01      	cmp	r3, #1
 800442c:	d008      	beq.n	8004440 <I2C_Master_ADDR+0x2e6>
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004430:	2b08      	cmp	r3, #8
 8004432:	d005      	beq.n	8004440 <I2C_Master_ADDR+0x2e6>
 8004434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004436:	2b10      	cmp	r3, #16
 8004438:	d002      	beq.n	8004440 <I2C_Master_ADDR+0x2e6>
 800443a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443c:	2b20      	cmp	r3, #32
 800443e:	d107      	bne.n	8004450 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800444e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800446c:	e00b      	b.n	8004486 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	68bb      	ldr	r3, [r7, #8]
}
 8004484:	e7ff      	b.n	8004486 <I2C_Master_ADDR+0x32c>
 8004486:	bf00      	nop
 8004488:	3744      	adds	r7, #68	@ 0x44
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02b      	beq.n	8004502 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d114      	bne.n	8004502 <I2C_SlaveTransmit_TXE+0x72>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b29      	cmp	r3, #41	@ 0x29
 80044dc:	d111      	bne.n	8004502 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2221      	movs	r2, #33	@ 0x21
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2228      	movs	r2, #40	@ 0x28
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff f9cf 	bl	80038a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d011      	beq.n	8004540 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004558:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02c      	beq.n	80045be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d114      	bne.n	80045be <I2C_SlaveReceive_RXNE+0x74>
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b2a      	cmp	r3, #42	@ 0x2a
 8004598:	d111      	bne.n	80045be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2222      	movs	r2, #34	@ 0x22
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2228      	movs	r2, #40	@ 0x28
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff f97a 	bl	80038b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d012      	beq.n	80045fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004622:	2b28      	cmp	r3, #40	@ 0x28
 8004624:	d127      	bne.n	8004676 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004634:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	09db      	lsrs	r3, r3, #7
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	81bb      	strh	r3, [r7, #12]
 8004658:	e002      	b.n	8004660 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004668:	89ba      	ldrh	r2, [r7, #12]
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff f928 	bl	80038c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004674:	e00e      	b.n	8004694 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f8:	d172      	bne.n	80047e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b22      	cmp	r3, #34	@ 0x22
 80046fe:	d002      	beq.n	8004706 <I2C_Slave_STOPF+0x6a>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b2a      	cmp	r3, #42	@ 0x2a
 8004704:	d135      	bne.n	8004772 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe f8b8 	bl	80028b4 <HAL_DMA_GetState>
 8004744:	4603      	mov	r3, r0
 8004746:	2b01      	cmp	r3, #1
 8004748:	d049      	beq.n	80047de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	4a69      	ldr	r2, [pc, #420]	@ (80048f4 <I2C_Slave_STOPF+0x258>)
 8004750:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd ff2e 	bl	80025b8 <HAL_DMA_Abort_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03d      	beq.n	80047de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004770:	e035      	b.n	80047de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f043 0204 	orr.w	r2, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe f882 	bl	80028b4 <HAL_DMA_GetState>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d014      	beq.n	80047e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ba:	4a4e      	ldr	r2, [pc, #312]	@ (80048f4 <I2C_Slave_STOPF+0x258>)
 80047bc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd fef8 	bl	80025b8 <HAL_DMA_Abort_IT>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047d8:	4610      	mov	r0, r2
 80047da:	4798      	blx	r3
 80047dc:	e000      	b.n	80047e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d03e      	beq.n	8004868 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d112      	bne.n	800481e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691a      	ldr	r2, [r3, #16]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	d112      	bne.n	8004852 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	f043 0204 	orr.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8b7 	bl	80049e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004876:	e039      	b.n	80048ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b2a      	cmp	r3, #42	@ 0x2a
 800487c:	d109      	bne.n	8004892 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2228      	movs	r2, #40	@ 0x28
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff f810 	bl	80038b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b28      	cmp	r3, #40	@ 0x28
 800489c:	d111      	bne.n	80048c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a15      	ldr	r2, [pc, #84]	@ (80048f8 <I2C_Slave_STOPF+0x25c>)
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff f80f 	bl	80038de <HAL_I2C_ListenCpltCallback>
}
 80048c0:	e014      	b.n	80048ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	2b22      	cmp	r3, #34	@ 0x22
 80048c8:	d002      	beq.n	80048d0 <I2C_Slave_STOPF+0x234>
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b22      	cmp	r3, #34	@ 0x22
 80048ce:	d10d      	bne.n	80048ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fe ffe3 	bl	80038b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	08004d4d 	.word	0x08004d4d
 80048f8:	ffff0000 	.word	0xffff0000

080048fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d002      	beq.n	800491e <I2C_Slave_AF+0x22>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b20      	cmp	r3, #32
 800491c:	d129      	bne.n	8004972 <I2C_Slave_AF+0x76>
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b28      	cmp	r3, #40	@ 0x28
 8004922:	d126      	bne.n	8004972 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2e      	ldr	r2, [pc, #184]	@ (80049e0 <I2C_Slave_AF+0xe4>)
 8004928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004938:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004942:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fe ffb7 	bl	80038de <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004970:	e031      	b.n	80049d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b21      	cmp	r3, #33	@ 0x21
 8004976:	d129      	bne.n	80049cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a19      	ldr	r2, [pc, #100]	@ (80049e0 <I2C_Slave_AF+0xe4>)
 800497c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2221      	movs	r2, #33	@ 0x21
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fe fc2a 	bl	8003218 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fe ff6b 	bl	80038a0 <HAL_I2C_SlaveTxCpltCallback>
}
 80049ca:	e004      	b.n	80049d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d4:	615a      	str	r2, [r3, #20]
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d002      	beq.n	8004a08 <I2C_ITError+0x24>
 8004a02:	7bbb      	ldrb	r3, [r7, #14]
 8004a04:	2b40      	cmp	r3, #64	@ 0x40
 8004a06:	d10a      	bne.n	8004a1e <I2C_ITError+0x3a>
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b22      	cmp	r3, #34	@ 0x22
 8004a0c:	d107      	bne.n	8004a1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a24:	2b28      	cmp	r3, #40	@ 0x28
 8004a26:	d107      	bne.n	8004a38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2228      	movs	r2, #40	@ 0x28
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a36:	e015      	b.n	8004a64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a46:	d00a      	beq.n	8004a5e <I2C_ITError+0x7a>
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b60      	cmp	r3, #96	@ 0x60
 8004a4c:	d007      	beq.n	8004a5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a72:	d162      	bne.n	8004b3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d020      	beq.n	8004ad4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	4a6a      	ldr	r2, [pc, #424]	@ (8004c40 <I2C_ITError+0x25c>)
 8004a98:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd fd8a 	bl	80025b8 <HAL_DMA_Abort_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8089 	beq.w	8004bbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4798      	blx	r3
 8004ad2:	e074      	b.n	8004bbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	4a59      	ldr	r2, [pc, #356]	@ (8004c40 <I2C_ITError+0x25c>)
 8004ada:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fd fd69 	bl	80025b8 <HAL_DMA_Abort_IT>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d068      	beq.n	8004bbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	2b40      	cmp	r3, #64	@ 0x40
 8004af8:	d10b      	bne.n	8004b12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
 8004b38:	e041      	b.n	8004bbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b60      	cmp	r3, #96	@ 0x60
 8004b44:	d125      	bne.n	8004b92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5e:	2b40      	cmp	r3, #64	@ 0x40
 8004b60:	d10b      	bne.n	8004b7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fe fecb 	bl	8003926 <HAL_I2C_AbortCpltCallback>
 8004b90:	e015      	b.n	8004bbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	d10b      	bne.n	8004bb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fe feab 	bl	8003914 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10e      	bne.n	8004bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d113      	bne.n	8004c38 <I2C_ITError+0x254>
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b28      	cmp	r3, #40	@ 0x28
 8004c14:	d110      	bne.n	8004c38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a0a      	ldr	r2, [pc, #40]	@ (8004c44 <I2C_ITError+0x260>)
 8004c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fe fe53 	bl	80038de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	08004d4d 	.word	0x08004d4d
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d006      	beq.n	8004c72 <I2C_MasterRequestWrite+0x2a>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d003      	beq.n	8004c72 <I2C_MasterRequestWrite+0x2a>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c70:	d108      	bne.n	8004c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e00b      	b.n	8004c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c88:	2b12      	cmp	r3, #18
 8004c8a:	d107      	bne.n	8004c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f8f7 	bl	8004e9c <I2C_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc2:	d103      	bne.n	8004ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e035      	b.n	8004d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd8:	d108      	bne.n	8004cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ce8:	611a      	str	r2, [r3, #16]
 8004cea:	e01b      	b.n	8004d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cec:	897b      	ldrh	r3, [r7, #10]
 8004cee:	11db      	asrs	r3, r3, #7
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f063 030f 	orn	r3, r3, #15
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	490e      	ldr	r1, [pc, #56]	@ (8004d44 <I2C_MasterRequestWrite+0xfc>)
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f940 	bl	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e010      	b.n	8004d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d1a:	897b      	ldrh	r3, [r7, #10]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4907      	ldr	r1, [pc, #28]	@ (8004d48 <I2C_MasterRequestWrite+0x100>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f930 	bl	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00010008 	.word	0x00010008
 8004d48:	00010002 	.word	0x00010002

08004d4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d66:	4b4b      	ldr	r3, [pc, #300]	@ (8004e94 <I2C_DMAAbort+0x148>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	08db      	lsrs	r3, r3, #3
 8004d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e98 <I2C_DMAAbort+0x14c>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	0a1a      	lsrs	r2, r3, #8
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00da      	lsls	r2, r3, #3
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004d92:	e00a      	b.n	8004daa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da8:	d0ea      	beq.n	8004d80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db6:	2200      	movs	r2, #0
 8004db8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dec:	2200      	movs	r2, #0
 8004dee:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b60      	cmp	r3, #96	@ 0x60
 8004e1a:	d10e      	bne.n	8004e3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f7fe fd77 	bl	8003926 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e38:	e027      	b.n	8004e8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e40:	2b28      	cmp	r3, #40	@ 0x28
 8004e42:	d117      	bne.n	8004e74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2228      	movs	r2, #40	@ 0x28
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e72:	e007      	b.n	8004e84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e84:	6978      	ldr	r0, [r7, #20]
 8004e86:	f7fe fd45 	bl	8003914 <HAL_I2C_ErrorCallback>
}
 8004e8a:	bf00      	nop
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000014 	.word	0x20000014
 8004e98:	14f8b589 	.word	0x14f8b589

08004e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eac:	e048      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d044      	beq.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fd f989 	bl	80021cc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d139      	bne.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10d      	bne.n	8004ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	43da      	mvns	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	e00c      	b.n	8004f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d116      	bne.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e023      	b.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10d      	bne.n	8004f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	e00c      	b.n	8004f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	43da      	mvns	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d093      	beq.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f9e:	e071      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fae:	d123      	bne.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	f043 0204 	orr.w	r2, r3, #4
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e067      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d041      	beq.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005000:	f7fd f8e4 	bl	80021cc <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d302      	bcc.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d136      	bne.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10c      	bne.n	800503a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e00b      	b.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	43da      	mvns	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e021      	b.n	80050c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10c      	bne.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	43da      	mvns	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e00b      	b.n	80050c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f47f af6d 	bne.w	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050dc:	e034      	b.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f8b8 	bl	8005254 <I2C_IsAcknowledgeFailed>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e034      	b.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d028      	beq.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fd f869 	bl	80021cc <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d11d      	bne.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005116:	2b80      	cmp	r3, #128	@ 0x80
 8005118:	d016      	beq.n	8005148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e007      	b.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b80      	cmp	r3, #128	@ 0x80
 8005154:	d1c3      	bne.n	80050de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800516c:	e034      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f870 	bl	8005254 <I2C_IsAcknowledgeFailed>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e034      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d028      	beq.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fd f821 	bl	80021cc <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11d      	bne.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d016      	beq.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e007      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d1c3      	bne.n	800516e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80051fc:	4b13      	ldr	r3, [pc, #76]	@ (800524c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	4a13      	ldr	r2, [pc, #76]	@ (8005250 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	0a1a      	lsrs	r2, r3, #8
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b01      	subs	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d107      	bne.n	800522e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e008      	b.n	8005240 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523c:	d0e9      	beq.n	8005212 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000014 	.word	0x20000014
 8005250:	14f8b589 	.word	0x14f8b589

08005254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526a:	d11b      	bne.n	80052a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	f043 0204 	orr.w	r2, r3, #4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80052c0:	d103      	bne.n	80052ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052c8:	e007      	b.n	80052da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80052d2:	d102      	bne.n	80052da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2208      	movs	r2, #8
 80052d8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_PWR_PVD_IRQHandler+0x20>)
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80052f4:	f000 f808 	bl	8005308 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80052f8:	4b02      	ldr	r3, [pc, #8]	@ (8005304 <HAL_PWR_PVD_IRQHandler+0x20>)
 80052fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80052fe:	615a      	str	r2, [r3, #20]
  }
}
 8005300:	bf00      	nop
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40010400 	.word	0x40010400

08005308 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e272      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8087 	beq.w	8005442 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005334:	4b92      	ldr	r3, [pc, #584]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b04      	cmp	r3, #4
 800533e:	d00c      	beq.n	800535a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005340:	4b8f      	ldr	r3, [pc, #572]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b08      	cmp	r3, #8
 800534a:	d112      	bne.n	8005372 <HAL_RCC_OscConfig+0x5e>
 800534c:	4b8c      	ldr	r3, [pc, #560]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005358:	d10b      	bne.n	8005372 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535a:	4b89      	ldr	r3, [pc, #548]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d06c      	beq.n	8005440 <HAL_RCC_OscConfig+0x12c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d168      	bne.n	8005440 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e24c      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x76>
 800537c:	4b80      	ldr	r3, [pc, #512]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a7f      	ldr	r2, [pc, #508]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e02e      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x98>
 8005392:	4b7b      	ldr	r3, [pc, #492]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a7a      	ldr	r2, [pc, #488]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4b78      	ldr	r3, [pc, #480]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a77      	ldr	r2, [pc, #476]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e01d      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0xbc>
 80053b6:	4b72      	ldr	r3, [pc, #456]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a71      	ldr	r2, [pc, #452]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6e      	ldr	r2, [pc, #440]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0xd4>
 80053d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	4b68      	ldr	r3, [pc, #416]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a67      	ldr	r2, [pc, #412]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d013      	beq.n	8005418 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc feec 	bl	80021cc <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fc fee8 	bl	80021cc <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	@ 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e200      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b5d      	ldr	r3, [pc, #372]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0xe4>
 8005416:	e014      	b.n	8005442 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fc fed8 	bl	80021cc <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fc fed4 	bl	80021cc <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	@ 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e1ec      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005432:	4b53      	ldr	r3, [pc, #332]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x10c>
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d063      	beq.n	8005516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800544e:	4b4c      	ldr	r3, [pc, #304]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800545a:	4b49      	ldr	r3, [pc, #292]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x18c>
 8005466:	4b46      	ldr	r3, [pc, #280]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005472:	4b43      	ldr	r3, [pc, #268]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_RCC_OscConfig+0x176>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1c0      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b3d      	ldr	r3, [pc, #244]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4939      	ldr	r1, [pc, #228]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	e03a      	b.n	8005516 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d020      	beq.n	80054ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a8:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <HAL_RCC_OscConfig+0x270>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ae:	f7fc fe8d 	bl	80021cc <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b6:	f7fc fe89 	bl	80021cc <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e1a1      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4927      	ldr	r1, [pc, #156]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ea:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <HAL_RCC_OscConfig+0x270>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f0:	f7fc fe6c 	bl	80021cc <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fc fe68 	bl	80021cc <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e180      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	4b1d      	ldr	r3, [pc, #116]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d03a      	beq.n	8005598 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d019      	beq.n	800555e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <HAL_RCC_OscConfig+0x274>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005530:	f7fc fe4c 	bl	80021cc <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005538:	f7fc fe48 	bl	80021cc <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e160      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <HAL_RCC_OscConfig+0x26c>)
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005556:	2001      	movs	r0, #1
 8005558:	f000 faba 	bl	8005ad0 <RCC_Delay>
 800555c:	e01c      	b.n	8005598 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800555e:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <HAL_RCC_OscConfig+0x274>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005564:	f7fc fe32 	bl	80021cc <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556a:	e00f      	b.n	800558c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800556c:	f7fc fe2e 	bl	80021cc <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d908      	bls.n	800558c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e146      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000
 8005584:	42420000 	.word	0x42420000
 8005588:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800558c:	4b92      	ldr	r3, [pc, #584]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e9      	bne.n	800556c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80a6 	beq.w	80056f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055aa:	4b8b      	ldr	r3, [pc, #556]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b6:	4b88      	ldr	r3, [pc, #544]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4a87      	ldr	r2, [pc, #540]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	61d3      	str	r3, [r2, #28]
 80055c2:	4b85      	ldr	r3, [pc, #532]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ce:	2301      	movs	r3, #1
 80055d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d2:	4b82      	ldr	r3, [pc, #520]	@ (80057dc <HAL_RCC_OscConfig+0x4c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d118      	bne.n	8005610 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055de:	4b7f      	ldr	r3, [pc, #508]	@ (80057dc <HAL_RCC_OscConfig+0x4c8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a7e      	ldr	r2, [pc, #504]	@ (80057dc <HAL_RCC_OscConfig+0x4c8>)
 80055e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ea:	f7fc fdef 	bl	80021cc <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f2:	f7fc fdeb 	bl	80021cc <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b64      	cmp	r3, #100	@ 0x64
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e103      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005604:	4b75      	ldr	r3, [pc, #468]	@ (80057dc <HAL_RCC_OscConfig+0x4c8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d106      	bne.n	8005626 <HAL_RCC_OscConfig+0x312>
 8005618:	4b6f      	ldr	r3, [pc, #444]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4a6e      	ldr	r2, [pc, #440]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6213      	str	r3, [r2, #32]
 8005624:	e02d      	b.n	8005682 <HAL_RCC_OscConfig+0x36e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10c      	bne.n	8005648 <HAL_RCC_OscConfig+0x334>
 800562e:	4b6a      	ldr	r3, [pc, #424]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	4a69      	ldr	r2, [pc, #420]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	6213      	str	r3, [r2, #32]
 800563a:	4b67      	ldr	r3, [pc, #412]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	4a66      	ldr	r2, [pc, #408]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005640:	f023 0304 	bic.w	r3, r3, #4
 8005644:	6213      	str	r3, [r2, #32]
 8005646:	e01c      	b.n	8005682 <HAL_RCC_OscConfig+0x36e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b05      	cmp	r3, #5
 800564e:	d10c      	bne.n	800566a <HAL_RCC_OscConfig+0x356>
 8005650:	4b61      	ldr	r3, [pc, #388]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4a60      	ldr	r2, [pc, #384]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005656:	f043 0304 	orr.w	r3, r3, #4
 800565a:	6213      	str	r3, [r2, #32]
 800565c:	4b5e      	ldr	r3, [pc, #376]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	4a5d      	ldr	r2, [pc, #372]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6213      	str	r3, [r2, #32]
 8005668:	e00b      	b.n	8005682 <HAL_RCC_OscConfig+0x36e>
 800566a:	4b5b      	ldr	r3, [pc, #364]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4a5a      	ldr	r2, [pc, #360]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6213      	str	r3, [r2, #32]
 8005676:	4b58      	ldr	r3, [pc, #352]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4a57      	ldr	r2, [pc, #348]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d015      	beq.n	80056b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568a:	f7fc fd9f 	bl	80021cc <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fc fd9b 	bl	80021cc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e0b1      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	4b4b      	ldr	r3, [pc, #300]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ee      	beq.n	8005692 <HAL_RCC_OscConfig+0x37e>
 80056b4:	e014      	b.n	80056e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b6:	f7fc fd89 	bl	80021cc <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fc fd85 	bl	80021cc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e09b      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d4:	4b40      	ldr	r3, [pc, #256]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ee      	bne.n	80056be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e6:	4b3c      	ldr	r3, [pc, #240]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4a3b      	ldr	r2, [pc, #236]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8087 	beq.w	800580a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056fc:	4b36      	ldr	r3, [pc, #216]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 030c 	and.w	r3, r3, #12
 8005704:	2b08      	cmp	r3, #8
 8005706:	d061      	beq.n	80057cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d146      	bne.n	800579e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005710:	4b33      	ldr	r3, [pc, #204]	@ (80057e0 <HAL_RCC_OscConfig+0x4cc>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005716:	f7fc fd59 	bl	80021cc <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571e:	f7fc fd55 	bl	80021cc <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e06d      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005730:	4b29      	ldr	r3, [pc, #164]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005744:	d108      	bne.n	8005758 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005746:	4b24      	ldr	r3, [pc, #144]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	4921      	ldr	r1, [pc, #132]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005758:	4b1f      	ldr	r3, [pc, #124]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a19      	ldr	r1, [r3, #32]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005768:	430b      	orrs	r3, r1
 800576a:	491b      	ldr	r1, [pc, #108]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 800576c:	4313      	orrs	r3, r2
 800576e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005770:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <HAL_RCC_OscConfig+0x4cc>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005776:	f7fc fd29 	bl	80021cc <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577e:	f7fc fd25 	bl	80021cc <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e03d      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005790:	4b11      	ldr	r3, [pc, #68]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x46a>
 800579c:	e035      	b.n	800580a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579e:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <HAL_RCC_OscConfig+0x4cc>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fc fd12 	bl	80021cc <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fc fd0e 	bl	80021cc <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e026      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057be:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_RCC_OscConfig+0x4c4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x498>
 80057ca:	e01e      	b.n	800580a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e019      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40007000 	.word	0x40007000
 80057e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <HAL_RCC_OscConfig+0x500>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d106      	bne.n	8005806 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005802:	429a      	cmp	r2, r3
 8005804:	d001      	beq.n	800580a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000

08005818 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0d0      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800582c:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d910      	bls.n	800585c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583a:	4b67      	ldr	r3, [pc, #412]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f023 0207 	bic.w	r2, r3, #7
 8005842:	4965      	ldr	r1, [pc, #404]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	4313      	orrs	r3, r2
 8005848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584a:	4b63      	ldr	r3, [pc, #396]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d001      	beq.n	800585c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0b8      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d020      	beq.n	80058aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005874:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a58      	ldr	r2, [pc, #352]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 800587a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800587e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800588c:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a52      	ldr	r2, [pc, #328]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005892:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005896:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b50      	ldr	r3, [pc, #320]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	494d      	ldr	r1, [pc, #308]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d040      	beq.n	8005938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b47      	ldr	r3, [pc, #284]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d115      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07f      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d107      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d6:	4b41      	ldr	r3, [pc, #260]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e073      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e6:	4b3d      	ldr	r3, [pc, #244]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e06b      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058f6:	4b39      	ldr	r3, [pc, #228]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4936      	ldr	r1, [pc, #216]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005904:	4313      	orrs	r3, r2
 8005906:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005908:	f7fc fc60 	bl	80021cc <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	e00a      	b.n	8005926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fc fc5c 	bl	80021cc <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e053      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	4b2d      	ldr	r3, [pc, #180]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 020c 	and.w	r2, r3, #12
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	429a      	cmp	r2, r3
 8005936:	d1eb      	bne.n	8005910 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005938:	4b27      	ldr	r3, [pc, #156]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d210      	bcs.n	8005968 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005946:	4b24      	ldr	r3, [pc, #144]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 0207 	bic.w	r2, r3, #7
 800594e:	4922      	ldr	r1, [pc, #136]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	4313      	orrs	r3, r2
 8005954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b20      	ldr	r3, [pc, #128]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e032      	b.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005974:	4b19      	ldr	r3, [pc, #100]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4916      	ldr	r1, [pc, #88]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005982:	4313      	orrs	r3, r2
 8005984:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005992:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	490e      	ldr	r1, [pc, #56]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059a6:	f000 f821 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80059aa:	4602      	mov	r2, r0
 80059ac:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	490a      	ldr	r1, [pc, #40]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80059b8:	5ccb      	ldrb	r3, [r1, r3]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <HAL_RCC_ClockConfig+0x1cc>)
 80059c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059c2:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <HAL_RCC_ClockConfig+0x1d0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fc fbbe 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40022000 	.word	0x40022000
 80059dc:	40021000 	.word	0x40021000
 80059e0:	0800a80c 	.word	0x0800a80c
 80059e4:	20000014 	.word	0x20000014
 80059e8:	20000018 	.word	0x20000018

080059ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a06:	4b1e      	ldr	r3, [pc, #120]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d002      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x30>
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_GetSysClockFreq+0x36>
 8005a1a:	e027      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a1c:	4b19      	ldr	r3, [pc, #100]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a1e:	613b      	str	r3, [r7, #16]
      break;
 8005a20:	e027      	b.n	8005a72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	0c9b      	lsrs	r3, r3, #18
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a2c:	5cd3      	ldrb	r3, [r2, r3]
 8005a2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d010      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a3a:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	0c5b      	lsrs	r3, r3, #17
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	4a11      	ldr	r2, [pc, #68]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a46:	5cd3      	ldrb	r3, [r2, r3]
 8005a48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a4e:	fb03 f202 	mul.w	r2, r3, r2
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e004      	b.n	8005a66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	613b      	str	r3, [r7, #16]
      break;
 8005a6a:	e002      	b.n	8005a72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a6c:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a6e:	613b      	str	r3, [r7, #16]
      break;
 8005a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a72:	693b      	ldr	r3, [r7, #16]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	007a1200 	.word	0x007a1200
 8005a88:	0800a824 	.word	0x0800a824
 8005a8c:	0800a834 	.word	0x0800a834
 8005a90:	003d0900 	.word	0x003d0900

08005a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a98:	4b02      	ldr	r3, [pc, #8]	@ (8005aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr
 8005aa4:	20000014 	.word	0x20000014

08005aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aac:	f7ff fff2 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	4903      	ldr	r1, [pc, #12]	@ (8005acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005abe:	5ccb      	ldrb	r3, [r1, r3]
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	0800a81c 	.word	0x0800a81c

08005ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <RCC_Delay+0x34>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a0a      	ldr	r2, [pc, #40]	@ (8005b08 <RCC_Delay+0x38>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0a5b      	lsrs	r3, r3, #9
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005aec:	bf00      	nop
  }
  while (Delay --);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1e5a      	subs	r2, r3, #1
 8005af2:	60fa      	str	r2, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f9      	bne.n	8005aec <RCC_Delay+0x1c>
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	20000014 	.word	0x20000014
 8005b08:	10624dd3 	.word	0x10624dd3

08005b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e041      	b.n	8005ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc f882 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fe9a 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e032      	b.n	8005c2a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <HAL_TIM_Base_Start+0x88>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_TIM_Base_Start+0x48>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	d009      	beq.n	8005bf4 <HAL_TIM_Base_Start+0x48>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a14      	ldr	r2, [pc, #80]	@ (8005c38 <HAL_TIM_Base_Start+0x8c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_TIM_Base_Start+0x48>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a13      	ldr	r2, [pc, #76]	@ (8005c3c <HAL_TIM_Base_Start+0x90>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d111      	bne.n	8005c18 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d010      	beq.n	8005c28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	e007      	b.n	8005c28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800

08005c40 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_TIM_Base_Stop+0x38>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_Base_Stop+0x38>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d001      	beq.n	8005ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e03a      	b.n	8005d1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	@ (8005d24 <HAL_TIM_Base_Start_IT+0x98>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x58>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cce:	d009      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x58>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a14      	ldr	r2, [pc, #80]	@ (8005d28 <HAL_TIM_Base_Start_IT+0x9c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x58>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a13      	ldr	r2, [pc, #76]	@ (8005d2c <HAL_TIM_Base_Start_IT+0xa0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d111      	bne.n	8005d08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d010      	beq.n	8005d18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d06:	e007      	b.n	8005d18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800

08005d30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e041      	b.n	8005dc6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f839 	bl	8005dce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 fd88 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 ff57 	bl	8006ca6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <HAL_TIM_IC_Stop+0x48>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6a1a      	ldr	r2, [r3, #32]
 8005e0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IC_Stop+0x48>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_TIM_IC_Stop+0x58>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e36:	e013      	b.n	8005e60 <HAL_TIM_IC_Stop+0x80>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d104      	bne.n	8005e48 <HAL_TIM_IC_Stop+0x68>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e46:	e00b      	b.n	8005e60 <HAL_TIM_IC_Stop+0x80>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d104      	bne.n	8005e58 <HAL_TIM_IC_Stop+0x78>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e56:	e003      	b.n	8005e60 <HAL_TIM_IC_Stop+0x80>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d104      	bne.n	8005e70 <HAL_TIM_IC_Stop+0x90>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e6e:	e013      	b.n	8005e98 <HAL_TIM_IC_Stop+0xb8>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d104      	bne.n	8005e80 <HAL_TIM_IC_Stop+0xa0>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e7e:	e00b      	b.n	8005e98 <HAL_TIM_IC_Stop+0xb8>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d104      	bne.n	8005e90 <HAL_TIM_IC_Stop+0xb0>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e8e:	e003      	b.n	8005e98 <HAL_TIM_IC_Stop+0xb8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_IC_Start_DMA+0x22>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e013      	b.n	8005eee <HAL_TIM_IC_Start_DMA+0x4a>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_IC_Start_DMA+0x32>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	e00b      	b.n	8005eee <HAL_TIM_IC_Start_DMA+0x4a>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_IC_Start_DMA+0x42>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	e003      	b.n	8005eee <HAL_TIM_IC_Start_DMA+0x4a>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_TIM_IC_Start_DMA+0x5c>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e013      	b.n	8005f28 <HAL_TIM_IC_Start_DMA+0x84>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d104      	bne.n	8005f10 <HAL_TIM_IC_Start_DMA+0x6c>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e00b      	b.n	8005f28 <HAL_TIM_IC_Start_DMA+0x84>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d104      	bne.n	8005f20 <HAL_TIM_IC_Start_DMA+0x7c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e003      	b.n	8005f28 <HAL_TIM_IC_Start_DMA+0x84>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f2a:	7dbb      	ldrb	r3, [r7, #22]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d002      	beq.n	8005f36 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005f30:	7d7b      	ldrb	r3, [r7, #21]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
 8005f38:	e132      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005f3a:	7dbb      	ldrb	r3, [r7, #22]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d143      	bne.n	8005fc8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005f40:	7d7b      	ldrb	r3, [r7, #21]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d140      	bne.n	8005fc8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_TIM_IC_Start_DMA+0xae>
 8005f4c:	887b      	ldrh	r3, [r7, #2]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e124      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <HAL_TIM_IC_Start_DMA+0xc2>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f64:	e013      	b.n	8005f8e <HAL_TIM_IC_Start_DMA+0xea>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_IC_Start_DMA+0xd2>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f74:	e00b      	b.n	8005f8e <HAL_TIM_IC_Start_DMA+0xea>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_IC_Start_DMA+0xe2>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f84:	e003      	b.n	8005f8e <HAL_TIM_IC_Start_DMA+0xea>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_IC_Start_DMA+0xfa>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8005f9c:	e016      	b.n	8005fcc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_IC_Start_DMA+0x10a>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8005fac:	e00e      	b.n	8005fcc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_IC_Start_DMA+0x11a>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8005fbc:	e006      	b.n	8005fcc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8005fc6:	e001      	b.n	8005fcc <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0e9      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fe66 	bl	8006ca6 <TIM_CCxChannelCmd>

  switch (Channel)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	f200 80ad 	bhi.w	800613c <HAL_TIM_IC_Start_DMA+0x298>
 8005fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe8 <HAL_TIM_IC_Start_DMA+0x144>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800601d 	.word	0x0800601d
 8005fec:	0800613d 	.word	0x0800613d
 8005ff0:	0800613d 	.word	0x0800613d
 8005ff4:	0800613d 	.word	0x0800613d
 8005ff8:	08006065 	.word	0x08006065
 8005ffc:	0800613d 	.word	0x0800613d
 8006000:	0800613d 	.word	0x0800613d
 8006004:	0800613d 	.word	0x0800613d
 8006008:	080060ad 	.word	0x080060ad
 800600c:	0800613d 	.word	0x0800613d
 8006010:	0800613d 	.word	0x0800613d
 8006014:	0800613d 	.word	0x0800613d
 8006018:	080060f5 	.word	0x080060f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	4a61      	ldr	r2, [pc, #388]	@ (80061a8 <HAL_TIM_IC_Start_DMA+0x304>)
 8006022:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	4a60      	ldr	r2, [pc, #384]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x308>)
 800602a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	4a5f      	ldr	r2, [pc, #380]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3334      	adds	r3, #52	@ 0x34
 800603e:	4619      	mov	r1, r3
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	f7fc fa58 	bl	80024f8 <HAL_DMA_Start_IT>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0a6      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006060:	60da      	str	r2, [r3, #12]
      break;
 8006062:	e06e      	b.n	8006142 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	4a4f      	ldr	r2, [pc, #316]	@ (80061a8 <HAL_TIM_IC_Start_DMA+0x304>)
 800606a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	4a4e      	ldr	r2, [pc, #312]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x308>)
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	4a4d      	ldr	r2, [pc, #308]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3338      	adds	r3, #56	@ 0x38
 8006086:	4619      	mov	r1, r3
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	f7fc fa34 	bl	80024f8 <HAL_DMA_Start_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e082      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060a8:	60da      	str	r2, [r3, #12]
      break;
 80060aa:	e04a      	b.n	8006142 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4a3d      	ldr	r2, [pc, #244]	@ (80061a8 <HAL_TIM_IC_Start_DMA+0x304>)
 80060b2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4a3c      	ldr	r2, [pc, #240]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x308>)
 80060ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	4a3b      	ldr	r2, [pc, #236]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	333c      	adds	r3, #60	@ 0x3c
 80060ce:	4619      	mov	r1, r3
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	f7fc fa10 	bl	80024f8 <HAL_DMA_Start_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e05e      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f0:	60da      	str	r2, [r3, #12]
      break;
 80060f2:	e026      	b.n	8006142 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f8:	4a2b      	ldr	r2, [pc, #172]	@ (80061a8 <HAL_TIM_IC_Start_DMA+0x304>)
 80060fa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006100:	4a2a      	ldr	r2, [pc, #168]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x308>)
 8006102:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006108:	4a29      	ldr	r2, [pc, #164]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x30c>)
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3340      	adds	r3, #64	@ 0x40
 8006116:	4619      	mov	r1, r3
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	887b      	ldrh	r3, [r7, #2]
 800611c:	f7fc f9ec 	bl	80024f8 <HAL_DMA_Start_IT>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e03a      	b.n	80061a0 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006138:	60da      	str	r2, [r3, #12]
      break;
 800613a:	e002      	b.n	8006142 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]
      break;
 8006140:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1b      	ldr	r2, [pc, #108]	@ (80061b4 <HAL_TIM_IC_Start_DMA+0x310>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00e      	beq.n	800616a <HAL_TIM_IC_Start_DMA+0x2c6>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006154:	d009      	beq.n	800616a <HAL_TIM_IC_Start_DMA+0x2c6>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a17      	ldr	r2, [pc, #92]	@ (80061b8 <HAL_TIM_IC_Start_DMA+0x314>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_TIM_IC_Start_DMA+0x2c6>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a15      	ldr	r2, [pc, #84]	@ (80061bc <HAL_TIM_IC_Start_DMA+0x318>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d111      	bne.n	800618e <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b06      	cmp	r3, #6
 800617a:	d010      	beq.n	800619e <HAL_TIM_IC_Start_DMA+0x2fa>
    {
      __HAL_TIM_ENABLE(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618c:	e007      	b.n	800619e <HAL_TIM_IC_Start_DMA+0x2fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	08006753 	.word	0x08006753
 80061ac:	0800681b 	.word	0x0800681b
 80061b0:	080066c1 	.word	0x080066c1
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800

080061c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d020      	beq.n	8006224 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01b      	beq.n	8006224 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0202 	mvn.w	r2, #2
 80061f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb fe82 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 8006210:	e005      	b.n	800621e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa27 	bl	8006666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa36 	bl	800668a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d020      	beq.n	8006270 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01b      	beq.n	8006270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0204 	mvn.w	r2, #4
 8006240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fb fe5c 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 800625c:	e005      	b.n	800626a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa01 	bl	8006666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa10 	bl	800668a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d020      	beq.n	80062bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01b      	beq.n	80062bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0208 	mvn.w	r2, #8
 800628c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2204      	movs	r2, #4
 8006292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fe36 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 80062a8:	e005      	b.n	80062b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f9db 	bl	8006666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f9ea 	bl	800668a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d020      	beq.n	8006308 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01b      	beq.n	8006308 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0210 	mvn.w	r2, #16
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2208      	movs	r2, #8
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fe10 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9b5 	bl	8006666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9c4 	bl	800668a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0201 	mvn.w	r2, #1
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fb fd86 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fd37 	bl	8006dbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f994 	bl	800669c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0220 	mvn.w	r2, #32
 8006390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fd0a 	bl	8006dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_TIM_IC_ConfigChannel+0x1e>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e088      	b.n	80064d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063dc:	f000 fac0 	bl	8006960 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 020c 	bic.w	r2, r2, #12
 80063ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6999      	ldr	r1, [r3, #24]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	619a      	str	r2, [r3, #24]
 8006402:	e060      	b.n	80064c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b04      	cmp	r3, #4
 8006408:	d11c      	bne.n	8006444 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800641a:	f000 fb29 	bl	8006a70 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800642c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6999      	ldr	r1, [r3, #24]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	021a      	lsls	r2, r3, #8
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	619a      	str	r2, [r3, #24]
 8006442:	e040      	b.n	80064c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b08      	cmp	r3, #8
 8006448:	d11b      	bne.n	8006482 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800645a:	f000 fb74 	bl	8006b46 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 020c 	bic.w	r2, r2, #12
 800646c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	61da      	str	r2, [r3, #28]
 8006480:	e021      	b.n	80064c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b0c      	cmp	r3, #12
 8006486:	d11c      	bne.n	80064c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006498:	f000 fb90 	bl	8006bbc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80064aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69d9      	ldr	r1, [r3, #28]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	021a      	lsls	r2, r3, #8
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	61da      	str	r2, [r3, #28]
 80064c0:	e001      	b.n	80064c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIM_ConfigClockSource+0x1c>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e0b4      	b.n	800665e <HAL_TIM_ConfigClockSource+0x186>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800651a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800652c:	d03e      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0xd4>
 800652e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006532:	f200 8087 	bhi.w	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 8006536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653a:	f000 8086 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x172>
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006542:	d87f      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b70      	cmp	r3, #112	@ 0x70
 8006546:	d01a      	beq.n	800657e <HAL_TIM_ConfigClockSource+0xa6>
 8006548:	2b70      	cmp	r3, #112	@ 0x70
 800654a:	d87b      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b60      	cmp	r3, #96	@ 0x60
 800654e:	d050      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006550:	2b60      	cmp	r3, #96	@ 0x60
 8006552:	d877      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b50      	cmp	r3, #80	@ 0x50
 8006556:	d03c      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006558:	2b50      	cmp	r3, #80	@ 0x50
 800655a:	d873      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 800655c:	2b40      	cmp	r3, #64	@ 0x40
 800655e:	d058      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x13a>
 8006560:	2b40      	cmp	r3, #64	@ 0x40
 8006562:	d86f      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 8006564:	2b30      	cmp	r3, #48	@ 0x30
 8006566:	d064      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x15a>
 8006568:	2b30      	cmp	r3, #48	@ 0x30
 800656a:	d86b      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 800656c:	2b20      	cmp	r3, #32
 800656e:	d060      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x15a>
 8006570:	2b20      	cmp	r3, #32
 8006572:	d867      	bhi.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d05c      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x15a>
 8006578:	2b10      	cmp	r3, #16
 800657a:	d05a      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x15a>
 800657c:	e062      	b.n	8006644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800658e:	f000 fb6b 	bl	8006c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	609a      	str	r2, [r3, #8]
      break;
 80065aa:	e04f      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065bc:	f000 fb54 	bl	8006c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ce:	609a      	str	r2, [r3, #8]
      break;
 80065d0:	e03c      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 fa18 	bl	8006a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2150      	movs	r1, #80	@ 0x50
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fb22 	bl	8006c34 <TIM_ITRx_SetConfig>
      break;
 80065f0:	e02c      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065fe:	461a      	mov	r2, r3
 8006600:	f000 fa72 	bl	8006ae8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2160      	movs	r1, #96	@ 0x60
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fb12 	bl	8006c34 <TIM_ITRx_SetConfig>
      break;
 8006610:	e01c      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661e:	461a      	mov	r2, r3
 8006620:	f000 f9f8 	bl	8006a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2140      	movs	r1, #64	@ 0x40
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fb02 	bl	8006c34 <TIM_ITRx_SetConfig>
      break;
 8006630:	e00c      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f000 faf9 	bl	8006c34 <TIM_ITRx_SetConfig>
      break;
 8006642:	e003      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
      break;
 8006648:	e000      	b.n	800664c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800664a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d107      	bne.n	80066e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e6:	e02a      	b.n	800673e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d107      	bne.n	8006702 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2202      	movs	r2, #2
 80066f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006700:	e01d      	b.n	800673e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d107      	bne.n	800671c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2204      	movs	r2, #4
 8006710:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800671a:	e010      	b.n	800673e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d107      	bne.n	8006736 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2208      	movs	r2, #8
 800672a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006734:	e003      	b.n	800673e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ffb5 	bl	80066ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	771a      	strb	r2, [r3, #28]
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d10f      	bne.n	800678a <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d146      	bne.n	8006806 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006788:	e03d      	b.n	8006806 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d10f      	bne.n	80067b4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2202      	movs	r2, #2
 8006798:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d131      	bne.n	8006806 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067b2:	e028      	b.n	8006806 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d10f      	bne.n	80067de <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2204      	movs	r2, #4
 80067c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11c      	bne.n	8006806 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067dc:	e013      	b.n	8006806 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d10e      	bne.n	8006806 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2208      	movs	r2, #8
 80067ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7fb fb84 	bl	8001f14 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	771a      	strb	r2, [r3, #28]
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d103      	bne.n	800683a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	771a      	strb	r2, [r3, #28]
 8006838:	e019      	b.n	800686e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d103      	bne.n	800684c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2202      	movs	r2, #2
 8006848:	771a      	strb	r2, [r3, #28]
 800684a:	e010      	b.n	800686e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d103      	bne.n	800685e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2204      	movs	r2, #4
 800685a:	771a      	strb	r2, [r3, #28]
 800685c:	e007      	b.n	800686e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	d102      	bne.n	800686e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2208      	movs	r2, #8
 800686c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff ff02 	bl	8006678 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	771a      	strb	r2, [r3, #28]
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a2f      	ldr	r2, [pc, #188]	@ (8006954 <TIM_Base_SetConfig+0xd0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_Base_SetConfig+0x30>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a2:	d007      	beq.n	80068b4 <TIM_Base_SetConfig+0x30>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006958 <TIM_Base_SetConfig+0xd4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_Base_SetConfig+0x30>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a2b      	ldr	r2, [pc, #172]	@ (800695c <TIM_Base_SetConfig+0xd8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d108      	bne.n	80068c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a22      	ldr	r2, [pc, #136]	@ (8006954 <TIM_Base_SetConfig+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00b      	beq.n	80068e6 <TIM_Base_SetConfig+0x62>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d4:	d007      	beq.n	80068e6 <TIM_Base_SetConfig+0x62>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006958 <TIM_Base_SetConfig+0xd4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d003      	beq.n	80068e6 <TIM_Base_SetConfig+0x62>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <TIM_Base_SetConfig+0xd8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d108      	bne.n	80068f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a0d      	ldr	r2, [pc, #52]	@ (8006954 <TIM_Base_SetConfig+0xd0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d103      	bne.n	800692c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f023 0201 	bic.w	r2, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	611a      	str	r2, [r3, #16]
  }
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800

08006960 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f023 0201 	bic.w	r2, r3, #1
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a1f      	ldr	r2, [pc, #124]	@ (8006a08 <TIM_TI1_SetConfig+0xa8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_TI1_SetConfig+0x46>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006994:	d007      	beq.n	80069a6 <TIM_TI1_SetConfig+0x46>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a1c      	ldr	r2, [pc, #112]	@ (8006a0c <TIM_TI1_SetConfig+0xac>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_TI1_SetConfig+0x46>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a10 <TIM_TI1_SetConfig+0xb0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d101      	bne.n	80069aa <TIM_TI1_SetConfig+0x4a>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <TIM_TI1_SetConfig+0x4c>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e003      	b.n	80069ca <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f023 030a 	bic.w	r3, r3, #10
 80069e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f003 030a 	and.w	r3, r3, #10
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800

08006a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 030a 	bic.w	r3, r3, #10
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f023 0210 	bic.w	r2, r3, #16
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	031b      	lsls	r3, r3, #12
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f023 0210 	bic.w	r2, r3, #16
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	031b      	lsls	r3, r3, #12
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b96:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006be8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	031b      	lsls	r3, r3, #12
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	031b      	lsls	r3, r3, #12
 8006c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f043 0307 	orr.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	609a      	str	r2, [r3, #8]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	609a      	str	r2, [r3, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	2201      	movs	r2, #1
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1a      	ldr	r2, [r3, #32]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	401a      	ands	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	fa01 f303 	lsl.w	r3, r1, r3
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	621a      	str	r2, [r3, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e046      	b.n	8006d96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a16      	ldr	r2, [pc, #88]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00e      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d54:	d009      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a12      	ldr	r2, [pc, #72]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a10      	ldr	r2, [pc, #64]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d10c      	bne.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800

08006dac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr

08006dbe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <__cvt>:
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	bfbb      	ittet	lt
 8006dda:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006dde:	461d      	movlt	r5, r3
 8006de0:	2300      	movge	r3, #0
 8006de2:	232d      	movlt	r3, #45	@ 0x2d
 8006de4:	b088      	sub	sp, #32
 8006de6:	4614      	mov	r4, r2
 8006de8:	bfb8      	it	lt
 8006dea:	4614      	movlt	r4, r2
 8006dec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006dee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006df0:	7013      	strb	r3, [r2, #0]
 8006df2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006df4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006df8:	f023 0820 	bic.w	r8, r3, #32
 8006dfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e00:	d005      	beq.n	8006e0e <__cvt+0x3e>
 8006e02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e06:	d100      	bne.n	8006e0a <__cvt+0x3a>
 8006e08:	3601      	adds	r6, #1
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e000      	b.n	8006e10 <__cvt+0x40>
 8006e0e:	2303      	movs	r3, #3
 8006e10:	aa07      	add	r2, sp, #28
 8006e12:	9204      	str	r2, [sp, #16]
 8006e14:	aa06      	add	r2, sp, #24
 8006e16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e1a:	e9cd 3600 	strd	r3, r6, [sp]
 8006e1e:	4622      	mov	r2, r4
 8006e20:	462b      	mov	r3, r5
 8006e22:	f000 fe6d 	bl	8007b00 <_dtoa_r>
 8006e26:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	d119      	bne.n	8006e62 <__cvt+0x92>
 8006e2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e30:	07db      	lsls	r3, r3, #31
 8006e32:	d50e      	bpl.n	8006e52 <__cvt+0x82>
 8006e34:	eb00 0906 	add.w	r9, r0, r6
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e44:	b108      	cbz	r0, 8006e4a <__cvt+0x7a>
 8006e46:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e4a:	2230      	movs	r2, #48	@ 0x30
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	454b      	cmp	r3, r9
 8006e50:	d31e      	bcc.n	8006e90 <__cvt+0xc0>
 8006e52:	4638      	mov	r0, r7
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e58:	1bdb      	subs	r3, r3, r7
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	b008      	add	sp, #32
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e66:	eb00 0906 	add.w	r9, r0, r6
 8006e6a:	d1e5      	bne.n	8006e38 <__cvt+0x68>
 8006e6c:	7803      	ldrb	r3, [r0, #0]
 8006e6e:	2b30      	cmp	r3, #48	@ 0x30
 8006e70:	d10a      	bne.n	8006e88 <__cvt+0xb8>
 8006e72:	2200      	movs	r2, #0
 8006e74:	2300      	movs	r3, #0
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fd95 	bl	80009a8 <__aeabi_dcmpeq>
 8006e7e:	b918      	cbnz	r0, 8006e88 <__cvt+0xb8>
 8006e80:	f1c6 0601 	rsb	r6, r6, #1
 8006e84:	f8ca 6000 	str.w	r6, [sl]
 8006e88:	f8da 3000 	ldr.w	r3, [sl]
 8006e8c:	4499      	add	r9, r3
 8006e8e:	e7d3      	b.n	8006e38 <__cvt+0x68>
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	9107      	str	r1, [sp, #28]
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	e7d9      	b.n	8006e4c <__cvt+0x7c>

08006e98 <__exponent>:
 8006e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	bfb6      	itet	lt
 8006e9e:	232d      	movlt	r3, #45	@ 0x2d
 8006ea0:	232b      	movge	r3, #43	@ 0x2b
 8006ea2:	4249      	neglt	r1, r1
 8006ea4:	2909      	cmp	r1, #9
 8006ea6:	7002      	strb	r2, [r0, #0]
 8006ea8:	7043      	strb	r3, [r0, #1]
 8006eaa:	dd29      	ble.n	8006f00 <__exponent+0x68>
 8006eac:	f10d 0307 	add.w	r3, sp, #7
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	270a      	movs	r7, #10
 8006eb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006eb8:	461a      	mov	r2, r3
 8006eba:	fb07 1416 	mls	r4, r7, r6, r1
 8006ebe:	3430      	adds	r4, #48	@ 0x30
 8006ec0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	2c63      	cmp	r4, #99	@ 0x63
 8006ec8:	4631      	mov	r1, r6
 8006eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ece:	dcf1      	bgt.n	8006eb4 <__exponent+0x1c>
 8006ed0:	3130      	adds	r1, #48	@ 0x30
 8006ed2:	1e94      	subs	r4, r2, #2
 8006ed4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ed8:	4623      	mov	r3, r4
 8006eda:	1c41      	adds	r1, r0, #1
 8006edc:	42ab      	cmp	r3, r5
 8006ede:	d30a      	bcc.n	8006ef6 <__exponent+0x5e>
 8006ee0:	f10d 0309 	add.w	r3, sp, #9
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	42ac      	cmp	r4, r5
 8006ee8:	bf88      	it	hi
 8006eea:	2300      	movhi	r3, #0
 8006eec:	3302      	adds	r3, #2
 8006eee:	4403      	add	r3, r0
 8006ef0:	1a18      	subs	r0, r3, r0
 8006ef2:	b003      	add	sp, #12
 8006ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006efa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006efe:	e7ed      	b.n	8006edc <__exponent+0x44>
 8006f00:	2330      	movs	r3, #48	@ 0x30
 8006f02:	3130      	adds	r1, #48	@ 0x30
 8006f04:	7083      	strb	r3, [r0, #2]
 8006f06:	70c1      	strb	r1, [r0, #3]
 8006f08:	1d03      	adds	r3, r0, #4
 8006f0a:	e7f1      	b.n	8006ef0 <__exponent+0x58>

08006f0c <_printf_float>:
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	b091      	sub	sp, #68	@ 0x44
 8006f12:	460c      	mov	r4, r1
 8006f14:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006f18:	4616      	mov	r6, r2
 8006f1a:	461f      	mov	r7, r3
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	f000 fce1 	bl	80078e4 <_localeconv_r>
 8006f22:	6803      	ldr	r3, [r0, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	9308      	str	r3, [sp, #32]
 8006f28:	f7f9 f912 	bl	8000150 <strlen>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f30:	f8d8 3000 	ldr.w	r3, [r8]
 8006f34:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f36:	3307      	adds	r3, #7
 8006f38:	f023 0307 	bic.w	r3, r3, #7
 8006f3c:	f103 0208 	add.w	r2, r3, #8
 8006f40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f44:	f8d4 b000 	ldr.w	fp, [r4]
 8006f48:	f8c8 2000 	str.w	r2, [r8]
 8006f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f56:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f66:	4b9c      	ldr	r3, [pc, #624]	@ (80071d8 <_printf_float+0x2cc>)
 8006f68:	f7f9 fd50 	bl	8000a0c <__aeabi_dcmpun>
 8006f6c:	bb70      	cbnz	r0, 8006fcc <_printf_float+0xc0>
 8006f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f72:	f04f 32ff 	mov.w	r2, #4294967295
 8006f76:	4b98      	ldr	r3, [pc, #608]	@ (80071d8 <_printf_float+0x2cc>)
 8006f78:	f7f9 fd2a 	bl	80009d0 <__aeabi_dcmple>
 8006f7c:	bb30      	cbnz	r0, 8006fcc <_printf_float+0xc0>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2300      	movs	r3, #0
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fd19 	bl	80009bc <__aeabi_dcmplt>
 8006f8a:	b110      	cbz	r0, 8006f92 <_printf_float+0x86>
 8006f8c:	232d      	movs	r3, #45	@ 0x2d
 8006f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f92:	4a92      	ldr	r2, [pc, #584]	@ (80071dc <_printf_float+0x2d0>)
 8006f94:	4b92      	ldr	r3, [pc, #584]	@ (80071e0 <_printf_float+0x2d4>)
 8006f96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f9a:	bf8c      	ite	hi
 8006f9c:	4690      	movhi	r8, r2
 8006f9e:	4698      	movls	r8, r3
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	f04f 0900 	mov.w	r9, #0
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	f02b 0304 	bic.w	r3, fp, #4
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	4633      	mov	r3, r6
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	9700      	str	r7, [sp, #0]
 8006fb6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006fb8:	f000 f9d4 	bl	8007364 <_printf_common>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f040 8090 	bne.w	80070e2 <_printf_float+0x1d6>
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	b011      	add	sp, #68	@ 0x44
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	f7f9 fd1a 	bl	8000a0c <__aeabi_dcmpun>
 8006fd8:	b148      	cbz	r0, 8006fee <_printf_float+0xe2>
 8006fda:	464b      	mov	r3, r9
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bfb8      	it	lt
 8006fe0:	232d      	movlt	r3, #45	@ 0x2d
 8006fe2:	4a80      	ldr	r2, [pc, #512]	@ (80071e4 <_printf_float+0x2d8>)
 8006fe4:	bfb8      	it	lt
 8006fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fea:	4b7f      	ldr	r3, [pc, #508]	@ (80071e8 <_printf_float+0x2dc>)
 8006fec:	e7d3      	b.n	8006f96 <_printf_float+0x8a>
 8006fee:	6863      	ldr	r3, [r4, #4]
 8006ff0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	d13f      	bne.n	8007078 <_printf_float+0x16c>
 8006ff8:	2306      	movs	r3, #6
 8006ffa:	6063      	str	r3, [r4, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	9206      	str	r2, [sp, #24]
 8007006:	aa0e      	add	r2, sp, #56	@ 0x38
 8007008:	e9cd a204 	strd	sl, r2, [sp, #16]
 800700c:	aa0d      	add	r2, sp, #52	@ 0x34
 800700e:	9203      	str	r2, [sp, #12]
 8007010:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007014:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	4642      	mov	r2, r8
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4628      	mov	r0, r5
 8007020:	464b      	mov	r3, r9
 8007022:	910a      	str	r1, [sp, #40]	@ 0x28
 8007024:	f7ff fed4 	bl	8006dd0 <__cvt>
 8007028:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800702a:	4680      	mov	r8, r0
 800702c:	2947      	cmp	r1, #71	@ 0x47
 800702e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007030:	d128      	bne.n	8007084 <_printf_float+0x178>
 8007032:	1cc8      	adds	r0, r1, #3
 8007034:	db02      	blt.n	800703c <_printf_float+0x130>
 8007036:	6863      	ldr	r3, [r4, #4]
 8007038:	4299      	cmp	r1, r3
 800703a:	dd40      	ble.n	80070be <_printf_float+0x1b2>
 800703c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007040:	fa5f fa8a 	uxtb.w	sl, sl
 8007044:	4652      	mov	r2, sl
 8007046:	3901      	subs	r1, #1
 8007048:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800704c:	910d      	str	r1, [sp, #52]	@ 0x34
 800704e:	f7ff ff23 	bl	8006e98 <__exponent>
 8007052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007054:	4681      	mov	r9, r0
 8007056:	1813      	adds	r3, r2, r0
 8007058:	2a01      	cmp	r2, #1
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	dc02      	bgt.n	8007064 <_printf_float+0x158>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	07d2      	lsls	r2, r2, #31
 8007062:	d501      	bpl.n	8007068 <_printf_float+0x15c>
 8007064:	3301      	adds	r3, #1
 8007066:	6123      	str	r3, [r4, #16]
 8007068:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800706c:	2b00      	cmp	r3, #0
 800706e:	d09e      	beq.n	8006fae <_printf_float+0xa2>
 8007070:	232d      	movs	r3, #45	@ 0x2d
 8007072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007076:	e79a      	b.n	8006fae <_printf_float+0xa2>
 8007078:	2947      	cmp	r1, #71	@ 0x47
 800707a:	d1bf      	bne.n	8006ffc <_printf_float+0xf0>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1bd      	bne.n	8006ffc <_printf_float+0xf0>
 8007080:	2301      	movs	r3, #1
 8007082:	e7ba      	b.n	8006ffa <_printf_float+0xee>
 8007084:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007088:	d9dc      	bls.n	8007044 <_printf_float+0x138>
 800708a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800708e:	d118      	bne.n	80070c2 <_printf_float+0x1b6>
 8007090:	2900      	cmp	r1, #0
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	dd0b      	ble.n	80070ae <_printf_float+0x1a2>
 8007096:	6121      	str	r1, [r4, #16]
 8007098:	b913      	cbnz	r3, 80070a0 <_printf_float+0x194>
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	07d0      	lsls	r0, r2, #31
 800709e:	d502      	bpl.n	80070a6 <_printf_float+0x19a>
 80070a0:	3301      	adds	r3, #1
 80070a2:	440b      	add	r3, r1
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070ac:	e7dc      	b.n	8007068 <_printf_float+0x15c>
 80070ae:	b913      	cbnz	r3, 80070b6 <_printf_float+0x1aa>
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	07d2      	lsls	r2, r2, #31
 80070b4:	d501      	bpl.n	80070ba <_printf_float+0x1ae>
 80070b6:	3302      	adds	r3, #2
 80070b8:	e7f4      	b.n	80070a4 <_printf_float+0x198>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e7f2      	b.n	80070a4 <_printf_float+0x198>
 80070be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c4:	4299      	cmp	r1, r3
 80070c6:	db05      	blt.n	80070d4 <_printf_float+0x1c8>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	6121      	str	r1, [r4, #16]
 80070cc:	07d8      	lsls	r0, r3, #31
 80070ce:	d5ea      	bpl.n	80070a6 <_printf_float+0x19a>
 80070d0:	1c4b      	adds	r3, r1, #1
 80070d2:	e7e7      	b.n	80070a4 <_printf_float+0x198>
 80070d4:	2900      	cmp	r1, #0
 80070d6:	bfcc      	ite	gt
 80070d8:	2201      	movgt	r2, #1
 80070da:	f1c1 0202 	rsble	r2, r1, #2
 80070de:	4413      	add	r3, r2
 80070e0:	e7e0      	b.n	80070a4 <_printf_float+0x198>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	055a      	lsls	r2, r3, #21
 80070e6:	d407      	bmi.n	80070f8 <_printf_float+0x1ec>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	4642      	mov	r2, r8
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	d12b      	bne.n	800714e <_printf_float+0x242>
 80070f6:	e764      	b.n	8006fc2 <_printf_float+0xb6>
 80070f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070fc:	f240 80dc 	bls.w	80072b8 <_printf_float+0x3ac>
 8007100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	f7f9 fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800710c:	2800      	cmp	r0, #0
 800710e:	d033      	beq.n	8007178 <_printf_float+0x26c>
 8007110:	2301      	movs	r3, #1
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <_printf_float+0x2e0>)
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af51 	beq.w	8006fc2 <_printf_float+0xb6>
 8007120:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007124:	4543      	cmp	r3, r8
 8007126:	db02      	blt.n	800712e <_printf_float+0x222>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07d8      	lsls	r0, r3, #31
 800712c:	d50f      	bpl.n	800714e <_printf_float+0x242>
 800712e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af42 	beq.w	8006fc2 <_printf_float+0xb6>
 800713e:	f04f 0900 	mov.w	r9, #0
 8007142:	f108 38ff 	add.w	r8, r8, #4294967295
 8007146:	f104 0a1a 	add.w	sl, r4, #26
 800714a:	45c8      	cmp	r8, r9
 800714c:	dc09      	bgt.n	8007162 <_printf_float+0x256>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	079b      	lsls	r3, r3, #30
 8007152:	f100 8102 	bmi.w	800735a <_printf_float+0x44e>
 8007156:	68e0      	ldr	r0, [r4, #12]
 8007158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800715a:	4298      	cmp	r0, r3
 800715c:	bfb8      	it	lt
 800715e:	4618      	movlt	r0, r3
 8007160:	e731      	b.n	8006fc6 <_printf_float+0xba>
 8007162:	2301      	movs	r3, #1
 8007164:	4652      	mov	r2, sl
 8007166:	4631      	mov	r1, r6
 8007168:	4628      	mov	r0, r5
 800716a:	47b8      	blx	r7
 800716c:	3001      	adds	r0, #1
 800716e:	f43f af28 	beq.w	8006fc2 <_printf_float+0xb6>
 8007172:	f109 0901 	add.w	r9, r9, #1
 8007176:	e7e8      	b.n	800714a <_printf_float+0x23e>
 8007178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc38      	bgt.n	80071f0 <_printf_float+0x2e4>
 800717e:	2301      	movs	r3, #1
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	4a19      	ldr	r2, [pc, #100]	@ (80071ec <_printf_float+0x2e0>)
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	f43f af1a 	beq.w	8006fc2 <_printf_float+0xb6>
 800718e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007192:	ea59 0303 	orrs.w	r3, r9, r3
 8007196:	d102      	bne.n	800719e <_printf_float+0x292>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d5d7      	bpl.n	800714e <_printf_float+0x242>
 800719e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071a2:	4631      	mov	r1, r6
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b8      	blx	r7
 80071a8:	3001      	adds	r0, #1
 80071aa:	f43f af0a 	beq.w	8006fc2 <_printf_float+0xb6>
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	f104 0b1a 	add.w	fp, r4, #26
 80071b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071b8:	425b      	negs	r3, r3
 80071ba:	4553      	cmp	r3, sl
 80071bc:	dc01      	bgt.n	80071c2 <_printf_float+0x2b6>
 80071be:	464b      	mov	r3, r9
 80071c0:	e793      	b.n	80070ea <_printf_float+0x1de>
 80071c2:	2301      	movs	r3, #1
 80071c4:	465a      	mov	r2, fp
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	f43f aef8 	beq.w	8006fc2 <_printf_float+0xb6>
 80071d2:	f10a 0a01 	add.w	sl, sl, #1
 80071d6:	e7ee      	b.n	80071b6 <_printf_float+0x2aa>
 80071d8:	7fefffff 	.word	0x7fefffff
 80071dc:	0800a83a 	.word	0x0800a83a
 80071e0:	0800a836 	.word	0x0800a836
 80071e4:	0800a842 	.word	0x0800a842
 80071e8:	0800a83e 	.word	0x0800a83e
 80071ec:	0800a846 	.word	0x0800a846
 80071f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80071f6:	4553      	cmp	r3, sl
 80071f8:	bfa8      	it	ge
 80071fa:	4653      	movge	r3, sl
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	4699      	mov	r9, r3
 8007200:	dc36      	bgt.n	8007270 <_printf_float+0x364>
 8007202:	f04f 0b00 	mov.w	fp, #0
 8007206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720a:	f104 021a 	add.w	r2, r4, #26
 800720e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007210:	930a      	str	r3, [sp, #40]	@ 0x28
 8007212:	eba3 0309 	sub.w	r3, r3, r9
 8007216:	455b      	cmp	r3, fp
 8007218:	dc31      	bgt.n	800727e <_printf_float+0x372>
 800721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800721c:	459a      	cmp	sl, r3
 800721e:	dc3a      	bgt.n	8007296 <_printf_float+0x38a>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	07da      	lsls	r2, r3, #31
 8007224:	d437      	bmi.n	8007296 <_printf_float+0x38a>
 8007226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007228:	ebaa 0903 	sub.w	r9, sl, r3
 800722c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722e:	ebaa 0303 	sub.w	r3, sl, r3
 8007232:	4599      	cmp	r9, r3
 8007234:	bfa8      	it	ge
 8007236:	4699      	movge	r9, r3
 8007238:	f1b9 0f00 	cmp.w	r9, #0
 800723c:	dc33      	bgt.n	80072a6 <_printf_float+0x39a>
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007246:	f104 0b1a 	add.w	fp, r4, #26
 800724a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800724c:	ebaa 0303 	sub.w	r3, sl, r3
 8007250:	eba3 0309 	sub.w	r3, r3, r9
 8007254:	4543      	cmp	r3, r8
 8007256:	f77f af7a 	ble.w	800714e <_printf_float+0x242>
 800725a:	2301      	movs	r3, #1
 800725c:	465a      	mov	r2, fp
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	f43f aeac 	beq.w	8006fc2 <_printf_float+0xb6>
 800726a:	f108 0801 	add.w	r8, r8, #1
 800726e:	e7ec      	b.n	800724a <_printf_float+0x33e>
 8007270:	4642      	mov	r2, r8
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d1c2      	bne.n	8007202 <_printf_float+0x2f6>
 800727c:	e6a1      	b.n	8006fc2 <_printf_float+0xb6>
 800727e:	2301      	movs	r3, #1
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	920a      	str	r2, [sp, #40]	@ 0x28
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae9a 	beq.w	8006fc2 <_printf_float+0xb6>
 800728e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007290:	f10b 0b01 	add.w	fp, fp, #1
 8007294:	e7bb      	b.n	800720e <_printf_float+0x302>
 8007296:	4631      	mov	r1, r6
 8007298:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1c0      	bne.n	8007226 <_printf_float+0x31a>
 80072a4:	e68d      	b.n	8006fc2 <_printf_float+0xb6>
 80072a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072a8:	464b      	mov	r3, r9
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	4442      	add	r2, r8
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	d1c3      	bne.n	800723e <_printf_float+0x332>
 80072b6:	e684      	b.n	8006fc2 <_printf_float+0xb6>
 80072b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80072bc:	f1ba 0f01 	cmp.w	sl, #1
 80072c0:	dc01      	bgt.n	80072c6 <_printf_float+0x3ba>
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d536      	bpl.n	8007334 <_printf_float+0x428>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4642      	mov	r2, r8
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f ae76 	beq.w	8006fc2 <_printf_float+0xb6>
 80072d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f ae6e 	beq.w	8006fc2 <_printf_float+0xb6>
 80072e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072f2:	f7f9 fb59 	bl	80009a8 <__aeabi_dcmpeq>
 80072f6:	b9c0      	cbnz	r0, 800732a <_printf_float+0x41e>
 80072f8:	4653      	mov	r3, sl
 80072fa:	f108 0201 	add.w	r2, r8, #1
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	d10c      	bne.n	8007322 <_printf_float+0x416>
 8007308:	e65b      	b.n	8006fc2 <_printf_float+0xb6>
 800730a:	2301      	movs	r3, #1
 800730c:	465a      	mov	r2, fp
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	f43f ae54 	beq.w	8006fc2 <_printf_float+0xb6>
 800731a:	f108 0801 	add.w	r8, r8, #1
 800731e:	45d0      	cmp	r8, sl
 8007320:	dbf3      	blt.n	800730a <_printf_float+0x3fe>
 8007322:	464b      	mov	r3, r9
 8007324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007328:	e6e0      	b.n	80070ec <_printf_float+0x1e0>
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	f104 0b1a 	add.w	fp, r4, #26
 8007332:	e7f4      	b.n	800731e <_printf_float+0x412>
 8007334:	2301      	movs	r3, #1
 8007336:	4642      	mov	r2, r8
 8007338:	e7e1      	b.n	80072fe <_printf_float+0x3f2>
 800733a:	2301      	movs	r3, #1
 800733c:	464a      	mov	r2, r9
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f ae3c 	beq.w	8006fc2 <_printf_float+0xb6>
 800734a:	f108 0801 	add.w	r8, r8, #1
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007352:	1a5b      	subs	r3, r3, r1
 8007354:	4543      	cmp	r3, r8
 8007356:	dcf0      	bgt.n	800733a <_printf_float+0x42e>
 8007358:	e6fd      	b.n	8007156 <_printf_float+0x24a>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f104 0919 	add.w	r9, r4, #25
 8007362:	e7f4      	b.n	800734e <_printf_float+0x442>

08007364 <_printf_common>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	4616      	mov	r6, r2
 800736a:	4698      	mov	r8, r3
 800736c:	688a      	ldr	r2, [r1, #8]
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	4607      	mov	r7, r0
 8007372:	4293      	cmp	r3, r2
 8007374:	bfb8      	it	lt
 8007376:	4613      	movlt	r3, r2
 8007378:	6033      	str	r3, [r6, #0]
 800737a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800737e:	460c      	mov	r4, r1
 8007380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007384:	b10a      	cbz	r2, 800738a <_printf_common+0x26>
 8007386:	3301      	adds	r3, #1
 8007388:	6033      	str	r3, [r6, #0]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	0699      	lsls	r1, r3, #26
 800738e:	bf42      	ittt	mi
 8007390:	6833      	ldrmi	r3, [r6, #0]
 8007392:	3302      	addmi	r3, #2
 8007394:	6033      	strmi	r3, [r6, #0]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	f015 0506 	ands.w	r5, r5, #6
 800739c:	d106      	bne.n	80073ac <_printf_common+0x48>
 800739e:	f104 0a19 	add.w	sl, r4, #25
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	6832      	ldr	r2, [r6, #0]
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dc2b      	bgt.n	8007404 <_printf_common+0xa0>
 80073ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	3b00      	subs	r3, #0
 80073b4:	bf18      	it	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	0692      	lsls	r2, r2, #26
 80073ba:	d430      	bmi.n	800741e <_printf_common+0xba>
 80073bc:	4641      	mov	r1, r8
 80073be:	4638      	mov	r0, r7
 80073c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073c4:	47c8      	blx	r9
 80073c6:	3001      	adds	r0, #1
 80073c8:	d023      	beq.n	8007412 <_printf_common+0xae>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	f003 0306 	and.w	r3, r3, #6
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	bf14      	ite	ne
 80073d6:	2500      	movne	r5, #0
 80073d8:	6833      	ldreq	r3, [r6, #0]
 80073da:	f04f 0600 	mov.w	r6, #0
 80073de:	bf08      	it	eq
 80073e0:	68e5      	ldreq	r5, [r4, #12]
 80073e2:	f104 041a 	add.w	r4, r4, #26
 80073e6:	bf08      	it	eq
 80073e8:	1aed      	subeq	r5, r5, r3
 80073ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073ee:	bf08      	it	eq
 80073f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f4:	4293      	cmp	r3, r2
 80073f6:	bfc4      	itt	gt
 80073f8:	1a9b      	subgt	r3, r3, r2
 80073fa:	18ed      	addgt	r5, r5, r3
 80073fc:	42b5      	cmp	r5, r6
 80073fe:	d11a      	bne.n	8007436 <_printf_common+0xd2>
 8007400:	2000      	movs	r0, #0
 8007402:	e008      	b.n	8007416 <_printf_common+0xb2>
 8007404:	2301      	movs	r3, #1
 8007406:	4652      	mov	r2, sl
 8007408:	4641      	mov	r1, r8
 800740a:	4638      	mov	r0, r7
 800740c:	47c8      	blx	r9
 800740e:	3001      	adds	r0, #1
 8007410:	d103      	bne.n	800741a <_printf_common+0xb6>
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741a:	3501      	adds	r5, #1
 800741c:	e7c1      	b.n	80073a2 <_printf_common+0x3e>
 800741e:	2030      	movs	r0, #48	@ 0x30
 8007420:	18e1      	adds	r1, r4, r3
 8007422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800742c:	4422      	add	r2, r4
 800742e:	3302      	adds	r3, #2
 8007430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007434:	e7c2      	b.n	80073bc <_printf_common+0x58>
 8007436:	2301      	movs	r3, #1
 8007438:	4622      	mov	r2, r4
 800743a:	4641      	mov	r1, r8
 800743c:	4638      	mov	r0, r7
 800743e:	47c8      	blx	r9
 8007440:	3001      	adds	r0, #1
 8007442:	d0e6      	beq.n	8007412 <_printf_common+0xae>
 8007444:	3601      	adds	r6, #1
 8007446:	e7d9      	b.n	80073fc <_printf_common+0x98>

08007448 <_printf_i>:
 8007448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	7e0f      	ldrb	r7, [r1, #24]
 800744e:	4691      	mov	r9, r2
 8007450:	2f78      	cmp	r7, #120	@ 0x78
 8007452:	4680      	mov	r8, r0
 8007454:	460c      	mov	r4, r1
 8007456:	469a      	mov	sl, r3
 8007458:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800745a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800745e:	d807      	bhi.n	8007470 <_printf_i+0x28>
 8007460:	2f62      	cmp	r7, #98	@ 0x62
 8007462:	d80a      	bhi.n	800747a <_printf_i+0x32>
 8007464:	2f00      	cmp	r7, #0
 8007466:	f000 80d1 	beq.w	800760c <_printf_i+0x1c4>
 800746a:	2f58      	cmp	r7, #88	@ 0x58
 800746c:	f000 80b8 	beq.w	80075e0 <_printf_i+0x198>
 8007470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007478:	e03a      	b.n	80074f0 <_printf_i+0xa8>
 800747a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800747e:	2b15      	cmp	r3, #21
 8007480:	d8f6      	bhi.n	8007470 <_printf_i+0x28>
 8007482:	a101      	add	r1, pc, #4	@ (adr r1, 8007488 <_printf_i+0x40>)
 8007484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074f5 	.word	0x080074f5
 8007490:	08007471 	.word	0x08007471
 8007494:	08007471 	.word	0x08007471
 8007498:	08007471 	.word	0x08007471
 800749c:	08007471 	.word	0x08007471
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	08007471 	.word	0x08007471
 80074a8:	08007471 	.word	0x08007471
 80074ac:	08007471 	.word	0x08007471
 80074b0:	08007471 	.word	0x08007471
 80074b4:	080075f3 	.word	0x080075f3
 80074b8:	0800751f 	.word	0x0800751f
 80074bc:	080075ad 	.word	0x080075ad
 80074c0:	08007471 	.word	0x08007471
 80074c4:	08007471 	.word	0x08007471
 80074c8:	08007615 	.word	0x08007615
 80074cc:	08007471 	.word	0x08007471
 80074d0:	0800751f 	.word	0x0800751f
 80074d4:	08007471 	.word	0x08007471
 80074d8:	08007471 	.word	0x08007471
 80074dc:	080075b5 	.word	0x080075b5
 80074e0:	6833      	ldr	r3, [r6, #0]
 80074e2:	1d1a      	adds	r2, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6032      	str	r2, [r6, #0]
 80074e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074f0:	2301      	movs	r3, #1
 80074f2:	e09c      	b.n	800762e <_printf_i+0x1e6>
 80074f4:	6833      	ldr	r3, [r6, #0]
 80074f6:	6820      	ldr	r0, [r4, #0]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	6031      	str	r1, [r6, #0]
 80074fc:	0606      	lsls	r6, r0, #24
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0xbc>
 8007500:	681d      	ldr	r5, [r3, #0]
 8007502:	e003      	b.n	800750c <_printf_i+0xc4>
 8007504:	0645      	lsls	r5, r0, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0xb8>
 8007508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800750c:	2d00      	cmp	r5, #0
 800750e:	da03      	bge.n	8007518 <_printf_i+0xd0>
 8007510:	232d      	movs	r3, #45	@ 0x2d
 8007512:	426d      	negs	r5, r5
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007518:	230a      	movs	r3, #10
 800751a:	4858      	ldr	r0, [pc, #352]	@ (800767c <_printf_i+0x234>)
 800751c:	e011      	b.n	8007542 <_printf_i+0xfa>
 800751e:	6821      	ldr	r1, [r4, #0]
 8007520:	6833      	ldr	r3, [r6, #0]
 8007522:	0608      	lsls	r0, r1, #24
 8007524:	f853 5b04 	ldr.w	r5, [r3], #4
 8007528:	d402      	bmi.n	8007530 <_printf_i+0xe8>
 800752a:	0649      	lsls	r1, r1, #25
 800752c:	bf48      	it	mi
 800752e:	b2ad      	uxthmi	r5, r5
 8007530:	2f6f      	cmp	r7, #111	@ 0x6f
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	bf14      	ite	ne
 8007536:	230a      	movne	r3, #10
 8007538:	2308      	moveq	r3, #8
 800753a:	4850      	ldr	r0, [pc, #320]	@ (800767c <_printf_i+0x234>)
 800753c:	2100      	movs	r1, #0
 800753e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007542:	6866      	ldr	r6, [r4, #4]
 8007544:	2e00      	cmp	r6, #0
 8007546:	60a6      	str	r6, [r4, #8]
 8007548:	db05      	blt.n	8007556 <_printf_i+0x10e>
 800754a:	6821      	ldr	r1, [r4, #0]
 800754c:	432e      	orrs	r6, r5
 800754e:	f021 0104 	bic.w	r1, r1, #4
 8007552:	6021      	str	r1, [r4, #0]
 8007554:	d04b      	beq.n	80075ee <_printf_i+0x1a6>
 8007556:	4616      	mov	r6, r2
 8007558:	fbb5 f1f3 	udiv	r1, r5, r3
 800755c:	fb03 5711 	mls	r7, r3, r1, r5
 8007560:	5dc7      	ldrb	r7, [r0, r7]
 8007562:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007566:	462f      	mov	r7, r5
 8007568:	42bb      	cmp	r3, r7
 800756a:	460d      	mov	r5, r1
 800756c:	d9f4      	bls.n	8007558 <_printf_i+0x110>
 800756e:	2b08      	cmp	r3, #8
 8007570:	d10b      	bne.n	800758a <_printf_i+0x142>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	07df      	lsls	r7, r3, #31
 8007576:	d508      	bpl.n	800758a <_printf_i+0x142>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	6861      	ldr	r1, [r4, #4]
 800757c:	4299      	cmp	r1, r3
 800757e:	bfde      	ittt	le
 8007580:	2330      	movle	r3, #48	@ 0x30
 8007582:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007586:	f106 36ff 	addle.w	r6, r6, #4294967295
 800758a:	1b92      	subs	r2, r2, r6
 800758c:	6122      	str	r2, [r4, #16]
 800758e:	464b      	mov	r3, r9
 8007590:	4621      	mov	r1, r4
 8007592:	4640      	mov	r0, r8
 8007594:	f8cd a000 	str.w	sl, [sp]
 8007598:	aa03      	add	r2, sp, #12
 800759a:	f7ff fee3 	bl	8007364 <_printf_common>
 800759e:	3001      	adds	r0, #1
 80075a0:	d14a      	bne.n	8007638 <_printf_i+0x1f0>
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295
 80075a6:	b004      	add	sp, #16
 80075a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	f043 0320 	orr.w	r3, r3, #32
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	2778      	movs	r7, #120	@ 0x78
 80075b6:	4832      	ldr	r0, [pc, #200]	@ (8007680 <_printf_i+0x238>)
 80075b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	6831      	ldr	r1, [r6, #0]
 80075c0:	061f      	lsls	r7, r3, #24
 80075c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075c6:	d402      	bmi.n	80075ce <_printf_i+0x186>
 80075c8:	065f      	lsls	r7, r3, #25
 80075ca:	bf48      	it	mi
 80075cc:	b2ad      	uxthmi	r5, r5
 80075ce:	6031      	str	r1, [r6, #0]
 80075d0:	07d9      	lsls	r1, r3, #31
 80075d2:	bf44      	itt	mi
 80075d4:	f043 0320 	orrmi.w	r3, r3, #32
 80075d8:	6023      	strmi	r3, [r4, #0]
 80075da:	b11d      	cbz	r5, 80075e4 <_printf_i+0x19c>
 80075dc:	2310      	movs	r3, #16
 80075de:	e7ad      	b.n	800753c <_printf_i+0xf4>
 80075e0:	4826      	ldr	r0, [pc, #152]	@ (800767c <_printf_i+0x234>)
 80075e2:	e7e9      	b.n	80075b8 <_printf_i+0x170>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	f023 0320 	bic.w	r3, r3, #32
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	e7f6      	b.n	80075dc <_printf_i+0x194>
 80075ee:	4616      	mov	r6, r2
 80075f0:	e7bd      	b.n	800756e <_printf_i+0x126>
 80075f2:	6833      	ldr	r3, [r6, #0]
 80075f4:	6825      	ldr	r5, [r4, #0]
 80075f6:	1d18      	adds	r0, r3, #4
 80075f8:	6961      	ldr	r1, [r4, #20]
 80075fa:	6030      	str	r0, [r6, #0]
 80075fc:	062e      	lsls	r6, r5, #24
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	d501      	bpl.n	8007606 <_printf_i+0x1be>
 8007602:	6019      	str	r1, [r3, #0]
 8007604:	e002      	b.n	800760c <_printf_i+0x1c4>
 8007606:	0668      	lsls	r0, r5, #25
 8007608:	d5fb      	bpl.n	8007602 <_printf_i+0x1ba>
 800760a:	8019      	strh	r1, [r3, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	4616      	mov	r6, r2
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	e7bc      	b.n	800758e <_printf_i+0x146>
 8007614:	6833      	ldr	r3, [r6, #0]
 8007616:	2100      	movs	r1, #0
 8007618:	1d1a      	adds	r2, r3, #4
 800761a:	6032      	str	r2, [r6, #0]
 800761c:	681e      	ldr	r6, [r3, #0]
 800761e:	6862      	ldr	r2, [r4, #4]
 8007620:	4630      	mov	r0, r6
 8007622:	f000 f9d6 	bl	80079d2 <memchr>
 8007626:	b108      	cbz	r0, 800762c <_printf_i+0x1e4>
 8007628:	1b80      	subs	r0, r0, r6
 800762a:	6060      	str	r0, [r4, #4]
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	2300      	movs	r3, #0
 8007632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007636:	e7aa      	b.n	800758e <_printf_i+0x146>
 8007638:	4632      	mov	r2, r6
 800763a:	4649      	mov	r1, r9
 800763c:	4640      	mov	r0, r8
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	47d0      	blx	sl
 8007642:	3001      	adds	r0, #1
 8007644:	d0ad      	beq.n	80075a2 <_printf_i+0x15a>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	079b      	lsls	r3, r3, #30
 800764a:	d413      	bmi.n	8007674 <_printf_i+0x22c>
 800764c:	68e0      	ldr	r0, [r4, #12]
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	4298      	cmp	r0, r3
 8007652:	bfb8      	it	lt
 8007654:	4618      	movlt	r0, r3
 8007656:	e7a6      	b.n	80075a6 <_printf_i+0x15e>
 8007658:	2301      	movs	r3, #1
 800765a:	4632      	mov	r2, r6
 800765c:	4649      	mov	r1, r9
 800765e:	4640      	mov	r0, r8
 8007660:	47d0      	blx	sl
 8007662:	3001      	adds	r0, #1
 8007664:	d09d      	beq.n	80075a2 <_printf_i+0x15a>
 8007666:	3501      	adds	r5, #1
 8007668:	68e3      	ldr	r3, [r4, #12]
 800766a:	9903      	ldr	r1, [sp, #12]
 800766c:	1a5b      	subs	r3, r3, r1
 800766e:	42ab      	cmp	r3, r5
 8007670:	dcf2      	bgt.n	8007658 <_printf_i+0x210>
 8007672:	e7eb      	b.n	800764c <_printf_i+0x204>
 8007674:	2500      	movs	r5, #0
 8007676:	f104 0619 	add.w	r6, r4, #25
 800767a:	e7f5      	b.n	8007668 <_printf_i+0x220>
 800767c:	0800a848 	.word	0x0800a848
 8007680:	0800a859 	.word	0x0800a859

08007684 <std>:
 8007684:	2300      	movs	r3, #0
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	e9c0 3300 	strd	r3, r3, [r0]
 800768e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007692:	6083      	str	r3, [r0, #8]
 8007694:	8181      	strh	r1, [r0, #12]
 8007696:	6643      	str	r3, [r0, #100]	@ 0x64
 8007698:	81c2      	strh	r2, [r0, #14]
 800769a:	6183      	str	r3, [r0, #24]
 800769c:	4619      	mov	r1, r3
 800769e:	2208      	movs	r2, #8
 80076a0:	305c      	adds	r0, #92	@ 0x5c
 80076a2:	f000 f916 	bl	80078d2 <memset>
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <std+0x58>)
 80076a8:	6224      	str	r4, [r4, #32]
 80076aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <std+0x5c>)
 80076ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076b0:	4b0c      	ldr	r3, [pc, #48]	@ (80076e4 <std+0x60>)
 80076b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076b4:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <std+0x64>)
 80076b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80076b8:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <std+0x68>)
 80076ba:	429c      	cmp	r4, r3
 80076bc:	d006      	beq.n	80076cc <std+0x48>
 80076be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076c2:	4294      	cmp	r4, r2
 80076c4:	d002      	beq.n	80076cc <std+0x48>
 80076c6:	33d0      	adds	r3, #208	@ 0xd0
 80076c8:	429c      	cmp	r4, r3
 80076ca:	d105      	bne.n	80076d8 <std+0x54>
 80076cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d4:	f000 b97a 	b.w	80079cc <__retarget_lock_init_recursive>
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	0800784d 	.word	0x0800784d
 80076e0:	0800786f 	.word	0x0800786f
 80076e4:	080078a7 	.word	0x080078a7
 80076e8:	080078cb 	.word	0x080078cb
 80076ec:	20000818 	.word	0x20000818

080076f0 <stdio_exit_handler>:
 80076f0:	4a02      	ldr	r2, [pc, #8]	@ (80076fc <stdio_exit_handler+0xc>)
 80076f2:	4903      	ldr	r1, [pc, #12]	@ (8007700 <stdio_exit_handler+0x10>)
 80076f4:	4803      	ldr	r0, [pc, #12]	@ (8007704 <stdio_exit_handler+0x14>)
 80076f6:	f000 b869 	b.w	80077cc <_fwalk_sglue>
 80076fa:	bf00      	nop
 80076fc:	20000020 	.word	0x20000020
 8007700:	08009349 	.word	0x08009349
 8007704:	20000030 	.word	0x20000030

08007708 <cleanup_stdio>:
 8007708:	6841      	ldr	r1, [r0, #4]
 800770a:	4b0c      	ldr	r3, [pc, #48]	@ (800773c <cleanup_stdio+0x34>)
 800770c:	b510      	push	{r4, lr}
 800770e:	4299      	cmp	r1, r3
 8007710:	4604      	mov	r4, r0
 8007712:	d001      	beq.n	8007718 <cleanup_stdio+0x10>
 8007714:	f001 fe18 	bl	8009348 <_fflush_r>
 8007718:	68a1      	ldr	r1, [r4, #8]
 800771a:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <cleanup_stdio+0x38>)
 800771c:	4299      	cmp	r1, r3
 800771e:	d002      	beq.n	8007726 <cleanup_stdio+0x1e>
 8007720:	4620      	mov	r0, r4
 8007722:	f001 fe11 	bl	8009348 <_fflush_r>
 8007726:	68e1      	ldr	r1, [r4, #12]
 8007728:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <cleanup_stdio+0x3c>)
 800772a:	4299      	cmp	r1, r3
 800772c:	d004      	beq.n	8007738 <cleanup_stdio+0x30>
 800772e:	4620      	mov	r0, r4
 8007730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007734:	f001 be08 	b.w	8009348 <_fflush_r>
 8007738:	bd10      	pop	{r4, pc}
 800773a:	bf00      	nop
 800773c:	20000818 	.word	0x20000818
 8007740:	20000880 	.word	0x20000880
 8007744:	200008e8 	.word	0x200008e8

08007748 <global_stdio_init.part.0>:
 8007748:	b510      	push	{r4, lr}
 800774a:	4b0b      	ldr	r3, [pc, #44]	@ (8007778 <global_stdio_init.part.0+0x30>)
 800774c:	4c0b      	ldr	r4, [pc, #44]	@ (800777c <global_stdio_init.part.0+0x34>)
 800774e:	4a0c      	ldr	r2, [pc, #48]	@ (8007780 <global_stdio_init.part.0+0x38>)
 8007750:	4620      	mov	r0, r4
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	2104      	movs	r1, #4
 8007756:	2200      	movs	r2, #0
 8007758:	f7ff ff94 	bl	8007684 <std>
 800775c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007760:	2201      	movs	r2, #1
 8007762:	2109      	movs	r1, #9
 8007764:	f7ff ff8e 	bl	8007684 <std>
 8007768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800776c:	2202      	movs	r2, #2
 800776e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007772:	2112      	movs	r1, #18
 8007774:	f7ff bf86 	b.w	8007684 <std>
 8007778:	20000950 	.word	0x20000950
 800777c:	20000818 	.word	0x20000818
 8007780:	080076f1 	.word	0x080076f1

08007784 <__sfp_lock_acquire>:
 8007784:	4801      	ldr	r0, [pc, #4]	@ (800778c <__sfp_lock_acquire+0x8>)
 8007786:	f000 b922 	b.w	80079ce <__retarget_lock_acquire_recursive>
 800778a:	bf00      	nop
 800778c:	20000959 	.word	0x20000959

08007790 <__sfp_lock_release>:
 8007790:	4801      	ldr	r0, [pc, #4]	@ (8007798 <__sfp_lock_release+0x8>)
 8007792:	f000 b91d 	b.w	80079d0 <__retarget_lock_release_recursive>
 8007796:	bf00      	nop
 8007798:	20000959 	.word	0x20000959

0800779c <__sinit>:
 800779c:	b510      	push	{r4, lr}
 800779e:	4604      	mov	r4, r0
 80077a0:	f7ff fff0 	bl	8007784 <__sfp_lock_acquire>
 80077a4:	6a23      	ldr	r3, [r4, #32]
 80077a6:	b11b      	cbz	r3, 80077b0 <__sinit+0x14>
 80077a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ac:	f7ff bff0 	b.w	8007790 <__sfp_lock_release>
 80077b0:	4b04      	ldr	r3, [pc, #16]	@ (80077c4 <__sinit+0x28>)
 80077b2:	6223      	str	r3, [r4, #32]
 80077b4:	4b04      	ldr	r3, [pc, #16]	@ (80077c8 <__sinit+0x2c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f5      	bne.n	80077a8 <__sinit+0xc>
 80077bc:	f7ff ffc4 	bl	8007748 <global_stdio_init.part.0>
 80077c0:	e7f2      	b.n	80077a8 <__sinit+0xc>
 80077c2:	bf00      	nop
 80077c4:	08007709 	.word	0x08007709
 80077c8:	20000950 	.word	0x20000950

080077cc <_fwalk_sglue>:
 80077cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d0:	4607      	mov	r7, r0
 80077d2:	4688      	mov	r8, r1
 80077d4:	4614      	mov	r4, r2
 80077d6:	2600      	movs	r6, #0
 80077d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077dc:	f1b9 0901 	subs.w	r9, r9, #1
 80077e0:	d505      	bpl.n	80077ee <_fwalk_sglue+0x22>
 80077e2:	6824      	ldr	r4, [r4, #0]
 80077e4:	2c00      	cmp	r4, #0
 80077e6:	d1f7      	bne.n	80077d8 <_fwalk_sglue+0xc>
 80077e8:	4630      	mov	r0, r6
 80077ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ee:	89ab      	ldrh	r3, [r5, #12]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d907      	bls.n	8007804 <_fwalk_sglue+0x38>
 80077f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077f8:	3301      	adds	r3, #1
 80077fa:	d003      	beq.n	8007804 <_fwalk_sglue+0x38>
 80077fc:	4629      	mov	r1, r5
 80077fe:	4638      	mov	r0, r7
 8007800:	47c0      	blx	r8
 8007802:	4306      	orrs	r6, r0
 8007804:	3568      	adds	r5, #104	@ 0x68
 8007806:	e7e9      	b.n	80077dc <_fwalk_sglue+0x10>

08007808 <siprintf>:
 8007808:	b40e      	push	{r1, r2, r3}
 800780a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800780e:	b510      	push	{r4, lr}
 8007810:	2400      	movs	r4, #0
 8007812:	b09d      	sub	sp, #116	@ 0x74
 8007814:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007816:	9002      	str	r0, [sp, #8]
 8007818:	9006      	str	r0, [sp, #24]
 800781a:	9107      	str	r1, [sp, #28]
 800781c:	9104      	str	r1, [sp, #16]
 800781e:	4809      	ldr	r0, [pc, #36]	@ (8007844 <siprintf+0x3c>)
 8007820:	4909      	ldr	r1, [pc, #36]	@ (8007848 <siprintf+0x40>)
 8007822:	f853 2b04 	ldr.w	r2, [r3], #4
 8007826:	9105      	str	r1, [sp, #20]
 8007828:	6800      	ldr	r0, [r0, #0]
 800782a:	a902      	add	r1, sp, #8
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007830:	f001 fc0e 	bl	8009050 <_svfiprintf_r>
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	701c      	strb	r4, [r3, #0]
 8007838:	b01d      	add	sp, #116	@ 0x74
 800783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783e:	b003      	add	sp, #12
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	2000002c 	.word	0x2000002c
 8007848:	ffff0208 	.word	0xffff0208

0800784c <__sread>:
 800784c:	b510      	push	{r4, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007854:	f000 f86c 	bl	8007930 <_read_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	bfab      	itete	ge
 800785c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800785e:	89a3      	ldrhlt	r3, [r4, #12]
 8007860:	181b      	addge	r3, r3, r0
 8007862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007866:	bfac      	ite	ge
 8007868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800786a:	81a3      	strhlt	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__swrite>:
 800786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	461f      	mov	r7, r3
 8007874:	898b      	ldrh	r3, [r1, #12]
 8007876:	4605      	mov	r5, r0
 8007878:	05db      	lsls	r3, r3, #23
 800787a:	460c      	mov	r4, r1
 800787c:	4616      	mov	r6, r2
 800787e:	d505      	bpl.n	800788c <__swrite+0x1e>
 8007880:	2302      	movs	r3, #2
 8007882:	2200      	movs	r2, #0
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	f000 f840 	bl	800790c <_lseek_r>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	4632      	mov	r2, r6
 8007890:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	4628      	mov	r0, r5
 8007898:	463b      	mov	r3, r7
 800789a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a2:	f000 b857 	b.w	8007954 <_write_r>

080078a6 <__sseek>:
 80078a6:	b510      	push	{r4, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 f82d 	bl	800790c <_lseek_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	bf15      	itete	ne
 80078b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078c2:	81a3      	strheq	r3, [r4, #12]
 80078c4:	bf18      	it	ne
 80078c6:	81a3      	strhne	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__sclose>:
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 b80d 	b.w	80078ec <_close_r>

080078d2 <memset>:
 80078d2:	4603      	mov	r3, r0
 80078d4:	4402      	add	r2, r0
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d100      	bne.n	80078dc <memset+0xa>
 80078da:	4770      	bx	lr
 80078dc:	f803 1b01 	strb.w	r1, [r3], #1
 80078e0:	e7f9      	b.n	80078d6 <memset+0x4>
	...

080078e4 <_localeconv_r>:
 80078e4:	4800      	ldr	r0, [pc, #0]	@ (80078e8 <_localeconv_r+0x4>)
 80078e6:	4770      	bx	lr
 80078e8:	2000016c 	.word	0x2000016c

080078ec <_close_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	2300      	movs	r3, #0
 80078f0:	4d05      	ldr	r5, [pc, #20]	@ (8007908 <_close_r+0x1c>)
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	f7fa fb7d 	bl	8001ff6 <_close>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_close_r+0x1a>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_close_r+0x1a>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20000954 	.word	0x20000954

0800790c <_lseek_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	2200      	movs	r2, #0
 8007916:	4d05      	ldr	r5, [pc, #20]	@ (800792c <_lseek_r+0x20>)
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fa fb8f 	bl	800203e <_lseek>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_lseek_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_lseek_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20000954 	.word	0x20000954

08007930 <_read_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	2200      	movs	r2, #0
 800793a:	4d05      	ldr	r5, [pc, #20]	@ (8007950 <_read_r+0x20>)
 800793c:	602a      	str	r2, [r5, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	f7fa fb20 	bl	8001f84 <_read>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d102      	bne.n	800794e <_read_r+0x1e>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	b103      	cbz	r3, 800794e <_read_r+0x1e>
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	20000954 	.word	0x20000954

08007954 <_write_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	2200      	movs	r2, #0
 800795e:	4d05      	ldr	r5, [pc, #20]	@ (8007974 <_write_r+0x20>)
 8007960:	602a      	str	r2, [r5, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	f7fa fb2b 	bl	8001fbe <_write>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_write_r+0x1e>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	b103      	cbz	r3, 8007972 <_write_r+0x1e>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	20000954 	.word	0x20000954

08007978 <__errno>:
 8007978:	4b01      	ldr	r3, [pc, #4]	@ (8007980 <__errno+0x8>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	2000002c 	.word	0x2000002c

08007984 <__libc_init_array>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	2600      	movs	r6, #0
 8007988:	4d0c      	ldr	r5, [pc, #48]	@ (80079bc <__libc_init_array+0x38>)
 800798a:	4c0d      	ldr	r4, [pc, #52]	@ (80079c0 <__libc_init_array+0x3c>)
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	42a6      	cmp	r6, r4
 8007992:	d109      	bne.n	80079a8 <__libc_init_array+0x24>
 8007994:	f002 f874 	bl	8009a80 <_init>
 8007998:	2600      	movs	r6, #0
 800799a:	4d0a      	ldr	r5, [pc, #40]	@ (80079c4 <__libc_init_array+0x40>)
 800799c:	4c0a      	ldr	r4, [pc, #40]	@ (80079c8 <__libc_init_array+0x44>)
 800799e:	1b64      	subs	r4, r4, r5
 80079a0:	10a4      	asrs	r4, r4, #2
 80079a2:	42a6      	cmp	r6, r4
 80079a4:	d105      	bne.n	80079b2 <__libc_init_array+0x2e>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ac:	4798      	blx	r3
 80079ae:	3601      	adds	r6, #1
 80079b0:	e7ee      	b.n	8007990 <__libc_init_array+0xc>
 80079b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b6:	4798      	blx	r3
 80079b8:	3601      	adds	r6, #1
 80079ba:	e7f2      	b.n	80079a2 <__libc_init_array+0x1e>
 80079bc:	0800abb4 	.word	0x0800abb4
 80079c0:	0800abb4 	.word	0x0800abb4
 80079c4:	0800abb4 	.word	0x0800abb4
 80079c8:	0800abb8 	.word	0x0800abb8

080079cc <__retarget_lock_init_recursive>:
 80079cc:	4770      	bx	lr

080079ce <__retarget_lock_acquire_recursive>:
 80079ce:	4770      	bx	lr

080079d0 <__retarget_lock_release_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <memchr>:
 80079d2:	4603      	mov	r3, r0
 80079d4:	b510      	push	{r4, lr}
 80079d6:	b2c9      	uxtb	r1, r1
 80079d8:	4402      	add	r2, r0
 80079da:	4293      	cmp	r3, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	d101      	bne.n	80079e4 <memchr+0x12>
 80079e0:	2000      	movs	r0, #0
 80079e2:	e003      	b.n	80079ec <memchr+0x1a>
 80079e4:	7804      	ldrb	r4, [r0, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	428c      	cmp	r4, r1
 80079ea:	d1f6      	bne.n	80079da <memchr+0x8>
 80079ec:	bd10      	pop	{r4, pc}

080079ee <quorem>:
 80079ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f2:	6903      	ldr	r3, [r0, #16]
 80079f4:	690c      	ldr	r4, [r1, #16]
 80079f6:	4607      	mov	r7, r0
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	db7e      	blt.n	8007afa <quorem+0x10c>
 80079fc:	3c01      	subs	r4, #1
 80079fe:	00a3      	lsls	r3, r4, #2
 8007a00:	f100 0514 	add.w	r5, r0, #20
 8007a04:	f101 0814 	add.w	r8, r1, #20
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a24:	d32e      	bcc.n	8007a84 <quorem+0x96>
 8007a26:	f04f 0a00 	mov.w	sl, #0
 8007a2a:	46c4      	mov	ip, r8
 8007a2c:	46ae      	mov	lr, r5
 8007a2e:	46d3      	mov	fp, sl
 8007a30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a34:	b298      	uxth	r0, r3
 8007a36:	fb06 a000 	mla	r0, r6, r0, sl
 8007a3a:	0c1b      	lsrs	r3, r3, #16
 8007a3c:	0c02      	lsrs	r2, r0, #16
 8007a3e:	fb06 2303 	mla	r3, r6, r3, r2
 8007a42:	f8de 2000 	ldr.w	r2, [lr]
 8007a46:	b280      	uxth	r0, r0
 8007a48:	b292      	uxth	r2, r2
 8007a4a:	1a12      	subs	r2, r2, r0
 8007a4c:	445a      	add	r2, fp
 8007a4e:	f8de 0000 	ldr.w	r0, [lr]
 8007a52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a60:	b292      	uxth	r2, r2
 8007a62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a66:	45e1      	cmp	r9, ip
 8007a68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a6c:	f84e 2b04 	str.w	r2, [lr], #4
 8007a70:	d2de      	bcs.n	8007a30 <quorem+0x42>
 8007a72:	9b00      	ldr	r3, [sp, #0]
 8007a74:	58eb      	ldr	r3, [r5, r3]
 8007a76:	b92b      	cbnz	r3, 8007a84 <quorem+0x96>
 8007a78:	9b01      	ldr	r3, [sp, #4]
 8007a7a:	3b04      	subs	r3, #4
 8007a7c:	429d      	cmp	r5, r3
 8007a7e:	461a      	mov	r2, r3
 8007a80:	d32f      	bcc.n	8007ae2 <quorem+0xf4>
 8007a82:	613c      	str	r4, [r7, #16]
 8007a84:	4638      	mov	r0, r7
 8007a86:	f001 f97f 	bl	8008d88 <__mcmp>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	db25      	blt.n	8007ada <quorem+0xec>
 8007a8e:	4629      	mov	r1, r5
 8007a90:	2000      	movs	r0, #0
 8007a92:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a96:	f8d1 c000 	ldr.w	ip, [r1]
 8007a9a:	fa1f fe82 	uxth.w	lr, r2
 8007a9e:	fa1f f38c 	uxth.w	r3, ip
 8007aa2:	eba3 030e 	sub.w	r3, r3, lr
 8007aa6:	4403      	add	r3, r0
 8007aa8:	0c12      	lsrs	r2, r2, #16
 8007aaa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007aae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ab8:	45c1      	cmp	r9, r8
 8007aba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007abe:	f841 3b04 	str.w	r3, [r1], #4
 8007ac2:	d2e6      	bcs.n	8007a92 <quorem+0xa4>
 8007ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007acc:	b922      	cbnz	r2, 8007ad8 <quorem+0xea>
 8007ace:	3b04      	subs	r3, #4
 8007ad0:	429d      	cmp	r5, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	d30b      	bcc.n	8007aee <quorem+0x100>
 8007ad6:	613c      	str	r4, [r7, #16]
 8007ad8:	3601      	adds	r6, #1
 8007ada:	4630      	mov	r0, r6
 8007adc:	b003      	add	sp, #12
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d1cb      	bne.n	8007a82 <quorem+0x94>
 8007aea:	3c01      	subs	r4, #1
 8007aec:	e7c6      	b.n	8007a7c <quorem+0x8e>
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d1ef      	bne.n	8007ad6 <quorem+0xe8>
 8007af6:	3c01      	subs	r4, #1
 8007af8:	e7ea      	b.n	8007ad0 <quorem+0xe2>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7ee      	b.n	8007adc <quorem+0xee>
	...

08007b00 <_dtoa_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	4614      	mov	r4, r2
 8007b06:	461d      	mov	r5, r3
 8007b08:	69c7      	ldr	r7, [r0, #28]
 8007b0a:	b097      	sub	sp, #92	@ 0x5c
 8007b0c:	4681      	mov	r9, r0
 8007b0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b12:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007b14:	b97f      	cbnz	r7, 8007b36 <_dtoa_r+0x36>
 8007b16:	2010      	movs	r0, #16
 8007b18:	f000 fe0e 	bl	8008738 <malloc>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b22:	b920      	cbnz	r0, 8007b2e <_dtoa_r+0x2e>
 8007b24:	21ef      	movs	r1, #239	@ 0xef
 8007b26:	4bac      	ldr	r3, [pc, #688]	@ (8007dd8 <_dtoa_r+0x2d8>)
 8007b28:	48ac      	ldr	r0, [pc, #688]	@ (8007ddc <_dtoa_r+0x2dc>)
 8007b2a:	f001 fc6d 	bl	8009408 <__assert_func>
 8007b2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b32:	6007      	str	r7, [r0, #0]
 8007b34:	60c7      	str	r7, [r0, #12]
 8007b36:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b3a:	6819      	ldr	r1, [r3, #0]
 8007b3c:	b159      	cbz	r1, 8007b56 <_dtoa_r+0x56>
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	2301      	movs	r3, #1
 8007b42:	4093      	lsls	r3, r2
 8007b44:	604a      	str	r2, [r1, #4]
 8007b46:	608b      	str	r3, [r1, #8]
 8007b48:	4648      	mov	r0, r9
 8007b4a:	f000 feeb 	bl	8008924 <_Bfree>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	1e2b      	subs	r3, r5, #0
 8007b58:	bfaf      	iteee	ge
 8007b5a:	2300      	movge	r3, #0
 8007b5c:	2201      	movlt	r2, #1
 8007b5e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b62:	9307      	strlt	r3, [sp, #28]
 8007b64:	bfa8      	it	ge
 8007b66:	6033      	strge	r3, [r6, #0]
 8007b68:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8007de0 <_dtoa_r+0x2e0>)
 8007b6e:	bfb8      	it	lt
 8007b70:	6032      	strlt	r2, [r6, #0]
 8007b72:	ea33 0308 	bics.w	r3, r3, r8
 8007b76:	d112      	bne.n	8007b9e <_dtoa_r+0x9e>
 8007b78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b84:	4323      	orrs	r3, r4
 8007b86:	f000 855e 	beq.w	8008646 <_dtoa_r+0xb46>
 8007b8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007de4 <_dtoa_r+0x2e4>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8560 	beq.w	8008656 <_dtoa_r+0xb56>
 8007b96:	f10a 0303 	add.w	r3, sl, #3
 8007b9a:	f000 bd5a 	b.w	8008652 <_dtoa_r+0xb52>
 8007b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007baa:	2200      	movs	r2, #0
 8007bac:	2300      	movs	r3, #0
 8007bae:	f7f8 fefb 	bl	80009a8 <__aeabi_dcmpeq>
 8007bb2:	4607      	mov	r7, r0
 8007bb4:	b158      	cbz	r0, 8007bce <_dtoa_r+0xce>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bbe:	b113      	cbz	r3, 8007bc6 <_dtoa_r+0xc6>
 8007bc0:	4b89      	ldr	r3, [pc, #548]	@ (8007de8 <_dtoa_r+0x2e8>)
 8007bc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007dec <_dtoa_r+0x2ec>
 8007bca:	f000 bd44 	b.w	8008656 <_dtoa_r+0xb56>
 8007bce:	ab14      	add	r3, sp, #80	@ 0x50
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	ab15      	add	r3, sp, #84	@ 0x54
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4648      	mov	r0, r9
 8007bd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bdc:	f001 f984 	bl	8008ee8 <__d2b>
 8007be0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007be4:	9003      	str	r0, [sp, #12]
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	d078      	beq.n	8007cdc <_dtoa_r+0x1dc>
 8007bea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bf0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bf8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bfc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c00:	9712      	str	r7, [sp, #72]	@ 0x48
 8007c02:	4619      	mov	r1, r3
 8007c04:	2200      	movs	r2, #0
 8007c06:	4b7a      	ldr	r3, [pc, #488]	@ (8007df0 <_dtoa_r+0x2f0>)
 8007c08:	f7f8 faae 	bl	8000168 <__aeabi_dsub>
 8007c0c:	a36c      	add	r3, pc, #432	@ (adr r3, 8007dc0 <_dtoa_r+0x2c0>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fc61 	bl	80004d8 <__aeabi_dmul>
 8007c16:	a36c      	add	r3, pc, #432	@ (adr r3, 8007dc8 <_dtoa_r+0x2c8>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 faa6 	bl	800016c <__adddf3>
 8007c20:	4604      	mov	r4, r0
 8007c22:	4630      	mov	r0, r6
 8007c24:	460d      	mov	r5, r1
 8007c26:	f7f8 fbed 	bl	8000404 <__aeabi_i2d>
 8007c2a:	a369      	add	r3, pc, #420	@ (adr r3, 8007dd0 <_dtoa_r+0x2d0>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fc52 	bl	80004d8 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4620      	mov	r0, r4
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	f7f8 fa96 	bl	800016c <__adddf3>
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	f7f8 fef8 	bl	8000a38 <__aeabi_d2iz>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 feb3 	bl	80009bc <__aeabi_dcmplt>
 8007c56:	b140      	cbz	r0, 8007c6a <_dtoa_r+0x16a>
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f7f8 fbd3 	bl	8000404 <__aeabi_i2d>
 8007c5e:	4622      	mov	r2, r4
 8007c60:	462b      	mov	r3, r5
 8007c62:	f7f8 fea1 	bl	80009a8 <__aeabi_dcmpeq>
 8007c66:	b900      	cbnz	r0, 8007c6a <_dtoa_r+0x16a>
 8007c68:	3f01      	subs	r7, #1
 8007c6a:	2f16      	cmp	r7, #22
 8007c6c:	d854      	bhi.n	8007d18 <_dtoa_r+0x218>
 8007c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c72:	4b60      	ldr	r3, [pc, #384]	@ (8007df4 <_dtoa_r+0x2f4>)
 8007c74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fe9e 	bl	80009bc <__aeabi_dcmplt>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d04b      	beq.n	8007d1c <_dtoa_r+0x21c>
 8007c84:	2300      	movs	r3, #0
 8007c86:	3f01      	subs	r7, #1
 8007c88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c8c:	1b9b      	subs	r3, r3, r6
 8007c8e:	1e5a      	subs	r2, r3, #1
 8007c90:	bf49      	itett	mi
 8007c92:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c96:	2300      	movpl	r3, #0
 8007c98:	9304      	strmi	r3, [sp, #16]
 8007c9a:	2300      	movmi	r3, #0
 8007c9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c9e:	bf54      	ite	pl
 8007ca0:	9304      	strpl	r3, [sp, #16]
 8007ca2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	db3b      	blt.n	8007d20 <_dtoa_r+0x220>
 8007ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007caa:	970e      	str	r7, [sp, #56]	@ 0x38
 8007cac:	443b      	add	r3, r7
 8007cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cb6:	2b09      	cmp	r3, #9
 8007cb8:	d865      	bhi.n	8007d86 <_dtoa_r+0x286>
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	bfc4      	itt	gt
 8007cbe:	3b04      	subgt	r3, #4
 8007cc0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007cc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cc4:	bfc8      	it	gt
 8007cc6:	2400      	movgt	r4, #0
 8007cc8:	f1a3 0302 	sub.w	r3, r3, #2
 8007ccc:	bfd8      	it	le
 8007cce:	2401      	movle	r4, #1
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d864      	bhi.n	8007d9e <_dtoa_r+0x29e>
 8007cd4:	e8df f003 	tbb	[pc, r3]
 8007cd8:	2c385553 	.word	0x2c385553
 8007cdc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ce0:	441e      	add	r6, r3
 8007ce2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	bfc1      	itttt	gt
 8007cea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cee:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cfa:	bfd6      	itet	le
 8007cfc:	f1c3 0320 	rsble	r3, r3, #32
 8007d00:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d04:	fa04 f003 	lslle.w	r0, r4, r3
 8007d08:	f7f8 fb6c 	bl	80003e4 <__aeabi_ui2d>
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d12:	3e01      	subs	r6, #1
 8007d14:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d16:	e774      	b.n	8007c02 <_dtoa_r+0x102>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e7b5      	b.n	8007c88 <_dtoa_r+0x188>
 8007d1c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d1e:	e7b4      	b.n	8007c8a <_dtoa_r+0x18a>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	1bdb      	subs	r3, r3, r7
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	427b      	negs	r3, r7
 8007d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d2e:	e7c1      	b.n	8007cb4 <_dtoa_r+0x1b4>
 8007d30:	2301      	movs	r3, #1
 8007d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d36:	eb07 0b03 	add.w	fp, r7, r3
 8007d3a:	f10b 0301 	add.w	r3, fp, #1
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	9308      	str	r3, [sp, #32]
 8007d42:	bfb8      	it	lt
 8007d44:	2301      	movlt	r3, #1
 8007d46:	e006      	b.n	8007d56 <_dtoa_r+0x256>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dd28      	ble.n	8007da4 <_dtoa_r+0x2a4>
 8007d52:	469b      	mov	fp, r3
 8007d54:	9308      	str	r3, [sp, #32]
 8007d56:	2100      	movs	r1, #0
 8007d58:	2204      	movs	r2, #4
 8007d5a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007d5e:	f102 0514 	add.w	r5, r2, #20
 8007d62:	429d      	cmp	r5, r3
 8007d64:	d926      	bls.n	8007db4 <_dtoa_r+0x2b4>
 8007d66:	6041      	str	r1, [r0, #4]
 8007d68:	4648      	mov	r0, r9
 8007d6a:	f000 fd9b 	bl	80088a4 <_Balloc>
 8007d6e:	4682      	mov	sl, r0
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d143      	bne.n	8007dfc <_dtoa_r+0x2fc>
 8007d74:	4602      	mov	r2, r0
 8007d76:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8007df8 <_dtoa_r+0x2f8>)
 8007d7c:	e6d4      	b.n	8007b28 <_dtoa_r+0x28>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e7e3      	b.n	8007d4a <_dtoa_r+0x24a>
 8007d82:	2300      	movs	r3, #0
 8007d84:	e7d5      	b.n	8007d32 <_dtoa_r+0x232>
 8007d86:	2401      	movs	r4, #1
 8007d88:	2300      	movs	r3, #0
 8007d8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d8e:	f04f 3bff 	mov.w	fp, #4294967295
 8007d92:	2200      	movs	r2, #0
 8007d94:	2312      	movs	r3, #18
 8007d96:	f8cd b020 	str.w	fp, [sp, #32]
 8007d9a:	9221      	str	r2, [sp, #132]	@ 0x84
 8007d9c:	e7db      	b.n	8007d56 <_dtoa_r+0x256>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007da2:	e7f4      	b.n	8007d8e <_dtoa_r+0x28e>
 8007da4:	f04f 0b01 	mov.w	fp, #1
 8007da8:	465b      	mov	r3, fp
 8007daa:	f8cd b020 	str.w	fp, [sp, #32]
 8007dae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007db2:	e7d0      	b.n	8007d56 <_dtoa_r+0x256>
 8007db4:	3101      	adds	r1, #1
 8007db6:	0052      	lsls	r2, r2, #1
 8007db8:	e7d1      	b.n	8007d5e <_dtoa_r+0x25e>
 8007dba:	bf00      	nop
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	636f4361 	.word	0x636f4361
 8007dc4:	3fd287a7 	.word	0x3fd287a7
 8007dc8:	8b60c8b3 	.word	0x8b60c8b3
 8007dcc:	3fc68a28 	.word	0x3fc68a28
 8007dd0:	509f79fb 	.word	0x509f79fb
 8007dd4:	3fd34413 	.word	0x3fd34413
 8007dd8:	0800a877 	.word	0x0800a877
 8007ddc:	0800a88e 	.word	0x0800a88e
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	0800a873 	.word	0x0800a873
 8007de8:	0800a847 	.word	0x0800a847
 8007dec:	0800a846 	.word	0x0800a846
 8007df0:	3ff80000 	.word	0x3ff80000
 8007df4:	0800a9e0 	.word	0x0800a9e0
 8007df8:	0800a8e6 	.word	0x0800a8e6
 8007dfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	2b0e      	cmp	r3, #14
 8007e06:	f200 80a1 	bhi.w	8007f4c <_dtoa_r+0x44c>
 8007e0a:	2c00      	cmp	r4, #0
 8007e0c:	f000 809e 	beq.w	8007f4c <_dtoa_r+0x44c>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	dd33      	ble.n	8007e7c <_dtoa_r+0x37c>
 8007e14:	4b9c      	ldr	r3, [pc, #624]	@ (8008088 <_dtoa_r+0x588>)
 8007e16:	f007 020f 	and.w	r2, r7, #15
 8007e1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e1e:	05f8      	lsls	r0, r7, #23
 8007e20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e24:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007e28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e2c:	d516      	bpl.n	8007e5c <_dtoa_r+0x35c>
 8007e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e32:	4b96      	ldr	r3, [pc, #600]	@ (800808c <_dtoa_r+0x58c>)
 8007e34:	2603      	movs	r6, #3
 8007e36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e3a:	f7f8 fc77 	bl	800072c <__aeabi_ddiv>
 8007e3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e42:	f004 040f 	and.w	r4, r4, #15
 8007e46:	4d91      	ldr	r5, [pc, #580]	@ (800808c <_dtoa_r+0x58c>)
 8007e48:	b954      	cbnz	r4, 8007e60 <_dtoa_r+0x360>
 8007e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e52:	f7f8 fc6b 	bl	800072c <__aeabi_ddiv>
 8007e56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e5a:	e028      	b.n	8007eae <_dtoa_r+0x3ae>
 8007e5c:	2602      	movs	r6, #2
 8007e5e:	e7f2      	b.n	8007e46 <_dtoa_r+0x346>
 8007e60:	07e1      	lsls	r1, r4, #31
 8007e62:	d508      	bpl.n	8007e76 <_dtoa_r+0x376>
 8007e64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e6c:	f7f8 fb34 	bl	80004d8 <__aeabi_dmul>
 8007e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e74:	3601      	adds	r6, #1
 8007e76:	1064      	asrs	r4, r4, #1
 8007e78:	3508      	adds	r5, #8
 8007e7a:	e7e5      	b.n	8007e48 <_dtoa_r+0x348>
 8007e7c:	f000 80af 	beq.w	8007fde <_dtoa_r+0x4de>
 8007e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e84:	427c      	negs	r4, r7
 8007e86:	4b80      	ldr	r3, [pc, #512]	@ (8008088 <_dtoa_r+0x588>)
 8007e88:	f004 020f 	and.w	r2, r4, #15
 8007e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 fb20 	bl	80004d8 <__aeabi_dmul>
 8007e98:	2602      	movs	r6, #2
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ea0:	4d7a      	ldr	r5, [pc, #488]	@ (800808c <_dtoa_r+0x58c>)
 8007ea2:	1124      	asrs	r4, r4, #4
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	f040 808f 	bne.w	8007fc8 <_dtoa_r+0x4c8>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1d3      	bne.n	8007e56 <_dtoa_r+0x356>
 8007eae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007eb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8094 	beq.w	8007fe2 <_dtoa_r+0x4e2>
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4b73      	ldr	r3, [pc, #460]	@ (8008090 <_dtoa_r+0x590>)
 8007ec2:	f7f8 fd7b 	bl	80009bc <__aeabi_dcmplt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f000 808b 	beq.w	8007fe2 <_dtoa_r+0x4e2>
 8007ecc:	9b08      	ldr	r3, [sp, #32]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8087 	beq.w	8007fe2 <_dtoa_r+0x4e2>
 8007ed4:	f1bb 0f00 	cmp.w	fp, #0
 8007ed8:	dd34      	ble.n	8007f44 <_dtoa_r+0x444>
 8007eda:	4620      	mov	r0, r4
 8007edc:	2200      	movs	r2, #0
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8008094 <_dtoa_r+0x594>)
 8007ee2:	f7f8 faf9 	bl	80004d8 <__aeabi_dmul>
 8007ee6:	465c      	mov	r4, fp
 8007ee8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007eec:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ef0:	3601      	adds	r6, #1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7f8 fa86 	bl	8000404 <__aeabi_i2d>
 8007ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b65      	ldr	r3, [pc, #404]	@ (8008098 <_dtoa_r+0x598>)
 8007f04:	f7f8 f932 	bl	800016c <__adddf3>
 8007f08:	4605      	mov	r5, r0
 8007f0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	d16a      	bne.n	8007fe8 <_dtoa_r+0x4e8>
 8007f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f16:	2200      	movs	r2, #0
 8007f18:	4b60      	ldr	r3, [pc, #384]	@ (800809c <_dtoa_r+0x59c>)
 8007f1a:	f7f8 f925 	bl	8000168 <__aeabi_dsub>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f26:	462a      	mov	r2, r5
 8007f28:	4633      	mov	r3, r6
 8007f2a:	f7f8 fd65 	bl	80009f8 <__aeabi_dcmpgt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f040 8298 	bne.w	8008464 <_dtoa_r+0x964>
 8007f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f38:	462a      	mov	r2, r5
 8007f3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f3e:	f7f8 fd3d 	bl	80009bc <__aeabi_dcmplt>
 8007f42:	bb38      	cbnz	r0, 8007f94 <_dtoa_r+0x494>
 8007f44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f2c0 8157 	blt.w	8008202 <_dtoa_r+0x702>
 8007f54:	2f0e      	cmp	r7, #14
 8007f56:	f300 8154 	bgt.w	8008202 <_dtoa_r+0x702>
 8007f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008088 <_dtoa_r+0x588>)
 8007f5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f280 80e5 	bge.w	800813a <_dtoa_r+0x63a>
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f300 80e1 	bgt.w	800813a <_dtoa_r+0x63a>
 8007f78:	d10c      	bne.n	8007f94 <_dtoa_r+0x494>
 8007f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4b46      	ldr	r3, [pc, #280]	@ (800809c <_dtoa_r+0x59c>)
 8007f82:	f7f8 faa9 	bl	80004d8 <__aeabi_dmul>
 8007f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f8a:	f7f8 fd2b 	bl	80009e4 <__aeabi_dcmpge>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f000 8266 	beq.w	8008460 <_dtoa_r+0x960>
 8007f94:	2400      	movs	r4, #0
 8007f96:	4625      	mov	r5, r4
 8007f98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f9a:	4656      	mov	r6, sl
 8007f9c:	ea6f 0803 	mvn.w	r8, r3
 8007fa0:	2700      	movs	r7, #0
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	4648      	mov	r0, r9
 8007fa6:	f000 fcbd 	bl	8008924 <_Bfree>
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	f000 80bd 	beq.w	800812a <_dtoa_r+0x62a>
 8007fb0:	b12f      	cbz	r7, 8007fbe <_dtoa_r+0x4be>
 8007fb2:	42af      	cmp	r7, r5
 8007fb4:	d003      	beq.n	8007fbe <_dtoa_r+0x4be>
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4648      	mov	r0, r9
 8007fba:	f000 fcb3 	bl	8008924 <_Bfree>
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	f000 fcaf 	bl	8008924 <_Bfree>
 8007fc6:	e0b0      	b.n	800812a <_dtoa_r+0x62a>
 8007fc8:	07e2      	lsls	r2, r4, #31
 8007fca:	d505      	bpl.n	8007fd8 <_dtoa_r+0x4d8>
 8007fcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fd0:	f7f8 fa82 	bl	80004d8 <__aeabi_dmul>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	3601      	adds	r6, #1
 8007fd8:	1064      	asrs	r4, r4, #1
 8007fda:	3508      	adds	r5, #8
 8007fdc:	e762      	b.n	8007ea4 <_dtoa_r+0x3a4>
 8007fde:	2602      	movs	r6, #2
 8007fe0:	e765      	b.n	8007eae <_dtoa_r+0x3ae>
 8007fe2:	46b8      	mov	r8, r7
 8007fe4:	9c08      	ldr	r4, [sp, #32]
 8007fe6:	e784      	b.n	8007ef2 <_dtoa_r+0x3f2>
 8007fe8:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <_dtoa_r+0x588>)
 8007fea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ff0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ff4:	4454      	add	r4, sl
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d054      	beq.n	80080a4 <_dtoa_r+0x5a4>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	4928      	ldr	r1, [pc, #160]	@ (80080a0 <_dtoa_r+0x5a0>)
 8007ffe:	f7f8 fb95 	bl	800072c <__aeabi_ddiv>
 8008002:	4633      	mov	r3, r6
 8008004:	462a      	mov	r2, r5
 8008006:	f7f8 f8af 	bl	8000168 <__aeabi_dsub>
 800800a:	4656      	mov	r6, sl
 800800c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008014:	f7f8 fd10 	bl	8000a38 <__aeabi_d2iz>
 8008018:	4605      	mov	r5, r0
 800801a:	f7f8 f9f3 	bl	8000404 <__aeabi_i2d>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008026:	f7f8 f89f 	bl	8000168 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	3530      	adds	r5, #48	@ 0x30
 8008030:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008034:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008038:	f806 5b01 	strb.w	r5, [r6], #1
 800803c:	f7f8 fcbe 	bl	80009bc <__aeabi_dcmplt>
 8008040:	2800      	cmp	r0, #0
 8008042:	d172      	bne.n	800812a <_dtoa_r+0x62a>
 8008044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008048:	2000      	movs	r0, #0
 800804a:	4911      	ldr	r1, [pc, #68]	@ (8008090 <_dtoa_r+0x590>)
 800804c:	f7f8 f88c 	bl	8000168 <__aeabi_dsub>
 8008050:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008054:	f7f8 fcb2 	bl	80009bc <__aeabi_dcmplt>
 8008058:	2800      	cmp	r0, #0
 800805a:	f040 80b4 	bne.w	80081c6 <_dtoa_r+0x6c6>
 800805e:	42a6      	cmp	r6, r4
 8008060:	f43f af70 	beq.w	8007f44 <_dtoa_r+0x444>
 8008064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008068:	2200      	movs	r2, #0
 800806a:	4b0a      	ldr	r3, [pc, #40]	@ (8008094 <_dtoa_r+0x594>)
 800806c:	f7f8 fa34 	bl	80004d8 <__aeabi_dmul>
 8008070:	2200      	movs	r2, #0
 8008072:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807a:	4b06      	ldr	r3, [pc, #24]	@ (8008094 <_dtoa_r+0x594>)
 800807c:	f7f8 fa2c 	bl	80004d8 <__aeabi_dmul>
 8008080:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008084:	e7c4      	b.n	8008010 <_dtoa_r+0x510>
 8008086:	bf00      	nop
 8008088:	0800a9e0 	.word	0x0800a9e0
 800808c:	0800a9b8 	.word	0x0800a9b8
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	40240000 	.word	0x40240000
 8008098:	401c0000 	.word	0x401c0000
 800809c:	40140000 	.word	0x40140000
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7f8 fa16 	bl	80004d8 <__aeabi_dmul>
 80080ac:	4656      	mov	r6, sl
 80080ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080b2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80080b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080b8:	f7f8 fcbe 	bl	8000a38 <__aeabi_d2iz>
 80080bc:	4605      	mov	r5, r0
 80080be:	f7f8 f9a1 	bl	8000404 <__aeabi_i2d>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ca:	f7f8 f84d 	bl	8000168 <__aeabi_dsub>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	3530      	adds	r5, #48	@ 0x30
 80080d4:	f806 5b01 	strb.w	r5, [r6], #1
 80080d8:	42a6      	cmp	r6, r4
 80080da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	d124      	bne.n	800812e <_dtoa_r+0x62e>
 80080e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080e8:	4bae      	ldr	r3, [pc, #696]	@ (80083a4 <_dtoa_r+0x8a4>)
 80080ea:	f7f8 f83f 	bl	800016c <__adddf3>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080f6:	f7f8 fc7f 	bl	80009f8 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d163      	bne.n	80081c6 <_dtoa_r+0x6c6>
 80080fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008102:	2000      	movs	r0, #0
 8008104:	49a7      	ldr	r1, [pc, #668]	@ (80083a4 <_dtoa_r+0x8a4>)
 8008106:	f7f8 f82f 	bl	8000168 <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008112:	f7f8 fc53 	bl	80009bc <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f af14 	beq.w	8007f44 <_dtoa_r+0x444>
 800811c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800811e:	1e73      	subs	r3, r6, #1
 8008120:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008122:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008126:	2b30      	cmp	r3, #48	@ 0x30
 8008128:	d0f8      	beq.n	800811c <_dtoa_r+0x61c>
 800812a:	4647      	mov	r7, r8
 800812c:	e03b      	b.n	80081a6 <_dtoa_r+0x6a6>
 800812e:	4b9e      	ldr	r3, [pc, #632]	@ (80083a8 <_dtoa_r+0x8a8>)
 8008130:	f7f8 f9d2 	bl	80004d8 <__aeabi_dmul>
 8008134:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008138:	e7bc      	b.n	80080b4 <_dtoa_r+0x5b4>
 800813a:	4656      	mov	r6, sl
 800813c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 faf0 	bl	800072c <__aeabi_ddiv>
 800814c:	f7f8 fc74 	bl	8000a38 <__aeabi_d2iz>
 8008150:	4680      	mov	r8, r0
 8008152:	f7f8 f957 	bl	8000404 <__aeabi_i2d>
 8008156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800815a:	f7f8 f9bd 	bl	80004d8 <__aeabi_dmul>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f7 ffff 	bl	8000168 <__aeabi_dsub>
 800816a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800816e:	9d08      	ldr	r5, [sp, #32]
 8008170:	f806 4b01 	strb.w	r4, [r6], #1
 8008174:	eba6 040a 	sub.w	r4, r6, sl
 8008178:	42a5      	cmp	r5, r4
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	d133      	bne.n	80081e8 <_dtoa_r+0x6e8>
 8008180:	f7f7 fff4 	bl	800016c <__adddf3>
 8008184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008188:	4604      	mov	r4, r0
 800818a:	460d      	mov	r5, r1
 800818c:	f7f8 fc34 	bl	80009f8 <__aeabi_dcmpgt>
 8008190:	b9c0      	cbnz	r0, 80081c4 <_dtoa_r+0x6c4>
 8008192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008196:	4620      	mov	r0, r4
 8008198:	4629      	mov	r1, r5
 800819a:	f7f8 fc05 	bl	80009a8 <__aeabi_dcmpeq>
 800819e:	b110      	cbz	r0, 80081a6 <_dtoa_r+0x6a6>
 80081a0:	f018 0f01 	tst.w	r8, #1
 80081a4:	d10e      	bne.n	80081c4 <_dtoa_r+0x6c4>
 80081a6:	4648      	mov	r0, r9
 80081a8:	9903      	ldr	r1, [sp, #12]
 80081aa:	f000 fbbb 	bl	8008924 <_Bfree>
 80081ae:	2300      	movs	r3, #0
 80081b0:	7033      	strb	r3, [r6, #0]
 80081b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80081b4:	3701      	adds	r7, #1
 80081b6:	601f      	str	r7, [r3, #0]
 80081b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 824b 	beq.w	8008656 <_dtoa_r+0xb56>
 80081c0:	601e      	str	r6, [r3, #0]
 80081c2:	e248      	b.n	8008656 <_dtoa_r+0xb56>
 80081c4:	46b8      	mov	r8, r7
 80081c6:	4633      	mov	r3, r6
 80081c8:	461e      	mov	r6, r3
 80081ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ce:	2a39      	cmp	r2, #57	@ 0x39
 80081d0:	d106      	bne.n	80081e0 <_dtoa_r+0x6e0>
 80081d2:	459a      	cmp	sl, r3
 80081d4:	d1f8      	bne.n	80081c8 <_dtoa_r+0x6c8>
 80081d6:	2230      	movs	r2, #48	@ 0x30
 80081d8:	f108 0801 	add.w	r8, r8, #1
 80081dc:	f88a 2000 	strb.w	r2, [sl]
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	3201      	adds	r2, #1
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e7a0      	b.n	800812a <_dtoa_r+0x62a>
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b6f      	ldr	r3, [pc, #444]	@ (80083a8 <_dtoa_r+0x8a8>)
 80081ec:	f7f8 f974 	bl	80004d8 <__aeabi_dmul>
 80081f0:	2200      	movs	r2, #0
 80081f2:	2300      	movs	r3, #0
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	f7f8 fbd6 	bl	80009a8 <__aeabi_dcmpeq>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d09f      	beq.n	8008140 <_dtoa_r+0x640>
 8008200:	e7d1      	b.n	80081a6 <_dtoa_r+0x6a6>
 8008202:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008204:	2a00      	cmp	r2, #0
 8008206:	f000 80ea 	beq.w	80083de <_dtoa_r+0x8de>
 800820a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800820c:	2a01      	cmp	r2, #1
 800820e:	f300 80cd 	bgt.w	80083ac <_dtoa_r+0x8ac>
 8008212:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008214:	2a00      	cmp	r2, #0
 8008216:	f000 80c1 	beq.w	800839c <_dtoa_r+0x89c>
 800821a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800821e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008220:	9e04      	ldr	r6, [sp, #16]
 8008222:	9a04      	ldr	r2, [sp, #16]
 8008224:	2101      	movs	r1, #1
 8008226:	441a      	add	r2, r3
 8008228:	9204      	str	r2, [sp, #16]
 800822a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800822c:	4648      	mov	r0, r9
 800822e:	441a      	add	r2, r3
 8008230:	9209      	str	r2, [sp, #36]	@ 0x24
 8008232:	f000 fc2b 	bl	8008a8c <__i2b>
 8008236:	4605      	mov	r5, r0
 8008238:	b166      	cbz	r6, 8008254 <_dtoa_r+0x754>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	dd09      	ble.n	8008254 <_dtoa_r+0x754>
 8008240:	42b3      	cmp	r3, r6
 8008242:	bfa8      	it	ge
 8008244:	4633      	movge	r3, r6
 8008246:	9a04      	ldr	r2, [sp, #16]
 8008248:	1af6      	subs	r6, r6, r3
 800824a:	1ad2      	subs	r2, r2, r3
 800824c:	9204      	str	r2, [sp, #16]
 800824e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	9309      	str	r3, [sp, #36]	@ 0x24
 8008254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008256:	b30b      	cbz	r3, 800829c <_dtoa_r+0x79c>
 8008258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80c6 	beq.w	80083ec <_dtoa_r+0x8ec>
 8008260:	2c00      	cmp	r4, #0
 8008262:	f000 80c0 	beq.w	80083e6 <_dtoa_r+0x8e6>
 8008266:	4629      	mov	r1, r5
 8008268:	4622      	mov	r2, r4
 800826a:	4648      	mov	r0, r9
 800826c:	f000 fcc6 	bl	8008bfc <__pow5mult>
 8008270:	9a03      	ldr	r2, [sp, #12]
 8008272:	4601      	mov	r1, r0
 8008274:	4605      	mov	r5, r0
 8008276:	4648      	mov	r0, r9
 8008278:	f000 fc1e 	bl	8008ab8 <__multiply>
 800827c:	9903      	ldr	r1, [sp, #12]
 800827e:	4680      	mov	r8, r0
 8008280:	4648      	mov	r0, r9
 8008282:	f000 fb4f 	bl	8008924 <_Bfree>
 8008286:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008288:	1b1b      	subs	r3, r3, r4
 800828a:	930a      	str	r3, [sp, #40]	@ 0x28
 800828c:	f000 80b1 	beq.w	80083f2 <_dtoa_r+0x8f2>
 8008290:	4641      	mov	r1, r8
 8008292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fcb1 	bl	8008bfc <__pow5mult>
 800829a:	9003      	str	r0, [sp, #12]
 800829c:	2101      	movs	r1, #1
 800829e:	4648      	mov	r0, r9
 80082a0:	f000 fbf4 	bl	8008a8c <__i2b>
 80082a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082a6:	4604      	mov	r4, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 81d8 	beq.w	800865e <_dtoa_r+0xb5e>
 80082ae:	461a      	mov	r2, r3
 80082b0:	4601      	mov	r1, r0
 80082b2:	4648      	mov	r0, r9
 80082b4:	f000 fca2 	bl	8008bfc <__pow5mult>
 80082b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082ba:	4604      	mov	r4, r0
 80082bc:	2b01      	cmp	r3, #1
 80082be:	f300 809f 	bgt.w	8008400 <_dtoa_r+0x900>
 80082c2:	9b06      	ldr	r3, [sp, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 8097 	bne.w	80083f8 <_dtoa_r+0x8f8>
 80082ca:	9b07      	ldr	r3, [sp, #28]
 80082cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 8093 	bne.w	80083fc <_dtoa_r+0x8fc>
 80082d6:	9b07      	ldr	r3, [sp, #28]
 80082d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082dc:	0d1b      	lsrs	r3, r3, #20
 80082de:	051b      	lsls	r3, r3, #20
 80082e0:	b133      	cbz	r3, 80082f0 <_dtoa_r+0x7f0>
 80082e2:	9b04      	ldr	r3, [sp, #16]
 80082e4:	3301      	adds	r3, #1
 80082e6:	9304      	str	r3, [sp, #16]
 80082e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ea:	3301      	adds	r3, #1
 80082ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ee:	2301      	movs	r3, #1
 80082f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 81b8 	beq.w	800866a <_dtoa_r+0xb6a>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008300:	6918      	ldr	r0, [r3, #16]
 8008302:	f000 fb77 	bl	80089f4 <__hi0bits>
 8008306:	f1c0 0020 	rsb	r0, r0, #32
 800830a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830c:	4418      	add	r0, r3
 800830e:	f010 001f 	ands.w	r0, r0, #31
 8008312:	f000 8082 	beq.w	800841a <_dtoa_r+0x91a>
 8008316:	f1c0 0320 	rsb	r3, r0, #32
 800831a:	2b04      	cmp	r3, #4
 800831c:	dd73      	ble.n	8008406 <_dtoa_r+0x906>
 800831e:	9b04      	ldr	r3, [sp, #16]
 8008320:	f1c0 001c 	rsb	r0, r0, #28
 8008324:	4403      	add	r3, r0
 8008326:	9304      	str	r3, [sp, #16]
 8008328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832a:	4406      	add	r6, r0
 800832c:	4403      	add	r3, r0
 800832e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	dd05      	ble.n	8008342 <_dtoa_r+0x842>
 8008336:	461a      	mov	r2, r3
 8008338:	4648      	mov	r0, r9
 800833a:	9903      	ldr	r1, [sp, #12]
 800833c:	f000 fcb8 	bl	8008cb0 <__lshift>
 8008340:	9003      	str	r0, [sp, #12]
 8008342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	dd05      	ble.n	8008354 <_dtoa_r+0x854>
 8008348:	4621      	mov	r1, r4
 800834a:	461a      	mov	r2, r3
 800834c:	4648      	mov	r0, r9
 800834e:	f000 fcaf 	bl	8008cb0 <__lshift>
 8008352:	4604      	mov	r4, r0
 8008354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d061      	beq.n	800841e <_dtoa_r+0x91e>
 800835a:	4621      	mov	r1, r4
 800835c:	9803      	ldr	r0, [sp, #12]
 800835e:	f000 fd13 	bl	8008d88 <__mcmp>
 8008362:	2800      	cmp	r0, #0
 8008364:	da5b      	bge.n	800841e <_dtoa_r+0x91e>
 8008366:	2300      	movs	r3, #0
 8008368:	220a      	movs	r2, #10
 800836a:	4648      	mov	r0, r9
 800836c:	9903      	ldr	r1, [sp, #12]
 800836e:	f000 fafb 	bl	8008968 <__multadd>
 8008372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008374:	f107 38ff 	add.w	r8, r7, #4294967295
 8008378:	9003      	str	r0, [sp, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8177 	beq.w	800866e <_dtoa_r+0xb6e>
 8008380:	4629      	mov	r1, r5
 8008382:	2300      	movs	r3, #0
 8008384:	220a      	movs	r2, #10
 8008386:	4648      	mov	r0, r9
 8008388:	f000 faee 	bl	8008968 <__multadd>
 800838c:	f1bb 0f00 	cmp.w	fp, #0
 8008390:	4605      	mov	r5, r0
 8008392:	dc6f      	bgt.n	8008474 <_dtoa_r+0x974>
 8008394:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008396:	2b02      	cmp	r3, #2
 8008398:	dc49      	bgt.n	800842e <_dtoa_r+0x92e>
 800839a:	e06b      	b.n	8008474 <_dtoa_r+0x974>
 800839c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800839e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083a2:	e73c      	b.n	800821e <_dtoa_r+0x71e>
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	40240000 	.word	0x40240000
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	1e5c      	subs	r4, r3, #1
 80083b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	db09      	blt.n	80083ca <_dtoa_r+0x8ca>
 80083b6:	1b1c      	subs	r4, r3, r4
 80083b8:	9b08      	ldr	r3, [sp, #32]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f6bf af30 	bge.w	8008220 <_dtoa_r+0x720>
 80083c0:	9b04      	ldr	r3, [sp, #16]
 80083c2:	9a08      	ldr	r2, [sp, #32]
 80083c4:	1a9e      	subs	r6, r3, r2
 80083c6:	2300      	movs	r3, #0
 80083c8:	e72b      	b.n	8008222 <_dtoa_r+0x722>
 80083ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ce:	1ae3      	subs	r3, r4, r3
 80083d0:	441a      	add	r2, r3
 80083d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80083d4:	9e04      	ldr	r6, [sp, #16]
 80083d6:	2400      	movs	r4, #0
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	920e      	str	r2, [sp, #56]	@ 0x38
 80083dc:	e721      	b.n	8008222 <_dtoa_r+0x722>
 80083de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083e0:	9e04      	ldr	r6, [sp, #16]
 80083e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083e4:	e728      	b.n	8008238 <_dtoa_r+0x738>
 80083e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083ea:	e751      	b.n	8008290 <_dtoa_r+0x790>
 80083ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083ee:	9903      	ldr	r1, [sp, #12]
 80083f0:	e750      	b.n	8008294 <_dtoa_r+0x794>
 80083f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f6:	e751      	b.n	800829c <_dtoa_r+0x79c>
 80083f8:	2300      	movs	r3, #0
 80083fa:	e779      	b.n	80082f0 <_dtoa_r+0x7f0>
 80083fc:	9b06      	ldr	r3, [sp, #24]
 80083fe:	e777      	b.n	80082f0 <_dtoa_r+0x7f0>
 8008400:	2300      	movs	r3, #0
 8008402:	930a      	str	r3, [sp, #40]	@ 0x28
 8008404:	e779      	b.n	80082fa <_dtoa_r+0x7fa>
 8008406:	d093      	beq.n	8008330 <_dtoa_r+0x830>
 8008408:	9a04      	ldr	r2, [sp, #16]
 800840a:	331c      	adds	r3, #28
 800840c:	441a      	add	r2, r3
 800840e:	9204      	str	r2, [sp, #16]
 8008410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008412:	441e      	add	r6, r3
 8008414:	441a      	add	r2, r3
 8008416:	9209      	str	r2, [sp, #36]	@ 0x24
 8008418:	e78a      	b.n	8008330 <_dtoa_r+0x830>
 800841a:	4603      	mov	r3, r0
 800841c:	e7f4      	b.n	8008408 <_dtoa_r+0x908>
 800841e:	9b08      	ldr	r3, [sp, #32]
 8008420:	46b8      	mov	r8, r7
 8008422:	2b00      	cmp	r3, #0
 8008424:	dc20      	bgt.n	8008468 <_dtoa_r+0x968>
 8008426:	469b      	mov	fp, r3
 8008428:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800842a:	2b02      	cmp	r3, #2
 800842c:	dd1e      	ble.n	800846c <_dtoa_r+0x96c>
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	f47f adb1 	bne.w	8007f98 <_dtoa_r+0x498>
 8008436:	4621      	mov	r1, r4
 8008438:	465b      	mov	r3, fp
 800843a:	2205      	movs	r2, #5
 800843c:	4648      	mov	r0, r9
 800843e:	f000 fa93 	bl	8008968 <__multadd>
 8008442:	4601      	mov	r1, r0
 8008444:	4604      	mov	r4, r0
 8008446:	9803      	ldr	r0, [sp, #12]
 8008448:	f000 fc9e 	bl	8008d88 <__mcmp>
 800844c:	2800      	cmp	r0, #0
 800844e:	f77f ada3 	ble.w	8007f98 <_dtoa_r+0x498>
 8008452:	4656      	mov	r6, sl
 8008454:	2331      	movs	r3, #49	@ 0x31
 8008456:	f108 0801 	add.w	r8, r8, #1
 800845a:	f806 3b01 	strb.w	r3, [r6], #1
 800845e:	e59f      	b.n	8007fa0 <_dtoa_r+0x4a0>
 8008460:	46b8      	mov	r8, r7
 8008462:	9c08      	ldr	r4, [sp, #32]
 8008464:	4625      	mov	r5, r4
 8008466:	e7f4      	b.n	8008452 <_dtoa_r+0x952>
 8008468:	f8dd b020 	ldr.w	fp, [sp, #32]
 800846c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8101 	beq.w	8008676 <_dtoa_r+0xb76>
 8008474:	2e00      	cmp	r6, #0
 8008476:	dd05      	ble.n	8008484 <_dtoa_r+0x984>
 8008478:	4629      	mov	r1, r5
 800847a:	4632      	mov	r2, r6
 800847c:	4648      	mov	r0, r9
 800847e:	f000 fc17 	bl	8008cb0 <__lshift>
 8008482:	4605      	mov	r5, r0
 8008484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d05c      	beq.n	8008544 <_dtoa_r+0xa44>
 800848a:	4648      	mov	r0, r9
 800848c:	6869      	ldr	r1, [r5, #4]
 800848e:	f000 fa09 	bl	80088a4 <_Balloc>
 8008492:	4606      	mov	r6, r0
 8008494:	b928      	cbnz	r0, 80084a2 <_dtoa_r+0x9a2>
 8008496:	4602      	mov	r2, r0
 8008498:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800849c:	4b80      	ldr	r3, [pc, #512]	@ (80086a0 <_dtoa_r+0xba0>)
 800849e:	f7ff bb43 	b.w	8007b28 <_dtoa_r+0x28>
 80084a2:	692a      	ldr	r2, [r5, #16]
 80084a4:	f105 010c 	add.w	r1, r5, #12
 80084a8:	3202      	adds	r2, #2
 80084aa:	0092      	lsls	r2, r2, #2
 80084ac:	300c      	adds	r0, #12
 80084ae:	f000 ff9d 	bl	80093ec <memcpy>
 80084b2:	2201      	movs	r2, #1
 80084b4:	4631      	mov	r1, r6
 80084b6:	4648      	mov	r0, r9
 80084b8:	f000 fbfa 	bl	8008cb0 <__lshift>
 80084bc:	462f      	mov	r7, r5
 80084be:	4605      	mov	r5, r0
 80084c0:	f10a 0301 	add.w	r3, sl, #1
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	eb0a 030b 	add.w	r3, sl, fp
 80084ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80084cc:	9b06      	ldr	r3, [sp, #24]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084d4:	9b04      	ldr	r3, [sp, #16]
 80084d6:	4621      	mov	r1, r4
 80084d8:	9803      	ldr	r0, [sp, #12]
 80084da:	f103 3bff 	add.w	fp, r3, #4294967295
 80084de:	f7ff fa86 	bl	80079ee <quorem>
 80084e2:	4603      	mov	r3, r0
 80084e4:	4639      	mov	r1, r7
 80084e6:	3330      	adds	r3, #48	@ 0x30
 80084e8:	9006      	str	r0, [sp, #24]
 80084ea:	9803      	ldr	r0, [sp, #12]
 80084ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ee:	f000 fc4b 	bl	8008d88 <__mcmp>
 80084f2:	462a      	mov	r2, r5
 80084f4:	9008      	str	r0, [sp, #32]
 80084f6:	4621      	mov	r1, r4
 80084f8:	4648      	mov	r0, r9
 80084fa:	f000 fc61 	bl	8008dc0 <__mdiff>
 80084fe:	68c2      	ldr	r2, [r0, #12]
 8008500:	4606      	mov	r6, r0
 8008502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008504:	bb02      	cbnz	r2, 8008548 <_dtoa_r+0xa48>
 8008506:	4601      	mov	r1, r0
 8008508:	9803      	ldr	r0, [sp, #12]
 800850a:	f000 fc3d 	bl	8008d88 <__mcmp>
 800850e:	4602      	mov	r2, r0
 8008510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008512:	4631      	mov	r1, r6
 8008514:	4648      	mov	r0, r9
 8008516:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800851a:	f000 fa03 	bl	8008924 <_Bfree>
 800851e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008520:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008522:	9e04      	ldr	r6, [sp, #16]
 8008524:	ea42 0103 	orr.w	r1, r2, r3
 8008528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852a:	4319      	orrs	r1, r3
 800852c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800852e:	d10d      	bne.n	800854c <_dtoa_r+0xa4c>
 8008530:	2b39      	cmp	r3, #57	@ 0x39
 8008532:	d027      	beq.n	8008584 <_dtoa_r+0xa84>
 8008534:	9a08      	ldr	r2, [sp, #32]
 8008536:	2a00      	cmp	r2, #0
 8008538:	dd01      	ble.n	800853e <_dtoa_r+0xa3e>
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	3331      	adds	r3, #49	@ 0x31
 800853e:	f88b 3000 	strb.w	r3, [fp]
 8008542:	e52e      	b.n	8007fa2 <_dtoa_r+0x4a2>
 8008544:	4628      	mov	r0, r5
 8008546:	e7b9      	b.n	80084bc <_dtoa_r+0x9bc>
 8008548:	2201      	movs	r2, #1
 800854a:	e7e2      	b.n	8008512 <_dtoa_r+0xa12>
 800854c:	9908      	ldr	r1, [sp, #32]
 800854e:	2900      	cmp	r1, #0
 8008550:	db04      	blt.n	800855c <_dtoa_r+0xa5c>
 8008552:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008554:	4301      	orrs	r1, r0
 8008556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008558:	4301      	orrs	r1, r0
 800855a:	d120      	bne.n	800859e <_dtoa_r+0xa9e>
 800855c:	2a00      	cmp	r2, #0
 800855e:	ddee      	ble.n	800853e <_dtoa_r+0xa3e>
 8008560:	2201      	movs	r2, #1
 8008562:	9903      	ldr	r1, [sp, #12]
 8008564:	4648      	mov	r0, r9
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	f000 fba2 	bl	8008cb0 <__lshift>
 800856c:	4621      	mov	r1, r4
 800856e:	9003      	str	r0, [sp, #12]
 8008570:	f000 fc0a 	bl	8008d88 <__mcmp>
 8008574:	2800      	cmp	r0, #0
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	dc02      	bgt.n	8008580 <_dtoa_r+0xa80>
 800857a:	d1e0      	bne.n	800853e <_dtoa_r+0xa3e>
 800857c:	07da      	lsls	r2, r3, #31
 800857e:	d5de      	bpl.n	800853e <_dtoa_r+0xa3e>
 8008580:	2b39      	cmp	r3, #57	@ 0x39
 8008582:	d1da      	bne.n	800853a <_dtoa_r+0xa3a>
 8008584:	2339      	movs	r3, #57	@ 0x39
 8008586:	f88b 3000 	strb.w	r3, [fp]
 800858a:	4633      	mov	r3, r6
 800858c:	461e      	mov	r6, r3
 800858e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008592:	3b01      	subs	r3, #1
 8008594:	2a39      	cmp	r2, #57	@ 0x39
 8008596:	d04e      	beq.n	8008636 <_dtoa_r+0xb36>
 8008598:	3201      	adds	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e501      	b.n	8007fa2 <_dtoa_r+0x4a2>
 800859e:	2a00      	cmp	r2, #0
 80085a0:	dd03      	ble.n	80085aa <_dtoa_r+0xaaa>
 80085a2:	2b39      	cmp	r3, #57	@ 0x39
 80085a4:	d0ee      	beq.n	8008584 <_dtoa_r+0xa84>
 80085a6:	3301      	adds	r3, #1
 80085a8:	e7c9      	b.n	800853e <_dtoa_r+0xa3e>
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085b2:	428a      	cmp	r2, r1
 80085b4:	d028      	beq.n	8008608 <_dtoa_r+0xb08>
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	9903      	ldr	r1, [sp, #12]
 80085bc:	4648      	mov	r0, r9
 80085be:	f000 f9d3 	bl	8008968 <__multadd>
 80085c2:	42af      	cmp	r7, r5
 80085c4:	9003      	str	r0, [sp, #12]
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	f04f 020a 	mov.w	r2, #10
 80085ce:	4639      	mov	r1, r7
 80085d0:	4648      	mov	r0, r9
 80085d2:	d107      	bne.n	80085e4 <_dtoa_r+0xae4>
 80085d4:	f000 f9c8 	bl	8008968 <__multadd>
 80085d8:	4607      	mov	r7, r0
 80085da:	4605      	mov	r5, r0
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	3301      	adds	r3, #1
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	e777      	b.n	80084d4 <_dtoa_r+0x9d4>
 80085e4:	f000 f9c0 	bl	8008968 <__multadd>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4607      	mov	r7, r0
 80085ec:	2300      	movs	r3, #0
 80085ee:	220a      	movs	r2, #10
 80085f0:	4648      	mov	r0, r9
 80085f2:	f000 f9b9 	bl	8008968 <__multadd>
 80085f6:	4605      	mov	r5, r0
 80085f8:	e7f0      	b.n	80085dc <_dtoa_r+0xadc>
 80085fa:	f1bb 0f00 	cmp.w	fp, #0
 80085fe:	bfcc      	ite	gt
 8008600:	465e      	movgt	r6, fp
 8008602:	2601      	movle	r6, #1
 8008604:	2700      	movs	r7, #0
 8008606:	4456      	add	r6, sl
 8008608:	2201      	movs	r2, #1
 800860a:	9903      	ldr	r1, [sp, #12]
 800860c:	4648      	mov	r0, r9
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	f000 fb4e 	bl	8008cb0 <__lshift>
 8008614:	4621      	mov	r1, r4
 8008616:	9003      	str	r0, [sp, #12]
 8008618:	f000 fbb6 	bl	8008d88 <__mcmp>
 800861c:	2800      	cmp	r0, #0
 800861e:	dcb4      	bgt.n	800858a <_dtoa_r+0xa8a>
 8008620:	d102      	bne.n	8008628 <_dtoa_r+0xb28>
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	07db      	lsls	r3, r3, #31
 8008626:	d4b0      	bmi.n	800858a <_dtoa_r+0xa8a>
 8008628:	4633      	mov	r3, r6
 800862a:	461e      	mov	r6, r3
 800862c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008630:	2a30      	cmp	r2, #48	@ 0x30
 8008632:	d0fa      	beq.n	800862a <_dtoa_r+0xb2a>
 8008634:	e4b5      	b.n	8007fa2 <_dtoa_r+0x4a2>
 8008636:	459a      	cmp	sl, r3
 8008638:	d1a8      	bne.n	800858c <_dtoa_r+0xa8c>
 800863a:	2331      	movs	r3, #49	@ 0x31
 800863c:	f108 0801 	add.w	r8, r8, #1
 8008640:	f88a 3000 	strb.w	r3, [sl]
 8008644:	e4ad      	b.n	8007fa2 <_dtoa_r+0x4a2>
 8008646:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008648:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80086a4 <_dtoa_r+0xba4>
 800864c:	b11b      	cbz	r3, 8008656 <_dtoa_r+0xb56>
 800864e:	f10a 0308 	add.w	r3, sl, #8
 8008652:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	4650      	mov	r0, sl
 8008658:	b017      	add	sp, #92	@ 0x5c
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008660:	2b01      	cmp	r3, #1
 8008662:	f77f ae2e 	ble.w	80082c2 <_dtoa_r+0x7c2>
 8008666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008668:	930a      	str	r3, [sp, #40]	@ 0x28
 800866a:	2001      	movs	r0, #1
 800866c:	e64d      	b.n	800830a <_dtoa_r+0x80a>
 800866e:	f1bb 0f00 	cmp.w	fp, #0
 8008672:	f77f aed9 	ble.w	8008428 <_dtoa_r+0x928>
 8008676:	4656      	mov	r6, sl
 8008678:	4621      	mov	r1, r4
 800867a:	9803      	ldr	r0, [sp, #12]
 800867c:	f7ff f9b7 	bl	80079ee <quorem>
 8008680:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008684:	f806 3b01 	strb.w	r3, [r6], #1
 8008688:	eba6 020a 	sub.w	r2, r6, sl
 800868c:	4593      	cmp	fp, r2
 800868e:	ddb4      	ble.n	80085fa <_dtoa_r+0xafa>
 8008690:	2300      	movs	r3, #0
 8008692:	220a      	movs	r2, #10
 8008694:	4648      	mov	r0, r9
 8008696:	9903      	ldr	r1, [sp, #12]
 8008698:	f000 f966 	bl	8008968 <__multadd>
 800869c:	9003      	str	r0, [sp, #12]
 800869e:	e7eb      	b.n	8008678 <_dtoa_r+0xb78>
 80086a0:	0800a8e6 	.word	0x0800a8e6
 80086a4:	0800a86a 	.word	0x0800a86a

080086a8 <_free_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4605      	mov	r5, r0
 80086ac:	2900      	cmp	r1, #0
 80086ae:	d040      	beq.n	8008732 <_free_r+0x8a>
 80086b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b4:	1f0c      	subs	r4, r1, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfb8      	it	lt
 80086ba:	18e4      	addlt	r4, r4, r3
 80086bc:	f000 f8e6 	bl	800888c <__malloc_lock>
 80086c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008734 <_free_r+0x8c>)
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	b933      	cbnz	r3, 80086d4 <_free_r+0x2c>
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	6014      	str	r4, [r2, #0]
 80086ca:	4628      	mov	r0, r5
 80086cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d0:	f000 b8e2 	b.w	8008898 <__malloc_unlock>
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d908      	bls.n	80086ea <_free_r+0x42>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	1821      	adds	r1, r4, r0
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf01      	itttt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	1809      	addeq	r1, r1, r0
 80086e6:	6021      	streq	r1, [r4, #0]
 80086e8:	e7ed      	b.n	80086c6 <_free_r+0x1e>
 80086ea:	461a      	mov	r2, r3
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	b10b      	cbz	r3, 80086f4 <_free_r+0x4c>
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	d9fa      	bls.n	80086ea <_free_r+0x42>
 80086f4:	6811      	ldr	r1, [r2, #0]
 80086f6:	1850      	adds	r0, r2, r1
 80086f8:	42a0      	cmp	r0, r4
 80086fa:	d10b      	bne.n	8008714 <_free_r+0x6c>
 80086fc:	6820      	ldr	r0, [r4, #0]
 80086fe:	4401      	add	r1, r0
 8008700:	1850      	adds	r0, r2, r1
 8008702:	4283      	cmp	r3, r0
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	d1e0      	bne.n	80086ca <_free_r+0x22>
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	4408      	add	r0, r1
 800870e:	6010      	str	r0, [r2, #0]
 8008710:	6053      	str	r3, [r2, #4]
 8008712:	e7da      	b.n	80086ca <_free_r+0x22>
 8008714:	d902      	bls.n	800871c <_free_r+0x74>
 8008716:	230c      	movs	r3, #12
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	e7d6      	b.n	80086ca <_free_r+0x22>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	1821      	adds	r1, r4, r0
 8008720:	428b      	cmp	r3, r1
 8008722:	bf01      	itttt	eq
 8008724:	6819      	ldreq	r1, [r3, #0]
 8008726:	685b      	ldreq	r3, [r3, #4]
 8008728:	1809      	addeq	r1, r1, r0
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	6063      	str	r3, [r4, #4]
 800872e:	6054      	str	r4, [r2, #4]
 8008730:	e7cb      	b.n	80086ca <_free_r+0x22>
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	20000960 	.word	0x20000960

08008738 <malloc>:
 8008738:	4b02      	ldr	r3, [pc, #8]	@ (8008744 <malloc+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f000 b825 	b.w	800878c <_malloc_r>
 8008742:	bf00      	nop
 8008744:	2000002c 	.word	0x2000002c

08008748 <sbrk_aligned>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4e0f      	ldr	r6, [pc, #60]	@ (8008788 <sbrk_aligned+0x40>)
 800874c:	460c      	mov	r4, r1
 800874e:	6831      	ldr	r1, [r6, #0]
 8008750:	4605      	mov	r5, r0
 8008752:	b911      	cbnz	r1, 800875a <sbrk_aligned+0x12>
 8008754:	f000 fe3a 	bl	80093cc <_sbrk_r>
 8008758:	6030      	str	r0, [r6, #0]
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f000 fe35 	bl	80093cc <_sbrk_r>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d103      	bne.n	800876e <sbrk_aligned+0x26>
 8008766:	f04f 34ff 	mov.w	r4, #4294967295
 800876a:	4620      	mov	r0, r4
 800876c:	bd70      	pop	{r4, r5, r6, pc}
 800876e:	1cc4      	adds	r4, r0, #3
 8008770:	f024 0403 	bic.w	r4, r4, #3
 8008774:	42a0      	cmp	r0, r4
 8008776:	d0f8      	beq.n	800876a <sbrk_aligned+0x22>
 8008778:	1a21      	subs	r1, r4, r0
 800877a:	4628      	mov	r0, r5
 800877c:	f000 fe26 	bl	80093cc <_sbrk_r>
 8008780:	3001      	adds	r0, #1
 8008782:	d1f2      	bne.n	800876a <sbrk_aligned+0x22>
 8008784:	e7ef      	b.n	8008766 <sbrk_aligned+0x1e>
 8008786:	bf00      	nop
 8008788:	2000095c 	.word	0x2000095c

0800878c <_malloc_r>:
 800878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008790:	1ccd      	adds	r5, r1, #3
 8008792:	f025 0503 	bic.w	r5, r5, #3
 8008796:	3508      	adds	r5, #8
 8008798:	2d0c      	cmp	r5, #12
 800879a:	bf38      	it	cc
 800879c:	250c      	movcc	r5, #12
 800879e:	2d00      	cmp	r5, #0
 80087a0:	4606      	mov	r6, r0
 80087a2:	db01      	blt.n	80087a8 <_malloc_r+0x1c>
 80087a4:	42a9      	cmp	r1, r5
 80087a6:	d904      	bls.n	80087b2 <_malloc_r+0x26>
 80087a8:	230c      	movs	r3, #12
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008888 <_malloc_r+0xfc>
 80087b6:	f000 f869 	bl	800888c <__malloc_lock>
 80087ba:	f8d8 3000 	ldr.w	r3, [r8]
 80087be:	461c      	mov	r4, r3
 80087c0:	bb44      	cbnz	r4, 8008814 <_malloc_r+0x88>
 80087c2:	4629      	mov	r1, r5
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ffbf 	bl	8008748 <sbrk_aligned>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	4604      	mov	r4, r0
 80087ce:	d158      	bne.n	8008882 <_malloc_r+0xf6>
 80087d0:	f8d8 4000 	ldr.w	r4, [r8]
 80087d4:	4627      	mov	r7, r4
 80087d6:	2f00      	cmp	r7, #0
 80087d8:	d143      	bne.n	8008862 <_malloc_r+0xd6>
 80087da:	2c00      	cmp	r4, #0
 80087dc:	d04b      	beq.n	8008876 <_malloc_r+0xea>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4639      	mov	r1, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	eb04 0903 	add.w	r9, r4, r3
 80087e8:	f000 fdf0 	bl	80093cc <_sbrk_r>
 80087ec:	4581      	cmp	r9, r0
 80087ee:	d142      	bne.n	8008876 <_malloc_r+0xea>
 80087f0:	6821      	ldr	r1, [r4, #0]
 80087f2:	4630      	mov	r0, r6
 80087f4:	1a6d      	subs	r5, r5, r1
 80087f6:	4629      	mov	r1, r5
 80087f8:	f7ff ffa6 	bl	8008748 <sbrk_aligned>
 80087fc:	3001      	adds	r0, #1
 80087fe:	d03a      	beq.n	8008876 <_malloc_r+0xea>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	442b      	add	r3, r5
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	f8d8 3000 	ldr.w	r3, [r8]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	bb62      	cbnz	r2, 8008868 <_malloc_r+0xdc>
 800880e:	f8c8 7000 	str.w	r7, [r8]
 8008812:	e00f      	b.n	8008834 <_malloc_r+0xa8>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	1b52      	subs	r2, r2, r5
 8008818:	d420      	bmi.n	800885c <_malloc_r+0xd0>
 800881a:	2a0b      	cmp	r2, #11
 800881c:	d917      	bls.n	800884e <_malloc_r+0xc2>
 800881e:	1961      	adds	r1, r4, r5
 8008820:	42a3      	cmp	r3, r4
 8008822:	6025      	str	r5, [r4, #0]
 8008824:	bf18      	it	ne
 8008826:	6059      	strne	r1, [r3, #4]
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	bf08      	it	eq
 800882c:	f8c8 1000 	streq.w	r1, [r8]
 8008830:	5162      	str	r2, [r4, r5]
 8008832:	604b      	str	r3, [r1, #4]
 8008834:	4630      	mov	r0, r6
 8008836:	f000 f82f 	bl	8008898 <__malloc_unlock>
 800883a:	f104 000b 	add.w	r0, r4, #11
 800883e:	1d23      	adds	r3, r4, #4
 8008840:	f020 0007 	bic.w	r0, r0, #7
 8008844:	1ac2      	subs	r2, r0, r3
 8008846:	bf1c      	itt	ne
 8008848:	1a1b      	subne	r3, r3, r0
 800884a:	50a3      	strne	r3, [r4, r2]
 800884c:	e7af      	b.n	80087ae <_malloc_r+0x22>
 800884e:	6862      	ldr	r2, [r4, #4]
 8008850:	42a3      	cmp	r3, r4
 8008852:	bf0c      	ite	eq
 8008854:	f8c8 2000 	streq.w	r2, [r8]
 8008858:	605a      	strne	r2, [r3, #4]
 800885a:	e7eb      	b.n	8008834 <_malloc_r+0xa8>
 800885c:	4623      	mov	r3, r4
 800885e:	6864      	ldr	r4, [r4, #4]
 8008860:	e7ae      	b.n	80087c0 <_malloc_r+0x34>
 8008862:	463c      	mov	r4, r7
 8008864:	687f      	ldr	r7, [r7, #4]
 8008866:	e7b6      	b.n	80087d6 <_malloc_r+0x4a>
 8008868:	461a      	mov	r2, r3
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	42a3      	cmp	r3, r4
 800886e:	d1fb      	bne.n	8008868 <_malloc_r+0xdc>
 8008870:	2300      	movs	r3, #0
 8008872:	6053      	str	r3, [r2, #4]
 8008874:	e7de      	b.n	8008834 <_malloc_r+0xa8>
 8008876:	230c      	movs	r3, #12
 8008878:	4630      	mov	r0, r6
 800887a:	6033      	str	r3, [r6, #0]
 800887c:	f000 f80c 	bl	8008898 <__malloc_unlock>
 8008880:	e794      	b.n	80087ac <_malloc_r+0x20>
 8008882:	6005      	str	r5, [r0, #0]
 8008884:	e7d6      	b.n	8008834 <_malloc_r+0xa8>
 8008886:	bf00      	nop
 8008888:	20000960 	.word	0x20000960

0800888c <__malloc_lock>:
 800888c:	4801      	ldr	r0, [pc, #4]	@ (8008894 <__malloc_lock+0x8>)
 800888e:	f7ff b89e 	b.w	80079ce <__retarget_lock_acquire_recursive>
 8008892:	bf00      	nop
 8008894:	20000958 	.word	0x20000958

08008898 <__malloc_unlock>:
 8008898:	4801      	ldr	r0, [pc, #4]	@ (80088a0 <__malloc_unlock+0x8>)
 800889a:	f7ff b899 	b.w	80079d0 <__retarget_lock_release_recursive>
 800889e:	bf00      	nop
 80088a0:	20000958 	.word	0x20000958

080088a4 <_Balloc>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	69c6      	ldr	r6, [r0, #28]
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	b976      	cbnz	r6, 80088cc <_Balloc+0x28>
 80088ae:	2010      	movs	r0, #16
 80088b0:	f7ff ff42 	bl	8008738 <malloc>
 80088b4:	4602      	mov	r2, r0
 80088b6:	61e0      	str	r0, [r4, #28]
 80088b8:	b920      	cbnz	r0, 80088c4 <_Balloc+0x20>
 80088ba:	216b      	movs	r1, #107	@ 0x6b
 80088bc:	4b17      	ldr	r3, [pc, #92]	@ (800891c <_Balloc+0x78>)
 80088be:	4818      	ldr	r0, [pc, #96]	@ (8008920 <_Balloc+0x7c>)
 80088c0:	f000 fda2 	bl	8009408 <__assert_func>
 80088c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c8:	6006      	str	r6, [r0, #0]
 80088ca:	60c6      	str	r6, [r0, #12]
 80088cc:	69e6      	ldr	r6, [r4, #28]
 80088ce:	68f3      	ldr	r3, [r6, #12]
 80088d0:	b183      	cbz	r3, 80088f4 <_Balloc+0x50>
 80088d2:	69e3      	ldr	r3, [r4, #28]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088da:	b9b8      	cbnz	r0, 800890c <_Balloc+0x68>
 80088dc:	2101      	movs	r1, #1
 80088de:	fa01 f605 	lsl.w	r6, r1, r5
 80088e2:	1d72      	adds	r2, r6, #5
 80088e4:	4620      	mov	r0, r4
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	f000 fdac 	bl	8009444 <_calloc_r>
 80088ec:	b160      	cbz	r0, 8008908 <_Balloc+0x64>
 80088ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088f2:	e00e      	b.n	8008912 <_Balloc+0x6e>
 80088f4:	2221      	movs	r2, #33	@ 0x21
 80088f6:	2104      	movs	r1, #4
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fda3 	bl	8009444 <_calloc_r>
 80088fe:	69e3      	ldr	r3, [r4, #28]
 8008900:	60f0      	str	r0, [r6, #12]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e4      	bne.n	80088d2 <_Balloc+0x2e>
 8008908:	2000      	movs	r0, #0
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	6802      	ldr	r2, [r0, #0]
 800890e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008912:	2300      	movs	r3, #0
 8008914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008918:	e7f7      	b.n	800890a <_Balloc+0x66>
 800891a:	bf00      	nop
 800891c:	0800a877 	.word	0x0800a877
 8008920:	0800a8f7 	.word	0x0800a8f7

08008924 <_Bfree>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	69c6      	ldr	r6, [r0, #28]
 8008928:	4605      	mov	r5, r0
 800892a:	460c      	mov	r4, r1
 800892c:	b976      	cbnz	r6, 800894c <_Bfree+0x28>
 800892e:	2010      	movs	r0, #16
 8008930:	f7ff ff02 	bl	8008738 <malloc>
 8008934:	4602      	mov	r2, r0
 8008936:	61e8      	str	r0, [r5, #28]
 8008938:	b920      	cbnz	r0, 8008944 <_Bfree+0x20>
 800893a:	218f      	movs	r1, #143	@ 0x8f
 800893c:	4b08      	ldr	r3, [pc, #32]	@ (8008960 <_Bfree+0x3c>)
 800893e:	4809      	ldr	r0, [pc, #36]	@ (8008964 <_Bfree+0x40>)
 8008940:	f000 fd62 	bl	8009408 <__assert_func>
 8008944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008948:	6006      	str	r6, [r0, #0]
 800894a:	60c6      	str	r6, [r0, #12]
 800894c:	b13c      	cbz	r4, 800895e <_Bfree+0x3a>
 800894e:	69eb      	ldr	r3, [r5, #28]
 8008950:	6862      	ldr	r2, [r4, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008958:	6021      	str	r1, [r4, #0]
 800895a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	0800a877 	.word	0x0800a877
 8008964:	0800a8f7 	.word	0x0800a8f7

08008968 <__multadd>:
 8008968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896c:	4607      	mov	r7, r0
 800896e:	460c      	mov	r4, r1
 8008970:	461e      	mov	r6, r3
 8008972:	2000      	movs	r0, #0
 8008974:	690d      	ldr	r5, [r1, #16]
 8008976:	f101 0c14 	add.w	ip, r1, #20
 800897a:	f8dc 3000 	ldr.w	r3, [ip]
 800897e:	3001      	adds	r0, #1
 8008980:	b299      	uxth	r1, r3
 8008982:	fb02 6101 	mla	r1, r2, r1, r6
 8008986:	0c1e      	lsrs	r6, r3, #16
 8008988:	0c0b      	lsrs	r3, r1, #16
 800898a:	fb02 3306 	mla	r3, r2, r6, r3
 800898e:	b289      	uxth	r1, r1
 8008990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008994:	4285      	cmp	r5, r0
 8008996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800899a:	f84c 1b04 	str.w	r1, [ip], #4
 800899e:	dcec      	bgt.n	800897a <__multadd+0x12>
 80089a0:	b30e      	cbz	r6, 80089e6 <__multadd+0x7e>
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	dc19      	bgt.n	80089dc <__multadd+0x74>
 80089a8:	6861      	ldr	r1, [r4, #4]
 80089aa:	4638      	mov	r0, r7
 80089ac:	3101      	adds	r1, #1
 80089ae:	f7ff ff79 	bl	80088a4 <_Balloc>
 80089b2:	4680      	mov	r8, r0
 80089b4:	b928      	cbnz	r0, 80089c2 <__multadd+0x5a>
 80089b6:	4602      	mov	r2, r0
 80089b8:	21ba      	movs	r1, #186	@ 0xba
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <__multadd+0x84>)
 80089bc:	480c      	ldr	r0, [pc, #48]	@ (80089f0 <__multadd+0x88>)
 80089be:	f000 fd23 	bl	8009408 <__assert_func>
 80089c2:	6922      	ldr	r2, [r4, #16]
 80089c4:	f104 010c 	add.w	r1, r4, #12
 80089c8:	3202      	adds	r2, #2
 80089ca:	0092      	lsls	r2, r2, #2
 80089cc:	300c      	adds	r0, #12
 80089ce:	f000 fd0d 	bl	80093ec <memcpy>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff ffa5 	bl	8008924 <_Bfree>
 80089da:	4644      	mov	r4, r8
 80089dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e0:	3501      	adds	r5, #1
 80089e2:	615e      	str	r6, [r3, #20]
 80089e4:	6125      	str	r5, [r4, #16]
 80089e6:	4620      	mov	r0, r4
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	0800a8e6 	.word	0x0800a8e6
 80089f0:	0800a8f7 	.word	0x0800a8f7

080089f4 <__hi0bits>:
 80089f4:	4603      	mov	r3, r0
 80089f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089fa:	bf3a      	itte	cc
 80089fc:	0403      	lslcc	r3, r0, #16
 80089fe:	2010      	movcc	r0, #16
 8008a00:	2000      	movcs	r0, #0
 8008a02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a06:	bf3c      	itt	cc
 8008a08:	021b      	lslcc	r3, r3, #8
 8008a0a:	3008      	addcc	r0, #8
 8008a0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a10:	bf3c      	itt	cc
 8008a12:	011b      	lslcc	r3, r3, #4
 8008a14:	3004      	addcc	r0, #4
 8008a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1a:	bf3c      	itt	cc
 8008a1c:	009b      	lslcc	r3, r3, #2
 8008a1e:	3002      	addcc	r0, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db05      	blt.n	8008a30 <__hi0bits+0x3c>
 8008a24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a28:	f100 0001 	add.w	r0, r0, #1
 8008a2c:	bf08      	it	eq
 8008a2e:	2020      	moveq	r0, #32
 8008a30:	4770      	bx	lr

08008a32 <__lo0bits>:
 8008a32:	6803      	ldr	r3, [r0, #0]
 8008a34:	4602      	mov	r2, r0
 8008a36:	f013 0007 	ands.w	r0, r3, #7
 8008a3a:	d00b      	beq.n	8008a54 <__lo0bits+0x22>
 8008a3c:	07d9      	lsls	r1, r3, #31
 8008a3e:	d421      	bmi.n	8008a84 <__lo0bits+0x52>
 8008a40:	0798      	lsls	r0, r3, #30
 8008a42:	bf49      	itett	mi
 8008a44:	085b      	lsrmi	r3, r3, #1
 8008a46:	089b      	lsrpl	r3, r3, #2
 8008a48:	2001      	movmi	r0, #1
 8008a4a:	6013      	strmi	r3, [r2, #0]
 8008a4c:	bf5c      	itt	pl
 8008a4e:	2002      	movpl	r0, #2
 8008a50:	6013      	strpl	r3, [r2, #0]
 8008a52:	4770      	bx	lr
 8008a54:	b299      	uxth	r1, r3
 8008a56:	b909      	cbnz	r1, 8008a5c <__lo0bits+0x2a>
 8008a58:	2010      	movs	r0, #16
 8008a5a:	0c1b      	lsrs	r3, r3, #16
 8008a5c:	b2d9      	uxtb	r1, r3
 8008a5e:	b909      	cbnz	r1, 8008a64 <__lo0bits+0x32>
 8008a60:	3008      	adds	r0, #8
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	0719      	lsls	r1, r3, #28
 8008a66:	bf04      	itt	eq
 8008a68:	091b      	lsreq	r3, r3, #4
 8008a6a:	3004      	addeq	r0, #4
 8008a6c:	0799      	lsls	r1, r3, #30
 8008a6e:	bf04      	itt	eq
 8008a70:	089b      	lsreq	r3, r3, #2
 8008a72:	3002      	addeq	r0, #2
 8008a74:	07d9      	lsls	r1, r3, #31
 8008a76:	d403      	bmi.n	8008a80 <__lo0bits+0x4e>
 8008a78:	085b      	lsrs	r3, r3, #1
 8008a7a:	f100 0001 	add.w	r0, r0, #1
 8008a7e:	d003      	beq.n	8008a88 <__lo0bits+0x56>
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	4770      	bx	lr
 8008a84:	2000      	movs	r0, #0
 8008a86:	4770      	bx	lr
 8008a88:	2020      	movs	r0, #32
 8008a8a:	4770      	bx	lr

08008a8c <__i2b>:
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	460c      	mov	r4, r1
 8008a90:	2101      	movs	r1, #1
 8008a92:	f7ff ff07 	bl	80088a4 <_Balloc>
 8008a96:	4602      	mov	r2, r0
 8008a98:	b928      	cbnz	r0, 8008aa6 <__i2b+0x1a>
 8008a9a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a9e:	4b04      	ldr	r3, [pc, #16]	@ (8008ab0 <__i2b+0x24>)
 8008aa0:	4804      	ldr	r0, [pc, #16]	@ (8008ab4 <__i2b+0x28>)
 8008aa2:	f000 fcb1 	bl	8009408 <__assert_func>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	6144      	str	r4, [r0, #20]
 8008aaa:	6103      	str	r3, [r0, #16]
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop
 8008ab0:	0800a8e6 	.word	0x0800a8e6
 8008ab4:	0800a8f7 	.word	0x0800a8f7

08008ab8 <__multiply>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	4617      	mov	r7, r2
 8008abe:	690a      	ldr	r2, [r1, #16]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	4689      	mov	r9, r1
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	bfa2      	ittt	ge
 8008ac8:	463b      	movge	r3, r7
 8008aca:	460f      	movge	r7, r1
 8008acc:	4699      	movge	r9, r3
 8008ace:	693d      	ldr	r5, [r7, #16]
 8008ad0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	eb05 060a 	add.w	r6, r5, sl
 8008adc:	42b3      	cmp	r3, r6
 8008ade:	b085      	sub	sp, #20
 8008ae0:	bfb8      	it	lt
 8008ae2:	3101      	addlt	r1, #1
 8008ae4:	f7ff fede 	bl	80088a4 <_Balloc>
 8008ae8:	b930      	cbnz	r0, 8008af8 <__multiply+0x40>
 8008aea:	4602      	mov	r2, r0
 8008aec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008af0:	4b40      	ldr	r3, [pc, #256]	@ (8008bf4 <__multiply+0x13c>)
 8008af2:	4841      	ldr	r0, [pc, #260]	@ (8008bf8 <__multiply+0x140>)
 8008af4:	f000 fc88 	bl	8009408 <__assert_func>
 8008af8:	f100 0414 	add.w	r4, r0, #20
 8008afc:	4623      	mov	r3, r4
 8008afe:	2200      	movs	r2, #0
 8008b00:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b04:	4573      	cmp	r3, lr
 8008b06:	d320      	bcc.n	8008b4a <__multiply+0x92>
 8008b08:	f107 0814 	add.w	r8, r7, #20
 8008b0c:	f109 0114 	add.w	r1, r9, #20
 8008b10:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b14:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b18:	9302      	str	r3, [sp, #8]
 8008b1a:	1beb      	subs	r3, r5, r7
 8008b1c:	3b15      	subs	r3, #21
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	3304      	adds	r3, #4
 8008b24:	3715      	adds	r7, #21
 8008b26:	42bd      	cmp	r5, r7
 8008b28:	bf38      	it	cc
 8008b2a:	2304      	movcc	r3, #4
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	9b02      	ldr	r3, [sp, #8]
 8008b30:	9103      	str	r1, [sp, #12]
 8008b32:	428b      	cmp	r3, r1
 8008b34:	d80c      	bhi.n	8008b50 <__multiply+0x98>
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	dd03      	ble.n	8008b42 <__multiply+0x8a>
 8008b3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d055      	beq.n	8008bee <__multiply+0x136>
 8008b42:	6106      	str	r6, [r0, #16]
 8008b44:	b005      	add	sp, #20
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	f843 2b04 	str.w	r2, [r3], #4
 8008b4e:	e7d9      	b.n	8008b04 <__multiply+0x4c>
 8008b50:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b54:	f1ba 0f00 	cmp.w	sl, #0
 8008b58:	d01f      	beq.n	8008b9a <__multiply+0xe2>
 8008b5a:	46c4      	mov	ip, r8
 8008b5c:	46a1      	mov	r9, r4
 8008b5e:	2700      	movs	r7, #0
 8008b60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b64:	f8d9 3000 	ldr.w	r3, [r9]
 8008b68:	fa1f fb82 	uxth.w	fp, r2
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b72:	443b      	add	r3, r7
 8008b74:	f8d9 7000 	ldr.w	r7, [r9]
 8008b78:	0c12      	lsrs	r2, r2, #16
 8008b7a:	0c3f      	lsrs	r7, r7, #16
 8008b7c:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b80:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b8a:	4565      	cmp	r5, ip
 8008b8c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b90:	f849 3b04 	str.w	r3, [r9], #4
 8008b94:	d8e4      	bhi.n	8008b60 <__multiply+0xa8>
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	50e7      	str	r7, [r4, r3]
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3104      	adds	r1, #4
 8008b9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	d020      	beq.n	8008bea <__multiply+0x132>
 8008ba8:	4647      	mov	r7, r8
 8008baa:	46a4      	mov	ip, r4
 8008bac:	f04f 0a00 	mov.w	sl, #0
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	f8b7 b000 	ldrh.w	fp, [r7]
 8008bb6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	fb09 220b 	mla	r2, r9, fp, r2
 8008bc0:	4452      	add	r2, sl
 8008bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bc6:	f84c 3b04 	str.w	r3, [ip], #4
 8008bca:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bd2:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bd6:	42bd      	cmp	r5, r7
 8008bd8:	fb09 330a 	mla	r3, r9, sl, r3
 8008bdc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008be4:	d8e5      	bhi.n	8008bb2 <__multiply+0xfa>
 8008be6:	9a01      	ldr	r2, [sp, #4]
 8008be8:	50a3      	str	r3, [r4, r2]
 8008bea:	3404      	adds	r4, #4
 8008bec:	e79f      	b.n	8008b2e <__multiply+0x76>
 8008bee:	3e01      	subs	r6, #1
 8008bf0:	e7a1      	b.n	8008b36 <__multiply+0x7e>
 8008bf2:	bf00      	nop
 8008bf4:	0800a8e6 	.word	0x0800a8e6
 8008bf8:	0800a8f7 	.word	0x0800a8f7

08008bfc <__pow5mult>:
 8008bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	4615      	mov	r5, r2
 8008c02:	f012 0203 	ands.w	r2, r2, #3
 8008c06:	4607      	mov	r7, r0
 8008c08:	460e      	mov	r6, r1
 8008c0a:	d007      	beq.n	8008c1c <__pow5mult+0x20>
 8008c0c:	4c25      	ldr	r4, [pc, #148]	@ (8008ca4 <__pow5mult+0xa8>)
 8008c0e:	3a01      	subs	r2, #1
 8008c10:	2300      	movs	r3, #0
 8008c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c16:	f7ff fea7 	bl	8008968 <__multadd>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	10ad      	asrs	r5, r5, #2
 8008c1e:	d03d      	beq.n	8008c9c <__pow5mult+0xa0>
 8008c20:	69fc      	ldr	r4, [r7, #28]
 8008c22:	b97c      	cbnz	r4, 8008c44 <__pow5mult+0x48>
 8008c24:	2010      	movs	r0, #16
 8008c26:	f7ff fd87 	bl	8008738 <malloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	61f8      	str	r0, [r7, #28]
 8008c2e:	b928      	cbnz	r0, 8008c3c <__pow5mult+0x40>
 8008c30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c34:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca8 <__pow5mult+0xac>)
 8008c36:	481d      	ldr	r0, [pc, #116]	@ (8008cac <__pow5mult+0xb0>)
 8008c38:	f000 fbe6 	bl	8009408 <__assert_func>
 8008c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c40:	6004      	str	r4, [r0, #0]
 8008c42:	60c4      	str	r4, [r0, #12]
 8008c44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c4c:	b94c      	cbnz	r4, 8008c62 <__pow5mult+0x66>
 8008c4e:	f240 2171 	movw	r1, #625	@ 0x271
 8008c52:	4638      	mov	r0, r7
 8008c54:	f7ff ff1a 	bl	8008a8c <__i2b>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	07eb      	lsls	r3, r5, #31
 8008c68:	d50a      	bpl.n	8008c80 <__pow5mult+0x84>
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f7ff ff22 	bl	8008ab8 <__multiply>
 8008c74:	4680      	mov	r8, r0
 8008c76:	4631      	mov	r1, r6
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff fe53 	bl	8008924 <_Bfree>
 8008c7e:	4646      	mov	r6, r8
 8008c80:	106d      	asrs	r5, r5, #1
 8008c82:	d00b      	beq.n	8008c9c <__pow5mult+0xa0>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	b938      	cbnz	r0, 8008c98 <__pow5mult+0x9c>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f7ff ff13 	bl	8008ab8 <__multiply>
 8008c92:	6020      	str	r0, [r4, #0]
 8008c94:	f8c0 9000 	str.w	r9, [r0]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	e7e4      	b.n	8008c66 <__pow5mult+0x6a>
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800a9a8 	.word	0x0800a9a8
 8008ca8:	0800a877 	.word	0x0800a877
 8008cac:	0800a8f7 	.word	0x0800a8f7

08008cb0 <__lshift>:
 8008cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	4691      	mov	r9, r2
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	6849      	ldr	r1, [r1, #4]
 8008cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cc8:	f108 0601 	add.w	r6, r8, #1
 8008ccc:	42b3      	cmp	r3, r6
 8008cce:	db0b      	blt.n	8008ce8 <__lshift+0x38>
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7ff fde7 	bl	80088a4 <_Balloc>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b948      	cbnz	r0, 8008cee <__lshift+0x3e>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ce0:	4b27      	ldr	r3, [pc, #156]	@ (8008d80 <__lshift+0xd0>)
 8008ce2:	4828      	ldr	r0, [pc, #160]	@ (8008d84 <__lshift+0xd4>)
 8008ce4:	f000 fb90 	bl	8009408 <__assert_func>
 8008ce8:	3101      	adds	r1, #1
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	e7ee      	b.n	8008ccc <__lshift+0x1c>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f100 0114 	add.w	r1, r0, #20
 8008cf4:	f100 0210 	add.w	r2, r0, #16
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	4553      	cmp	r3, sl
 8008cfc:	db33      	blt.n	8008d66 <__lshift+0xb6>
 8008cfe:	6920      	ldr	r0, [r4, #16]
 8008d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d04:	f104 0314 	add.w	r3, r4, #20
 8008d08:	f019 091f 	ands.w	r9, r9, #31
 8008d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d14:	d02b      	beq.n	8008d6e <__lshift+0xbe>
 8008d16:	468a      	mov	sl, r1
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	fa00 f009 	lsl.w	r0, r0, r9
 8008d24:	4310      	orrs	r0, r2
 8008d26:	f84a 0b04 	str.w	r0, [sl], #4
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	459c      	cmp	ip, r3
 8008d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d34:	d8f3      	bhi.n	8008d1e <__lshift+0x6e>
 8008d36:	ebac 0304 	sub.w	r3, ip, r4
 8008d3a:	3b15      	subs	r3, #21
 8008d3c:	f023 0303 	bic.w	r3, r3, #3
 8008d40:	3304      	adds	r3, #4
 8008d42:	f104 0015 	add.w	r0, r4, #21
 8008d46:	4560      	cmp	r0, ip
 8008d48:	bf88      	it	hi
 8008d4a:	2304      	movhi	r3, #4
 8008d4c:	50ca      	str	r2, [r1, r3]
 8008d4e:	b10a      	cbz	r2, 8008d54 <__lshift+0xa4>
 8008d50:	f108 0602 	add.w	r6, r8, #2
 8008d54:	3e01      	subs	r6, #1
 8008d56:	4638      	mov	r0, r7
 8008d58:	4621      	mov	r1, r4
 8008d5a:	612e      	str	r6, [r5, #16]
 8008d5c:	f7ff fde2 	bl	8008924 <_Bfree>
 8008d60:	4628      	mov	r0, r5
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	e7c5      	b.n	8008cfa <__lshift+0x4a>
 8008d6e:	3904      	subs	r1, #4
 8008d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d74:	459c      	cmp	ip, r3
 8008d76:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d7a:	d8f9      	bhi.n	8008d70 <__lshift+0xc0>
 8008d7c:	e7ea      	b.n	8008d54 <__lshift+0xa4>
 8008d7e:	bf00      	nop
 8008d80:	0800a8e6 	.word	0x0800a8e6
 8008d84:	0800a8f7 	.word	0x0800a8f7

08008d88 <__mcmp>:
 8008d88:	4603      	mov	r3, r0
 8008d8a:	690a      	ldr	r2, [r1, #16]
 8008d8c:	6900      	ldr	r0, [r0, #16]
 8008d8e:	b530      	push	{r4, r5, lr}
 8008d90:	1a80      	subs	r0, r0, r2
 8008d92:	d10e      	bne.n	8008db2 <__mcmp+0x2a>
 8008d94:	3314      	adds	r3, #20
 8008d96:	3114      	adds	r1, #20
 8008d98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008da0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008da4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008da8:	4295      	cmp	r5, r2
 8008daa:	d003      	beq.n	8008db4 <__mcmp+0x2c>
 8008dac:	d205      	bcs.n	8008dba <__mcmp+0x32>
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	bd30      	pop	{r4, r5, pc}
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d3f3      	bcc.n	8008da0 <__mcmp+0x18>
 8008db8:	e7fb      	b.n	8008db2 <__mcmp+0x2a>
 8008dba:	2001      	movs	r0, #1
 8008dbc:	e7f9      	b.n	8008db2 <__mcmp+0x2a>
	...

08008dc0 <__mdiff>:
 8008dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4689      	mov	r9, r1
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4648      	mov	r0, r9
 8008dcc:	4614      	mov	r4, r2
 8008dce:	f7ff ffdb 	bl	8008d88 <__mcmp>
 8008dd2:	1e05      	subs	r5, r0, #0
 8008dd4:	d112      	bne.n	8008dfc <__mdiff+0x3c>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff fd63 	bl	80088a4 <_Balloc>
 8008dde:	4602      	mov	r2, r0
 8008de0:	b928      	cbnz	r0, 8008dee <__mdiff+0x2e>
 8008de2:	f240 2137 	movw	r1, #567	@ 0x237
 8008de6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee0 <__mdiff+0x120>)
 8008de8:	483e      	ldr	r0, [pc, #248]	@ (8008ee4 <__mdiff+0x124>)
 8008dea:	f000 fb0d 	bl	8009408 <__assert_func>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df4:	4610      	mov	r0, r2
 8008df6:	b003      	add	sp, #12
 8008df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	bfbc      	itt	lt
 8008dfe:	464b      	movlt	r3, r9
 8008e00:	46a1      	movlt	r9, r4
 8008e02:	4630      	mov	r0, r6
 8008e04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e08:	bfba      	itte	lt
 8008e0a:	461c      	movlt	r4, r3
 8008e0c:	2501      	movlt	r5, #1
 8008e0e:	2500      	movge	r5, #0
 8008e10:	f7ff fd48 	bl	80088a4 <_Balloc>
 8008e14:	4602      	mov	r2, r0
 8008e16:	b918      	cbnz	r0, 8008e20 <__mdiff+0x60>
 8008e18:	f240 2145 	movw	r1, #581	@ 0x245
 8008e1c:	4b30      	ldr	r3, [pc, #192]	@ (8008ee0 <__mdiff+0x120>)
 8008e1e:	e7e3      	b.n	8008de8 <__mdiff+0x28>
 8008e20:	f100 0b14 	add.w	fp, r0, #20
 8008e24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e28:	f109 0310 	add.w	r3, r9, #16
 8008e2c:	60c5      	str	r5, [r0, #12]
 8008e2e:	f04f 0c00 	mov.w	ip, #0
 8008e32:	f109 0514 	add.w	r5, r9, #20
 8008e36:	46d9      	mov	r9, fp
 8008e38:	6926      	ldr	r6, [r4, #16]
 8008e3a:	f104 0e14 	add.w	lr, r4, #20
 8008e3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e42:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e52:	b281      	uxth	r1, r0
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	fa1f f38a 	uxth.w	r3, sl
 8008e5a:	1a5b      	subs	r3, r3, r1
 8008e5c:	0c00      	lsrs	r0, r0, #16
 8008e5e:	4463      	add	r3, ip
 8008e60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e6e:	4576      	cmp	r6, lr
 8008e70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e74:	f849 3b04 	str.w	r3, [r9], #4
 8008e78:	d8e6      	bhi.n	8008e48 <__mdiff+0x88>
 8008e7a:	1b33      	subs	r3, r6, r4
 8008e7c:	3b15      	subs	r3, #21
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	3415      	adds	r4, #21
 8008e84:	3304      	adds	r3, #4
 8008e86:	42a6      	cmp	r6, r4
 8008e88:	bf38      	it	cc
 8008e8a:	2304      	movcc	r3, #4
 8008e8c:	441d      	add	r5, r3
 8008e8e:	445b      	add	r3, fp
 8008e90:	461e      	mov	r6, r3
 8008e92:	462c      	mov	r4, r5
 8008e94:	4544      	cmp	r4, r8
 8008e96:	d30e      	bcc.n	8008eb6 <__mdiff+0xf6>
 8008e98:	f108 0103 	add.w	r1, r8, #3
 8008e9c:	1b49      	subs	r1, r1, r5
 8008e9e:	f021 0103 	bic.w	r1, r1, #3
 8008ea2:	3d03      	subs	r5, #3
 8008ea4:	45a8      	cmp	r8, r5
 8008ea6:	bf38      	it	cc
 8008ea8:	2100      	movcc	r1, #0
 8008eaa:	440b      	add	r3, r1
 8008eac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eb0:	b199      	cbz	r1, 8008eda <__mdiff+0x11a>
 8008eb2:	6117      	str	r7, [r2, #16]
 8008eb4:	e79e      	b.n	8008df4 <__mdiff+0x34>
 8008eb6:	46e6      	mov	lr, ip
 8008eb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ebc:	fa1f fc81 	uxth.w	ip, r1
 8008ec0:	44f4      	add	ip, lr
 8008ec2:	0c08      	lsrs	r0, r1, #16
 8008ec4:	4471      	add	r1, lr
 8008ec6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008eca:	b289      	uxth	r1, r1
 8008ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ed4:	f846 1b04 	str.w	r1, [r6], #4
 8008ed8:	e7dc      	b.n	8008e94 <__mdiff+0xd4>
 8008eda:	3f01      	subs	r7, #1
 8008edc:	e7e6      	b.n	8008eac <__mdiff+0xec>
 8008ede:	bf00      	nop
 8008ee0:	0800a8e6 	.word	0x0800a8e6
 8008ee4:	0800a8f7 	.word	0x0800a8f7

08008ee8 <__d2b>:
 8008ee8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008eec:	2101      	movs	r1, #1
 8008eee:	4690      	mov	r8, r2
 8008ef0:	4699      	mov	r9, r3
 8008ef2:	9e08      	ldr	r6, [sp, #32]
 8008ef4:	f7ff fcd6 	bl	80088a4 <_Balloc>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	b930      	cbnz	r0, 8008f0a <__d2b+0x22>
 8008efc:	4602      	mov	r2, r0
 8008efe:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f02:	4b23      	ldr	r3, [pc, #140]	@ (8008f90 <__d2b+0xa8>)
 8008f04:	4823      	ldr	r0, [pc, #140]	@ (8008f94 <__d2b+0xac>)
 8008f06:	f000 fa7f 	bl	8009408 <__assert_func>
 8008f0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f12:	b10d      	cbz	r5, 8008f18 <__d2b+0x30>
 8008f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	f1b8 0300 	subs.w	r3, r8, #0
 8008f1e:	d024      	beq.n	8008f6a <__d2b+0x82>
 8008f20:	4668      	mov	r0, sp
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	f7ff fd85 	bl	8008a32 <__lo0bits>
 8008f28:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f2c:	b1d8      	cbz	r0, 8008f66 <__d2b+0x7e>
 8008f2e:	f1c0 0320 	rsb	r3, r0, #32
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	430b      	orrs	r3, r1
 8008f38:	40c2      	lsrs	r2, r0
 8008f3a:	6163      	str	r3, [r4, #20]
 8008f3c:	9201      	str	r2, [sp, #4]
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bf0c      	ite	eq
 8008f44:	2201      	moveq	r2, #1
 8008f46:	2202      	movne	r2, #2
 8008f48:	61a3      	str	r3, [r4, #24]
 8008f4a:	6122      	str	r2, [r4, #16]
 8008f4c:	b1ad      	cbz	r5, 8008f7a <__d2b+0x92>
 8008f4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f52:	4405      	add	r5, r0
 8008f54:	6035      	str	r5, [r6, #0]
 8008f56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5c:	6018      	str	r0, [r3, #0]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	b002      	add	sp, #8
 8008f62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008f66:	6161      	str	r1, [r4, #20]
 8008f68:	e7e9      	b.n	8008f3e <__d2b+0x56>
 8008f6a:	a801      	add	r0, sp, #4
 8008f6c:	f7ff fd61 	bl	8008a32 <__lo0bits>
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	6163      	str	r3, [r4, #20]
 8008f76:	3020      	adds	r0, #32
 8008f78:	e7e7      	b.n	8008f4a <__d2b+0x62>
 8008f7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f82:	6030      	str	r0, [r6, #0]
 8008f84:	6918      	ldr	r0, [r3, #16]
 8008f86:	f7ff fd35 	bl	80089f4 <__hi0bits>
 8008f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f8e:	e7e4      	b.n	8008f5a <__d2b+0x72>
 8008f90:	0800a8e6 	.word	0x0800a8e6
 8008f94:	0800a8f7 	.word	0x0800a8f7

08008f98 <__ssputs_r>:
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	461f      	mov	r7, r3
 8008f9e:	688e      	ldr	r6, [r1, #8]
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	42be      	cmp	r6, r7
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4690      	mov	r8, r2
 8008fa8:	680b      	ldr	r3, [r1, #0]
 8008faa:	d82d      	bhi.n	8009008 <__ssputs_r+0x70>
 8008fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fb4:	d026      	beq.n	8009004 <__ssputs_r+0x6c>
 8008fb6:	6965      	ldr	r5, [r4, #20]
 8008fb8:	6909      	ldr	r1, [r1, #16]
 8008fba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fbe:	eba3 0901 	sub.w	r9, r3, r1
 8008fc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fc6:	1c7b      	adds	r3, r7, #1
 8008fc8:	444b      	add	r3, r9
 8008fca:	106d      	asrs	r5, r5, #1
 8008fcc:	429d      	cmp	r5, r3
 8008fce:	bf38      	it	cc
 8008fd0:	461d      	movcc	r5, r3
 8008fd2:	0553      	lsls	r3, r2, #21
 8008fd4:	d527      	bpl.n	8009026 <__ssputs_r+0x8e>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7ff fbd8 	bl	800878c <_malloc_r>
 8008fdc:	4606      	mov	r6, r0
 8008fde:	b360      	cbz	r0, 800903a <__ssputs_r+0xa2>
 8008fe0:	464a      	mov	r2, r9
 8008fe2:	6921      	ldr	r1, [r4, #16]
 8008fe4:	f000 fa02 	bl	80093ec <memcpy>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	6126      	str	r6, [r4, #16]
 8008ff6:	444e      	add	r6, r9
 8008ff8:	6026      	str	r6, [r4, #0]
 8008ffa:	463e      	mov	r6, r7
 8008ffc:	6165      	str	r5, [r4, #20]
 8008ffe:	eba5 0509 	sub.w	r5, r5, r9
 8009002:	60a5      	str	r5, [r4, #8]
 8009004:	42be      	cmp	r6, r7
 8009006:	d900      	bls.n	800900a <__ssputs_r+0x72>
 8009008:	463e      	mov	r6, r7
 800900a:	4632      	mov	r2, r6
 800900c:	4641      	mov	r1, r8
 800900e:	6820      	ldr	r0, [r4, #0]
 8009010:	f000 f9c2 	bl	8009398 <memmove>
 8009014:	2000      	movs	r0, #0
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	1b9b      	subs	r3, r3, r6
 800901a:	60a3      	str	r3, [r4, #8]
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	4433      	add	r3, r6
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	462a      	mov	r2, r5
 8009028:	f000 fa32 	bl	8009490 <_realloc_r>
 800902c:	4606      	mov	r6, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	d1e0      	bne.n	8008ff4 <__ssputs_r+0x5c>
 8009032:	4650      	mov	r0, sl
 8009034:	6921      	ldr	r1, [r4, #16]
 8009036:	f7ff fb37 	bl	80086a8 <_free_r>
 800903a:	230c      	movs	r3, #12
 800903c:	f8ca 3000 	str.w	r3, [sl]
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f04f 30ff 	mov.w	r0, #4294967295
 8009046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	e7e9      	b.n	8009022 <__ssputs_r+0x8a>
	...

08009050 <_svfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4698      	mov	r8, r3
 8009056:	898b      	ldrh	r3, [r1, #12]
 8009058:	4607      	mov	r7, r0
 800905a:	061b      	lsls	r3, r3, #24
 800905c:	460d      	mov	r5, r1
 800905e:	4614      	mov	r4, r2
 8009060:	b09d      	sub	sp, #116	@ 0x74
 8009062:	d510      	bpl.n	8009086 <_svfiprintf_r+0x36>
 8009064:	690b      	ldr	r3, [r1, #16]
 8009066:	b973      	cbnz	r3, 8009086 <_svfiprintf_r+0x36>
 8009068:	2140      	movs	r1, #64	@ 0x40
 800906a:	f7ff fb8f 	bl	800878c <_malloc_r>
 800906e:	6028      	str	r0, [r5, #0]
 8009070:	6128      	str	r0, [r5, #16]
 8009072:	b930      	cbnz	r0, 8009082 <_svfiprintf_r+0x32>
 8009074:	230c      	movs	r3, #12
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	b01d      	add	sp, #116	@ 0x74
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	2340      	movs	r3, #64	@ 0x40
 8009084:	616b      	str	r3, [r5, #20]
 8009086:	2300      	movs	r3, #0
 8009088:	9309      	str	r3, [sp, #36]	@ 0x24
 800908a:	2320      	movs	r3, #32
 800908c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009090:	2330      	movs	r3, #48	@ 0x30
 8009092:	f04f 0901 	mov.w	r9, #1
 8009096:	f8cd 800c 	str.w	r8, [sp, #12]
 800909a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009234 <_svfiprintf_r+0x1e4>
 800909e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090a2:	4623      	mov	r3, r4
 80090a4:	469a      	mov	sl, r3
 80090a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090aa:	b10a      	cbz	r2, 80090b0 <_svfiprintf_r+0x60>
 80090ac:	2a25      	cmp	r2, #37	@ 0x25
 80090ae:	d1f9      	bne.n	80090a4 <_svfiprintf_r+0x54>
 80090b0:	ebba 0b04 	subs.w	fp, sl, r4
 80090b4:	d00b      	beq.n	80090ce <_svfiprintf_r+0x7e>
 80090b6:	465b      	mov	r3, fp
 80090b8:	4622      	mov	r2, r4
 80090ba:	4629      	mov	r1, r5
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ff6b 	bl	8008f98 <__ssputs_r>
 80090c2:	3001      	adds	r0, #1
 80090c4:	f000 80a7 	beq.w	8009216 <_svfiprintf_r+0x1c6>
 80090c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ca:	445a      	add	r2, fp
 80090cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ce:	f89a 3000 	ldrb.w	r3, [sl]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 809f 	beq.w	8009216 <_svfiprintf_r+0x1c6>
 80090d8:	2300      	movs	r3, #0
 80090da:	f04f 32ff 	mov.w	r2, #4294967295
 80090de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e2:	f10a 0a01 	add.w	sl, sl, #1
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	9307      	str	r3, [sp, #28]
 80090ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80090f0:	4654      	mov	r4, sl
 80090f2:	2205      	movs	r2, #5
 80090f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f8:	484e      	ldr	r0, [pc, #312]	@ (8009234 <_svfiprintf_r+0x1e4>)
 80090fa:	f7fe fc6a 	bl	80079d2 <memchr>
 80090fe:	9a04      	ldr	r2, [sp, #16]
 8009100:	b9d8      	cbnz	r0, 800913a <_svfiprintf_r+0xea>
 8009102:	06d0      	lsls	r0, r2, #27
 8009104:	bf44      	itt	mi
 8009106:	2320      	movmi	r3, #32
 8009108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800910c:	0711      	lsls	r1, r2, #28
 800910e:	bf44      	itt	mi
 8009110:	232b      	movmi	r3, #43	@ 0x2b
 8009112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009116:	f89a 3000 	ldrb.w	r3, [sl]
 800911a:	2b2a      	cmp	r3, #42	@ 0x2a
 800911c:	d015      	beq.n	800914a <_svfiprintf_r+0xfa>
 800911e:	4654      	mov	r4, sl
 8009120:	2000      	movs	r0, #0
 8009122:	f04f 0c0a 	mov.w	ip, #10
 8009126:	9a07      	ldr	r2, [sp, #28]
 8009128:	4621      	mov	r1, r4
 800912a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800912e:	3b30      	subs	r3, #48	@ 0x30
 8009130:	2b09      	cmp	r3, #9
 8009132:	d94b      	bls.n	80091cc <_svfiprintf_r+0x17c>
 8009134:	b1b0      	cbz	r0, 8009164 <_svfiprintf_r+0x114>
 8009136:	9207      	str	r2, [sp, #28]
 8009138:	e014      	b.n	8009164 <_svfiprintf_r+0x114>
 800913a:	eba0 0308 	sub.w	r3, r0, r8
 800913e:	fa09 f303 	lsl.w	r3, r9, r3
 8009142:	4313      	orrs	r3, r2
 8009144:	46a2      	mov	sl, r4
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	e7d2      	b.n	80090f0 <_svfiprintf_r+0xa0>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	1d19      	adds	r1, r3, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	9103      	str	r1, [sp, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfbb      	ittet	lt
 8009156:	425b      	neglt	r3, r3
 8009158:	f042 0202 	orrlt.w	r2, r2, #2
 800915c:	9307      	strge	r3, [sp, #28]
 800915e:	9307      	strlt	r3, [sp, #28]
 8009160:	bfb8      	it	lt
 8009162:	9204      	strlt	r2, [sp, #16]
 8009164:	7823      	ldrb	r3, [r4, #0]
 8009166:	2b2e      	cmp	r3, #46	@ 0x2e
 8009168:	d10a      	bne.n	8009180 <_svfiprintf_r+0x130>
 800916a:	7863      	ldrb	r3, [r4, #1]
 800916c:	2b2a      	cmp	r3, #42	@ 0x2a
 800916e:	d132      	bne.n	80091d6 <_svfiprintf_r+0x186>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	3402      	adds	r4, #2
 8009174:	1d1a      	adds	r2, r3, #4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	9203      	str	r2, [sp, #12]
 800917a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009238 <_svfiprintf_r+0x1e8>
 8009184:	2203      	movs	r2, #3
 8009186:	4650      	mov	r0, sl
 8009188:	7821      	ldrb	r1, [r4, #0]
 800918a:	f7fe fc22 	bl	80079d2 <memchr>
 800918e:	b138      	cbz	r0, 80091a0 <_svfiprintf_r+0x150>
 8009190:	2240      	movs	r2, #64	@ 0x40
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	eba0 000a 	sub.w	r0, r0, sl
 8009198:	4082      	lsls	r2, r0
 800919a:	4313      	orrs	r3, r2
 800919c:	3401      	adds	r4, #1
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	2206      	movs	r2, #6
 80091a6:	4825      	ldr	r0, [pc, #148]	@ (800923c <_svfiprintf_r+0x1ec>)
 80091a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ac:	f7fe fc11 	bl	80079d2 <memchr>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d036      	beq.n	8009222 <_svfiprintf_r+0x1d2>
 80091b4:	4b22      	ldr	r3, [pc, #136]	@ (8009240 <_svfiprintf_r+0x1f0>)
 80091b6:	bb1b      	cbnz	r3, 8009200 <_svfiprintf_r+0x1b0>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	3307      	adds	r3, #7
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	3308      	adds	r3, #8
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c6:	4433      	add	r3, r6
 80091c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ca:	e76a      	b.n	80090a2 <_svfiprintf_r+0x52>
 80091cc:	460c      	mov	r4, r1
 80091ce:	2001      	movs	r0, #1
 80091d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d4:	e7a8      	b.n	8009128 <_svfiprintf_r+0xd8>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f04f 0c0a 	mov.w	ip, #10
 80091dc:	4619      	mov	r1, r3
 80091de:	3401      	adds	r4, #1
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e8:	3a30      	subs	r2, #48	@ 0x30
 80091ea:	2a09      	cmp	r2, #9
 80091ec:	d903      	bls.n	80091f6 <_svfiprintf_r+0x1a6>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c6      	beq.n	8009180 <_svfiprintf_r+0x130>
 80091f2:	9105      	str	r1, [sp, #20]
 80091f4:	e7c4      	b.n	8009180 <_svfiprintf_r+0x130>
 80091f6:	4604      	mov	r4, r0
 80091f8:	2301      	movs	r3, #1
 80091fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fe:	e7f0      	b.n	80091e2 <_svfiprintf_r+0x192>
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4638      	mov	r0, r7
 8009208:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <_svfiprintf_r+0x1f4>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	f7fd fe7e 	bl	8006f0c <_printf_float>
 8009210:	1c42      	adds	r2, r0, #1
 8009212:	4606      	mov	r6, r0
 8009214:	d1d6      	bne.n	80091c4 <_svfiprintf_r+0x174>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	065b      	lsls	r3, r3, #25
 800921a:	f53f af2d 	bmi.w	8009078 <_svfiprintf_r+0x28>
 800921e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009220:	e72c      	b.n	800907c <_svfiprintf_r+0x2c>
 8009222:	ab03      	add	r3, sp, #12
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	462a      	mov	r2, r5
 8009228:	4638      	mov	r0, r7
 800922a:	4b06      	ldr	r3, [pc, #24]	@ (8009244 <_svfiprintf_r+0x1f4>)
 800922c:	a904      	add	r1, sp, #16
 800922e:	f7fe f90b 	bl	8007448 <_printf_i>
 8009232:	e7ed      	b.n	8009210 <_svfiprintf_r+0x1c0>
 8009234:	0800a950 	.word	0x0800a950
 8009238:	0800a956 	.word	0x0800a956
 800923c:	0800a95a 	.word	0x0800a95a
 8009240:	08006f0d 	.word	0x08006f0d
 8009244:	08008f99 	.word	0x08008f99

08009248 <__sflush_r>:
 8009248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	0716      	lsls	r6, r2, #28
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	d454      	bmi.n	8009300 <__sflush_r+0xb8>
 8009256:	684b      	ldr	r3, [r1, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc02      	bgt.n	8009262 <__sflush_r+0x1a>
 800925c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	dd48      	ble.n	80092f4 <__sflush_r+0xac>
 8009262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009264:	2e00      	cmp	r6, #0
 8009266:	d045      	beq.n	80092f4 <__sflush_r+0xac>
 8009268:	2300      	movs	r3, #0
 800926a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800926e:	682f      	ldr	r7, [r5, #0]
 8009270:	6a21      	ldr	r1, [r4, #32]
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	d030      	beq.n	80092d8 <__sflush_r+0x90>
 8009276:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	0759      	lsls	r1, r3, #29
 800927c:	d505      	bpl.n	800928a <__sflush_r+0x42>
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009284:	b10b      	cbz	r3, 800928a <__sflush_r+0x42>
 8009286:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	2300      	movs	r3, #0
 800928c:	4628      	mov	r0, r5
 800928e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009290:	6a21      	ldr	r1, [r4, #32]
 8009292:	47b0      	blx	r6
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	d106      	bne.n	80092a8 <__sflush_r+0x60>
 800929a:	6829      	ldr	r1, [r5, #0]
 800929c:	291d      	cmp	r1, #29
 800929e:	d82b      	bhi.n	80092f8 <__sflush_r+0xb0>
 80092a0:	4a28      	ldr	r2, [pc, #160]	@ (8009344 <__sflush_r+0xfc>)
 80092a2:	40ca      	lsrs	r2, r1
 80092a4:	07d6      	lsls	r6, r2, #31
 80092a6:	d527      	bpl.n	80092f8 <__sflush_r+0xb0>
 80092a8:	2200      	movs	r2, #0
 80092aa:	6062      	str	r2, [r4, #4]
 80092ac:	6922      	ldr	r2, [r4, #16]
 80092ae:	04d9      	lsls	r1, r3, #19
 80092b0:	6022      	str	r2, [r4, #0]
 80092b2:	d504      	bpl.n	80092be <__sflush_r+0x76>
 80092b4:	1c42      	adds	r2, r0, #1
 80092b6:	d101      	bne.n	80092bc <__sflush_r+0x74>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b903      	cbnz	r3, 80092be <__sflush_r+0x76>
 80092bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80092be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092c0:	602f      	str	r7, [r5, #0]
 80092c2:	b1b9      	cbz	r1, 80092f4 <__sflush_r+0xac>
 80092c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d002      	beq.n	80092d2 <__sflush_r+0x8a>
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7ff f9eb 	bl	80086a8 <_free_r>
 80092d2:	2300      	movs	r3, #0
 80092d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80092d6:	e00d      	b.n	80092f4 <__sflush_r+0xac>
 80092d8:	2301      	movs	r3, #1
 80092da:	4628      	mov	r0, r5
 80092dc:	47b0      	blx	r6
 80092de:	4602      	mov	r2, r0
 80092e0:	1c50      	adds	r0, r2, #1
 80092e2:	d1c9      	bne.n	8009278 <__sflush_r+0x30>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0c6      	beq.n	8009278 <__sflush_r+0x30>
 80092ea:	2b1d      	cmp	r3, #29
 80092ec:	d001      	beq.n	80092f2 <__sflush_r+0xaa>
 80092ee:	2b16      	cmp	r3, #22
 80092f0:	d11d      	bne.n	800932e <__sflush_r+0xe6>
 80092f2:	602f      	str	r7, [r5, #0]
 80092f4:	2000      	movs	r0, #0
 80092f6:	e021      	b.n	800933c <__sflush_r+0xf4>
 80092f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092fc:	b21b      	sxth	r3, r3
 80092fe:	e01a      	b.n	8009336 <__sflush_r+0xee>
 8009300:	690f      	ldr	r7, [r1, #16]
 8009302:	2f00      	cmp	r7, #0
 8009304:	d0f6      	beq.n	80092f4 <__sflush_r+0xac>
 8009306:	0793      	lsls	r3, r2, #30
 8009308:	bf18      	it	ne
 800930a:	2300      	movne	r3, #0
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	bf08      	it	eq
 8009310:	694b      	ldreq	r3, [r1, #20]
 8009312:	1bf6      	subs	r6, r6, r7
 8009314:	600f      	str	r7, [r1, #0]
 8009316:	608b      	str	r3, [r1, #8]
 8009318:	2e00      	cmp	r6, #0
 800931a:	ddeb      	ble.n	80092f4 <__sflush_r+0xac>
 800931c:	4633      	mov	r3, r6
 800931e:	463a      	mov	r2, r7
 8009320:	4628      	mov	r0, r5
 8009322:	6a21      	ldr	r1, [r4, #32]
 8009324:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009328:	47e0      	blx	ip
 800932a:	2800      	cmp	r0, #0
 800932c:	dc07      	bgt.n	800933e <__sflush_r+0xf6>
 800932e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009336:	f04f 30ff 	mov.w	r0, #4294967295
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933e:	4407      	add	r7, r0
 8009340:	1a36      	subs	r6, r6, r0
 8009342:	e7e9      	b.n	8009318 <__sflush_r+0xd0>
 8009344:	20400001 	.word	0x20400001

08009348 <_fflush_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	690b      	ldr	r3, [r1, #16]
 800934c:	4605      	mov	r5, r0
 800934e:	460c      	mov	r4, r1
 8009350:	b913      	cbnz	r3, 8009358 <_fflush_r+0x10>
 8009352:	2500      	movs	r5, #0
 8009354:	4628      	mov	r0, r5
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	b118      	cbz	r0, 8009362 <_fflush_r+0x1a>
 800935a:	6a03      	ldr	r3, [r0, #32]
 800935c:	b90b      	cbnz	r3, 8009362 <_fflush_r+0x1a>
 800935e:	f7fe fa1d 	bl	800779c <__sinit>
 8009362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0f3      	beq.n	8009352 <_fflush_r+0xa>
 800936a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800936c:	07d0      	lsls	r0, r2, #31
 800936e:	d404      	bmi.n	800937a <_fflush_r+0x32>
 8009370:	0599      	lsls	r1, r3, #22
 8009372:	d402      	bmi.n	800937a <_fflush_r+0x32>
 8009374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009376:	f7fe fb2a 	bl	80079ce <__retarget_lock_acquire_recursive>
 800937a:	4628      	mov	r0, r5
 800937c:	4621      	mov	r1, r4
 800937e:	f7ff ff63 	bl	8009248 <__sflush_r>
 8009382:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009384:	4605      	mov	r5, r0
 8009386:	07da      	lsls	r2, r3, #31
 8009388:	d4e4      	bmi.n	8009354 <_fflush_r+0xc>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	059b      	lsls	r3, r3, #22
 800938e:	d4e1      	bmi.n	8009354 <_fflush_r+0xc>
 8009390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009392:	f7fe fb1d 	bl	80079d0 <__retarget_lock_release_recursive>
 8009396:	e7dd      	b.n	8009354 <_fflush_r+0xc>

08009398 <memmove>:
 8009398:	4288      	cmp	r0, r1
 800939a:	b510      	push	{r4, lr}
 800939c:	eb01 0402 	add.w	r4, r1, r2
 80093a0:	d902      	bls.n	80093a8 <memmove+0x10>
 80093a2:	4284      	cmp	r4, r0
 80093a4:	4623      	mov	r3, r4
 80093a6:	d807      	bhi.n	80093b8 <memmove+0x20>
 80093a8:	1e43      	subs	r3, r0, #1
 80093aa:	42a1      	cmp	r1, r4
 80093ac:	d008      	beq.n	80093c0 <memmove+0x28>
 80093ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093b6:	e7f8      	b.n	80093aa <memmove+0x12>
 80093b8:	4601      	mov	r1, r0
 80093ba:	4402      	add	r2, r0
 80093bc:	428a      	cmp	r2, r1
 80093be:	d100      	bne.n	80093c2 <memmove+0x2a>
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093ca:	e7f7      	b.n	80093bc <memmove+0x24>

080093cc <_sbrk_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	2300      	movs	r3, #0
 80093d0:	4d05      	ldr	r5, [pc, #20]	@ (80093e8 <_sbrk_r+0x1c>)
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7f8 fe3e 	bl	8002058 <_sbrk>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_sbrk_r+0x1a>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_sbrk_r+0x1a>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	20000954 	.word	0x20000954

080093ec <memcpy>:
 80093ec:	440a      	add	r2, r1
 80093ee:	4291      	cmp	r1, r2
 80093f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f4:	d100      	bne.n	80093f8 <memcpy+0xc>
 80093f6:	4770      	bx	lr
 80093f8:	b510      	push	{r4, lr}
 80093fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fe:	4291      	cmp	r1, r2
 8009400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009404:	d1f9      	bne.n	80093fa <memcpy+0xe>
 8009406:	bd10      	pop	{r4, pc}

08009408 <__assert_func>:
 8009408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800940a:	4614      	mov	r4, r2
 800940c:	461a      	mov	r2, r3
 800940e:	4b09      	ldr	r3, [pc, #36]	@ (8009434 <__assert_func+0x2c>)
 8009410:	4605      	mov	r5, r0
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68d8      	ldr	r0, [r3, #12]
 8009416:	b14c      	cbz	r4, 800942c <__assert_func+0x24>
 8009418:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <__assert_func+0x30>)
 800941a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800941e:	9100      	str	r1, [sp, #0]
 8009420:	462b      	mov	r3, r5
 8009422:	4906      	ldr	r1, [pc, #24]	@ (800943c <__assert_func+0x34>)
 8009424:	f000 f870 	bl	8009508 <fiprintf>
 8009428:	f000 f880 	bl	800952c <abort>
 800942c:	4b04      	ldr	r3, [pc, #16]	@ (8009440 <__assert_func+0x38>)
 800942e:	461c      	mov	r4, r3
 8009430:	e7f3      	b.n	800941a <__assert_func+0x12>
 8009432:	bf00      	nop
 8009434:	2000002c 	.word	0x2000002c
 8009438:	0800a96b 	.word	0x0800a96b
 800943c:	0800a978 	.word	0x0800a978
 8009440:	0800a9a6 	.word	0x0800a9a6

08009444 <_calloc_r>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	fba1 5402 	umull	r5, r4, r1, r2
 800944a:	b934      	cbnz	r4, 800945a <_calloc_r+0x16>
 800944c:	4629      	mov	r1, r5
 800944e:	f7ff f99d 	bl	800878c <_malloc_r>
 8009452:	4606      	mov	r6, r0
 8009454:	b928      	cbnz	r0, 8009462 <_calloc_r+0x1e>
 8009456:	4630      	mov	r0, r6
 8009458:	bd70      	pop	{r4, r5, r6, pc}
 800945a:	220c      	movs	r2, #12
 800945c:	2600      	movs	r6, #0
 800945e:	6002      	str	r2, [r0, #0]
 8009460:	e7f9      	b.n	8009456 <_calloc_r+0x12>
 8009462:	462a      	mov	r2, r5
 8009464:	4621      	mov	r1, r4
 8009466:	f7fe fa34 	bl	80078d2 <memset>
 800946a:	e7f4      	b.n	8009456 <_calloc_r+0x12>

0800946c <__ascii_mbtowc>:
 800946c:	b082      	sub	sp, #8
 800946e:	b901      	cbnz	r1, 8009472 <__ascii_mbtowc+0x6>
 8009470:	a901      	add	r1, sp, #4
 8009472:	b142      	cbz	r2, 8009486 <__ascii_mbtowc+0x1a>
 8009474:	b14b      	cbz	r3, 800948a <__ascii_mbtowc+0x1e>
 8009476:	7813      	ldrb	r3, [r2, #0]
 8009478:	600b      	str	r3, [r1, #0]
 800947a:	7812      	ldrb	r2, [r2, #0]
 800947c:	1e10      	subs	r0, r2, #0
 800947e:	bf18      	it	ne
 8009480:	2001      	movne	r0, #1
 8009482:	b002      	add	sp, #8
 8009484:	4770      	bx	lr
 8009486:	4610      	mov	r0, r2
 8009488:	e7fb      	b.n	8009482 <__ascii_mbtowc+0x16>
 800948a:	f06f 0001 	mvn.w	r0, #1
 800948e:	e7f8      	b.n	8009482 <__ascii_mbtowc+0x16>

08009490 <_realloc_r>:
 8009490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4607      	mov	r7, r0
 8009496:	4614      	mov	r4, r2
 8009498:	460d      	mov	r5, r1
 800949a:	b921      	cbnz	r1, 80094a6 <_realloc_r+0x16>
 800949c:	4611      	mov	r1, r2
 800949e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	f7ff b973 	b.w	800878c <_malloc_r>
 80094a6:	b92a      	cbnz	r2, 80094b4 <_realloc_r+0x24>
 80094a8:	f7ff f8fe 	bl	80086a8 <_free_r>
 80094ac:	4625      	mov	r5, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b4:	f000 f841 	bl	800953a <_malloc_usable_size_r>
 80094b8:	4284      	cmp	r4, r0
 80094ba:	4606      	mov	r6, r0
 80094bc:	d802      	bhi.n	80094c4 <_realloc_r+0x34>
 80094be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094c2:	d8f4      	bhi.n	80094ae <_realloc_r+0x1e>
 80094c4:	4621      	mov	r1, r4
 80094c6:	4638      	mov	r0, r7
 80094c8:	f7ff f960 	bl	800878c <_malloc_r>
 80094cc:	4680      	mov	r8, r0
 80094ce:	b908      	cbnz	r0, 80094d4 <_realloc_r+0x44>
 80094d0:	4645      	mov	r5, r8
 80094d2:	e7ec      	b.n	80094ae <_realloc_r+0x1e>
 80094d4:	42b4      	cmp	r4, r6
 80094d6:	4622      	mov	r2, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	bf28      	it	cs
 80094dc:	4632      	movcs	r2, r6
 80094de:	f7ff ff85 	bl	80093ec <memcpy>
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff f8df 	bl	80086a8 <_free_r>
 80094ea:	e7f1      	b.n	80094d0 <_realloc_r+0x40>

080094ec <__ascii_wctomb>:
 80094ec:	4603      	mov	r3, r0
 80094ee:	4608      	mov	r0, r1
 80094f0:	b141      	cbz	r1, 8009504 <__ascii_wctomb+0x18>
 80094f2:	2aff      	cmp	r2, #255	@ 0xff
 80094f4:	d904      	bls.n	8009500 <__ascii_wctomb+0x14>
 80094f6:	228a      	movs	r2, #138	@ 0x8a
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	4770      	bx	lr
 8009500:	2001      	movs	r0, #1
 8009502:	700a      	strb	r2, [r1, #0]
 8009504:	4770      	bx	lr
	...

08009508 <fiprintf>:
 8009508:	b40e      	push	{r1, r2, r3}
 800950a:	b503      	push	{r0, r1, lr}
 800950c:	4601      	mov	r1, r0
 800950e:	ab03      	add	r3, sp, #12
 8009510:	4805      	ldr	r0, [pc, #20]	@ (8009528 <fiprintf+0x20>)
 8009512:	f853 2b04 	ldr.w	r2, [r3], #4
 8009516:	6800      	ldr	r0, [r0, #0]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	f000 f83d 	bl	8009598 <_vfiprintf_r>
 800951e:	b002      	add	sp, #8
 8009520:	f85d eb04 	ldr.w	lr, [sp], #4
 8009524:	b003      	add	sp, #12
 8009526:	4770      	bx	lr
 8009528:	2000002c 	.word	0x2000002c

0800952c <abort>:
 800952c:	2006      	movs	r0, #6
 800952e:	b508      	push	{r3, lr}
 8009530:	f000 fa06 	bl	8009940 <raise>
 8009534:	2001      	movs	r0, #1
 8009536:	f7f8 fd1a 	bl	8001f6e <_exit>

0800953a <_malloc_usable_size_r>:
 800953a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953e:	1f18      	subs	r0, r3, #4
 8009540:	2b00      	cmp	r3, #0
 8009542:	bfbc      	itt	lt
 8009544:	580b      	ldrlt	r3, [r1, r0]
 8009546:	18c0      	addlt	r0, r0, r3
 8009548:	4770      	bx	lr

0800954a <__sfputc_r>:
 800954a:	6893      	ldr	r3, [r2, #8]
 800954c:	b410      	push	{r4}
 800954e:	3b01      	subs	r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	6093      	str	r3, [r2, #8]
 8009554:	da07      	bge.n	8009566 <__sfputc_r+0x1c>
 8009556:	6994      	ldr	r4, [r2, #24]
 8009558:	42a3      	cmp	r3, r4
 800955a:	db01      	blt.n	8009560 <__sfputc_r+0x16>
 800955c:	290a      	cmp	r1, #10
 800955e:	d102      	bne.n	8009566 <__sfputc_r+0x1c>
 8009560:	bc10      	pop	{r4}
 8009562:	f000 b931 	b.w	80097c8 <__swbuf_r>
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	1c58      	adds	r0, r3, #1
 800956a:	6010      	str	r0, [r2, #0]
 800956c:	7019      	strb	r1, [r3, #0]
 800956e:	4608      	mov	r0, r1
 8009570:	bc10      	pop	{r4}
 8009572:	4770      	bx	lr

08009574 <__sfputs_r>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	4606      	mov	r6, r0
 8009578:	460f      	mov	r7, r1
 800957a:	4614      	mov	r4, r2
 800957c:	18d5      	adds	r5, r2, r3
 800957e:	42ac      	cmp	r4, r5
 8009580:	d101      	bne.n	8009586 <__sfputs_r+0x12>
 8009582:	2000      	movs	r0, #0
 8009584:	e007      	b.n	8009596 <__sfputs_r+0x22>
 8009586:	463a      	mov	r2, r7
 8009588:	4630      	mov	r0, r6
 800958a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958e:	f7ff ffdc 	bl	800954a <__sfputc_r>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	d1f3      	bne.n	800957e <__sfputs_r+0xa>
 8009596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009598 <_vfiprintf_r>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	460d      	mov	r5, r1
 800959e:	4614      	mov	r4, r2
 80095a0:	4698      	mov	r8, r3
 80095a2:	4606      	mov	r6, r0
 80095a4:	b09d      	sub	sp, #116	@ 0x74
 80095a6:	b118      	cbz	r0, 80095b0 <_vfiprintf_r+0x18>
 80095a8:	6a03      	ldr	r3, [r0, #32]
 80095aa:	b90b      	cbnz	r3, 80095b0 <_vfiprintf_r+0x18>
 80095ac:	f7fe f8f6 	bl	800779c <__sinit>
 80095b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d405      	bmi.n	80095c2 <_vfiprintf_r+0x2a>
 80095b6:	89ab      	ldrh	r3, [r5, #12]
 80095b8:	059a      	lsls	r2, r3, #22
 80095ba:	d402      	bmi.n	80095c2 <_vfiprintf_r+0x2a>
 80095bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095be:	f7fe fa06 	bl	80079ce <__retarget_lock_acquire_recursive>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	071b      	lsls	r3, r3, #28
 80095c6:	d501      	bpl.n	80095cc <_vfiprintf_r+0x34>
 80095c8:	692b      	ldr	r3, [r5, #16]
 80095ca:	b99b      	cbnz	r3, 80095f4 <_vfiprintf_r+0x5c>
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f000 f938 	bl	8009844 <__swsetup_r>
 80095d4:	b170      	cbz	r0, 80095f4 <_vfiprintf_r+0x5c>
 80095d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095d8:	07dc      	lsls	r4, r3, #31
 80095da:	d504      	bpl.n	80095e6 <_vfiprintf_r+0x4e>
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295
 80095e0:	b01d      	add	sp, #116	@ 0x74
 80095e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e6:	89ab      	ldrh	r3, [r5, #12]
 80095e8:	0598      	lsls	r0, r3, #22
 80095ea:	d4f7      	bmi.n	80095dc <_vfiprintf_r+0x44>
 80095ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ee:	f7fe f9ef 	bl	80079d0 <__retarget_lock_release_recursive>
 80095f2:	e7f3      	b.n	80095dc <_vfiprintf_r+0x44>
 80095f4:	2300      	movs	r3, #0
 80095f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f8:	2320      	movs	r3, #32
 80095fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095fe:	2330      	movs	r3, #48	@ 0x30
 8009600:	f04f 0901 	mov.w	r9, #1
 8009604:	f8cd 800c 	str.w	r8, [sp, #12]
 8009608:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80097b4 <_vfiprintf_r+0x21c>
 800960c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009610:	4623      	mov	r3, r4
 8009612:	469a      	mov	sl, r3
 8009614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009618:	b10a      	cbz	r2, 800961e <_vfiprintf_r+0x86>
 800961a:	2a25      	cmp	r2, #37	@ 0x25
 800961c:	d1f9      	bne.n	8009612 <_vfiprintf_r+0x7a>
 800961e:	ebba 0b04 	subs.w	fp, sl, r4
 8009622:	d00b      	beq.n	800963c <_vfiprintf_r+0xa4>
 8009624:	465b      	mov	r3, fp
 8009626:	4622      	mov	r2, r4
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa2 	bl	8009574 <__sfputs_r>
 8009630:	3001      	adds	r0, #1
 8009632:	f000 80a7 	beq.w	8009784 <_vfiprintf_r+0x1ec>
 8009636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009638:	445a      	add	r2, fp
 800963a:	9209      	str	r2, [sp, #36]	@ 0x24
 800963c:	f89a 3000 	ldrb.w	r3, [sl]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 809f 	beq.w	8009784 <_vfiprintf_r+0x1ec>
 8009646:	2300      	movs	r3, #0
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009650:	f10a 0a01 	add.w	sl, sl, #1
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	9307      	str	r3, [sp, #28]
 8009658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800965c:	931a      	str	r3, [sp, #104]	@ 0x68
 800965e:	4654      	mov	r4, sl
 8009660:	2205      	movs	r2, #5
 8009662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009666:	4853      	ldr	r0, [pc, #332]	@ (80097b4 <_vfiprintf_r+0x21c>)
 8009668:	f7fe f9b3 	bl	80079d2 <memchr>
 800966c:	9a04      	ldr	r2, [sp, #16]
 800966e:	b9d8      	cbnz	r0, 80096a8 <_vfiprintf_r+0x110>
 8009670:	06d1      	lsls	r1, r2, #27
 8009672:	bf44      	itt	mi
 8009674:	2320      	movmi	r3, #32
 8009676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800967a:	0713      	lsls	r3, r2, #28
 800967c:	bf44      	itt	mi
 800967e:	232b      	movmi	r3, #43	@ 0x2b
 8009680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b2a      	cmp	r3, #42	@ 0x2a
 800968a:	d015      	beq.n	80096b8 <_vfiprintf_r+0x120>
 800968c:	4654      	mov	r4, sl
 800968e:	2000      	movs	r0, #0
 8009690:	f04f 0c0a 	mov.w	ip, #10
 8009694:	9a07      	ldr	r2, [sp, #28]
 8009696:	4621      	mov	r1, r4
 8009698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800969c:	3b30      	subs	r3, #48	@ 0x30
 800969e:	2b09      	cmp	r3, #9
 80096a0:	d94b      	bls.n	800973a <_vfiprintf_r+0x1a2>
 80096a2:	b1b0      	cbz	r0, 80096d2 <_vfiprintf_r+0x13a>
 80096a4:	9207      	str	r2, [sp, #28]
 80096a6:	e014      	b.n	80096d2 <_vfiprintf_r+0x13a>
 80096a8:	eba0 0308 	sub.w	r3, r0, r8
 80096ac:	fa09 f303 	lsl.w	r3, r9, r3
 80096b0:	4313      	orrs	r3, r2
 80096b2:	46a2      	mov	sl, r4
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	e7d2      	b.n	800965e <_vfiprintf_r+0xc6>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	1d19      	adds	r1, r3, #4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	9103      	str	r1, [sp, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bfbb      	ittet	lt
 80096c4:	425b      	neglt	r3, r3
 80096c6:	f042 0202 	orrlt.w	r2, r2, #2
 80096ca:	9307      	strge	r3, [sp, #28]
 80096cc:	9307      	strlt	r3, [sp, #28]
 80096ce:	bfb8      	it	lt
 80096d0:	9204      	strlt	r2, [sp, #16]
 80096d2:	7823      	ldrb	r3, [r4, #0]
 80096d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80096d6:	d10a      	bne.n	80096ee <_vfiprintf_r+0x156>
 80096d8:	7863      	ldrb	r3, [r4, #1]
 80096da:	2b2a      	cmp	r3, #42	@ 0x2a
 80096dc:	d132      	bne.n	8009744 <_vfiprintf_r+0x1ac>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	3402      	adds	r4, #2
 80096e2:	1d1a      	adds	r2, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	9203      	str	r2, [sp, #12]
 80096e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80097b8 <_vfiprintf_r+0x220>
 80096f2:	2203      	movs	r2, #3
 80096f4:	4650      	mov	r0, sl
 80096f6:	7821      	ldrb	r1, [r4, #0]
 80096f8:	f7fe f96b 	bl	80079d2 <memchr>
 80096fc:	b138      	cbz	r0, 800970e <_vfiprintf_r+0x176>
 80096fe:	2240      	movs	r2, #64	@ 0x40
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	eba0 000a 	sub.w	r0, r0, sl
 8009706:	4082      	lsls	r2, r0
 8009708:	4313      	orrs	r3, r2
 800970a:	3401      	adds	r4, #1
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009712:	2206      	movs	r2, #6
 8009714:	4829      	ldr	r0, [pc, #164]	@ (80097bc <_vfiprintf_r+0x224>)
 8009716:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800971a:	f7fe f95a 	bl	80079d2 <memchr>
 800971e:	2800      	cmp	r0, #0
 8009720:	d03f      	beq.n	80097a2 <_vfiprintf_r+0x20a>
 8009722:	4b27      	ldr	r3, [pc, #156]	@ (80097c0 <_vfiprintf_r+0x228>)
 8009724:	bb1b      	cbnz	r3, 800976e <_vfiprintf_r+0x1d6>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	3307      	adds	r3, #7
 800972a:	f023 0307 	bic.w	r3, r3, #7
 800972e:	3308      	adds	r3, #8
 8009730:	9303      	str	r3, [sp, #12]
 8009732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009734:	443b      	add	r3, r7
 8009736:	9309      	str	r3, [sp, #36]	@ 0x24
 8009738:	e76a      	b.n	8009610 <_vfiprintf_r+0x78>
 800973a:	460c      	mov	r4, r1
 800973c:	2001      	movs	r0, #1
 800973e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009742:	e7a8      	b.n	8009696 <_vfiprintf_r+0xfe>
 8009744:	2300      	movs	r3, #0
 8009746:	f04f 0c0a 	mov.w	ip, #10
 800974a:	4619      	mov	r1, r3
 800974c:	3401      	adds	r4, #1
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	4620      	mov	r0, r4
 8009752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009756:	3a30      	subs	r2, #48	@ 0x30
 8009758:	2a09      	cmp	r2, #9
 800975a:	d903      	bls.n	8009764 <_vfiprintf_r+0x1cc>
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0c6      	beq.n	80096ee <_vfiprintf_r+0x156>
 8009760:	9105      	str	r1, [sp, #20]
 8009762:	e7c4      	b.n	80096ee <_vfiprintf_r+0x156>
 8009764:	4604      	mov	r4, r0
 8009766:	2301      	movs	r3, #1
 8009768:	fb0c 2101 	mla	r1, ip, r1, r2
 800976c:	e7f0      	b.n	8009750 <_vfiprintf_r+0x1b8>
 800976e:	ab03      	add	r3, sp, #12
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	462a      	mov	r2, r5
 8009774:	4630      	mov	r0, r6
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <_vfiprintf_r+0x22c>)
 8009778:	a904      	add	r1, sp, #16
 800977a:	f7fd fbc7 	bl	8006f0c <_printf_float>
 800977e:	4607      	mov	r7, r0
 8009780:	1c78      	adds	r0, r7, #1
 8009782:	d1d6      	bne.n	8009732 <_vfiprintf_r+0x19a>
 8009784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d405      	bmi.n	8009796 <_vfiprintf_r+0x1fe>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d402      	bmi.n	8009796 <_vfiprintf_r+0x1fe>
 8009790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009792:	f7fe f91d 	bl	80079d0 <__retarget_lock_release_recursive>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	065b      	lsls	r3, r3, #25
 800979a:	f53f af1f 	bmi.w	80095dc <_vfiprintf_r+0x44>
 800979e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097a0:	e71e      	b.n	80095e0 <_vfiprintf_r+0x48>
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	462a      	mov	r2, r5
 80097a8:	4630      	mov	r0, r6
 80097aa:	4b06      	ldr	r3, [pc, #24]	@ (80097c4 <_vfiprintf_r+0x22c>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	f7fd fe4b 	bl	8007448 <_printf_i>
 80097b2:	e7e4      	b.n	800977e <_vfiprintf_r+0x1e6>
 80097b4:	0800a950 	.word	0x0800a950
 80097b8:	0800a956 	.word	0x0800a956
 80097bc:	0800a95a 	.word	0x0800a95a
 80097c0:	08006f0d 	.word	0x08006f0d
 80097c4:	08009575 	.word	0x08009575

080097c8 <__swbuf_r>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	460e      	mov	r6, r1
 80097cc:	4614      	mov	r4, r2
 80097ce:	4605      	mov	r5, r0
 80097d0:	b118      	cbz	r0, 80097da <__swbuf_r+0x12>
 80097d2:	6a03      	ldr	r3, [r0, #32]
 80097d4:	b90b      	cbnz	r3, 80097da <__swbuf_r+0x12>
 80097d6:	f7fd ffe1 	bl	800779c <__sinit>
 80097da:	69a3      	ldr	r3, [r4, #24]
 80097dc:	60a3      	str	r3, [r4, #8]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	071a      	lsls	r2, r3, #28
 80097e2:	d501      	bpl.n	80097e8 <__swbuf_r+0x20>
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	b943      	cbnz	r3, 80097fa <__swbuf_r+0x32>
 80097e8:	4621      	mov	r1, r4
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 f82a 	bl	8009844 <__swsetup_r>
 80097f0:	b118      	cbz	r0, 80097fa <__swbuf_r+0x32>
 80097f2:	f04f 37ff 	mov.w	r7, #4294967295
 80097f6:	4638      	mov	r0, r7
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	6922      	ldr	r2, [r4, #16]
 80097fe:	b2f6      	uxtb	r6, r6
 8009800:	1a98      	subs	r0, r3, r2
 8009802:	6963      	ldr	r3, [r4, #20]
 8009804:	4637      	mov	r7, r6
 8009806:	4283      	cmp	r3, r0
 8009808:	dc05      	bgt.n	8009816 <__swbuf_r+0x4e>
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f7ff fd9b 	bl	8009348 <_fflush_r>
 8009812:	2800      	cmp	r0, #0
 8009814:	d1ed      	bne.n	80097f2 <__swbuf_r+0x2a>
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	3b01      	subs	r3, #1
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	1c5a      	adds	r2, r3, #1
 8009820:	6022      	str	r2, [r4, #0]
 8009822:	701e      	strb	r6, [r3, #0]
 8009824:	6962      	ldr	r2, [r4, #20]
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	429a      	cmp	r2, r3
 800982a:	d004      	beq.n	8009836 <__swbuf_r+0x6e>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	07db      	lsls	r3, r3, #31
 8009830:	d5e1      	bpl.n	80097f6 <__swbuf_r+0x2e>
 8009832:	2e0a      	cmp	r6, #10
 8009834:	d1df      	bne.n	80097f6 <__swbuf_r+0x2e>
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f7ff fd85 	bl	8009348 <_fflush_r>
 800983e:	2800      	cmp	r0, #0
 8009840:	d0d9      	beq.n	80097f6 <__swbuf_r+0x2e>
 8009842:	e7d6      	b.n	80097f2 <__swbuf_r+0x2a>

08009844 <__swsetup_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4b29      	ldr	r3, [pc, #164]	@ (80098ec <__swsetup_r+0xa8>)
 8009848:	4605      	mov	r5, r0
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	460c      	mov	r4, r1
 800984e:	b118      	cbz	r0, 8009858 <__swsetup_r+0x14>
 8009850:	6a03      	ldr	r3, [r0, #32]
 8009852:	b90b      	cbnz	r3, 8009858 <__swsetup_r+0x14>
 8009854:	f7fd ffa2 	bl	800779c <__sinit>
 8009858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985c:	0719      	lsls	r1, r3, #28
 800985e:	d422      	bmi.n	80098a6 <__swsetup_r+0x62>
 8009860:	06da      	lsls	r2, r3, #27
 8009862:	d407      	bmi.n	8009874 <__swsetup_r+0x30>
 8009864:	2209      	movs	r2, #9
 8009866:	602a      	str	r2, [r5, #0]
 8009868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	e033      	b.n	80098dc <__swsetup_r+0x98>
 8009874:	0758      	lsls	r0, r3, #29
 8009876:	d512      	bpl.n	800989e <__swsetup_r+0x5a>
 8009878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800987a:	b141      	cbz	r1, 800988e <__swsetup_r+0x4a>
 800987c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009880:	4299      	cmp	r1, r3
 8009882:	d002      	beq.n	800988a <__swsetup_r+0x46>
 8009884:	4628      	mov	r0, r5
 8009886:	f7fe ff0f 	bl	80086a8 <_free_r>
 800988a:	2300      	movs	r3, #0
 800988c:	6363      	str	r3, [r4, #52]	@ 0x34
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	2300      	movs	r3, #0
 8009898:	6063      	str	r3, [r4, #4]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f043 0308 	orr.w	r3, r3, #8
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	b94b      	cbnz	r3, 80098be <__swsetup_r+0x7a>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098b4:	d003      	beq.n	80098be <__swsetup_r+0x7a>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 f882 	bl	80099c2 <__smakebuf_r>
 80098be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c2:	f013 0201 	ands.w	r2, r3, #1
 80098c6:	d00a      	beq.n	80098de <__swsetup_r+0x9a>
 80098c8:	2200      	movs	r2, #0
 80098ca:	60a2      	str	r2, [r4, #8]
 80098cc:	6962      	ldr	r2, [r4, #20]
 80098ce:	4252      	negs	r2, r2
 80098d0:	61a2      	str	r2, [r4, #24]
 80098d2:	6922      	ldr	r2, [r4, #16]
 80098d4:	b942      	cbnz	r2, 80098e8 <__swsetup_r+0xa4>
 80098d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098da:	d1c5      	bne.n	8009868 <__swsetup_r+0x24>
 80098dc:	bd38      	pop	{r3, r4, r5, pc}
 80098de:	0799      	lsls	r1, r3, #30
 80098e0:	bf58      	it	pl
 80098e2:	6962      	ldrpl	r2, [r4, #20]
 80098e4:	60a2      	str	r2, [r4, #8]
 80098e6:	e7f4      	b.n	80098d2 <__swsetup_r+0x8e>
 80098e8:	2000      	movs	r0, #0
 80098ea:	e7f7      	b.n	80098dc <__swsetup_r+0x98>
 80098ec:	2000002c 	.word	0x2000002c

080098f0 <_raise_r>:
 80098f0:	291f      	cmp	r1, #31
 80098f2:	b538      	push	{r3, r4, r5, lr}
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	d904      	bls.n	8009904 <_raise_r+0x14>
 80098fa:	2316      	movs	r3, #22
 80098fc:	6003      	str	r3, [r0, #0]
 80098fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009906:	b112      	cbz	r2, 800990e <_raise_r+0x1e>
 8009908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800990c:	b94b      	cbnz	r3, 8009922 <_raise_r+0x32>
 800990e:	4628      	mov	r0, r5
 8009910:	f000 f830 	bl	8009974 <_getpid_r>
 8009914:	4622      	mov	r2, r4
 8009916:	4601      	mov	r1, r0
 8009918:	4628      	mov	r0, r5
 800991a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991e:	f000 b817 	b.w	8009950 <_kill_r>
 8009922:	2b01      	cmp	r3, #1
 8009924:	d00a      	beq.n	800993c <_raise_r+0x4c>
 8009926:	1c59      	adds	r1, r3, #1
 8009928:	d103      	bne.n	8009932 <_raise_r+0x42>
 800992a:	2316      	movs	r3, #22
 800992c:	6003      	str	r3, [r0, #0]
 800992e:	2001      	movs	r0, #1
 8009930:	e7e7      	b.n	8009902 <_raise_r+0x12>
 8009932:	2100      	movs	r1, #0
 8009934:	4620      	mov	r0, r4
 8009936:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800993a:	4798      	blx	r3
 800993c:	2000      	movs	r0, #0
 800993e:	e7e0      	b.n	8009902 <_raise_r+0x12>

08009940 <raise>:
 8009940:	4b02      	ldr	r3, [pc, #8]	@ (800994c <raise+0xc>)
 8009942:	4601      	mov	r1, r0
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f7ff bfd3 	b.w	80098f0 <_raise_r>
 800994a:	bf00      	nop
 800994c:	2000002c 	.word	0x2000002c

08009950 <_kill_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	2300      	movs	r3, #0
 8009954:	4d06      	ldr	r5, [pc, #24]	@ (8009970 <_kill_r+0x20>)
 8009956:	4604      	mov	r4, r0
 8009958:	4608      	mov	r0, r1
 800995a:	4611      	mov	r1, r2
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	f7f8 faf6 	bl	8001f4e <_kill>
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	d102      	bne.n	800996c <_kill_r+0x1c>
 8009966:	682b      	ldr	r3, [r5, #0]
 8009968:	b103      	cbz	r3, 800996c <_kill_r+0x1c>
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	bd38      	pop	{r3, r4, r5, pc}
 800996e:	bf00      	nop
 8009970:	20000954 	.word	0x20000954

08009974 <_getpid_r>:
 8009974:	f7f8 bae4 	b.w	8001f40 <_getpid>

08009978 <__swhatbuf_r>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	460c      	mov	r4, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	4615      	mov	r5, r2
 8009982:	2900      	cmp	r1, #0
 8009984:	461e      	mov	r6, r3
 8009986:	b096      	sub	sp, #88	@ 0x58
 8009988:	da0c      	bge.n	80099a4 <__swhatbuf_r+0x2c>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	2100      	movs	r1, #0
 800998e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009992:	bf14      	ite	ne
 8009994:	2340      	movne	r3, #64	@ 0x40
 8009996:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800999a:	2000      	movs	r0, #0
 800999c:	6031      	str	r1, [r6, #0]
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	b016      	add	sp, #88	@ 0x58
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	466a      	mov	r2, sp
 80099a6:	f000 f849 	bl	8009a3c <_fstat_r>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	dbed      	blt.n	800998a <__swhatbuf_r+0x12>
 80099ae:	9901      	ldr	r1, [sp, #4]
 80099b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099b8:	4259      	negs	r1, r3
 80099ba:	4159      	adcs	r1, r3
 80099bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099c0:	e7eb      	b.n	800999a <__swhatbuf_r+0x22>

080099c2 <__smakebuf_r>:
 80099c2:	898b      	ldrh	r3, [r1, #12]
 80099c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c6:	079d      	lsls	r5, r3, #30
 80099c8:	4606      	mov	r6, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	d507      	bpl.n	80099de <__smakebuf_r+0x1c>
 80099ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	2301      	movs	r3, #1
 80099d8:	6163      	str	r3, [r4, #20]
 80099da:	b003      	add	sp, #12
 80099dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099de:	466a      	mov	r2, sp
 80099e0:	ab01      	add	r3, sp, #4
 80099e2:	f7ff ffc9 	bl	8009978 <__swhatbuf_r>
 80099e6:	9f00      	ldr	r7, [sp, #0]
 80099e8:	4605      	mov	r5, r0
 80099ea:	4639      	mov	r1, r7
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7fe fecd 	bl	800878c <_malloc_r>
 80099f2:	b948      	cbnz	r0, 8009a08 <__smakebuf_r+0x46>
 80099f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f8:	059a      	lsls	r2, r3, #22
 80099fa:	d4ee      	bmi.n	80099da <__smakebuf_r+0x18>
 80099fc:	f023 0303 	bic.w	r3, r3, #3
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	e7e2      	b.n	80099ce <__smakebuf_r+0xc>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	9b01      	ldr	r3, [sp, #4]
 8009a16:	6020      	str	r0, [r4, #0]
 8009a18:	b15b      	cbz	r3, 8009a32 <__smakebuf_r+0x70>
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a20:	f000 f81e 	bl	8009a60 <_isatty_r>
 8009a24:	b128      	cbz	r0, 8009a32 <__smakebuf_r+0x70>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	f023 0303 	bic.w	r3, r3, #3
 8009a2c:	f043 0301 	orr.w	r3, r3, #1
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	431d      	orrs	r5, r3
 8009a36:	81a5      	strh	r5, [r4, #12]
 8009a38:	e7cf      	b.n	80099da <__smakebuf_r+0x18>
	...

08009a3c <_fstat_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	2300      	movs	r3, #0
 8009a40:	4d06      	ldr	r5, [pc, #24]	@ (8009a5c <_fstat_r+0x20>)
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	602b      	str	r3, [r5, #0]
 8009a4a:	f7f8 fadf 	bl	800200c <_fstat>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	d102      	bne.n	8009a58 <_fstat_r+0x1c>
 8009a52:	682b      	ldr	r3, [r5, #0]
 8009a54:	b103      	cbz	r3, 8009a58 <_fstat_r+0x1c>
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	bd38      	pop	{r3, r4, r5, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000954 	.word	0x20000954

08009a60 <_isatty_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	2300      	movs	r3, #0
 8009a64:	4d05      	ldr	r5, [pc, #20]	@ (8009a7c <_isatty_r+0x1c>)
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f8 fadd 	bl	800202a <_isatty>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_isatty_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_isatty_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000954 	.word	0x20000954

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
