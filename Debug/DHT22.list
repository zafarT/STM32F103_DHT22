
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001894  08009e68  08009e68  0000ae68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6fc  0800b6fc  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b6fc  0800b6fc  0000c6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b704  0800b704  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b704  0800b704  0000c704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b708  0800b708  0000c708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b70c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e8  0800b8f0  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800b8f0  0000d954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef2f  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b35  00000000  00000000  0001c13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ceb  00000000  00000000  0001fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019733  00000000  00000000  00020a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138dc  00000000  00000000  0003a13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d70c  00000000  00000000  0004da1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c8  00000000  00000000  000db16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e0834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e50 	.word	0x08009e50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009e50 	.word	0x08009e50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DHT22_StartMeasurement>:
#include "dht22.h"


uint32_t captureBuffer[DHT_CAPTURE_COUNT];

void DHT22_StartMeasurement(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0


	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <DHT22_StartMeasurement+0x4c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)captureBuffer, DHT_CAPTURE_COUNT);
 8000f50:	232b      	movs	r3, #43	@ 0x2b
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <DHT22_StartMeasurement+0x50>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	480e      	ldr	r0, [pc, #56]	@ (8000f90 <DHT22_StartMeasurement+0x4c>)
 8000f58:	f005 f98c 	bl	8006274 <HAL_TIM_IC_Start_DMA>

    DHT22_SetPinOutput();
 8000f5c:	f000 f81e 	bl	8000f9c <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f66:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <DHT22_StartMeasurement+0x54>)
 8000f68:	f002 f89a 	bl	80030a0 <HAL_GPIO_WritePin>
    delay_us(DHT_START_LOW_US );
 8000f6c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000f70:	f000 f84c 	bl	800100c <delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <DHT22_StartMeasurement+0x54>)
 8000f7c:	f002 f890 	bl	80030a0 <HAL_GPIO_WritePin>
    delay_us(DHT_START_HIGH_US );
 8000f80:	2014      	movs	r0, #20
 8000f82:	f000 f843 	bl	800100c <delay_us>
    DHT22_SetPinInput();
 8000f86:	f000 f825 	bl	8000fd4 <DHT22_SetPinInput>



}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000304 	.word	0x20000304
 8000f94:	20000204 	.word	0x20000204
 8000f98:	40010800 	.word	0x40010800

08000f9c <DHT22_SetPinOutput>:


void DHT22_SetPinOutput(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb2:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <DHT22_SetPinOutput+0x34>)
 8000fc2:	f001 fee9 	bl	8002d98 <HAL_GPIO_Init>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <DHT22_SetPinInput>:

void DHT22_SetPinInput(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <DHT22_SetPinInput+0x34>)
 8000ffa:	f001 fecd 	bl	8002d98 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010800 	.word	0x40010800

0800100c <delay_us>:


void delay_us(uint16_t delay)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <delay_us+0x2c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800101e:	bf00      	nop
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <delay_us+0x2c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3f9      	bcc.n	8001020 <delay_us+0x14>
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000304 	.word	0x20000304

0800103c <DHT22_Decode>:


void DHT22_Decode(void) {
 800103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001040:	b09f      	sub	sp, #124	@ 0x7c
 8001042:	af00      	add	r7, sp, #0
 8001044:	466b      	mov	r3, sp
 8001046:	607b      	str	r3, [r7, #4]
    // Step 1: Extract non-zero timestamps
    int edgeCount = DHT_EDGE_COUNT;
 8001048:	2329      	movs	r3, #41	@ 0x29
 800104a:	663b      	str	r3, [r7, #96]	@ 0x60
    uint16_t timestamps[edgeCount];
 800104c:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001052:	4632      	mov	r2, r6
 8001054:	2300      	movs	r3, #0
 8001056:	4692      	mov	sl, r2
 8001058:	469b      	mov	fp, r3
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001066:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800106a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800106e:	4632      	mov	r2, r6
 8001070:	2300      	movs	r3, #0
 8001072:	4690      	mov	r8, r2
 8001074:	4699      	mov	r9, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001082:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001086:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800108a:	4633      	mov	r3, r6
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	3307      	adds	r3, #7
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	ebad 0d03 	sub.w	sp, sp, r3
 8001098:	466b      	mov	r3, sp
 800109a:	3301      	adds	r3, #1
 800109c:	085b      	lsrs	r3, r3, #1
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    int idx = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	677b      	str	r3, [r7, #116]	@ 0x74
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i += 1) // to skip handshake of dht22
 80010a6:	2302      	movs	r3, #2
 80010a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80010aa:	e00d      	b.n	80010c8 <DHT22_Decode+0x8c>
    {
        timestamps[idx++] = captureBuffer[i];
 80010ac:	4a91      	ldr	r2, [pc, #580]	@ (80012f4 <DHT22_Decode+0x2b8>)
 80010ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010b0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80010b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80010ba:	b2b6      	uxth	r6, r6
 80010bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010be:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i += 1) // to skip handshake of dht22
 80010c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010c4:	3301      	adds	r3, #1
 80010c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80010c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80010cc:	ddee      	ble.n	80010ac <DHT22_Decode+0x70>
    }

    // Step 2: Calculate pulse widths
    uint16_t pulseWidths[edgeCount - 1];
 80010ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010d0:	1e5e      	subs	r6, r3, #1
 80010d2:	1e73      	subs	r3, r6, #1
 80010d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80010d6:	4632      	mov	r2, r6
 80010d8:	2300      	movs	r3, #0
 80010da:	4614      	mov	r4, r2
 80010dc:	461d      	mov	r5, r3
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	012b      	lsls	r3, r5, #4
 80010e8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010ec:	0122      	lsls	r2, r4, #4
 80010ee:	4632      	mov	r2, r6
 80010f0:	2300      	movs	r3, #0
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	010b      	lsls	r3, r1, #4
 8001100:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001104:	0102      	lsls	r2, r0, #4
 8001106:	4633      	mov	r3, r6
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3307      	adds	r3, #7
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	ebad 0d03 	sub.w	sp, sp, r3
 8001114:	466b      	mov	r3, sp
 8001116:	3301      	adds	r3, #1
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (int i = 0; i < edgeCount - 1; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001122:	e011      	b.n	8001148 <DHT22_Decode+0x10c>
        pulseWidths[i] = timestamps[i + 1] - timestamps[i];
 8001124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800112a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800112e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001130:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001132:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	b299      	uxth	r1, r3
 800113a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800113c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800113e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < edgeCount - 1; i++) {
 8001142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001144:	3301      	adds	r3, #1
 8001146:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001148:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800114a:	3b01      	subs	r3, #1
 800114c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800114e:	429a      	cmp	r2, r3
 8001150:	dbe8      	blt.n	8001124 <DHT22_Decode+0xe8>
    }

    // Step 3:
    int start = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint8_t bits[TOTAL_BITS];
    for (int i = 0; i < TOTAL_BITS; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800115a:	e014      	b.n	8001186 <DHT22_Decode+0x14a>
        bits[i] = (pulseWidths[start + i] >= THRESHOLD_US) ? 1 : 0;
 800115c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800115e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001160:	441a      	add	r2, r3
 8001162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001164:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001168:	2b63      	cmp	r3, #99	@ 0x63
 800116a:	bf8c      	ite	hi
 800116c:	2301      	movhi	r3, #1
 800116e:	2300      	movls	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	f107 0218 	add.w	r2, r7, #24
 8001178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800117a:	4413      	add	r3, r2
 800117c:	460a      	mov	r2, r1
 800117e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < TOTAL_BITS; i++) {
 8001180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001182:	3301      	adds	r3, #1
 8001184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001188:	2b27      	cmp	r3, #39	@ 0x27
 800118a:	dde7      	ble.n	800115c <DHT22_Decode+0x120>
    }

    // Step 4: Convert bits to bytes
    uint8_t data[5] = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < TOTAL_BITS; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	667b      	str	r3, [r7, #100]	@ 0x64
 800119a:	e02f      	b.n	80011fc <DHT22_Decode+0x1c0>
        data[i / 8] <<= 1;
 800119c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da00      	bge.n	80011a4 <DHT22_Decode+0x168>
 80011a2:	3307      	adds	r3, #7
 80011a4:	10db      	asrs	r3, r3, #3
 80011a6:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80011aa:	f107 0108 	add.w	r1, r7, #8
 80011ae:	440a      	add	r2, r1
 80011b0:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80011b4:	0052      	lsls	r2, r2, #1
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	3370      	adds	r3, #112	@ 0x70
 80011ba:	f107 0108 	add.w	r1, r7, #8
 80011be:	440b      	add	r3, r1
 80011c0:	f803 2c68 	strb.w	r2, [r3, #-104]
        data[i / 8] |= bits[i];
 80011c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da00      	bge.n	80011cc <DHT22_Decode+0x190>
 80011ca:	3307      	adds	r3, #7
 80011cc:	10db      	asrs	r3, r3, #3
 80011ce:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80011d2:	f107 0108 	add.w	r1, r7, #8
 80011d6:	440a      	add	r2, r1
 80011d8:	f812 1c68 	ldrb.w	r1, [r2, #-104]
 80011dc:	f107 0018 	add.w	r0, r7, #24
 80011e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80011e2:	4402      	add	r2, r0
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	3370      	adds	r3, #112	@ 0x70
 80011ec:	f107 0108 	add.w	r1, r7, #8
 80011f0:	440b      	add	r3, r1
 80011f2:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011f8:	3301      	adds	r3, #1
 80011fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80011fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011fe:	2b27      	cmp	r3, #39	@ 0x27
 8001200:	ddcc      	ble.n	800119c <DHT22_Decode+0x160>
    }

    // Step 5: Verify checksum
    uint8_t checksum = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
 8001202:	7c3a      	ldrb	r2, [r7, #16]
 8001204:	7c7b      	ldrb	r3, [r7, #17]
 8001206:	4413      	add	r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	7cbb      	ldrb	r3, [r7, #18]
 800120c:	4413      	add	r3, r2
 800120e:	b2da      	uxtb	r2, r3
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	4413      	add	r3, r2
 8001214:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if(checksum == data[4])
 8001218:	7d3b      	ldrb	r3, [r7, #20]
 800121a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800121e:	429a      	cmp	r2, r3
 8001220:	d159      	bne.n	80012d6 <DHT22_Decode+0x29a>
    {

    	float humidity = (float)((data[0] << 8) | data[1]) / 10.0;
 8001222:	7c3b      	ldrb	r3, [r7, #16]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	7c7a      	ldrb	r2, [r7, #17]
 8001228:	4313      	orrs	r3, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fce6 	bl	8000bfc <__aeabi_i2f>
 8001230:	4603      	mov	r3, r0
 8001232:	4931      	ldr	r1, [pc, #196]	@ (80012f8 <DHT22_Decode+0x2bc>)
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fde9 	bl	8000e0c <__aeabi_fdiv>
 800123a:	4603      	mov	r3, r0
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
    	float temperature = (float)((data[2] << 8) | data[3]) / 10.0;
 800123e:	7cbb      	ldrb	r3, [r7, #18]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	7cfa      	ldrb	r2, [r7, #19]
 8001244:	4313      	orrs	r3, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fcd8 	bl	8000bfc <__aeabi_i2f>
 800124c:	4603      	mov	r3, r0
 800124e:	492a      	ldr	r1, [pc, #168]	@ (80012f8 <DHT22_Decode+0x2bc>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fddb 	bl	8000e0c <__aeabi_fdiv>
 8001256:	4603      	mov	r3, r0
 8001258:	643b      	str	r3, [r7, #64]	@ 0x40
    	char string[5];
		SSD1306_GotoXY (0,0);
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f000 fc07 	bl	8001a70 <SSD1306_GotoXY>
		SSD1306_Puts ("Temp: ", &Font_7x10, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	4925      	ldr	r1, [pc, #148]	@ (80012fc <DHT22_Decode+0x2c0>)
 8001266:	4826      	ldr	r0, [pc, #152]	@ (8001300 <DHT22_Decode+0x2c4>)
 8001268:	f000 fc96 	bl	8001b98 <SSD1306_Puts>
		//itoa(temperature,string, 10);
		sprintf(string, "%.2f", temperature);
 800126c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800126e:	f7ff f8db 	bl	8000428 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	f107 0008 	add.w	r0, r7, #8
 800127a:	4922      	ldr	r1, [pc, #136]	@ (8001304 <DHT22_Decode+0x2c8>)
 800127c:	f006 fcac 	bl	8007bd8 <siprintf>
		SSD1306_GotoXY (40,0);
 8001280:	2100      	movs	r1, #0
 8001282:	2028      	movs	r0, #40	@ 0x28
 8001284:	f000 fbf4 	bl	8001a70 <SSD1306_GotoXY>
		SSD1306_Puts (string, &Font_7x10, 1);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2201      	movs	r2, #1
 800128e:	491b      	ldr	r1, [pc, #108]	@ (80012fc <DHT22_Decode+0x2c0>)
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fc81 	bl	8001b98 <SSD1306_Puts>
		SSD1306_GotoXY (0, 30);
 8001296:	211e      	movs	r1, #30
 8001298:	2000      	movs	r0, #0
 800129a:	f000 fbe9 	bl	8001a70 <SSD1306_GotoXY>
		SSD1306_Puts ("Hum: ", &Font_7x10, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	4916      	ldr	r1, [pc, #88]	@ (80012fc <DHT22_Decode+0x2c0>)
 80012a2:	4819      	ldr	r0, [pc, #100]	@ (8001308 <DHT22_Decode+0x2cc>)
 80012a4:	f000 fc78 	bl	8001b98 <SSD1306_Puts>
		SSD1306_GotoXY (40, 30);
 80012a8:	211e      	movs	r1, #30
 80012aa:	2028      	movs	r0, #40	@ 0x28
 80012ac:	f000 fbe0 	bl	8001a70 <SSD1306_GotoXY>
		//itoa(humidity,string, 10);
		sprintf(string, "%.2f", humidity);
 80012b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80012b2:	f7ff f8b9 	bl	8000428 <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	4911      	ldr	r1, [pc, #68]	@ (8001304 <DHT22_Decode+0x2c8>)
 80012c0:	f006 fc8a 	bl	8007bd8 <siprintf>
		SSD1306_Puts (string, &Font_7x10, 1);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2201      	movs	r2, #1
 80012ca:	490c      	ldr	r1, [pc, #48]	@ (80012fc <DHT22_Decode+0x2c0>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fc63 	bl	8001b98 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80012d2:	f000 fb29 	bl	8001928 <SSD1306_UpdateScreen>





	HAL_TIM_Base_Stop(&htim1);
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <DHT22_Decode+0x2d0>)
 80012d8:	f004 fe9a 	bl	8006010 <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_1);
 80012dc:	2100      	movs	r1, #0
 80012de:	480b      	ldr	r0, [pc, #44]	@ (800130c <DHT22_Decode+0x2d0>)
 80012e0:	f004 ff66 	bl	80061b0 <HAL_TIM_IC_Stop>
 80012e4:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 80012e8:	bf00      	nop
 80012ea:	377c      	adds	r7, #124	@ 0x7c
 80012ec:	46bd      	mov	sp, r7
 80012ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f2:	bf00      	nop
 80012f4:	20000204 	.word	0x20000204
 80012f8:	41200000 	.word	0x41200000
 80012fc:	20000000 	.word	0x20000000
 8001300:	08009e68 	.word	0x08009e68
 8001304:	08009e70 	.word	0x08009e70
 8001308:	08009e78 	.word	0x08009e78
 800130c:	20000304 	.word	0x20000304

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f000 ffbc 	bl	8002290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f83c 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 f9cc 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001320:	f000 f986 	bl	8001630 <MX_DMA_Init>
  MX_I2C1_Init();
 8001324:	f000 f87c 	bl	8001420 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001328:	f000 f8a8 	bl	800147c <MX_TIM1_Init>
  MX_TIM2_Init();
 800132c:	f000 f932 	bl	8001594 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */




  SSD1306_Init();
 8001330:	f000 fa36 	bl	80017a0 <SSD1306_Init>


  SSD1306_GotoXY (0,0);
 8001334:	2100      	movs	r1, #0
 8001336:	2000      	movs	r0, #0
 8001338:	f000 fb9a 	bl	8001a70 <SSD1306_GotoXY>
  SSD1306_Puts ("SSD1306", &Font_11x18, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	4910      	ldr	r1, [pc, #64]	@ (8001380 <main+0x70>)
 8001340:	4810      	ldr	r0, [pc, #64]	@ (8001384 <main+0x74>)
 8001342:	f000 fc29 	bl	8001b98 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8001346:	211e      	movs	r1, #30
 8001348:	2000      	movs	r0, #0
 800134a:	f000 fb91 	bl	8001a70 <SSD1306_GotoXY>
  SSD1306_Puts ("OLED DEMO", &Font_11x18, 1);
 800134e:	2201      	movs	r2, #1
 8001350:	490b      	ldr	r1, [pc, #44]	@ (8001380 <main+0x70>)
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <main+0x78>)
 8001354:	f000 fc20 	bl	8001b98 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001358:	f000 fae6 	bl	8001928 <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 800135c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001360:	f000 fff8 	bl	8002354 <HAL_Delay>
  SSD1306_Clear();
 8001364:	f000 fc3d 	bl	8001be2 <SSD1306_Clear>
  SSD1306_Puts ("Hello", &Font_7x10, 1);
  SSD1306_UpdateScreen();
*/


  HAL_TIM_Base_Start_IT(&htim1);
 8001368:	4808      	ldr	r0, [pc, #32]	@ (800138c <main+0x7c>)
 800136a:	f004 fe77 	bl	800605c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800136e:	4808      	ldr	r0, [pc, #32]	@ (8001390 <main+0x80>)
 8001370:	f004 fe74 	bl	800605c <HAL_TIM_Base_Start_IT>
  HAL_Delay (100);
 8001374:	2064      	movs	r0, #100	@ 0x64
 8001376:	f000 ffed 	bl	8002354 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137a:	bf00      	nop
 800137c:	e7fd      	b.n	800137a <main+0x6a>
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	08009e80 	.word	0x08009e80
 8001388:	08009e88 	.word	0x08009e88
 800138c:	20000304 	.word	0x20000304
 8001390:	2000034c 	.word	0x2000034c

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	@ 0x40
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	2228      	movs	r2, #40	@ 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fc7d 	bl	8007ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 f981 	bl	80056e4 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e8:	f000 f9d4 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fbee 	bl	8005be8 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001412:	f000 f9bf 	bl	8001794 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3740      	adds	r7, #64	@ 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <MX_I2C1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C1_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_I2C1_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_I2C1_Init+0x50>)
 800145e:	f001 fe51 	bl	8003104 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 f994 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200002b0 	.word	0x200002b0
 8001474:	40005400 	.word	0x40005400
 8001478:	00061a80 	.word	0x00061a80

0800147c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001482:	4b40      	ldr	r3, [pc, #256]	@ (8001584 <MX_TIM1_Init+0x108>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a3f      	ldr	r2, [pc, #252]	@ (8001584 <MX_TIM1_Init+0x108>)
 8001488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <MX_TIM1_Init+0x108>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014c2:	4a32      	ldr	r2, [pc, #200]	@ (800158c <MX_TIM1_Init+0x110>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014c6:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014c8:	2247      	movs	r2, #71	@ 0x47
 80014ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ec:	4826      	ldr	r0, [pc, #152]	@ (8001588 <MX_TIM1_Init+0x10c>)
 80014ee:	f004 fcf5 	bl	8005edc <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80014f8:	f000 f94c 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001500:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4619      	mov	r1, r3
 8001508:	481f      	ldr	r0, [pc, #124]	@ (8001588 <MX_TIM1_Init+0x10c>)
 800150a:	f005 f9cd 	bl	80068a8 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001514:	f000 f93e 	bl	8001794 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001518:	481b      	ldr	r0, [pc, #108]	@ (8001588 <MX_TIM1_Init+0x10c>)
 800151a:	f004 fdf1 	bl	8006100 <HAL_TIM_IC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001524:	f000 f936 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4619      	mov	r1, r3
 8001536:	4814      	ldr	r0, [pc, #80]	@ (8001588 <MX_TIM1_Init+0x10c>)
 8001538:	f005 fdc2 	bl	80070c0 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001542:	f000 f927 	bl	8001794 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800154a:	2301      	movs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  sConfigIC.ICFilter = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	480a      	ldr	r0, [pc, #40]	@ (8001588 <MX_TIM1_Init+0x10c>)
 8001560:	f005 f906 	bl	8006770 <HAL_TIM_IC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800156a:	f000 f913 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_CC1], hdma_tim1_ch1);
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_TIM1_Init+0x10c>)
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <MX_TIM1_Init+0x114>)
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_TIM1_Init+0x114>)
 8001576:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <MX_TIM1_Init+0x10c>)
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	@ 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	20000304 	.word	0x20000304
 800158c:	40012c00 	.word	0x40012c00
 8001590:	20000394 	.word	0x20000394

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <MX_TIM2_Init+0x98>)
 80015b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <MX_TIM2_Init+0x98>)
 80015ba:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <MX_TIM2_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <MX_TIM2_Init+0x98>)
 80015c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <MX_TIM2_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <MX_TIM2_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015da:	4814      	ldr	r0, [pc, #80]	@ (800162c <MX_TIM2_Init+0x98>)
 80015dc:	f004 fc7e 	bl	8005edc <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015e6:	f000 f8d5 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4619      	mov	r1, r3
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <MX_TIM2_Init+0x98>)
 80015f8:	f005 f956 	bl	80068a8 <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001602:	f000 f8c7 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <MX_TIM2_Init+0x98>)
 8001614:	f005 fd54 	bl	80070c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800161e:	f000 f8b9 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000034c 	.word	0x2000034c

08001630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_DMA_Init+0x7c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <MX_DMA_Init+0x7c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_DMA_Init+0x7c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */



  hdma_tim1_ch1.Instance = DMA1_Channel2;
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <MX_DMA_Init+0x84>)
 8001652:	601a      	str	r2, [r3, #0]
  hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_DMA_Init+0x80>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	60da      	str	r2, [r3, #12]
  hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166c:	611a      	str	r2, [r3, #16]
  hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001670:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001674:	615a      	str	r2, [r3, #20]
  hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001678:	2220      	movs	r2, #32
 800167a:	619a      	str	r2, [r3, #24]
  hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_DMA_Init+0x80>)
 800167e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001682:	61da      	str	r2, [r3, #28]

  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	200c      	movs	r0, #12
 800168a:	f000 ff5e 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800168e:	200c      	movs	r0, #12
 8001690:	f000 ff77 	bl	8002582 <HAL_NVIC_EnableIRQ>

  if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK) {
 8001694:	4806      	ldr	r0, [pc, #24]	@ (80016b0 <MX_DMA_Init+0x80>)
 8001696:	f000 ff8f 	bl	80025b8 <HAL_DMA_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_DMA_Init+0x74>
      Error_Handler();
 80016a0:	f000 f878 	bl	8001794 <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	20000394 	.word	0x20000394
 80016b4:	4002001c 	.word	0x4002001c

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a27      	ldr	r2, [pc, #156]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b25      	ldr	r3, [pc, #148]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <MX_GPIO_Init+0xd0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <MX_GPIO_Init+0xd0>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <MX_GPIO_Init+0xd0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <MX_GPIO_Init+0xd0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <MX_GPIO_Init+0xd0>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MX_GPIO_Init+0xd0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001732:	4816      	ldr	r0, [pc, #88]	@ (800178c <MX_GPIO_Init+0xd4>)
 8001734:	f001 fcb4 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800173e:	4814      	ldr	r0, [pc, #80]	@ (8001790 <MX_GPIO_Init+0xd8>)
 8001740:	f001 fcae 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	@ (800178c <MX_GPIO_Init+0xd4>)
 800175e:	f001 fb1b 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2302      	movs	r3, #2
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_GPIO_Init+0xd8>)
 800177c:	f001 fb0c 	bl	8002d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40021000 	.word	0x40021000
 800178c:	40011000 	.word	0x40011000
 8001790:	40010c00 	.word	0x40010c00

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <Error_Handler+0x8>

080017a0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80017a6:	f000 fa25 	bl	8001bf4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80017aa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80017ae:	2201      	movs	r2, #1
 80017b0:	2178      	movs	r1, #120	@ 0x78
 80017b2:	485b      	ldr	r0, [pc, #364]	@ (8001920 <SSD1306_Init+0x180>)
 80017b4:	f001 fefc 	bl	80035b0 <HAL_I2C_IsDeviceReady>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	e0a9      	b.n	8001916 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80017c2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80017c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017c8:	e002      	b.n	80017d0 <SSD1306_Init+0x30>
		p--;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f9      	bne.n	80017ca <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80017d6:	22ae      	movs	r2, #174	@ 0xae
 80017d8:	2100      	movs	r1, #0
 80017da:	2078      	movs	r0, #120	@ 0x78
 80017dc:	f000 fa84 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80017e0:	2220      	movs	r2, #32
 80017e2:	2100      	movs	r1, #0
 80017e4:	2078      	movs	r0, #120	@ 0x78
 80017e6:	f000 fa7f 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017ea:	2210      	movs	r2, #16
 80017ec:	2100      	movs	r1, #0
 80017ee:	2078      	movs	r0, #120	@ 0x78
 80017f0:	f000 fa7a 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017f4:	22b0      	movs	r2, #176	@ 0xb0
 80017f6:	2100      	movs	r1, #0
 80017f8:	2078      	movs	r0, #120	@ 0x78
 80017fa:	f000 fa75 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80017fe:	22c8      	movs	r2, #200	@ 0xc8
 8001800:	2100      	movs	r1, #0
 8001802:	2078      	movs	r0, #120	@ 0x78
 8001804:	f000 fa70 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2078      	movs	r0, #120	@ 0x78
 800180e:	f000 fa6b 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001812:	2210      	movs	r2, #16
 8001814:	2100      	movs	r1, #0
 8001816:	2078      	movs	r0, #120	@ 0x78
 8001818:	f000 fa66 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800181c:	2240      	movs	r2, #64	@ 0x40
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	@ 0x78
 8001822:	f000 fa61 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001826:	2281      	movs	r2, #129	@ 0x81
 8001828:	2100      	movs	r1, #0
 800182a:	2078      	movs	r0, #120	@ 0x78
 800182c:	f000 fa5c 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001830:	22ff      	movs	r2, #255	@ 0xff
 8001832:	2100      	movs	r1, #0
 8001834:	2078      	movs	r0, #120	@ 0x78
 8001836:	f000 fa57 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800183a:	22a1      	movs	r2, #161	@ 0xa1
 800183c:	2100      	movs	r1, #0
 800183e:	2078      	movs	r0, #120	@ 0x78
 8001840:	f000 fa52 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001844:	22a6      	movs	r2, #166	@ 0xa6
 8001846:	2100      	movs	r1, #0
 8001848:	2078      	movs	r0, #120	@ 0x78
 800184a:	f000 fa4d 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800184e:	22a8      	movs	r2, #168	@ 0xa8
 8001850:	2100      	movs	r1, #0
 8001852:	2078      	movs	r0, #120	@ 0x78
 8001854:	f000 fa48 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001858:	223f      	movs	r2, #63	@ 0x3f
 800185a:	2100      	movs	r1, #0
 800185c:	2078      	movs	r0, #120	@ 0x78
 800185e:	f000 fa43 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001862:	22a4      	movs	r2, #164	@ 0xa4
 8001864:	2100      	movs	r1, #0
 8001866:	2078      	movs	r0, #120	@ 0x78
 8001868:	f000 fa3e 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800186c:	22d3      	movs	r2, #211	@ 0xd3
 800186e:	2100      	movs	r1, #0
 8001870:	2078      	movs	r0, #120	@ 0x78
 8001872:	f000 fa39 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	@ 0x78
 800187c:	f000 fa34 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001880:	22d5      	movs	r2, #213	@ 0xd5
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	@ 0x78
 8001886:	f000 fa2f 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800188a:	22f0      	movs	r2, #240	@ 0xf0
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	@ 0x78
 8001890:	f000 fa2a 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001894:	22d9      	movs	r2, #217	@ 0xd9
 8001896:	2100      	movs	r1, #0
 8001898:	2078      	movs	r0, #120	@ 0x78
 800189a:	f000 fa25 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800189e:	2222      	movs	r2, #34	@ 0x22
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	@ 0x78
 80018a4:	f000 fa20 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80018a8:	22da      	movs	r2, #218	@ 0xda
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	@ 0x78
 80018ae:	f000 fa1b 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80018b2:	2212      	movs	r2, #18
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	@ 0x78
 80018b8:	f000 fa16 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80018bc:	22db      	movs	r2, #219	@ 0xdb
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	@ 0x78
 80018c2:	f000 fa11 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80018c6:	2220      	movs	r2, #32
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	@ 0x78
 80018cc:	f000 fa0c 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80018d0:	228d      	movs	r2, #141	@ 0x8d
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	@ 0x78
 80018d6:	f000 fa07 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80018da:	2214      	movs	r2, #20
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	@ 0x78
 80018e0:	f000 fa02 	bl	8001ce8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80018e4:	22af      	movs	r2, #175	@ 0xaf
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	@ 0x78
 80018ea:	f000 f9fd 	bl	8001ce8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018ee:	222e      	movs	r2, #46	@ 0x2e
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	@ 0x78
 80018f4:	f000 f9f8 	bl	8001ce8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 f843 	bl	8001984 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80018fe:	f000 f813 	bl	8001928 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <SSD1306_Init+0x184>)
 8001904:	2200      	movs	r2, #0
 8001906:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <SSD1306_Init+0x184>)
 800190a:	2200      	movs	r2, #0
 800190c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <SSD1306_Init+0x184>)
 8001910:	2201      	movs	r2, #1
 8001912:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002b0 	.word	0x200002b0
 8001924:	200007d8 	.word	0x200007d8

08001928 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800192e:	2300      	movs	r3, #0
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	e01d      	b.n	8001970 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3b50      	subs	r3, #80	@ 0x50
 8001938:	b2db      	uxtb	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	2078      	movs	r0, #120	@ 0x78
 8001940:	f000 f9d2 	bl	8001ce8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2078      	movs	r0, #120	@ 0x78
 800194a:	f000 f9cd 	bl	8001ce8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800194e:	2210      	movs	r2, #16
 8001950:	2100      	movs	r1, #0
 8001952:	2078      	movs	r0, #120	@ 0x78
 8001954:	f000 f9c8 	bl	8001ce8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	01db      	lsls	r3, r3, #7
 800195c:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <SSD1306_UpdateScreen+0x58>)
 800195e:	441a      	add	r2, r3
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	2140      	movs	r1, #64	@ 0x40
 8001964:	2078      	movs	r0, #120	@ 0x78
 8001966:	f000 f959 	bl	8001c1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	3301      	adds	r3, #1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b07      	cmp	r3, #7
 8001974:	d9de      	bls.n	8001934 <SSD1306_UpdateScreen+0xc>
	}
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200003d8 	.word	0x200003d8

08001984 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <SSD1306_Fill+0x14>
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <SSD1306_Fill+0x16>
 8001998:	23ff      	movs	r3, #255	@ 0xff
 800199a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199e:	4619      	mov	r1, r3
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <SSD1306_Fill+0x2c>)
 80019a2:	f006 f97e 	bl	8007ca2 <memset>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003d8 	.word	0x200003d8

080019b4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	460b      	mov	r3, r1
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	70fb      	strb	r3, [r7, #3]
	if (
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80019ca:	d848      	bhi.n	8001a5e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80019d0:	d845      	bhi.n	8001a5e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80019d2:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <SSD1306_DrawPixel+0xb4>)
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11a      	bne.n	8001a24 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	b298      	uxth	r0, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	01db      	lsls	r3, r3, #7
 80019fa:	4413      	add	r3, r2
 80019fc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <SSD1306_DrawPixel+0xb8>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b259      	sxtb	r1, r3
 8001a14:	88fa      	ldrh	r2, [r7, #6]
 8001a16:	4603      	mov	r3, r0
 8001a18:	01db      	lsls	r3, r3, #7
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2c9      	uxtb	r1, r1
 8001a1e:	4a13      	ldr	r2, [pc, #76]	@ (8001a6c <SSD1306_DrawPixel+0xb8>)
 8001a20:	54d1      	strb	r1, [r2, r3]
 8001a22:	e01d      	b.n	8001a60 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	01db      	lsls	r3, r3, #7
 8001a30:	4413      	add	r3, r2
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <SSD1306_DrawPixel+0xb8>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	b259      	sxtb	r1, r3
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	4603      	mov	r3, r0
 8001a52:	01db      	lsls	r3, r3, #7
 8001a54:	4413      	add	r3, r2
 8001a56:	b2c9      	uxtb	r1, r1
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <SSD1306_DrawPixel+0xb8>)
 8001a5a:	54d1      	strb	r1, [r2, r3]
 8001a5c:	e000      	b.n	8001a60 <SSD1306_DrawPixel+0xac>
		return;
 8001a5e:	bf00      	nop
	}
}
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	200007d8 	.word	0x200007d8
 8001a6c:	200003d8 	.word	0x200003d8

08001a70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	80fb      	strh	r3, [r7, #6]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a80:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <SSD1306_GotoXY+0x28>)
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a86:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <SSD1306_GotoXY+0x28>)
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	8053      	strh	r3, [r2, #2]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200007d8 	.word	0x200007d8

08001a9c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001aac:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
	if (
 8001ab8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aba:	dc07      	bgt.n	8001acc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001abc:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001abe:	885b      	ldrh	r3, [r3, #2]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ac8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aca:	dd01      	ble.n	8001ad0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e05d      	b.n	8001b8c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e04b      	b.n	8001b6e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	3b20      	subs	r3, #32
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	7849      	ldrb	r1, [r1, #1]
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	440b      	add	r3, r1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	e030      	b.n	8001b5c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d010      	beq.n	8001b2c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	b298      	uxth	r0, r3
 8001b16:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001b18:	885a      	ldrh	r2, [r3, #2]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	79ba      	ldrb	r2, [r7, #6]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff ff45 	bl	80019b4 <SSD1306_DrawPixel>
 8001b2a:	e014      	b.n	8001b56 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	b298      	uxth	r0, r3
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001b3a:	885a      	ldrh	r2, [r3, #2]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b299      	uxth	r1, r3
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf0c      	ite	eq
 8001b4a:	2301      	moveq	r3, #1
 8001b4c:	2300      	movne	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	f7ff ff2f 	bl	80019b4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d3c8      	bcc.n	8001afa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	461a      	mov	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d3ad      	bcc.n	8001ad6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <SSD1306_Putc+0xf8>)
 8001b88:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200007d8 	.word	0x200007d8

08001b98 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ba6:	e012      	b.n	8001bce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	79fa      	ldrb	r2, [r7, #7]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff73 	bl	8001a9c <SSD1306_Putc>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d002      	beq.n	8001bc8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	e008      	b.n	8001bda <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e8      	bne.n	8001ba8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fecc 	bl	8001984 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001bec:	f7ff fe9c 	bl	8001928 <SSD1306_UpdateScreen>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <ssd1306_I2C_Init+0x24>)
 8001bfc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bfe:	e002      	b.n	8001c06 <ssd1306_I2C_Init+0x12>
		p--;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	0003d090 	.word	0x0003d090

08001c1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b0c7      	sub	sp, #284	@ 0x11c
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	4604      	mov	r4, r0
 8001c24:	4608      	mov	r0, r1
 8001c26:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001c2a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001c2e:	600a      	str	r2, [r1, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c36:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c42:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001c46:	4602      	mov	r2, r0
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c52:	460a      	mov	r2, r1
 8001c54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c62:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c70:	e015      	b.n	8001c9e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c7a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	441a      	add	r2, r3
 8001c82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c86:	3301      	adds	r3, #1
 8001c88:	7811      	ldrb	r1, [r2, #0]
 8001c8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001c92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c94:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ca8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001cac:	8812      	ldrh	r2, [r2, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d8df      	bhi.n	8001c72 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cb6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f107 020c 	add.w	r2, r7, #12
 8001cd0:	200a      	movs	r0, #10
 8001cd2:	9000      	str	r0, [sp, #0]
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001cd6:	f001 fb6d 	bl	80033b4 <HAL_I2C_Master_Transmit>
}
 8001cda:	bf00      	nop
 8001cdc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}
 8001ce4:	200002b0 	.word	0x200002b0

08001ce8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71bb      	strb	r3, [r7, #6]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001cfe:	797b      	ldrb	r3, [r7, #5]
 8001d00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	b299      	uxth	r1, r3
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <ssd1306_I2C_Write+0x38>)
 8001d12:	f001 fb4f 	bl	80033b4 <HAL_I2C_Master_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200002b0 	.word	0x200002b0

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <HAL_MspInit+0x8c>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	4a20      	ldr	r2, [pc, #128]	@ (8001db0 <HAL_MspInit+0x8c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6193      	str	r3, [r2, #24]
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_MspInit+0x8c>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HAL_MspInit+0x8c>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a1a      	ldr	r2, [pc, #104]	@ (8001db0 <HAL_MspInit+0x8c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <HAL_MspInit+0x8c>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f000 fbf3 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f000 fc0c 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2004      	movs	r0, #4
 8001d70:	f000 fbeb 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001d74:	2004      	movs	r0, #4
 8001d76:	f000 fc04 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2005      	movs	r0, #5
 8001d80:	f000 fbe3 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d84:	2005      	movs	r0, #5
 8001d86:	f000 fbfc 	bl	8002582 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_MspInit+0x90>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_MspInit+0x90>)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000

08001db8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_I2C_MspInit+0x90>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d133      	bne.n	8001e40 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_I2C_MspInit+0x94>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <HAL_I2C_MspInit+0x94>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_I2C_MspInit+0x94>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001df0:	23c0      	movs	r3, #192	@ 0xc0
 8001df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4619      	mov	r1, r3
 8001e02:	4813      	ldr	r0, [pc, #76]	@ (8001e50 <HAL_I2C_MspInit+0x98>)
 8001e04:	f000 ffc8 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_I2C_MspInit+0x94>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <HAL_I2C_MspInit+0x94>)
 8001e0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e12:	61d3      	str	r3, [r2, #28]
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_I2C_MspInit+0x94>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	201f      	movs	r0, #31
 8001e26:	f000 fb90 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e2a:	201f      	movs	r0, #31
 8001e2c:	f000 fba9 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2020      	movs	r0, #32
 8001e36:	f000 fb88 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e3a:	2020      	movs	r0, #32
 8001e3c:	f000 fba1 	bl	8002582 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010c00 	.word	0x40010c00

08001e54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0318 	add.w	r3, r7, #24
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f5c <HAL_TIM_Base_MspInit+0x108>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d156      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0xce>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e74:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a39      	ldr	r2, [pc, #228]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001e7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b37      	ldr	r3, [pc, #220]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a33      	ldr	r2, [pc, #204]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	482a      	ldr	r0, [pc, #168]	@ (8001f64 <HAL_TIM_Base_MspInit+0x110>)
 8001eba:	f000 ff6d 	bl	8002d98 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f6c <HAL_TIM_Base_MspInit+0x118>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec4:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed0:	4b25      	ldr	r3, [pc, #148]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001edc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ede:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ee0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ee4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ee8:	2220      	movs	r2, #32
 8001eea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eec:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001eee:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001ef2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ef4:	481c      	ldr	r0, [pc, #112]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001ef6:	f000 fb5f 	bl	80025b8 <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8001f00:	f7ff fc48 	bl	8001794 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_TIM_Base_MspInit+0x114>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	201b      	movs	r0, #27
 8001f16:	f000 fb18 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f1a:	201b      	movs	r0, #27
 8001f1c:	f000 fb31 	bl	8002582 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f20:	e018      	b.n	8001f54 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2a:	d113      	bne.n	8001f54 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	61d3      	str	r3, [r2, #28]
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_TIM_Base_MspInit+0x10c>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	201c      	movs	r0, #28
 8001f4a:	f000 fafe 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f4e:	201c      	movs	r0, #28
 8001f50:	f000 fb17 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	@ 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	20000394 	.word	0x20000394
 8001f6c:	4002001c 	.word	0x4002001c

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <NMI_Handler+0x4>

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <MemManage_Handler+0x4>

08001f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 f9ac 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001fcc:	f003 fb72 	bl	80056b4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001fd8:	f000 fd60 	bl	8002a9c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <DMA1_Channel2_IRQHandler+0x10>)
 8001ff2:	f000 fc13 	bl	800281c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */


  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000394 	.word	0x20000394

08002000 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM1_CC_IRQHandler+0x10>)
 8002006:	f004 fac3 	bl	8006590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000304 	.word	0x20000304

08002014 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM2_IRQHandler+0x10>)
 800201a:	f004 fab9 	bl	8006590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000034c 	.word	0x2000034c

08002028 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <I2C1_EV_IRQHandler+0x10>)
 800202e:	f001 fbed 	bl	800380c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200002b0 	.word	0x200002b0

0800203c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <I2C1_ER_IRQHandler+0x10>)
 8002042:	f001 fd54 	bl	8003aee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002b0 	.word	0x200002b0

08002050 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d109      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_TIM_Base_Start(&htim1);
 8002062:	4807      	ldr	r0, [pc, #28]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002064:	f003 ff8a 	bl	8005f7c <HAL_TIM_Base_Start>
		DHT22_StartMeasurement();
 8002068:	f7fe ff6c 	bl	8000f44 <DHT22_StartMeasurement>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800206c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002070:	4804      	ldr	r0, [pc, #16]	@ (8002084 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002072:	f001 f82d 	bl	80030d0 <HAL_GPIO_TogglePin>
	}

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000304 	.word	0x20000304
 8002084:	40011000 	.word	0x40011000

08002088 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <HAL_TIM_IC_CaptureCallback+0x28>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d105      	bne.n	80020a6 <HAL_TIM_IC_CaptureCallback+0x1e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7f1b      	ldrb	r3, [r3, #28]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		DHT22_Decode();
 80020a2:	f7fe ffcb 	bl	800103c <DHT22_Decode>

	}
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00

080020b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <_kill>:

int _kill(int pid, int sig)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020cc:	f005 fe3c 	bl	8007d48 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2216      	movs	r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
  return -1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_exit>:

void _exit (int status)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ea:	f04f 31ff 	mov.w	r1, #4294967295
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffe7 	bl	80020c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <_exit+0x12>

080020f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e00a      	b.n	8002120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800210a:	f3af 8000 	nop.w
 800210e:	4601      	mov	r1, r0
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60ba      	str	r2, [r7, #8]
 8002116:	b2ca      	uxtb	r2, r1
 8002118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf0      	blt.n	800210a <_read+0x12>
  }

  return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e009      	b.n	8002158 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf1      	blt.n	8002144 <_write+0x12>
  }
  return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_close>:

int _close(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002190:	605a      	str	r2, [r3, #4]
  return 0;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f005 fda4 	bl	8007d48 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20005000 	.word	0x20005000
 800222c:	00000400 	.word	0x00000400
 8002230:	200007e0 	.word	0x200007e0
 8002234:	20000958 	.word	0x20000958

08002238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002244:	f7ff fff8 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480b      	ldr	r0, [pc, #44]	@ (8002278 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800224a:	490c      	ldr	r1, [pc, #48]	@ (800227c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800224c:	4a0c      	ldr	r2, [pc, #48]	@ (8002280 <LoopFillZerobss+0x16>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002260:	4c09      	ldr	r4, [pc, #36]	@ (8002288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226e:	f005 fd71 	bl	8007d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002272:	f7ff f84d 	bl	8001310 <main>
  bx lr
 8002276:	4770      	bx	lr
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002280:	0800b70c 	.word	0x0800b70c
  ldr r2, =_sbss
 8002284:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002288:	20000954 	.word	0x20000954

0800228c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>
	...

08002290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_Init+0x28>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <HAL_Init+0x28>)
 800229a:	f043 0310 	orr.w	r3, r3, #16
 800229e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 f947 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f808 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fd3a 	bl	8001d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f95f 	bl	800259e <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 f927 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	@ (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000010 	.word	0x20000010
 8002314:	20000018 	.word	0x20000018
 8002318:	20000014 	.word	0x20000014

0800231c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_IncTick+0x1c>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_IncTick+0x20>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a03      	ldr	r2, [pc, #12]	@ (800233c <HAL_IncTick+0x20>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	20000018 	.word	0x20000018
 800233c:	200007e4 	.word	0x200007e4

08002340 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b02      	ldr	r3, [pc, #8]	@ (8002350 <HAL_GetTick+0x10>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	200007e4 	.word	0x200007e4

08002354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff fff0 	bl	8002340 <HAL_GetTick>
 8002360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d005      	beq.n	800237a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_Delay+0x44>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237a:	bf00      	nop
 800237c:	f7ff ffe0 	bl	8002340 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d8f7      	bhi.n	800237c <HAL_Delay+0x28>
  {
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000018 	.word	0x20000018

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0b      	blt.n	800242a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4906      	ldr	r1, [pc, #24]	@ (8002434 <__NVIC_EnableIRQ+0x34>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	@ (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	@ 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f7ff ff90 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff2d 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff42 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff90 	bl	800248c <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5f 	bl	8002438 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff35 	bl	8002400 <__NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffa2 	bl	80024f0 <SysTick_Config>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e043      	b.n	8002656 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b22      	ldr	r3, [pc, #136]	@ (8002660 <HAL_DMA_Init+0xa8>)
 80025d6:	4413      	add	r3, r2
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_DMA_Init+0xac>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	009a      	lsls	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002668 <HAL_DMA_Init+0xb0>)
 80025ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002602:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	bffdfff8 	.word	0xbffdfff8
 8002664:	cccccccd 	.word	0xcccccccd
 8002668:	40020000 	.word	0x40020000

0800266c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_DMA_Start_IT+0x20>
 8002688:	2302      	movs	r3, #2
 800268a:	e04b      	b.n	8002724 <HAL_DMA_Start_IT+0xb8>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d13a      	bne.n	8002716 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f9bc 	bl	8002a42 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 020e 	orr.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00f      	b.n	8002704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0204 	bic.w	r2, r2, #4
 80026f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 020a 	orr.w	r2, r2, #10
 8002702:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e005      	b.n	8002722 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d005      	beq.n	8002750 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2204      	movs	r2, #4
 8002748:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e051      	b.n	80027f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 020e 	bic.w	r2, r2, #14
 800275e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a22      	ldr	r2, [pc, #136]	@ (8002800 <HAL_DMA_Abort_IT+0xd4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d029      	beq.n	80027ce <HAL_DMA_Abort_IT+0xa2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a21      	ldr	r2, [pc, #132]	@ (8002804 <HAL_DMA_Abort_IT+0xd8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d022      	beq.n	80027ca <HAL_DMA_Abort_IT+0x9e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1f      	ldr	r2, [pc, #124]	@ (8002808 <HAL_DMA_Abort_IT+0xdc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01a      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x98>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1e      	ldr	r2, [pc, #120]	@ (800280c <HAL_DMA_Abort_IT+0xe0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d012      	beq.n	80027be <HAL_DMA_Abort_IT+0x92>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1c      	ldr	r2, [pc, #112]	@ (8002810 <HAL_DMA_Abort_IT+0xe4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00a      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x8c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002814 <HAL_DMA_Abort_IT+0xe8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d102      	bne.n	80027b2 <HAL_DMA_Abort_IT+0x86>
 80027ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027b0:	e00e      	b.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
 80027b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027b6:	e00b      	b.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
 80027b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027bc:	e008      	b.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
 80027be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c2:	e005      	b.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
 80027c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c8:	e002      	b.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
 80027ca:	2310      	movs	r3, #16
 80027cc:	e000      	b.n	80027d0 <HAL_DMA_Abort_IT+0xa4>
 80027ce:	2301      	movs	r3, #1
 80027d0:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <HAL_DMA_Abort_IT+0xec>)
 80027d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
    } 
  }
  return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020008 	.word	0x40020008
 8002804:	4002001c 	.word	0x4002001c
 8002808:	40020030 	.word	0x40020030
 800280c:	40020044 	.word	0x40020044
 8002810:	40020058 	.word	0x40020058
 8002814:	4002006c 	.word	0x4002006c
 8002818:	40020000 	.word	0x40020000

0800281c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	2204      	movs	r2, #4
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d04f      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xc8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04a      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a66      	ldr	r2, [pc, #408]	@ (8002a0c <HAL_DMA_IRQHandler+0x1f0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d029      	beq.n	80028ca <HAL_DMA_IRQHandler+0xae>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a65      	ldr	r2, [pc, #404]	@ (8002a10 <HAL_DMA_IRQHandler+0x1f4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xaa>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a63      	ldr	r2, [pc, #396]	@ (8002a14 <HAL_DMA_IRQHandler+0x1f8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0xa4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a62      	ldr	r2, [pc, #392]	@ (8002a18 <HAL_DMA_IRQHandler+0x1fc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d012      	beq.n	80028ba <HAL_DMA_IRQHandler+0x9e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a60      	ldr	r2, [pc, #384]	@ (8002a1c <HAL_DMA_IRQHandler+0x200>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x98>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a20 <HAL_DMA_IRQHandler+0x204>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d102      	bne.n	80028ae <HAL_DMA_IRQHandler+0x92>
 80028a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028ac:	e00e      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028b2:	e00b      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028b8:	e008      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028be:	e005      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028c4:	e002      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028c6:	2340      	movs	r3, #64	@ 0x40
 80028c8:	e000      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028ca:	2304      	movs	r3, #4
 80028cc:	4a55      	ldr	r2, [pc, #340]	@ (8002a24 <HAL_DMA_IRQHandler+0x208>)
 80028ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8094 	beq.w	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028e2:	e08e      	b.n	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	2202      	movs	r2, #2
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d056      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x186>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d051      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 020a 	bic.w	r2, r2, #10
 800291a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <HAL_DMA_IRQHandler+0x1f0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d029      	beq.n	8002982 <HAL_DMA_IRQHandler+0x166>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <HAL_DMA_IRQHandler+0x1f4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_IRQHandler+0x162>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a35      	ldr	r2, [pc, #212]	@ (8002a14 <HAL_DMA_IRQHandler+0x1f8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x15c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a34      	ldr	r2, [pc, #208]	@ (8002a18 <HAL_DMA_IRQHandler+0x1fc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d012      	beq.n	8002972 <HAL_DMA_IRQHandler+0x156>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a32      	ldr	r2, [pc, #200]	@ (8002a1c <HAL_DMA_IRQHandler+0x200>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00a      	beq.n	800296c <HAL_DMA_IRQHandler+0x150>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a31      	ldr	r2, [pc, #196]	@ (8002a20 <HAL_DMA_IRQHandler+0x204>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d102      	bne.n	8002966 <HAL_DMA_IRQHandler+0x14a>
 8002960:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002964:	e00e      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002966:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800296a:	e00b      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 800296c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002970:	e008      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002976:	e005      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800297c:	e002      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 800297e:	2320      	movs	r3, #32
 8002980:	e000      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002982:	2302      	movs	r3, #2
 8002984:	4a27      	ldr	r2, [pc, #156]	@ (8002a24 <HAL_DMA_IRQHandler+0x208>)
 8002986:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d034      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029a0:	e02f      	b.n	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x1e8>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020e 	bic.w	r2, r2, #14
 80029ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    }
  }
  return;
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
}
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40020008 	.word	0x40020008
 8002a10:	4002001c 	.word	0x4002001c
 8002a14:	40020030 	.word	0x40020030
 8002a18:	40020044 	.word	0x40020044
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	4002006c 	.word	0x4002006c
 8002a24:	40020000 	.word	0x40020000

08002a28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a36:	b2db      	uxtb	r3, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d108      	bne.n	8002a82 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a80:	e007      	b.n	8002a92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	60da      	str	r2, [r3, #12]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_FLASH_IRQHandler+0x22>
 8002ab2:	4b68      	ldr	r3, [pc, #416]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002abe:	4b66      	ldr	r3, [pc, #408]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002ac4:	4b64      	ldr	r3, [pc, #400]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aca:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002acc:	f000 f8f4 	bl	8002cb8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8cc 	bl	8002c6e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ad6:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002adc:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a0 	beq.w	8002c2a <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002aea:	4b5a      	ldr	r3, [pc, #360]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002aec:	2220      	movs	r2, #32
 8002aee:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002af0:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8097 	beq.w	8002c2a <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002afc:	4b56      	ldr	r3, [pc, #344]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d12d      	bne.n	8002b62 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002b06:	4b54      	ldr	r3, [pc, #336]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b0e:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002b10:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002b18:	4b4f      	ldr	r3, [pc, #316]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f89c 	bl	8002c5c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002b24:	4b4c      	ldr	r3, [pc, #304]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b2c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b34:	4b47      	ldr	r3, [pc, #284]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4a46      	ldr	r2, [pc, #280]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b3a:	f023 0302 	bic.w	r3, r3, #2
 8002b3e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f909 	bl	8002d58 <FLASH_PageErase>
 8002b46:	e070      	b.n	8002c2a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	4a42      	ldr	r2, [pc, #264]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b54:	4b40      	ldr	r3, [pc, #256]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f87e 	bl	8002c5c <HAL_FLASH_EndOfOperationCallback>
 8002b60:	e063      	b.n	8002c2a <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002b62:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d10c      	bne.n	8002b86 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b6c:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	4a38      	ldr	r2, [pc, #224]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f000 f86f 	bl	8002c5c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b7e:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e051      	b.n	8002c2a <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002b86:	4b34      	ldr	r3, [pc, #208]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	4a32      	ldr	r2, [pc, #200]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b8e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002b90:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d024      	beq.n	8002be2 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002b98:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ba0:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002baa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	0c02      	lsrs	r2, r0, #16
 8002bb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bbc:	0c0b      	lsrs	r3, r1, #16
 8002bbe:	4926      	ldr	r1, [pc, #152]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002bc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002bd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002bd6:	b293      	uxth	r3, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f850 	bl	8002c80 <FLASH_Program_HalfWord>
 8002be0:	e023      	b.n	8002c2a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d105      	bne.n	8002bf8 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002bec:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f833 	bl	8002c5c <HAL_FLASH_EndOfOperationCallback>
 8002bf6:	e011      	b.n	8002c1c <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002bf8:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d106      	bne.n	8002c10 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	3b02      	subs	r3, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f827 	bl	8002c5c <HAL_FLASH_EndOfOperationCallback>
 8002c0e:	e005      	b.n	8002c1c <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	3b06      	subs	r3, #6
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f820 	bl	8002c5c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c22:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_FLASH_IRQHandler+0x1bc>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002c34:	4b07      	ldr	r3, [pc, #28]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4a03      	ldr	r2, [pc, #12]	@ (8002c54 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c46:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002c4a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40022000 	.word	0x40022000
 8002c58:	200007e8 	.word	0x200007e8

08002c5c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <FLASH_Program_HalfWord+0x30>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <FLASH_Program_HalfWord+0x34>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4a07      	ldr	r2, [pc, #28]	@ (8002cb4 <FLASH_Program_HalfWord+0x34>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	801a      	strh	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	200007e8 	.word	0x200007e8
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cc2:	4b23      	ldr	r3, [pc, #140]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cce:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <FLASH_SetErrorCode+0x9c>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d54 <FLASH_SetErrorCode+0x9c>)
 8002cd8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <FLASH_SetErrorCode+0x9c>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <FLASH_SetErrorCode+0x9c>)
 8002cf8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d02:	4b13      	ldr	r3, [pc, #76]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <FLASH_SetErrorCode+0x9c>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	4a0f      	ldr	r2, [pc, #60]	@ (8002d54 <FLASH_SetErrorCode+0x9c>)
 8002d18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f240 1201 	movw	r2, #257	@ 0x101
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d106      	bne.n	8002d3e <FLASH_SetErrorCode+0x86>
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a06      	ldr	r2, [pc, #24]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	61d3      	str	r3, [r2, #28]
}  
 8002d3c:	e002      	b.n	8002d44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d3e:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <FLASH_SetErrorCode+0x98>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60d3      	str	r3, [r2, #12]
}  
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40022000 	.word	0x40022000
 8002d54:	200007e8 	.word	0x200007e8

08002d58 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <FLASH_PageErase+0x38>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002d66:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <FLASH_PageErase+0x3c>)
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <FLASH_PageErase+0x3c>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002d72:	4a08      	ldr	r2, [pc, #32]	@ (8002d94 <FLASH_PageErase+0x3c>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d78:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <FLASH_PageErase+0x3c>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <FLASH_PageErase+0x3c>)
 8002d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	200007e8 	.word	0x200007e8
 8002d94:	40022000 	.word	0x40022000

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b08b      	sub	sp, #44	@ 0x2c
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002daa:	e169      	b.n	8003080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dac:	2201      	movs	r2, #1
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f040 8158 	bne.w	800307a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a9a      	ldr	r2, [pc, #616]	@ (8003038 <HAL_GPIO_Init+0x2a0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d05e      	beq.n	8002e92 <HAL_GPIO_Init+0xfa>
 8002dd4:	4a98      	ldr	r2, [pc, #608]	@ (8003038 <HAL_GPIO_Init+0x2a0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d875      	bhi.n	8002ec6 <HAL_GPIO_Init+0x12e>
 8002dda:	4a98      	ldr	r2, [pc, #608]	@ (800303c <HAL_GPIO_Init+0x2a4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d058      	beq.n	8002e92 <HAL_GPIO_Init+0xfa>
 8002de0:	4a96      	ldr	r2, [pc, #600]	@ (800303c <HAL_GPIO_Init+0x2a4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d86f      	bhi.n	8002ec6 <HAL_GPIO_Init+0x12e>
 8002de6:	4a96      	ldr	r2, [pc, #600]	@ (8003040 <HAL_GPIO_Init+0x2a8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d052      	beq.n	8002e92 <HAL_GPIO_Init+0xfa>
 8002dec:	4a94      	ldr	r2, [pc, #592]	@ (8003040 <HAL_GPIO_Init+0x2a8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d869      	bhi.n	8002ec6 <HAL_GPIO_Init+0x12e>
 8002df2:	4a94      	ldr	r2, [pc, #592]	@ (8003044 <HAL_GPIO_Init+0x2ac>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04c      	beq.n	8002e92 <HAL_GPIO_Init+0xfa>
 8002df8:	4a92      	ldr	r2, [pc, #584]	@ (8003044 <HAL_GPIO_Init+0x2ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d863      	bhi.n	8002ec6 <HAL_GPIO_Init+0x12e>
 8002dfe:	4a92      	ldr	r2, [pc, #584]	@ (8003048 <HAL_GPIO_Init+0x2b0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d046      	beq.n	8002e92 <HAL_GPIO_Init+0xfa>
 8002e04:	4a90      	ldr	r2, [pc, #576]	@ (8003048 <HAL_GPIO_Init+0x2b0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d85d      	bhi.n	8002ec6 <HAL_GPIO_Init+0x12e>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d82a      	bhi.n	8002e64 <HAL_GPIO_Init+0xcc>
 8002e0e:	2b12      	cmp	r3, #18
 8002e10:	d859      	bhi.n	8002ec6 <HAL_GPIO_Init+0x12e>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <HAL_GPIO_Init+0x80>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e93 	.word	0x08002e93
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	08002e7f 	.word	0x08002e7f
 8002e24:	08002ec1 	.word	0x08002ec1
 8002e28:	08002ec7 	.word	0x08002ec7
 8002e2c:	08002ec7 	.word	0x08002ec7
 8002e30:	08002ec7 	.word	0x08002ec7
 8002e34:	08002ec7 	.word	0x08002ec7
 8002e38:	08002ec7 	.word	0x08002ec7
 8002e3c:	08002ec7 	.word	0x08002ec7
 8002e40:	08002ec7 	.word	0x08002ec7
 8002e44:	08002ec7 	.word	0x08002ec7
 8002e48:	08002ec7 	.word	0x08002ec7
 8002e4c:	08002ec7 	.word	0x08002ec7
 8002e50:	08002ec7 	.word	0x08002ec7
 8002e54:	08002ec7 	.word	0x08002ec7
 8002e58:	08002ec7 	.word	0x08002ec7
 8002e5c:	08002e75 	.word	0x08002e75
 8002e60:	08002e89 	.word	0x08002e89
 8002e64:	4a79      	ldr	r2, [pc, #484]	@ (800304c <HAL_GPIO_Init+0x2b4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e6a:	e02c      	b.n	8002ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	623b      	str	r3, [r7, #32]
          break;
 8002e72:	e029      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	623b      	str	r3, [r7, #32]
          break;
 8002e7c:	e024      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	3308      	adds	r3, #8
 8002e84:	623b      	str	r3, [r7, #32]
          break;
 8002e86:	e01f      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	623b      	str	r3, [r7, #32]
          break;
 8002e90:	e01a      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e013      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	611a      	str	r2, [r3, #16]
          break;
 8002eb2:	e009      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	615a      	str	r2, [r3, #20]
          break;
 8002ebe:	e003      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
          break;
 8002ec4:	e000      	b.n	8002ec8 <HAL_GPIO_Init+0x130>
          break;
 8002ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2bff      	cmp	r3, #255	@ 0xff
 8002ecc:	d801      	bhi.n	8002ed2 <HAL_GPIO_Init+0x13a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	e001      	b.n	8002ed6 <HAL_GPIO_Init+0x13e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2bff      	cmp	r3, #255	@ 0xff
 8002edc:	d802      	bhi.n	8002ee4 <HAL_GPIO_Init+0x14c>
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x152>
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	3b08      	subs	r3, #8
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	6a39      	ldr	r1, [r7, #32]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	431a      	orrs	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80b1 	beq.w	800307a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f18:	4b4d      	ldr	r3, [pc, #308]	@ (8003050 <HAL_GPIO_Init+0x2b8>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003050 <HAL_GPIO_Init+0x2b8>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6193      	str	r3, [r2, #24]
 8002f24:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <HAL_GPIO_Init+0x2b8>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f30:	4a48      	ldr	r2, [pc, #288]	@ (8003054 <HAL_GPIO_Init+0x2bc>)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	3302      	adds	r3, #2
 8002f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a40      	ldr	r2, [pc, #256]	@ (8003058 <HAL_GPIO_Init+0x2c0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_GPIO_Init+0x1ec>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800305c <HAL_GPIO_Init+0x2c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00d      	beq.n	8002f80 <HAL_GPIO_Init+0x1e8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3e      	ldr	r2, [pc, #248]	@ (8003060 <HAL_GPIO_Init+0x2c8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d007      	beq.n	8002f7c <HAL_GPIO_Init+0x1e4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8003064 <HAL_GPIO_Init+0x2cc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d101      	bne.n	8002f78 <HAL_GPIO_Init+0x1e0>
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e004      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e002      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_GPIO_Init+0x1ee>
 8002f84:	2300      	movs	r3, #0
 8002f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f88:	f002 0203 	and.w	r2, r2, #3
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	4093      	lsls	r3, r2
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f96:	492f      	ldr	r1, [pc, #188]	@ (8003054 <HAL_GPIO_Init+0x2bc>)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	492c      	ldr	r1, [pc, #176]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4928      	ldr	r1, [pc, #160]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fd8:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	4922      	ldr	r1, [pc, #136]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	491e      	ldr	r1, [pc, #120]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4918      	ldr	r1, [pc, #96]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800300e:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	43db      	mvns	r3, r3
 8003016:	4914      	ldr	r1, [pc, #80]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 8003018:	4013      	ands	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d021      	beq.n	800306c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003028:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	490e      	ldr	r1, [pc, #56]	@ (8003068 <HAL_GPIO_Init+0x2d0>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e021      	b.n	800307a <HAL_GPIO_Init+0x2e2>
 8003036:	bf00      	nop
 8003038:	10320000 	.word	0x10320000
 800303c:	10310000 	.word	0x10310000
 8003040:	10220000 	.word	0x10220000
 8003044:	10210000 	.word	0x10210000
 8003048:	10120000 	.word	0x10120000
 800304c:	10110000 	.word	0x10110000
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	40010800 	.word	0x40010800
 800305c:	40010c00 	.word	0x40010c00
 8003060:	40011000 	.word	0x40011000
 8003064:	40011400 	.word	0x40011400
 8003068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_GPIO_Init+0x304>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	43db      	mvns	r3, r3
 8003074:	4909      	ldr	r1, [pc, #36]	@ (800309c <HAL_GPIO_Init+0x304>)
 8003076:	4013      	ands	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	3301      	adds	r3, #1
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	f47f ae8e 	bne.w	8002dac <HAL_GPIO_Init+0x14>
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	372c      	adds	r7, #44	@ 0x2c
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	611a      	str	r2, [r3, #16]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43d9      	mvns	r1, r3
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	400b      	ands	r3, r1
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	611a      	str	r2, [r3, #16]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
	...

08003104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e12b      	b.n	800336e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fe44 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	@ 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003168:	f002 fe86 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a81      	ldr	r2, [pc, #516]	@ (8003378 <HAL_I2C_Init+0x274>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d807      	bhi.n	8003188 <HAL_I2C_Init+0x84>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a80      	ldr	r2, [pc, #512]	@ (800337c <HAL_I2C_Init+0x278>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e006      	b.n	8003196 <HAL_I2C_Init+0x92>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a7d      	ldr	r2, [pc, #500]	@ (8003380 <HAL_I2C_Init+0x27c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0e7      	b.n	800336e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a78      	ldr	r2, [pc, #480]	@ (8003384 <HAL_I2C_Init+0x280>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <HAL_I2C_Init+0x274>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d802      	bhi.n	80031d8 <HAL_I2C_Init+0xd4>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e009      	b.n	80031ec <HAL_I2C_Init+0xe8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	4a69      	ldr	r2, [pc, #420]	@ (8003388 <HAL_I2C_Init+0x284>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	495c      	ldr	r1, [pc, #368]	@ (8003378 <HAL_I2C_Init+0x274>)
 8003208:	428b      	cmp	r3, r1
 800320a:	d819      	bhi.n	8003240 <HAL_I2C_Init+0x13c>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e59      	subs	r1, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fbb1 f3f3 	udiv	r3, r1, r3
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003220:	400b      	ands	r3, r1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_I2C_Init+0x138>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e59      	subs	r1, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fbb1 f3f3 	udiv	r3, r1, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	e051      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 800323c:	2304      	movs	r3, #4
 800323e:	e04f      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d111      	bne.n	800326c <HAL_I2C_Init+0x168>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e012      	b.n	8003292 <HAL_I2C_Init+0x18e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e58      	subs	r0, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	0099      	lsls	r1, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x196>
 8003296:	2301      	movs	r3, #1
 8003298:	e022      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10e      	bne.n	80032c0 <HAL_I2C_Init+0x1bc>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e58      	subs	r0, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6859      	ldr	r1, [r3, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032be:	e00f      	b.n	80032e0 <HAL_I2C_Init+0x1dc>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1e58      	subs	r0, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	0099      	lsls	r1, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	6809      	ldr	r1, [r1, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800330e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6911      	ldr	r1, [r2, #16]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	430b      	orrs	r3, r1
 8003322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	000186a0 	.word	0x000186a0
 800337c:	001e847f 	.word	0x001e847f
 8003380:	003d08ff 	.word	0x003d08ff
 8003384:	431bde83 	.word	0x431bde83
 8003388:	10624dd3 	.word	0x10624dd3

0800338c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	2b80      	cmp	r3, #128	@ 0x80
 80033a0:	d103      	bne.n	80033aa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  }
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
 80033c4:	4613      	mov	r3, r2
 80033c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c8:	f7fe ffba 	bl	8002340 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	f040 80e0 	bne.w	800359c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2319      	movs	r3, #25
 80033e2:	2201      	movs	r2, #1
 80033e4:	4970      	ldr	r1, [pc, #448]	@ (80035a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f001 ff40 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0d3      	b.n	800359e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_I2C_Master_Transmit+0x50>
 8003400:	2302      	movs	r3, #2
 8003402:	e0cc      	b.n	800359e <HAL_I2C_Master_Transmit+0x1ea>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d007      	beq.n	800342a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2221      	movs	r2, #33	@ 0x21
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2210      	movs	r2, #16
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	893a      	ldrh	r2, [r7, #8]
 800345a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a50      	ldr	r2, [pc, #320]	@ (80035ac <HAL_I2C_Master_Transmit+0x1f8>)
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800346c:	8979      	ldrh	r1, [r7, #10]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f001 fdd0 	bl	8005018 <I2C_MasterRequestWrite>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e08d      	b.n	800359e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003498:	e066      	b.n	8003568 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f001 fffe 	bl	80054a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d107      	bne.n	80034c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06b      	b.n	800359e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11b      	bne.n	800353c <HAL_I2C_Master_Transmit+0x188>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d017      	beq.n	800353c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	6a39      	ldr	r1, [r7, #32]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f001 fff5 	bl	8005530 <I2C_WaitOnBTFFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	2b04      	cmp	r3, #4
 8003552:	d107      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003562:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e01a      	b.n	800359e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d194      	bne.n	800349a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	00100002 	.word	0x00100002
 80035ac:	ffff0000 	.word	0xffff0000

080035b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	@ 0x28
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7fe febe 	bl	8002340 <HAL_GetTick>
 80035c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 8111 	bne.w	80037fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2319      	movs	r3, #25
 80035de:	2201      	movs	r2, #1
 80035e0:	4988      	ldr	r1, [pc, #544]	@ (8003804 <HAL_I2C_IsDeviceReady+0x254>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f001 fe42 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	e104      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_I2C_IsDeviceReady+0x50>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0fd      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d007      	beq.n	8003626 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003634:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2224      	movs	r2, #36	@ 0x24
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4a70      	ldr	r2, [pc, #448]	@ (8003808 <HAL_I2C_IsDeviceReady+0x258>)
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003658:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f001 fe00 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003680:	d103      	bne.n	800368a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003688:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0b6      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800369c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fe4f 	bl	8002340 <HAL_GetTick>
 80036a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c8:	bf0c      	ite	eq
 80036ca:	2301      	moveq	r3, #1
 80036cc:	2300      	movne	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036d2:	e025      	b.n	8003720 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036d4:	f7fe fe34 	bl	8002340 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <HAL_I2C_IsDeviceReady+0x13a>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	22a0      	movs	r2, #160	@ 0xa0
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2ba0      	cmp	r3, #160	@ 0xa0
 800372a:	d005      	beq.n	8003738 <HAL_I2C_IsDeviceReady+0x188>
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <HAL_I2C_IsDeviceReady+0x188>
 8003732:	7dbb      	ldrb	r3, [r7, #22]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0cd      	beq.n	80036d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d129      	bne.n	80037a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2319      	movs	r3, #25
 800377a:	2201      	movs	r2, #1
 800377c:	4921      	ldr	r1, [pc, #132]	@ (8003804 <HAL_I2C_IsDeviceReady+0x254>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f001 fd74 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e036      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e02c      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2319      	movs	r3, #25
 80037c2:	2201      	movs	r2, #1
 80037c4:	490f      	ldr	r1, [pc, #60]	@ (8003804 <HAL_I2C_IsDeviceReady+0x254>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f001 fd50 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e012      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	3301      	adds	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	f4ff af32 	bcc.w	800364a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	00100002 	.word	0x00100002
 8003808:	ffff0000 	.word	0xffff0000

0800380c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800382c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003834:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b10      	cmp	r3, #16
 800383a:	d003      	beq.n	8003844 <HAL_I2C_EV_IRQHandler+0x38>
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b40      	cmp	r3, #64	@ 0x40
 8003840:	f040 80c1 	bne.w	80039c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <HAL_I2C_EV_IRQHandler+0x6e>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003864:	d003      	beq.n	800386e <HAL_I2C_EV_IRQHandler+0x62>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800386c:	d101      	bne.n	8003872 <HAL_I2C_EV_IRQHandler+0x66>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x68>
 8003872:	2300      	movs	r3, #0
 8003874:	2b01      	cmp	r3, #1
 8003876:	f000 8132 	beq.w	8003ade <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <HAL_I2C_EV_IRQHandler+0x92>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	0a5b      	lsrs	r3, r3, #9
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 fef5 	bl	8005680 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fd99 	bl	80043ce <I2C_Master_SB>
 800389c:	e092      	b.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_I2C_EV_IRQHandler+0xb2>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	0a5b      	lsrs	r3, r3, #9
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fe0e 	bl	80044d8 <I2C_Master_ADD10>
 80038bc:	e082      	b.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_I2C_EV_IRQHandler+0xd2>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fe27 	bl	800452a <I2C_Master_ADDR>
 80038dc:	e072      	b.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d03b      	beq.n	8003962 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	f000 80f3 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	09db      	lsrs	r3, r3, #7
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <HAL_I2C_EV_IRQHandler+0x11c>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_I2C_EV_IRQHandler+0x11c>
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f9f1 	bl	8003d08 <I2C_MasterTransmit_TXE>
 8003926:	e04d      	b.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80d6 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	0a5b      	lsrs	r3, r3, #9
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80cf 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	2b21      	cmp	r3, #33	@ 0x21
 8003948:	d103      	bne.n	8003952 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa78 	bl	8003e40 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003950:	e0c7      	b.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	f040 80c4 	bne.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fae6 	bl	8003f2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003960:	e0bf      	b.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003970:	f000 80b7 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x194>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_I2C_EV_IRQHandler+0x194>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fb5f 	bl	800405c <I2C_MasterReceive_RXNE>
 800399e:	e011      	b.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 809a 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	0a5b      	lsrs	r3, r3, #9
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8093 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fc15 	bl	80041ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c2:	e08e      	b.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039c4:	e08d      	b.n	8003ae2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	e007      	b.n	80039e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0x20e>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	0a5b      	lsrs	r3, r3, #9
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 ffe0 	bl	80049d8 <I2C_Slave_ADDR>
 8003a18:	e066      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0x22e>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0a5b      	lsrs	r3, r3, #9
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 f81a 	bl	8004a6c <I2C_Slave_STOPF>
 8003a38:	e056      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a3a:	7bbb      	ldrb	r3, [r7, #14]
 8003a3c:	2b21      	cmp	r3, #33	@ 0x21
 8003a3e:	d002      	beq.n	8003a46 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a40:	7bbb      	ldrb	r3, [r7, #14]
 8003a42:	2b29      	cmp	r3, #41	@ 0x29
 8003a44:	d125      	bne.n	8003a92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	09db      	lsrs	r3, r3, #7
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00f      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x266>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	0a9b      	lsrs	r3, r3, #10
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x266>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fef8 	bl	8004860 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a70:	e039      	b.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d033      	beq.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2da>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	0a5b      	lsrs	r3, r3, #9
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02d      	beq.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 ff25 	bl	80048da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a90:	e029      	b.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00f      	beq.n	8003abe <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	0a9b      	lsrs	r3, r3, #10
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_I2C_EV_IRQHandler+0x2b2>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 ff2f 	bl	800491a <I2C_SlaveReceive_RXNE>
 8003abc:	e014      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	0a5b      	lsrs	r3, r3, #9
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 ff5d 	bl	8004996 <I2C_SlaveReceive_BTF>
 8003adc:	e004      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ae6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	@ 0x28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_I2C_ER_IRQHandler+0x5e>
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d010      	beq.n	8003b4c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b3a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	0a5b      	lsrs	r3, r3, #9
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00e      	beq.n	8003b76 <HAL_I2C_ER_IRQHandler+0x88>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003b74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	0a9b      	lsrs	r3, r3, #10
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03f      	beq.n	8003c02 <HAL_I2C_ER_IRQHandler+0x114>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d039      	beq.n	8003c02 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003b8e:	7efb      	ldrb	r3, [r7, #27]
 8003b90:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ba8:	7ebb      	ldrb	r3, [r7, #26]
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d112      	bne.n	8003bd4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b21      	cmp	r3, #33	@ 0x21
 8003bb8:	d008      	beq.n	8003bcc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	2b29      	cmp	r3, #41	@ 0x29
 8003bbe:	d005      	beq.n	8003bcc <HAL_I2C_ER_IRQHandler+0xde>
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	2b28      	cmp	r3, #40	@ 0x28
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b21      	cmp	r3, #33	@ 0x21
 8003bca:	d103      	bne.n	8003bd4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f001 f87d 	bl	8004ccc <I2C_Slave_AF>
 8003bd2:	e016      	b.n	8003c02 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bdc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003be6:	7efb      	ldrb	r3, [r7, #27]
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d002      	beq.n	8003bf2 <HAL_I2C_ER_IRQHandler+0x104>
 8003bec:	7efb      	ldrb	r3, [r7, #27]
 8003bee:	2b40      	cmp	r3, #64	@ 0x40
 8003bf0:	d107      	bne.n	8003c02 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c00:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	0adb      	lsrs	r3, r3, #11
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <HAL_I2C_ER_IRQHandler+0x13e>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003c2a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f001 f8b8 	bl	8004db4 <I2C_ITError>
  }
}
 8003c44:	bf00      	nop
 8003c46:	3728      	adds	r7, #40	@ 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d150      	bne.n	8003dd0 <I2C_MasterTransmit_TXE+0xc8>
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b21      	cmp	r3, #33	@ 0x21
 8003d32:	d14d      	bne.n	8003dd0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d01d      	beq.n	8003d76 <I2C_MasterTransmit_TXE+0x6e>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d01a      	beq.n	8003d76 <I2C_MasterTransmit_TXE+0x6e>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d46:	d016      	beq.n	8003d76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2211      	movs	r2, #17
 8003d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff6c 	bl	8003c4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d74:	e060      	b.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b40      	cmp	r3, #64	@ 0x40
 8003dae:	d107      	bne.n	8003dc0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff81 	bl	8003cc0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dbe:	e03b      	b.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff3f 	bl	8003c4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dce:	e033      	b.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b21      	cmp	r3, #33	@ 0x21
 8003dd4:	d005      	beq.n	8003de2 <I2C_MasterTransmit_TXE+0xda>
 8003dd6:	7bbb      	ldrb	r3, [r7, #14]
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	d12d      	bne.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b22      	cmp	r3, #34	@ 0x22
 8003de0:	d12a      	bne.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003dfc:	e01c      	b.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b40      	cmp	r3, #64	@ 0x40
 8003e08:	d103      	bne.n	8003e12 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f88e 	bl	8003f2c <I2C_MemoryTransmit_TXE_BTF>
}
 8003e10:	e012      	b.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e36:	e7ff      	b.n	8003e38 <I2C_MasterTransmit_TXE+0x130>
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b21      	cmp	r3, #33	@ 0x21
 8003e58:	d164      	bne.n	8003f24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d012      	beq.n	8003e8a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e88:	e04c      	b.n	8003f24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d01d      	beq.n	8003ecc <I2C_MasterTransmit_BTF+0x8c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d01a      	beq.n	8003ecc <I2C_MasterTransmit_BTF+0x8c>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e9c:	d016      	beq.n	8003ecc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2211      	movs	r2, #17
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fec1 	bl	8003c4c <HAL_I2C_MasterTxCpltCallback>
}
 8003eca:	e02b      	b.n	8003f24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eda:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b40      	cmp	r3, #64	@ 0x40
 8003f04:	d107      	bne.n	8003f16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fed6 	bl	8003cc0 <HAL_I2C_MemTxCpltCallback>
}
 8003f14:	e006      	b.n	8003f24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fe94 	bl	8003c4c <HAL_I2C_MasterTxCpltCallback>
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11d      	bne.n	8003f80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10b      	bne.n	8003f64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003f62:	e077      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	121b      	asrs	r3, r3, #8
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f7e:	e069      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10b      	bne.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f9e:	e059      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d152      	bne.n	800404e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b22      	cmp	r3, #34	@ 0x22
 8003fac:	d10d      	bne.n	8003fca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fbc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fc8:	e044      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b21      	cmp	r3, #33	@ 0x21
 8003fd8:	d112      	bne.n	8004000 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ffe:	e029      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d124      	bne.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b21      	cmp	r3, #33	@ 0x21
 800400e:	d121      	bne.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800401e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fe3a 	bl	8003cc0 <HAL_I2C_MemTxCpltCallback>
}
 800404c:	e002      	b.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff f99c 	bl	800338c <I2C_Flush_DR>
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b22      	cmp	r3, #34	@ 0x22
 800406e:	f040 80b9 	bne.w	80041e4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d921      	bls.n	80040ca <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	f040 8096 	bne.w	80041e4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80040c8:	e08c      	b.n	80041e4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d07f      	beq.n	80041d2 <I2C_MasterReceive_RXNE+0x176>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d002      	beq.n	80040de <I2C_MasterReceive_RXNE+0x82>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d179      	bne.n	80041d2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 fa6e 	bl	80055c0 <I2C_WaitOnSTOPRequestThroughIT>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d14c      	bne.n	8004184 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004108:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d10a      	bne.n	800415a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fdbd 	bl	8003cd2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004158:	e044      	b.n	80041e4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d002      	beq.n	800416e <I2C_MasterReceive_RXNE+0x112>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b20      	cmp	r3, #32
 800416c:	d103      	bne.n	8004176 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
 8004174:	e002      	b.n	800417c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2212      	movs	r2, #18
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fd6e 	bl	8003c5e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004182:	e02f      	b.n	80041e4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004192:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fd8a 	bl	8003ce4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041d0:	e008      	b.n	80041e4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e0:	605a      	str	r2, [r3, #4]
}
 80041e2:	e7ff      	b.n	80041e4 <I2C_MasterReceive_RXNE+0x188>
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004212:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800423a:	e0c4      	b.n	80043c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b03      	cmp	r3, #3
 8004244:	d129      	bne.n	800429a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004254:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d00a      	beq.n	8004272 <I2C_MasterReceive_BTF+0x86>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d007      	beq.n	8004272 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004270:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004298:	e095      	b.n	80043c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d17d      	bne.n	80043a0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d002      	beq.n	80042b0 <I2C_MasterReceive_BTF+0xc4>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d108      	bne.n	80042c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e016      	b.n	80042f0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d002      	beq.n	80042ce <I2C_MasterReceive_BTF+0xe2>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d108      	bne.n	80042e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800434a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d10a      	bne.n	8004376 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fcaf 	bl	8003cd2 <HAL_I2C_MemRxCpltCallback>
}
 8004374:	e027      	b.n	80043c6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d002      	beq.n	800438a <I2C_MasterReceive_BTF+0x19e>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b20      	cmp	r3, #32
 8004388:	d103      	bne.n	8004392 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004390:	e002      	b.n	8004398 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2212      	movs	r2, #18
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fc60 	bl	8003c5e <HAL_I2C_MasterRxCpltCallback>
}
 800439e:	e012      	b.n	80043c6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b40      	cmp	r3, #64	@ 0x40
 80043e0:	d117      	bne.n	8004412 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043fc:	e067      	b.n	80044ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
}
 8004410:	e05d      	b.n	80044ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800441a:	d133      	bne.n	8004484 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b21      	cmp	r3, #33	@ 0x21
 8004426:	d109      	bne.n	800443c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004438:	611a      	str	r2, [r3, #16]
 800443a:	e008      	b.n	800444e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <I2C_Master_SB+0x92>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	d108      	bne.n	8004472 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d032      	beq.n	80044ce <I2C_Master_SB+0x100>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02d      	beq.n	80044ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004480:	605a      	str	r2, [r3, #4]
}
 8004482:	e024      	b.n	80044ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10e      	bne.n	80044aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004490:	b29b      	uxth	r3, r3
 8004492:	11db      	asrs	r3, r3, #7
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f063 030f 	orn	r3, r3, #15
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
}
 80044a8:	e011      	b.n	80044ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10d      	bne.n	80044ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	11db      	asrs	r3, r3, #7
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f003 0306 	and.w	r3, r3, #6
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f063 030e 	orn	r3, r3, #14
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	611a      	str	r2, [r3, #16]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <I2C_Master_ADD10+0x26>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <I2C_Master_ADD10+0x48>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451e:	605a      	str	r2, [r3, #4]
  }
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800452a:	b480      	push	{r7}
 800452c:	b091      	sub	sp, #68	@ 0x44
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004538:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b22      	cmp	r3, #34	@ 0x22
 8004552:	f040 8174 	bne.w	800483e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <I2C_Master_ADDR+0x54>
 800455e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004562:	2b40      	cmp	r3, #64	@ 0x40
 8004564:	d10b      	bne.n	800457e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	633b      	str	r3, [r7, #48]	@ 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	633b      	str	r3, [r7, #48]	@ 0x30
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	e16b      	b.n	8004856 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11d      	bne.n	80045c2 <I2C_Master_ADDR+0x98>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800458e:	d118      	bne.n	80045c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	2300      	movs	r3, #0
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	651a      	str	r2, [r3, #80]	@ 0x50
 80045c0:	e149      	b.n	8004856 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d113      	bne.n	80045f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045cc:	2300      	movs	r3, #0
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e120      	b.n	8004836 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	f040 808a 	bne.w	8004714 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004606:	d137      	bne.n	8004678 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004616:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004626:	d113      	bne.n	8004650 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004636:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	e0f2      	b.n	8004836 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e0de      	b.n	8004836 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	2b08      	cmp	r3, #8
 800467c:	d02e      	beq.n	80046dc <I2C_Master_ADDR+0x1b2>
 800467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004680:	2b20      	cmp	r3, #32
 8004682:	d02b      	beq.n	80046dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004686:	2b12      	cmp	r3, #18
 8004688:	d102      	bne.n	8004690 <I2C_Master_ADDR+0x166>
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	2b01      	cmp	r3, #1
 800468e:	d125      	bne.n	80046dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00e      	beq.n	80046b4 <I2C_Master_ADDR+0x18a>
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	2b02      	cmp	r3, #2
 800469a:	d00b      	beq.n	80046b4 <I2C_Master_ADDR+0x18a>
 800469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d008      	beq.n	80046b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e007      	b.n	80046c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	e0ac      	b.n	8004836 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e090      	b.n	8004836 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d158      	bne.n	80047d0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	2b04      	cmp	r3, #4
 8004722:	d021      	beq.n	8004768 <I2C_Master_ADDR+0x23e>
 8004724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004726:	2b02      	cmp	r3, #2
 8004728:	d01e      	beq.n	8004768 <I2C_Master_ADDR+0x23e>
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472c:	2b10      	cmp	r3, #16
 800472e:	d01b      	beq.n	8004768 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e012      	b.n	800478e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004776:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479c:	d14b      	bne.n	8004836 <I2C_Master_ADDR+0x30c>
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047a4:	d00b      	beq.n	80047be <I2C_Master_ADDR+0x294>
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d008      	beq.n	80047be <I2C_Master_ADDR+0x294>
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d005      	beq.n	80047be <I2C_Master_ADDR+0x294>
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d002      	beq.n	80047be <I2C_Master_ADDR+0x294>
 80047b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d13b      	bne.n	8004836 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	e032      	b.n	8004836 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047de:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ee:	d117      	bne.n	8004820 <I2C_Master_ADDR+0x2f6>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047f6:	d00b      	beq.n	8004810 <I2C_Master_ADDR+0x2e6>
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d008      	beq.n	8004810 <I2C_Master_ADDR+0x2e6>
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	2b08      	cmp	r3, #8
 8004802:	d005      	beq.n	8004810 <I2C_Master_ADDR+0x2e6>
 8004804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004806:	2b10      	cmp	r3, #16
 8004808:	d002      	beq.n	8004810 <I2C_Master_ADDR+0x2e6>
 800480a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480c:	2b20      	cmp	r3, #32
 800480e:	d107      	bne.n	8004820 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800481e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800483c:	e00b      	b.n	8004856 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
}
 8004854:	e7ff      	b.n	8004856 <I2C_Master_ADDR+0x32c>
 8004856:	bf00      	nop
 8004858:	3744      	adds	r7, #68	@ 0x44
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02b      	beq.n	80048d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d114      	bne.n	80048d2 <I2C_SlaveTransmit_TXE+0x72>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b29      	cmp	r3, #41	@ 0x29
 80048ac:	d111      	bne.n	80048d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2221      	movs	r2, #33	@ 0x21
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2228      	movs	r2, #40	@ 0x28
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff f9cf 	bl	8003c70 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d011      	beq.n	8004910 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004928:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d02c      	beq.n	800498e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d114      	bne.n	800498e <I2C_SlaveReceive_RXNE+0x74>
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b2a      	cmp	r3, #42	@ 0x2a
 8004968:	d111      	bne.n	800498e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004978:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2222      	movs	r2, #34	@ 0x22
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2228      	movs	r2, #40	@ 0x28
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff f97a 	bl	8003c82 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049f2:	2b28      	cmp	r3, #40	@ 0x28
 80049f4:	d127      	bne.n	8004a46 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a04:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	09db      	lsrs	r3, r3, #7
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	81bb      	strh	r3, [r7, #12]
 8004a28:	e002      	b.n	8004a30 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a38:	89ba      	ldrh	r2, [r7, #12]
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff f928 	bl	8003c94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a44:	e00e      	b.n	8004a64 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ac8:	d172      	bne.n	8004bb0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b22      	cmp	r3, #34	@ 0x22
 8004ace:	d002      	beq.n	8004ad6 <I2C_Slave_STOPF+0x6a>
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ad4:	d135      	bne.n	8004b42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd ff8a 	bl	8002a28 <HAL_DMA_GetState>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d049      	beq.n	8004bae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	4a69      	ldr	r2, [pc, #420]	@ (8004cc4 <I2C_Slave_STOPF+0x258>)
 8004b20:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fe00 	bl	800272c <HAL_DMA_Abort_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d03d      	beq.n	8004bae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b40:	e035      	b.n	8004bae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f043 0204 	orr.w	r2, r3, #4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fd ff54 	bl	8002a28 <HAL_DMA_GetState>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d014      	beq.n	8004bb0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	4a4e      	ldr	r2, [pc, #312]	@ (8004cc4 <I2C_Slave_STOPF+0x258>)
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd fdca 	bl	800272c <HAL_DMA_Abort_IT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4798      	blx	r3
 8004bac:	e000      	b.n	8004bb0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d03e      	beq.n	8004c38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d112      	bne.n	8004bee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d112      	bne.n	8004c22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f043 0204 	orr.w	r2, r3, #4
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8b7 	bl	8004db4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c46:	e039      	b.n	8004cbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c4c:	d109      	bne.n	8004c62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2228      	movs	r2, #40	@ 0x28
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff f810 	bl	8003c82 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b28      	cmp	r3, #40	@ 0x28
 8004c6c:	d111      	bne.n	8004c92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a15      	ldr	r2, [pc, #84]	@ (8004cc8 <I2C_Slave_STOPF+0x25c>)
 8004c72:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff f80f 	bl	8003cae <HAL_I2C_ListenCpltCallback>
}
 8004c90:	e014      	b.n	8004cbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	2b22      	cmp	r3, #34	@ 0x22
 8004c98:	d002      	beq.n	8004ca0 <I2C_Slave_STOPF+0x234>
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b22      	cmp	r3, #34	@ 0x22
 8004c9e:	d10d      	bne.n	8004cbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fe ffe3 	bl	8003c82 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	0800511d 	.word	0x0800511d
 8004cc8:	ffff0000 	.word	0xffff0000

08004ccc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cda:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d002      	beq.n	8004cee <I2C_Slave_AF+0x22>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d129      	bne.n	8004d42 <I2C_Slave_AF+0x76>
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b28      	cmp	r3, #40	@ 0x28
 8004cf2:	d126      	bne.n	8004d42 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <I2C_Slave_AF+0xe4>)
 8004cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d08:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d12:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d22:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fe ffb7 	bl	8003cae <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d40:	e031      	b.n	8004da6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b21      	cmp	r3, #33	@ 0x21
 8004d46:	d129      	bne.n	8004d9c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <I2C_Slave_AF+0xe4>)
 8004d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2221      	movs	r2, #33	@ 0x21
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d72:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d7c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fe fafc 	bl	800338c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fe ff6b 	bl	8003c70 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d9a:	e004      	b.n	8004da6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da4:	615a      	str	r2, [r3, #20]
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	ffff0000 	.word	0xffff0000

08004db4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d002      	beq.n	8004dd8 <I2C_ITError+0x24>
 8004dd2:	7bbb      	ldrb	r3, [r7, #14]
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d10a      	bne.n	8004dee <I2C_ITError+0x3a>
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b22      	cmp	r3, #34	@ 0x22
 8004ddc:	d107      	bne.n	8004dee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004df4:	2b28      	cmp	r3, #40	@ 0x28
 8004df6:	d107      	bne.n	8004e08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2228      	movs	r2, #40	@ 0x28
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e06:	e015      	b.n	8004e34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e16:	d00a      	beq.n	8004e2e <I2C_ITError+0x7a>
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b60      	cmp	r3, #96	@ 0x60
 8004e1c:	d007      	beq.n	8004e2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e42:	d162      	bne.n	8004f0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d020      	beq.n	8004ea4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e66:	4a6a      	ldr	r2, [pc, #424]	@ (8005010 <I2C_ITError+0x25c>)
 8004e68:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd fc5c 	bl	800272c <HAL_DMA_Abort_IT>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8089 	beq.w	8004f8e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4798      	blx	r3
 8004ea2:	e074      	b.n	8004f8e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	4a59      	ldr	r2, [pc, #356]	@ (8005010 <I2C_ITError+0x25c>)
 8004eaa:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fd fc3b 	bl	800272c <HAL_DMA_Abort_IT>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d068      	beq.n	8004f8e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d10b      	bne.n	8004ee2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
 8004f08:	e041      	b.n	8004f8e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b60      	cmp	r3, #96	@ 0x60
 8004f14:	d125      	bne.n	8004f62 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b40      	cmp	r3, #64	@ 0x40
 8004f30:	d10b      	bne.n	8004f4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fe fecb 	bl	8003cf6 <HAL_I2C_AbortCpltCallback>
 8004f60:	e015      	b.n	8004f8e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6c:	2b40      	cmp	r3, #64	@ 0x40
 8004f6e:	d10b      	bne.n	8004f88 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fe feab 	bl	8003ce4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d113      	bne.n	8005008 <I2C_ITError+0x254>
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b28      	cmp	r3, #40	@ 0x28
 8004fe4:	d110      	bne.n	8005008 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <I2C_ITError+0x260>)
 8004fea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe fe53 	bl	8003cae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	0800511d 	.word	0x0800511d
 8005014:	ffff0000 	.word	0xffff0000

08005018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	460b      	mov	r3, r1
 8005026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d006      	beq.n	8005042 <I2C_MasterRequestWrite+0x2a>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d003      	beq.n	8005042 <I2C_MasterRequestWrite+0x2a>
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005040:	d108      	bne.n	8005054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e00b      	b.n	800506c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	2b12      	cmp	r3, #18
 800505a:	d107      	bne.n	800506c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800506a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f8f7 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005092:	d103      	bne.n	800509c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800509a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e035      	b.n	800510c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050a8:	d108      	bne.n	80050bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050aa:	897b      	ldrh	r3, [r7, #10]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050b8:	611a      	str	r2, [r3, #16]
 80050ba:	e01b      	b.n	80050f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050bc:	897b      	ldrh	r3, [r7, #10]
 80050be:	11db      	asrs	r3, r3, #7
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0306 	and.w	r3, r3, #6
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f063 030f 	orn	r3, r3, #15
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	490e      	ldr	r1, [pc, #56]	@ (8005114 <I2C_MasterRequestWrite+0xfc>)
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f940 	bl	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e010      	b.n	800510c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4907      	ldr	r1, [pc, #28]	@ (8005118 <I2C_MasterRequestWrite+0x100>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f930 	bl	8005360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	00010008 	.word	0x00010008
 8005118:	00010002 	.word	0x00010002

0800511c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005134:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005136:	4b4b      	ldr	r3, [pc, #300]	@ (8005264 <I2C_DMAAbort+0x148>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	4a4a      	ldr	r2, [pc, #296]	@ (8005268 <I2C_DMAAbort+0x14c>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0a1a      	lsrs	r2, r3, #8
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00da      	lsls	r2, r3, #3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005162:	e00a      	b.n	800517a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005178:	d0ea      	beq.n	8005150 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005186:	2200      	movs	r2, #0
 8005188:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	2200      	movs	r2, #0
 8005198:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051bc:	2200      	movs	r2, #0
 80051be:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	2200      	movs	r2, #0
 80051ce:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b60      	cmp	r3, #96	@ 0x60
 80051ea:	d10e      	bne.n	800520a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7fe fd77 	bl	8003cf6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005208:	e027      	b.n	800525a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005210:	2b28      	cmp	r3, #40	@ 0x28
 8005212:	d117      	bne.n	8005244 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005232:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2228      	movs	r2, #40	@ 0x28
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005242:	e007      	b.n	8005254 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005254:	6978      	ldr	r0, [r7, #20]
 8005256:	f7fe fd45 	bl	8003ce4 <HAL_I2C_ErrorCallback>
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000010 	.word	0x20000010
 8005268:	14f8b589 	.word	0x14f8b589

0800526c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800527c:	e048      	b.n	8005310 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d044      	beq.n	8005310 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fd f85b 	bl	8002340 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d139      	bne.n	8005310 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d10d      	bne.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	43da      	mvns	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	e00c      	b.n	80052dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	43da      	mvns	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4013      	ands	r3, r2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d116      	bne.n	8005310 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e023      	b.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10d      	bne.n	8005336 <I2C_WaitOnFlagUntilTimeout+0xca>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	43da      	mvns	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	e00c      	b.n	8005350 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	43da      	mvns	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	429a      	cmp	r2, r3
 8005354:	d093      	beq.n	800527e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536e:	e071      	b.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537e:	d123      	bne.n	80053c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800538e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	f043 0204 	orr.w	r2, r3, #4
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e067      	b.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d041      	beq.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fc ffb6 	bl	8002340 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d136      	bne.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10c      	bne.n	800540a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	43da      	mvns	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf14      	ite	ne
 8005402:	2301      	movne	r3, #1
 8005404:	2300      	moveq	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	e00b      	b.n	8005422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	43da      	mvns	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4013      	ands	r3, r2
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e021      	b.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10c      	bne.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	43da      	mvns	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e00b      	b.n	8005490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	43da      	mvns	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf14      	ite	ne
 800548a:	2301      	movne	r3, #1
 800548c:	2300      	moveq	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	f47f af6d 	bne.w	8005370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ac:	e034      	b.n	8005518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f8b8 	bl	8005624 <I2C_IsAcknowledgeFailed>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e034      	b.n	8005528 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d028      	beq.n	8005518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fc ff3b 	bl	8002340 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11d      	bne.n	8005518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b80      	cmp	r3, #128	@ 0x80
 80054e8:	d016      	beq.n	8005518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e007      	b.n	8005528 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005522:	2b80      	cmp	r3, #128	@ 0x80
 8005524:	d1c3      	bne.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800553c:	e034      	b.n	80055a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f870 	bl	8005624 <I2C_IsAcknowledgeFailed>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e034      	b.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d028      	beq.n	80055a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fc fef3 	bl	8002340 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11d      	bne.n	80055a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d016      	beq.n	80055a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e007      	b.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d1c3      	bne.n	800553e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80055cc:	4b13      	ldr	r3, [pc, #76]	@ (800561c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	4a13      	ldr	r2, [pc, #76]	@ (8005620 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	0a1a      	lsrs	r2, r3, #8
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d107      	bne.n	80055fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e008      	b.n	8005610 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800560c:	d0e9      	beq.n	80055e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000010 	.word	0x20000010
 8005620:	14f8b589 	.word	0x14f8b589

08005624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563a:	d11b      	bne.n	8005674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	f043 0204 	orr.w	r2, r3, #4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005690:	d103      	bne.n	800569a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005698:	e007      	b.n	80056aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056a2:	d102      	bne.n	80056aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2208      	movs	r2, #8
 80056a8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80056c4:	f000 f808 	bl	80056d8 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80056c8:	4b02      	ldr	r3, [pc, #8]	@ (80056d4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80056ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80056ce:	615a      	str	r2, [r3, #20]
  }
}
 80056d0:	bf00      	nop
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40010400 	.word	0x40010400

080056d8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e272      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8087 	beq.w	8005812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005704:	4b92      	ldr	r3, [pc, #584]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b04      	cmp	r3, #4
 800570e:	d00c      	beq.n	800572a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005710:	4b8f      	ldr	r3, [pc, #572]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d112      	bne.n	8005742 <HAL_RCC_OscConfig+0x5e>
 800571c:	4b8c      	ldr	r3, [pc, #560]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005728:	d10b      	bne.n	8005742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572a:	4b89      	ldr	r3, [pc, #548]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d06c      	beq.n	8005810 <HAL_RCC_OscConfig+0x12c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d168      	bne.n	8005810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e24c      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800574a:	d106      	bne.n	800575a <HAL_RCC_OscConfig+0x76>
 800574c:	4b80      	ldr	r3, [pc, #512]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a7f      	ldr	r2, [pc, #508]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e02e      	b.n	80057b8 <HAL_RCC_OscConfig+0xd4>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10c      	bne.n	800577c <HAL_RCC_OscConfig+0x98>
 8005762:	4b7b      	ldr	r3, [pc, #492]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a7a      	ldr	r2, [pc, #488]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b78      	ldr	r3, [pc, #480]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a77      	ldr	r2, [pc, #476]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	e01d      	b.n	80057b8 <HAL_RCC_OscConfig+0xd4>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005784:	d10c      	bne.n	80057a0 <HAL_RCC_OscConfig+0xbc>
 8005786:	4b72      	ldr	r3, [pc, #456]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a71      	ldr	r2, [pc, #452]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800578c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4b6f      	ldr	r3, [pc, #444]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6e      	ldr	r2, [pc, #440]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e00b      	b.n	80057b8 <HAL_RCC_OscConfig+0xd4>
 80057a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80057a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	4b68      	ldr	r3, [pc, #416]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a67      	ldr	r2, [pc, #412]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80057b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d013      	beq.n	80057e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fc fdbe 	bl	8002340 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c8:	f7fc fdba 	bl	8002340 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	@ 0x64
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e200      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	4b5d      	ldr	r3, [pc, #372]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0xe4>
 80057e6:	e014      	b.n	8005812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e8:	f7fc fdaa 	bl	8002340 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f0:	f7fc fda6 	bl	8002340 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b64      	cmp	r3, #100	@ 0x64
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e1ec      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005802:	4b53      	ldr	r3, [pc, #332]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x10c>
 800580e:	e000      	b.n	8005812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d063      	beq.n	80058e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800581e:	4b4c      	ldr	r3, [pc, #304]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800582a:	4b49      	ldr	r3, [pc, #292]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d11c      	bne.n	8005870 <HAL_RCC_OscConfig+0x18c>
 8005836:	4b46      	ldr	r3, [pc, #280]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d116      	bne.n	8005870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	4b43      	ldr	r3, [pc, #268]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_RCC_OscConfig+0x176>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e1c0      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585a:	4b3d      	ldr	r3, [pc, #244]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4939      	ldr	r1, [pc, #228]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586e:	e03a      	b.n	80058e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d020      	beq.n	80058ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005878:	4b36      	ldr	r3, [pc, #216]	@ (8005954 <HAL_RCC_OscConfig+0x270>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fc fd5f 	bl	8002340 <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005886:	f7fc fd5b 	bl	8002340 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e1a1      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005898:	4b2d      	ldr	r3, [pc, #180]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4927      	ldr	r1, [pc, #156]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	600b      	str	r3, [r1, #0]
 80058b8:	e015      	b.n	80058e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ba:	4b26      	ldr	r3, [pc, #152]	@ (8005954 <HAL_RCC_OscConfig+0x270>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c0:	f7fc fd3e 	bl	8002340 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c8:	f7fc fd3a 	bl	8002340 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e180      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058da:	4b1d      	ldr	r3, [pc, #116]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d03a      	beq.n	8005968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d019      	beq.n	800592e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fa:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <HAL_RCC_OscConfig+0x274>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005900:	f7fc fd1e 	bl	8002340 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005908:	f7fc fd1a 	bl	8002340 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e160      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <HAL_RCC_OscConfig+0x26c>)
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005926:	2001      	movs	r0, #1
 8005928:	f000 faba 	bl	8005ea0 <RCC_Delay>
 800592c:	e01c      	b.n	8005968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <HAL_RCC_OscConfig+0x274>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005934:	f7fc fd04 	bl	8002340 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593a:	e00f      	b.n	800595c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593c:	f7fc fd00 	bl	8002340 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d908      	bls.n	800595c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e146      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	42420000 	.word	0x42420000
 8005958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595c:	4b92      	ldr	r3, [pc, #584]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e9      	bne.n	800593c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80a6 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597a:	4b8b      	ldr	r3, [pc, #556]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005986:	4b88      	ldr	r3, [pc, #544]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	4a87      	ldr	r2, [pc, #540]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 800598c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005990:	61d3      	str	r3, [r2, #28]
 8005992:	4b85      	ldr	r3, [pc, #532]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a2:	4b82      	ldr	r3, [pc, #520]	@ (8005bac <HAL_RCC_OscConfig+0x4c8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d118      	bne.n	80059e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ae:	4b7f      	ldr	r3, [pc, #508]	@ (8005bac <HAL_RCC_OscConfig+0x4c8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a7e      	ldr	r2, [pc, #504]	@ (8005bac <HAL_RCC_OscConfig+0x4c8>)
 80059b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ba:	f7fc fcc1 	bl	8002340 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c2:	f7fc fcbd 	bl	8002340 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b64      	cmp	r3, #100	@ 0x64
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e103      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d4:	4b75      	ldr	r3, [pc, #468]	@ (8005bac <HAL_RCC_OscConfig+0x4c8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d106      	bne.n	80059f6 <HAL_RCC_OscConfig+0x312>
 80059e8:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	4a6e      	ldr	r2, [pc, #440]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6213      	str	r3, [r2, #32]
 80059f4:	e02d      	b.n	8005a52 <HAL_RCC_OscConfig+0x36e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x334>
 80059fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4a69      	ldr	r2, [pc, #420]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6213      	str	r3, [r2, #32]
 8005a0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4a66      	ldr	r2, [pc, #408]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	6213      	str	r3, [r2, #32]
 8005a16:	e01c      	b.n	8005a52 <HAL_RCC_OscConfig+0x36e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b05      	cmp	r3, #5
 8005a1e:	d10c      	bne.n	8005a3a <HAL_RCC_OscConfig+0x356>
 8005a20:	4b61      	ldr	r3, [pc, #388]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	4a60      	ldr	r2, [pc, #384]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	6213      	str	r3, [r2, #32]
 8005a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	4a5d      	ldr	r2, [pc, #372]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	6213      	str	r3, [r2, #32]
 8005a38:	e00b      	b.n	8005a52 <HAL_RCC_OscConfig+0x36e>
 8005a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	4a5a      	ldr	r2, [pc, #360]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6213      	str	r3, [r2, #32]
 8005a46:	4b58      	ldr	r3, [pc, #352]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4a57      	ldr	r2, [pc, #348]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	f023 0304 	bic.w	r3, r3, #4
 8005a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d015      	beq.n	8005a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5a:	f7fc fc71 	bl	8002340 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a62:	f7fc fc6d 	bl	8002340 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0b1      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a78:	4b4b      	ldr	r3, [pc, #300]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0ee      	beq.n	8005a62 <HAL_RCC_OscConfig+0x37e>
 8005a84:	e014      	b.n	8005ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a86:	f7fc fc5b 	bl	8002340 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a8c:	e00a      	b.n	8005aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8e:	f7fc fc57 	bl	8002340 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e09b      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa4:	4b40      	ldr	r3, [pc, #256]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ee      	bne.n	8005a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8087 	beq.w	8005bda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005acc:	4b36      	ldr	r3, [pc, #216]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 030c 	and.w	r3, r3, #12
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d061      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d146      	bne.n	8005b6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae0:	4b33      	ldr	r3, [pc, #204]	@ (8005bb0 <HAL_RCC_OscConfig+0x4cc>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fc fc2b 	bl	8002340 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fc fc27 	bl	8002340 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e06d      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b00:	4b29      	ldr	r3, [pc, #164]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b14:	d108      	bne.n	8005b28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b16:	4b24      	ldr	r3, [pc, #144]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4921      	ldr	r1, [pc, #132]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b28:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a19      	ldr	r1, [r3, #32]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	491b      	ldr	r1, [pc, #108]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b40:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <HAL_RCC_OscConfig+0x4cc>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b46:	f7fc fbfb 	bl	8002340 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4e:	f7fc fbf7 	bl	8002340 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e03d      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b60:	4b11      	ldr	r3, [pc, #68]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x46a>
 8005b6c:	e035      	b.n	8005bda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b10      	ldr	r3, [pc, #64]	@ (8005bb0 <HAL_RCC_OscConfig+0x4cc>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fc fbe4 	bl	8002340 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fc fbe0 	bl	8002340 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e026      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <HAL_RCC_OscConfig+0x4c4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1f0      	bne.n	8005b7c <HAL_RCC_OscConfig+0x498>
 8005b9a:	e01e      	b.n	8005bda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e019      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <HAL_RCC_OscConfig+0x500>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d001      	beq.n	8005bda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40021000 	.word	0x40021000

08005be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0d0      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d910      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b67      	ldr	r3, [pc, #412]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 0207 	bic.w	r2, r3, #7
 8005c12:	4965      	ldr	r1, [pc, #404]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b63      	ldr	r3, [pc, #396]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0b8      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c44:	4b59      	ldr	r3, [pc, #356]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a58      	ldr	r2, [pc, #352]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c5c:	4b53      	ldr	r3, [pc, #332]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a52      	ldr	r2, [pc, #328]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c68:	4b50      	ldr	r3, [pc, #320]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	494d      	ldr	r1, [pc, #308]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d040      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b47      	ldr	r3, [pc, #284]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d115      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d107      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca6:	4b41      	ldr	r3, [pc, #260]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e073      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e06b      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc6:	4b39      	ldr	r3, [pc, #228]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f023 0203 	bic.w	r2, r3, #3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4936      	ldr	r1, [pc, #216]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd8:	f7fc fb32 	bl	8002340 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce0:	f7fc fb2e 	bl	8002340 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e053      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 020c 	and.w	r2, r3, #12
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d1eb      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d08:	4b27      	ldr	r3, [pc, #156]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d210      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 0207 	bic.w	r2, r3, #7
 8005d1e:	4922      	ldr	r1, [pc, #136]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e032      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d44:	4b19      	ldr	r3, [pc, #100]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4916      	ldr	r1, [pc, #88]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d62:	4b12      	ldr	r3, [pc, #72]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d76:	f000 f821 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490a      	ldr	r1, [pc, #40]	@ (8005db0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <HAL_RCC_ClockConfig+0x1cc>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_RCC_ClockConfig+0x1d0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fc fa90 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40022000 	.word	0x40022000
 8005dac:	40021000 	.word	0x40021000
 8005db0:	0800b35c 	.word	0x0800b35c
 8005db4:	20000010 	.word	0x20000010
 8005db8:	20000014 	.word	0x20000014

08005dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d002      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0x30>
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d003      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0x36>
 8005dea:	e027      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dec:	4b19      	ldr	r3, [pc, #100]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dee:	613b      	str	r3, [r7, #16]
      break;
 8005df0:	e027      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	0c9b      	lsrs	r3, r3, #18
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	4a17      	ldr	r2, [pc, #92]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dfc:	5cd3      	ldrb	r3, [r2, r3]
 8005dfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d010      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e0a:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	0c5b      	lsrs	r3, r3, #17
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	4a11      	ldr	r2, [pc, #68]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e16:	5cd3      	ldrb	r3, [r2, r3]
 8005e18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e1e:	fb03 f202 	mul.w	r2, r3, r2
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e004      	b.n	8005e36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	613b      	str	r3, [r7, #16]
      break;
 8005e3a:	e002      	b.n	8005e42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e3e:	613b      	str	r3, [r7, #16]
      break;
 8005e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e42:	693b      	ldr	r3, [r7, #16]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000
 8005e54:	007a1200 	.word	0x007a1200
 8005e58:	0800b374 	.word	0x0800b374
 8005e5c:	0800b384 	.word	0x0800b384
 8005e60:	003d0900 	.word	0x003d0900

08005e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e68:	4b02      	ldr	r3, [pc, #8]	@ (8005e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr
 8005e74:	20000010 	.word	0x20000010

08005e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e7c:	f7ff fff2 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005e80:	4602      	mov	r2, r0
 8005e82:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	4903      	ldr	r1, [pc, #12]	@ (8005e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e8e:	5ccb      	ldrb	r3, [r1, r3]
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800b36c 	.word	0x0800b36c

08005ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed4 <RCC_Delay+0x34>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed8 <RCC_Delay+0x38>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0a5b      	lsrs	r3, r3, #9
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ebc:	bf00      	nop
  }
  while (Delay --);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1e5a      	subs	r2, r3, #1
 8005ec2:	60fa      	str	r2, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f9      	bne.n	8005ebc <RCC_Delay+0x1c>
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	20000010 	.word	0x20000010
 8005ed8:	10624dd3 	.word	0x10624dd3

08005edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e041      	b.n	8005f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb ffa6 	bl	8001e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f000 fe9a 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d001      	beq.n	8005f94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e032      	b.n	8005ffa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <HAL_TIM_Base_Start+0x88>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIM_Base_Start+0x48>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIM_Base_Start+0x48>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a14      	ldr	r2, [pc, #80]	@ (8006008 <HAL_TIM_Base_Start+0x8c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_Base_Start+0x48>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a13      	ldr	r2, [pc, #76]	@ (800600c <HAL_TIM_Base_Start+0x90>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d010      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	e007      	b.n	8005ff8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800

08006010 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10f      	bne.n	8006048 <HAL_TIM_Base_Stop+0x38>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6a1a      	ldr	r2, [r3, #32]
 800602e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <HAL_TIM_Base_Stop+0x38>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d001      	beq.n	8006074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e03a      	b.n	80060ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a18      	ldr	r2, [pc, #96]	@ (80060f4 <HAL_TIM_Base_Start_IT+0x98>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x58>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609e:	d009      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x58>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x58>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <HAL_TIM_Base_Start_IT+0xa0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d111      	bne.n	80060d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d010      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e007      	b.n	80060e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800

08006100 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e041      	b.n	8006196 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f839 	bl	800619e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f000 fd88 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2200      	movs	r2, #0
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 ff57 	bl	8007076 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10f      	bne.n	80061f8 <HAL_TIM_IC_Stop+0x48>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a1a      	ldr	r2, [r3, #32]
 80061de:	f240 4344 	movw	r3, #1092	@ 0x444
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <HAL_TIM_IC_Stop+0x48>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <HAL_TIM_IC_Stop+0x58>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006206:	e013      	b.n	8006230 <HAL_TIM_IC_Stop+0x80>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d104      	bne.n	8006218 <HAL_TIM_IC_Stop+0x68>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006216:	e00b      	b.n	8006230 <HAL_TIM_IC_Stop+0x80>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b08      	cmp	r3, #8
 800621c:	d104      	bne.n	8006228 <HAL_TIM_IC_Stop+0x78>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006226:	e003      	b.n	8006230 <HAL_TIM_IC_Stop+0x80>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <HAL_TIM_IC_Stop+0x90>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800623e:	e013      	b.n	8006268 <HAL_TIM_IC_Stop+0xb8>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b04      	cmp	r3, #4
 8006244:	d104      	bne.n	8006250 <HAL_TIM_IC_Stop+0xa0>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800624e:	e00b      	b.n	8006268 <HAL_TIM_IC_Stop+0xb8>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d104      	bne.n	8006260 <HAL_TIM_IC_Stop+0xb0>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800625e:	e003      	b.n	8006268 <HAL_TIM_IC_Stop+0xb8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_TIM_IC_Start_DMA+0x22>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006292:	b2db      	uxtb	r3, r3
 8006294:	e013      	b.n	80062be <HAL_TIM_IC_Start_DMA+0x4a>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_IC_Start_DMA+0x32>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e00b      	b.n	80062be <HAL_TIM_IC_Start_DMA+0x4a>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_IC_Start_DMA+0x42>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e003      	b.n	80062be <HAL_TIM_IC_Start_DMA+0x4a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <HAL_TIM_IC_Start_DMA+0x5c>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	e013      	b.n	80062f8 <HAL_TIM_IC_Start_DMA+0x84>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d104      	bne.n	80062e0 <HAL_TIM_IC_Start_DMA+0x6c>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e00b      	b.n	80062f8 <HAL_TIM_IC_Start_DMA+0x84>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d104      	bne.n	80062f0 <HAL_TIM_IC_Start_DMA+0x7c>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e003      	b.n	80062f8 <HAL_TIM_IC_Start_DMA+0x84>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80062fa:	7dbb      	ldrb	r3, [r7, #22]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d002      	beq.n	8006306 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006300:	7d7b      	ldrb	r3, [r7, #21]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d101      	bne.n	800630a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006306:	2302      	movs	r3, #2
 8006308:	e132      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800630a:	7dbb      	ldrb	r3, [r7, #22]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d143      	bne.n	8006398 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006310:	7d7b      	ldrb	r3, [r7, #21]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d140      	bne.n	8006398 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_TIM_IC_Start_DMA+0xae>
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e124      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_IC_Start_DMA+0xc2>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006334:	e013      	b.n	800635e <HAL_TIM_IC_Start_DMA+0xea>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d104      	bne.n	8006346 <HAL_TIM_IC_Start_DMA+0xd2>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006344:	e00b      	b.n	800635e <HAL_TIM_IC_Start_DMA+0xea>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d104      	bne.n	8006356 <HAL_TIM_IC_Start_DMA+0xe2>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006354:	e003      	b.n	800635e <HAL_TIM_IC_Start_DMA+0xea>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <HAL_TIM_IC_Start_DMA+0xfa>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 800636c:	e016      	b.n	800639c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b04      	cmp	r3, #4
 8006372:	d104      	bne.n	800637e <HAL_TIM_IC_Start_DMA+0x10a>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 800637c:	e00e      	b.n	800639c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b08      	cmp	r3, #8
 8006382:	d104      	bne.n	800638e <HAL_TIM_IC_Start_DMA+0x11a>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 800638c:	e006      	b.n	800639c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8006396:	e001      	b.n	800639c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0e9      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2201      	movs	r2, #1
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fe66 	bl	8007076 <TIM_CCxChannelCmd>

  switch (Channel)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	f200 80ad 	bhi.w	800650c <HAL_TIM_IC_Start_DMA+0x298>
 80063b2:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <HAL_TIM_IC_Start_DMA+0x144>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063ed 	.word	0x080063ed
 80063bc:	0800650d 	.word	0x0800650d
 80063c0:	0800650d 	.word	0x0800650d
 80063c4:	0800650d 	.word	0x0800650d
 80063c8:	08006435 	.word	0x08006435
 80063cc:	0800650d 	.word	0x0800650d
 80063d0:	0800650d 	.word	0x0800650d
 80063d4:	0800650d 	.word	0x0800650d
 80063d8:	0800647d 	.word	0x0800647d
 80063dc:	0800650d 	.word	0x0800650d
 80063e0:	0800650d 	.word	0x0800650d
 80063e4:	0800650d 	.word	0x0800650d
 80063e8:	080064c5 	.word	0x080064c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f0:	4a61      	ldr	r2, [pc, #388]	@ (8006578 <HAL_TIM_IC_Start_DMA+0x304>)
 80063f2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	4a60      	ldr	r2, [pc, #384]	@ (800657c <HAL_TIM_IC_Start_DMA+0x308>)
 80063fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	4a5f      	ldr	r2, [pc, #380]	@ (8006580 <HAL_TIM_IC_Start_DMA+0x30c>)
 8006402:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3334      	adds	r3, #52	@ 0x34
 800640e:	4619      	mov	r1, r3
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	887b      	ldrh	r3, [r7, #2]
 8006414:	f7fc f92a 	bl	800266c <HAL_DMA_Start_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e0a6      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006430:	60da      	str	r2, [r3, #12]
      break;
 8006432:	e06e      	b.n	8006512 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	4a4f      	ldr	r2, [pc, #316]	@ (8006578 <HAL_TIM_IC_Start_DMA+0x304>)
 800643a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	4a4e      	ldr	r2, [pc, #312]	@ (800657c <HAL_TIM_IC_Start_DMA+0x308>)
 8006442:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	4a4d      	ldr	r2, [pc, #308]	@ (8006580 <HAL_TIM_IC_Start_DMA+0x30c>)
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3338      	adds	r3, #56	@ 0x38
 8006456:	4619      	mov	r1, r3
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	887b      	ldrh	r3, [r7, #2]
 800645c:	f7fc f906 	bl	800266c <HAL_DMA_Start_IT>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e082      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006478:	60da      	str	r2, [r3, #12]
      break;
 800647a:	e04a      	b.n	8006512 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006480:	4a3d      	ldr	r2, [pc, #244]	@ (8006578 <HAL_TIM_IC_Start_DMA+0x304>)
 8006482:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	4a3c      	ldr	r2, [pc, #240]	@ (800657c <HAL_TIM_IC_Start_DMA+0x308>)
 800648a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	4a3b      	ldr	r2, [pc, #236]	@ (8006580 <HAL_TIM_IC_Start_DMA+0x30c>)
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	333c      	adds	r3, #60	@ 0x3c
 800649e:	4619      	mov	r1, r3
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	887b      	ldrh	r3, [r7, #2]
 80064a4:	f7fc f8e2 	bl	800266c <HAL_DMA_Start_IT>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e05e      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064c0:	60da      	str	r2, [r3, #12]
      break;
 80064c2:	e026      	b.n	8006512 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006578 <HAL_TIM_IC_Start_DMA+0x304>)
 80064ca:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	4a2a      	ldr	r2, [pc, #168]	@ (800657c <HAL_TIM_IC_Start_DMA+0x308>)
 80064d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	4a29      	ldr	r2, [pc, #164]	@ (8006580 <HAL_TIM_IC_Start_DMA+0x30c>)
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3340      	adds	r3, #64	@ 0x40
 80064e6:	4619      	mov	r1, r3
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	887b      	ldrh	r3, [r7, #2]
 80064ec:	f7fc f8be 	bl	800266c <HAL_DMA_Start_IT>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e03a      	b.n	8006570 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006508:	60da      	str	r2, [r3, #12]
      break;
 800650a:	e002      	b.n	8006512 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	75fb      	strb	r3, [r7, #23]
      break;
 8006510:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1b      	ldr	r2, [pc, #108]	@ (8006584 <HAL_TIM_IC_Start_DMA+0x310>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00e      	beq.n	800653a <HAL_TIM_IC_Start_DMA+0x2c6>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006524:	d009      	beq.n	800653a <HAL_TIM_IC_Start_DMA+0x2c6>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a17      	ldr	r2, [pc, #92]	@ (8006588 <HAL_TIM_IC_Start_DMA+0x314>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_TIM_IC_Start_DMA+0x2c6>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a15      	ldr	r2, [pc, #84]	@ (800658c <HAL_TIM_IC_Start_DMA+0x318>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d111      	bne.n	800655e <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b06      	cmp	r3, #6
 800654a:	d010      	beq.n	800656e <HAL_TIM_IC_Start_DMA+0x2fa>
    {
      __HAL_TIM_ENABLE(htim);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655c:	e007      	b.n	800656e <HAL_TIM_IC_Start_DMA+0x2fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	08006b23 	.word	0x08006b23
 800657c:	08006beb 	.word	0x08006beb
 8006580:	08006a91 	.word	0x08006a91
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800

08006590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d020      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01b      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0202 	mvn.w	r2, #2
 80065c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fb fd54 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 80065e0:	e005      	b.n	80065ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa27 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa36 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d020      	beq.n	8006640 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0204 	mvn.w	r2, #4
 8006610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fb fd2e 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 800662c:	e005      	b.n	800663a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa01 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa10 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01b      	beq.n	800668c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0208 	mvn.w	r2, #8
 800665c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2204      	movs	r2, #4
 8006662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fb fd08 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9db 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f9ea 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b00      	cmp	r3, #0
 8006694:	d020      	beq.n	80066d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0210 	mvn.w	r2, #16
 80066a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2208      	movs	r2, #8
 80066ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fb fce2 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9b5 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9c4 	bl	8006a5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00c      	beq.n	80066fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0201 	mvn.w	r2, #1
 80066f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fb fcaa 	bl	8002050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fd37 	bl	800718e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f994 	bl	8006a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0220 	mvn.w	r2, #32
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fd0a 	bl	800717c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_TIM_IC_ConfigChannel+0x1e>
 800678a:	2302      	movs	r3, #2
 800678c:	e088      	b.n	80068a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80067ac:	f000 fac0 	bl	8006d30 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 020c 	bic.w	r2, r2, #12
 80067be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6999      	ldr	r1, [r3, #24]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	619a      	str	r2, [r3, #24]
 80067d2:	e060      	b.n	8006896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d11c      	bne.n	8006814 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80067ea:	f000 fb29 	bl	8006e40 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80067fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6999      	ldr	r1, [r3, #24]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	021a      	lsls	r2, r3, #8
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	619a      	str	r2, [r3, #24]
 8006812:	e040      	b.n	8006896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b08      	cmp	r3, #8
 8006818:	d11b      	bne.n	8006852 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800682a:	f000 fb74 	bl	8006f16 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 020c 	bic.w	r2, r2, #12
 800683c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69d9      	ldr	r1, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	61da      	str	r2, [r3, #28]
 8006850:	e021      	b.n	8006896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b0c      	cmp	r3, #12
 8006856:	d11c      	bne.n	8006892 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006868:	f000 fb90 	bl	8006f8c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800687a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69d9      	ldr	r1, [r3, #28]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	021a      	lsls	r2, r3, #8
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	61da      	str	r2, [r3, #28]
 8006890:	e001      	b.n	8006896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800689e:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e0b4      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x186>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068fc:	d03e      	beq.n	800697c <HAL_TIM_ConfigClockSource+0xd4>
 80068fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006902:	f200 8087 	bhi.w	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690a:	f000 8086 	beq.w	8006a1a <HAL_TIM_ConfigClockSource+0x172>
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006912:	d87f      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b70      	cmp	r3, #112	@ 0x70
 8006916:	d01a      	beq.n	800694e <HAL_TIM_ConfigClockSource+0xa6>
 8006918:	2b70      	cmp	r3, #112	@ 0x70
 800691a:	d87b      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 800691c:	2b60      	cmp	r3, #96	@ 0x60
 800691e:	d050      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006920:	2b60      	cmp	r3, #96	@ 0x60
 8006922:	d877      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 8006924:	2b50      	cmp	r3, #80	@ 0x50
 8006926:	d03c      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006928:	2b50      	cmp	r3, #80	@ 0x50
 800692a:	d873      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d058      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006930:	2b40      	cmp	r3, #64	@ 0x40
 8006932:	d86f      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 8006934:	2b30      	cmp	r3, #48	@ 0x30
 8006936:	d064      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x15a>
 8006938:	2b30      	cmp	r3, #48	@ 0x30
 800693a:	d86b      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d060      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x15a>
 8006940:	2b20      	cmp	r3, #32
 8006942:	d867      	bhi.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d05c      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x15a>
 8006948:	2b10      	cmp	r3, #16
 800694a:	d05a      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x15a>
 800694c:	e062      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800695e:	f000 fb6b 	bl	8007038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	609a      	str	r2, [r3, #8]
      break;
 800697a:	e04f      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800698c:	f000 fb54 	bl	8007038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800699e:	609a      	str	r2, [r3, #8]
      break;
 80069a0:	e03c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fa18 	bl	8006de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2150      	movs	r1, #80	@ 0x50
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fb22 	bl	8007004 <TIM_ITRx_SetConfig>
      break;
 80069c0:	e02c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fa72 	bl	8006eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2160      	movs	r1, #96	@ 0x60
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fb12 	bl	8007004 <TIM_ITRx_SetConfig>
      break;
 80069e0:	e01c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 f9f8 	bl	8006de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2140      	movs	r1, #64	@ 0x40
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fb02 	bl	8007004 <TIM_ITRx_SetConfig>
      break;
 8006a00:	e00c      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f000 faf9 	bl	8007004 <TIM_ITRx_SetConfig>
      break;
 8006a12:	e003      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
      break;
 8006a18:	e000      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d107      	bne.n	8006ab8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ab6:	e02a      	b.n	8006b0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d107      	bne.n	8006ad2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ad0:	e01d      	b.n	8006b0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d107      	bne.n	8006aec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006aea:	e010      	b.n	8006b0e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d107      	bne.n	8006b06 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2208      	movs	r2, #8
 8006afa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b04:	e003      	b.n	8006b0e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff ffb5 	bl	8006a7e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	771a      	strb	r2, [r3, #28]
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d10f      	bne.n	8006b5a <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d146      	bne.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b58:	e03d      	b.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d10f      	bne.n	8006b84 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2202      	movs	r2, #2
 8006b68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d131      	bne.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b82:	e028      	b.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d10f      	bne.n	8006bae <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2204      	movs	r2, #4
 8006b92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11c      	bne.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bac:	e013      	b.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d10e      	bne.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2208      	movs	r2, #8
 8006bbc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7fb fa56 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	771a      	strb	r2, [r3, #28]
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d103      	bne.n	8006c0a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	771a      	strb	r2, [r3, #28]
 8006c08:	e019      	b.n	8006c3e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d103      	bne.n	8006c1c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2202      	movs	r2, #2
 8006c18:	771a      	strb	r2, [r3, #28]
 8006c1a:	e010      	b.n	8006c3e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d103      	bne.n	8006c2e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2204      	movs	r2, #4
 8006c2a:	771a      	strb	r2, [r3, #28]
 8006c2c:	e007      	b.n	8006c3e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d102      	bne.n	8006c3e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff ff02 	bl	8006a48 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	771a      	strb	r2, [r3, #28]
}
 8006c4a:	bf00      	nop
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a2f      	ldr	r2, [pc, #188]	@ (8006d24 <TIM_Base_SetConfig+0xd0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_Base_SetConfig+0x30>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x30>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a2c      	ldr	r2, [pc, #176]	@ (8006d28 <TIM_Base_SetConfig+0xd4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x30>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8006d2c <TIM_Base_SetConfig+0xd8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a22      	ldr	r2, [pc, #136]	@ (8006d24 <TIM_Base_SetConfig+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_Base_SetConfig+0x62>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca4:	d007      	beq.n	8006cb6 <TIM_Base_SetConfig+0x62>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <TIM_Base_SetConfig+0xd4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_Base_SetConfig+0x62>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d2c <TIM_Base_SetConfig+0xd8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a0d      	ldr	r2, [pc, #52]	@ (8006d24 <TIM_Base_SetConfig+0xd0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d103      	bne.n	8006cfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]
  }
}
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800

08006d30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f023 0201 	bic.w	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <TIM_TI1_SetConfig+0xa8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_TI1_SetConfig+0x46>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d64:	d007      	beq.n	8006d76 <TIM_TI1_SetConfig+0x46>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4a1c      	ldr	r2, [pc, #112]	@ (8006ddc <TIM_TI1_SetConfig+0xac>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_TI1_SetConfig+0x46>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a1b      	ldr	r2, [pc, #108]	@ (8006de0 <TIM_TI1_SetConfig+0xb0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d101      	bne.n	8006d7a <TIM_TI1_SetConfig+0x4a>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <TIM_TI1_SetConfig+0x4c>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	e003      	b.n	8006d9a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f023 030a 	bic.w	r3, r3, #10
 8006db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 030a 	and.w	r3, r3, #10
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800

08006de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 030a 	bic.w	r3, r3, #10
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f023 0210 	bic.w	r2, r3, #16
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	031b      	lsls	r3, r3, #12
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f023 0210 	bic.w	r2, r3, #16
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	031b      	lsls	r3, r3, #12
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	621a      	str	r2, [r3, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr

08006f16 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b087      	sub	sp, #28
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	031b      	lsls	r3, r3, #12
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fde:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	031b      	lsls	r3, r3, #12
 8006fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800701a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	f043 0307 	orr.w	r3, r3, #7
 8007026:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	609a      	str	r2, [r3, #8]
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	431a      	orrs	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007076:	b480      	push	{r7}
 8007078:	b087      	sub	sp, #28
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2201      	movs	r2, #1
 800708a:	fa02 f303 	lsl.w	r3, r2, r3
 800708e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a1a      	ldr	r2, [r3, #32]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	43db      	mvns	r3, r3
 8007098:	401a      	ands	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1a      	ldr	r2, [r3, #32]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	fa01 f303 	lsl.w	r3, r1, r3
 80070ae:	431a      	orrs	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	621a      	str	r2, [r3, #32]
}
 80070b4:	bf00      	nop
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr
	...

080070c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e046      	b.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a16      	ldr	r2, [pc, #88]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007124:	d009      	beq.n	800713a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a12      	ldr	r2, [pc, #72]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a10      	ldr	r2, [pc, #64]	@ (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d10c      	bne.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	4313      	orrs	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	40012c00 	.word	0x40012c00
 8007174:	40000400 	.word	0x40000400
 8007178:	40000800 	.word	0x40000800

0800717c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <__cvt>:
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a6:	461d      	mov	r5, r3
 80071a8:	bfbb      	ittet	lt
 80071aa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80071ae:	461d      	movlt	r5, r3
 80071b0:	2300      	movge	r3, #0
 80071b2:	232d      	movlt	r3, #45	@ 0x2d
 80071b4:	b088      	sub	sp, #32
 80071b6:	4614      	mov	r4, r2
 80071b8:	bfb8      	it	lt
 80071ba:	4614      	movlt	r4, r2
 80071bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80071c0:	7013      	strb	r3, [r2, #0]
 80071c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80071c8:	f023 0820 	bic.w	r8, r3, #32
 80071cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071d0:	d005      	beq.n	80071de <__cvt+0x3e>
 80071d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80071d6:	d100      	bne.n	80071da <__cvt+0x3a>
 80071d8:	3601      	adds	r6, #1
 80071da:	2302      	movs	r3, #2
 80071dc:	e000      	b.n	80071e0 <__cvt+0x40>
 80071de:	2303      	movs	r3, #3
 80071e0:	aa07      	add	r2, sp, #28
 80071e2:	9204      	str	r2, [sp, #16]
 80071e4:	aa06      	add	r2, sp, #24
 80071e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80071ea:	e9cd 3600 	strd	r3, r6, [sp]
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f000 fe6d 	bl	8007ed0 <_dtoa_r>
 80071f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80071fa:	4607      	mov	r7, r0
 80071fc:	d119      	bne.n	8007232 <__cvt+0x92>
 80071fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007200:	07db      	lsls	r3, r3, #31
 8007202:	d50e      	bpl.n	8007222 <__cvt+0x82>
 8007204:	eb00 0906 	add.w	r9, r0, r6
 8007208:	2200      	movs	r2, #0
 800720a:	2300      	movs	r3, #0
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f7f9 fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8007214:	b108      	cbz	r0, 800721a <__cvt+0x7a>
 8007216:	f8cd 901c 	str.w	r9, [sp, #28]
 800721a:	2230      	movs	r2, #48	@ 0x30
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	454b      	cmp	r3, r9
 8007220:	d31e      	bcc.n	8007260 <__cvt+0xc0>
 8007222:	4638      	mov	r0, r7
 8007224:	9b07      	ldr	r3, [sp, #28]
 8007226:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007228:	1bdb      	subs	r3, r3, r7
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	b008      	add	sp, #32
 800722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007232:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007236:	eb00 0906 	add.w	r9, r0, r6
 800723a:	d1e5      	bne.n	8007208 <__cvt+0x68>
 800723c:	7803      	ldrb	r3, [r0, #0]
 800723e:	2b30      	cmp	r3, #48	@ 0x30
 8007240:	d10a      	bne.n	8007258 <__cvt+0xb8>
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800724e:	b918      	cbnz	r0, 8007258 <__cvt+0xb8>
 8007250:	f1c6 0601 	rsb	r6, r6, #1
 8007254:	f8ca 6000 	str.w	r6, [sl]
 8007258:	f8da 3000 	ldr.w	r3, [sl]
 800725c:	4499      	add	r9, r3
 800725e:	e7d3      	b.n	8007208 <__cvt+0x68>
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	9107      	str	r1, [sp, #28]
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	e7d9      	b.n	800721c <__cvt+0x7c>

08007268 <__exponent>:
 8007268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800726a:	2900      	cmp	r1, #0
 800726c:	bfb6      	itet	lt
 800726e:	232d      	movlt	r3, #45	@ 0x2d
 8007270:	232b      	movge	r3, #43	@ 0x2b
 8007272:	4249      	neglt	r1, r1
 8007274:	2909      	cmp	r1, #9
 8007276:	7002      	strb	r2, [r0, #0]
 8007278:	7043      	strb	r3, [r0, #1]
 800727a:	dd29      	ble.n	80072d0 <__exponent+0x68>
 800727c:	f10d 0307 	add.w	r3, sp, #7
 8007280:	461d      	mov	r5, r3
 8007282:	270a      	movs	r7, #10
 8007284:	fbb1 f6f7 	udiv	r6, r1, r7
 8007288:	461a      	mov	r2, r3
 800728a:	fb07 1416 	mls	r4, r7, r6, r1
 800728e:	3430      	adds	r4, #48	@ 0x30
 8007290:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007294:	460c      	mov	r4, r1
 8007296:	2c63      	cmp	r4, #99	@ 0x63
 8007298:	4631      	mov	r1, r6
 800729a:	f103 33ff 	add.w	r3, r3, #4294967295
 800729e:	dcf1      	bgt.n	8007284 <__exponent+0x1c>
 80072a0:	3130      	adds	r1, #48	@ 0x30
 80072a2:	1e94      	subs	r4, r2, #2
 80072a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072a8:	4623      	mov	r3, r4
 80072aa:	1c41      	adds	r1, r0, #1
 80072ac:	42ab      	cmp	r3, r5
 80072ae:	d30a      	bcc.n	80072c6 <__exponent+0x5e>
 80072b0:	f10d 0309 	add.w	r3, sp, #9
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	42ac      	cmp	r4, r5
 80072b8:	bf88      	it	hi
 80072ba:	2300      	movhi	r3, #0
 80072bc:	3302      	adds	r3, #2
 80072be:	4403      	add	r3, r0
 80072c0:	1a18      	subs	r0, r3, r0
 80072c2:	b003      	add	sp, #12
 80072c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072ce:	e7ed      	b.n	80072ac <__exponent+0x44>
 80072d0:	2330      	movs	r3, #48	@ 0x30
 80072d2:	3130      	adds	r1, #48	@ 0x30
 80072d4:	7083      	strb	r3, [r0, #2]
 80072d6:	70c1      	strb	r1, [r0, #3]
 80072d8:	1d03      	adds	r3, r0, #4
 80072da:	e7f1      	b.n	80072c0 <__exponent+0x58>

080072dc <_printf_float>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	b091      	sub	sp, #68	@ 0x44
 80072e2:	460c      	mov	r4, r1
 80072e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80072e8:	4616      	mov	r6, r2
 80072ea:	461f      	mov	r7, r3
 80072ec:	4605      	mov	r5, r0
 80072ee:	f000 fce1 	bl	8007cb4 <_localeconv_r>
 80072f2:	6803      	ldr	r3, [r0, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	9308      	str	r3, [sp, #32]
 80072f8:	f7f8 ff2a 	bl	8000150 <strlen>
 80072fc:	2300      	movs	r3, #0
 80072fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8007300:	f8d8 3000 	ldr.w	r3, [r8]
 8007304:	9009      	str	r0, [sp, #36]	@ 0x24
 8007306:	3307      	adds	r3, #7
 8007308:	f023 0307 	bic.w	r3, r3, #7
 800730c:	f103 0208 	add.w	r2, r3, #8
 8007310:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007314:	f8d4 b000 	ldr.w	fp, [r4]
 8007318:	f8c8 2000 	str.w	r2, [r8]
 800731c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007320:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007324:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007326:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007336:	4b9c      	ldr	r3, [pc, #624]	@ (80075a8 <_printf_float+0x2cc>)
 8007338:	f7f9 fb68 	bl	8000a0c <__aeabi_dcmpun>
 800733c:	bb70      	cbnz	r0, 800739c <_printf_float+0xc0>
 800733e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	4b98      	ldr	r3, [pc, #608]	@ (80075a8 <_printf_float+0x2cc>)
 8007348:	f7f9 fb42 	bl	80009d0 <__aeabi_dcmple>
 800734c:	bb30      	cbnz	r0, 800739c <_printf_float+0xc0>
 800734e:	2200      	movs	r2, #0
 8007350:	2300      	movs	r3, #0
 8007352:	4640      	mov	r0, r8
 8007354:	4649      	mov	r1, r9
 8007356:	f7f9 fb31 	bl	80009bc <__aeabi_dcmplt>
 800735a:	b110      	cbz	r0, 8007362 <_printf_float+0x86>
 800735c:	232d      	movs	r3, #45	@ 0x2d
 800735e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007362:	4a92      	ldr	r2, [pc, #584]	@ (80075ac <_printf_float+0x2d0>)
 8007364:	4b92      	ldr	r3, [pc, #584]	@ (80075b0 <_printf_float+0x2d4>)
 8007366:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800736a:	bf8c      	ite	hi
 800736c:	4690      	movhi	r8, r2
 800736e:	4698      	movls	r8, r3
 8007370:	2303      	movs	r3, #3
 8007372:	f04f 0900 	mov.w	r9, #0
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	f02b 0304 	bic.w	r3, fp, #4
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	4633      	mov	r3, r6
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	9700      	str	r7, [sp, #0]
 8007386:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007388:	f000 f9d4 	bl	8007734 <_printf_common>
 800738c:	3001      	adds	r0, #1
 800738e:	f040 8090 	bne.w	80074b2 <_printf_float+0x1d6>
 8007392:	f04f 30ff 	mov.w	r0, #4294967295
 8007396:	b011      	add	sp, #68	@ 0x44
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	4649      	mov	r1, r9
 80073a4:	f7f9 fb32 	bl	8000a0c <__aeabi_dcmpun>
 80073a8:	b148      	cbz	r0, 80073be <_printf_float+0xe2>
 80073aa:	464b      	mov	r3, r9
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bfb8      	it	lt
 80073b0:	232d      	movlt	r3, #45	@ 0x2d
 80073b2:	4a80      	ldr	r2, [pc, #512]	@ (80075b4 <_printf_float+0x2d8>)
 80073b4:	bfb8      	it	lt
 80073b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073ba:	4b7f      	ldr	r3, [pc, #508]	@ (80075b8 <_printf_float+0x2dc>)
 80073bc:	e7d3      	b.n	8007366 <_printf_float+0x8a>
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	d13f      	bne.n	8007448 <_printf_float+0x16c>
 80073c8:	2306      	movs	r3, #6
 80073ca:	6063      	str	r3, [r4, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	9206      	str	r2, [sp, #24]
 80073d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80073d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80073dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80073de:	9203      	str	r2, [sp, #12]
 80073e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80073e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	4642      	mov	r2, r8
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	4628      	mov	r0, r5
 80073f0:	464b      	mov	r3, r9
 80073f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80073f4:	f7ff fed4 	bl	80071a0 <__cvt>
 80073f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073fa:	4680      	mov	r8, r0
 80073fc:	2947      	cmp	r1, #71	@ 0x47
 80073fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007400:	d128      	bne.n	8007454 <_printf_float+0x178>
 8007402:	1cc8      	adds	r0, r1, #3
 8007404:	db02      	blt.n	800740c <_printf_float+0x130>
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	4299      	cmp	r1, r3
 800740a:	dd40      	ble.n	800748e <_printf_float+0x1b2>
 800740c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007410:	fa5f fa8a 	uxtb.w	sl, sl
 8007414:	4652      	mov	r2, sl
 8007416:	3901      	subs	r1, #1
 8007418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800741c:	910d      	str	r1, [sp, #52]	@ 0x34
 800741e:	f7ff ff23 	bl	8007268 <__exponent>
 8007422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007424:	4681      	mov	r9, r0
 8007426:	1813      	adds	r3, r2, r0
 8007428:	2a01      	cmp	r2, #1
 800742a:	6123      	str	r3, [r4, #16]
 800742c:	dc02      	bgt.n	8007434 <_printf_float+0x158>
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	07d2      	lsls	r2, r2, #31
 8007432:	d501      	bpl.n	8007438 <_printf_float+0x15c>
 8007434:	3301      	adds	r3, #1
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800743c:	2b00      	cmp	r3, #0
 800743e:	d09e      	beq.n	800737e <_printf_float+0xa2>
 8007440:	232d      	movs	r3, #45	@ 0x2d
 8007442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007446:	e79a      	b.n	800737e <_printf_float+0xa2>
 8007448:	2947      	cmp	r1, #71	@ 0x47
 800744a:	d1bf      	bne.n	80073cc <_printf_float+0xf0>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1bd      	bne.n	80073cc <_printf_float+0xf0>
 8007450:	2301      	movs	r3, #1
 8007452:	e7ba      	b.n	80073ca <_printf_float+0xee>
 8007454:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007458:	d9dc      	bls.n	8007414 <_printf_float+0x138>
 800745a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800745e:	d118      	bne.n	8007492 <_printf_float+0x1b6>
 8007460:	2900      	cmp	r1, #0
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	dd0b      	ble.n	800747e <_printf_float+0x1a2>
 8007466:	6121      	str	r1, [r4, #16]
 8007468:	b913      	cbnz	r3, 8007470 <_printf_float+0x194>
 800746a:	6822      	ldr	r2, [r4, #0]
 800746c:	07d0      	lsls	r0, r2, #31
 800746e:	d502      	bpl.n	8007476 <_printf_float+0x19a>
 8007470:	3301      	adds	r3, #1
 8007472:	440b      	add	r3, r1
 8007474:	6123      	str	r3, [r4, #16]
 8007476:	f04f 0900 	mov.w	r9, #0
 800747a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800747c:	e7dc      	b.n	8007438 <_printf_float+0x15c>
 800747e:	b913      	cbnz	r3, 8007486 <_printf_float+0x1aa>
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	07d2      	lsls	r2, r2, #31
 8007484:	d501      	bpl.n	800748a <_printf_float+0x1ae>
 8007486:	3302      	adds	r3, #2
 8007488:	e7f4      	b.n	8007474 <_printf_float+0x198>
 800748a:	2301      	movs	r3, #1
 800748c:	e7f2      	b.n	8007474 <_printf_float+0x198>
 800748e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007494:	4299      	cmp	r1, r3
 8007496:	db05      	blt.n	80074a4 <_printf_float+0x1c8>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	6121      	str	r1, [r4, #16]
 800749c:	07d8      	lsls	r0, r3, #31
 800749e:	d5ea      	bpl.n	8007476 <_printf_float+0x19a>
 80074a0:	1c4b      	adds	r3, r1, #1
 80074a2:	e7e7      	b.n	8007474 <_printf_float+0x198>
 80074a4:	2900      	cmp	r1, #0
 80074a6:	bfcc      	ite	gt
 80074a8:	2201      	movgt	r2, #1
 80074aa:	f1c1 0202 	rsble	r2, r1, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	e7e0      	b.n	8007474 <_printf_float+0x198>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	055a      	lsls	r2, r3, #21
 80074b6:	d407      	bmi.n	80074c8 <_printf_float+0x1ec>
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	4642      	mov	r2, r8
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	47b8      	blx	r7
 80074c2:	3001      	adds	r0, #1
 80074c4:	d12b      	bne.n	800751e <_printf_float+0x242>
 80074c6:	e764      	b.n	8007392 <_printf_float+0xb6>
 80074c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074cc:	f240 80dc 	bls.w	8007688 <_printf_float+0x3ac>
 80074d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	f7f9 fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d033      	beq.n	8007548 <_printf_float+0x26c>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	4a35      	ldr	r2, [pc, #212]	@ (80075bc <_printf_float+0x2e0>)
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	f43f af51 	beq.w	8007392 <_printf_float+0xb6>
 80074f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80074f4:	4543      	cmp	r3, r8
 80074f6:	db02      	blt.n	80074fe <_printf_float+0x222>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	07d8      	lsls	r0, r3, #31
 80074fc:	d50f      	bpl.n	800751e <_printf_float+0x242>
 80074fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f af42 	beq.w	8007392 <_printf_float+0xb6>
 800750e:	f04f 0900 	mov.w	r9, #0
 8007512:	f108 38ff 	add.w	r8, r8, #4294967295
 8007516:	f104 0a1a 	add.w	sl, r4, #26
 800751a:	45c8      	cmp	r8, r9
 800751c:	dc09      	bgt.n	8007532 <_printf_float+0x256>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	079b      	lsls	r3, r3, #30
 8007522:	f100 8102 	bmi.w	800772a <_printf_float+0x44e>
 8007526:	68e0      	ldr	r0, [r4, #12]
 8007528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800752a:	4298      	cmp	r0, r3
 800752c:	bfb8      	it	lt
 800752e:	4618      	movlt	r0, r3
 8007530:	e731      	b.n	8007396 <_printf_float+0xba>
 8007532:	2301      	movs	r3, #1
 8007534:	4652      	mov	r2, sl
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f af28 	beq.w	8007392 <_printf_float+0xb6>
 8007542:	f109 0901 	add.w	r9, r9, #1
 8007546:	e7e8      	b.n	800751a <_printf_float+0x23e>
 8007548:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800754a:	2b00      	cmp	r3, #0
 800754c:	dc38      	bgt.n	80075c0 <_printf_float+0x2e4>
 800754e:	2301      	movs	r3, #1
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	4a19      	ldr	r2, [pc, #100]	@ (80075bc <_printf_float+0x2e0>)
 8007556:	47b8      	blx	r7
 8007558:	3001      	adds	r0, #1
 800755a:	f43f af1a 	beq.w	8007392 <_printf_float+0xb6>
 800755e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007562:	ea59 0303 	orrs.w	r3, r9, r3
 8007566:	d102      	bne.n	800756e <_printf_float+0x292>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	07d9      	lsls	r1, r3, #31
 800756c:	d5d7      	bpl.n	800751e <_printf_float+0x242>
 800756e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f af0a 	beq.w	8007392 <_printf_float+0xb6>
 800757e:	f04f 0a00 	mov.w	sl, #0
 8007582:	f104 0b1a 	add.w	fp, r4, #26
 8007586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007588:	425b      	negs	r3, r3
 800758a:	4553      	cmp	r3, sl
 800758c:	dc01      	bgt.n	8007592 <_printf_float+0x2b6>
 800758e:	464b      	mov	r3, r9
 8007590:	e793      	b.n	80074ba <_printf_float+0x1de>
 8007592:	2301      	movs	r3, #1
 8007594:	465a      	mov	r2, fp
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	47b8      	blx	r7
 800759c:	3001      	adds	r0, #1
 800759e:	f43f aef8 	beq.w	8007392 <_printf_float+0xb6>
 80075a2:	f10a 0a01 	add.w	sl, sl, #1
 80075a6:	e7ee      	b.n	8007586 <_printf_float+0x2aa>
 80075a8:	7fefffff 	.word	0x7fefffff
 80075ac:	0800b38a 	.word	0x0800b38a
 80075b0:	0800b386 	.word	0x0800b386
 80075b4:	0800b392 	.word	0x0800b392
 80075b8:	0800b38e 	.word	0x0800b38e
 80075bc:	0800b396 	.word	0x0800b396
 80075c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075c2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80075c6:	4553      	cmp	r3, sl
 80075c8:	bfa8      	it	ge
 80075ca:	4653      	movge	r3, sl
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	4699      	mov	r9, r3
 80075d0:	dc36      	bgt.n	8007640 <_printf_float+0x364>
 80075d2:	f04f 0b00 	mov.w	fp, #0
 80075d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075da:	f104 021a 	add.w	r2, r4, #26
 80075de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e2:	eba3 0309 	sub.w	r3, r3, r9
 80075e6:	455b      	cmp	r3, fp
 80075e8:	dc31      	bgt.n	800764e <_printf_float+0x372>
 80075ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075ec:	459a      	cmp	sl, r3
 80075ee:	dc3a      	bgt.n	8007666 <_printf_float+0x38a>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07da      	lsls	r2, r3, #31
 80075f4:	d437      	bmi.n	8007666 <_printf_float+0x38a>
 80075f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075f8:	ebaa 0903 	sub.w	r9, sl, r3
 80075fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007602:	4599      	cmp	r9, r3
 8007604:	bfa8      	it	ge
 8007606:	4699      	movge	r9, r3
 8007608:	f1b9 0f00 	cmp.w	r9, #0
 800760c:	dc33      	bgt.n	8007676 <_printf_float+0x39a>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007616:	f104 0b1a 	add.w	fp, r4, #26
 800761a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800761c:	ebaa 0303 	sub.w	r3, sl, r3
 8007620:	eba3 0309 	sub.w	r3, r3, r9
 8007624:	4543      	cmp	r3, r8
 8007626:	f77f af7a 	ble.w	800751e <_printf_float+0x242>
 800762a:	2301      	movs	r3, #1
 800762c:	465a      	mov	r2, fp
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f aeac 	beq.w	8007392 <_printf_float+0xb6>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	e7ec      	b.n	800761a <_printf_float+0x33e>
 8007640:	4642      	mov	r2, r8
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	d1c2      	bne.n	80075d2 <_printf_float+0x2f6>
 800764c:	e6a1      	b.n	8007392 <_printf_float+0xb6>
 800764e:	2301      	movs	r3, #1
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	920a      	str	r2, [sp, #40]	@ 0x28
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f ae9a 	beq.w	8007392 <_printf_float+0xb6>
 800765e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007660:	f10b 0b01 	add.w	fp, fp, #1
 8007664:	e7bb      	b.n	80075de <_printf_float+0x302>
 8007666:	4631      	mov	r1, r6
 8007668:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	d1c0      	bne.n	80075f6 <_printf_float+0x31a>
 8007674:	e68d      	b.n	8007392 <_printf_float+0xb6>
 8007676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007678:	464b      	mov	r3, r9
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	4442      	add	r2, r8
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	d1c3      	bne.n	800760e <_printf_float+0x332>
 8007686:	e684      	b.n	8007392 <_printf_float+0xb6>
 8007688:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800768c:	f1ba 0f01 	cmp.w	sl, #1
 8007690:	dc01      	bgt.n	8007696 <_printf_float+0x3ba>
 8007692:	07db      	lsls	r3, r3, #31
 8007694:	d536      	bpl.n	8007704 <_printf_float+0x428>
 8007696:	2301      	movs	r3, #1
 8007698:	4642      	mov	r2, r8
 800769a:	4631      	mov	r1, r6
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f ae76 	beq.w	8007392 <_printf_float+0xb6>
 80076a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	f43f ae6e 	beq.w	8007392 <_printf_float+0xb6>
 80076b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ba:	2200      	movs	r2, #0
 80076bc:	2300      	movs	r3, #0
 80076be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076c2:	f7f9 f971 	bl	80009a8 <__aeabi_dcmpeq>
 80076c6:	b9c0      	cbnz	r0, 80076fa <_printf_float+0x41e>
 80076c8:	4653      	mov	r3, sl
 80076ca:	f108 0201 	add.w	r2, r8, #1
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d10c      	bne.n	80076f2 <_printf_float+0x416>
 80076d8:	e65b      	b.n	8007392 <_printf_float+0xb6>
 80076da:	2301      	movs	r3, #1
 80076dc:	465a      	mov	r2, fp
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae54 	beq.w	8007392 <_printf_float+0xb6>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	45d0      	cmp	r8, sl
 80076f0:	dbf3      	blt.n	80076da <_printf_float+0x3fe>
 80076f2:	464b      	mov	r3, r9
 80076f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076f8:	e6e0      	b.n	80074bc <_printf_float+0x1e0>
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	f104 0b1a 	add.w	fp, r4, #26
 8007702:	e7f4      	b.n	80076ee <_printf_float+0x412>
 8007704:	2301      	movs	r3, #1
 8007706:	4642      	mov	r2, r8
 8007708:	e7e1      	b.n	80076ce <_printf_float+0x3f2>
 800770a:	2301      	movs	r3, #1
 800770c:	464a      	mov	r2, r9
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	f43f ae3c 	beq.w	8007392 <_printf_float+0xb6>
 800771a:	f108 0801 	add.w	r8, r8, #1
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007722:	1a5b      	subs	r3, r3, r1
 8007724:	4543      	cmp	r3, r8
 8007726:	dcf0      	bgt.n	800770a <_printf_float+0x42e>
 8007728:	e6fd      	b.n	8007526 <_printf_float+0x24a>
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	f104 0919 	add.w	r9, r4, #25
 8007732:	e7f4      	b.n	800771e <_printf_float+0x442>

08007734 <_printf_common>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	4616      	mov	r6, r2
 800773a:	4698      	mov	r8, r3
 800773c:	688a      	ldr	r2, [r1, #8]
 800773e:	690b      	ldr	r3, [r1, #16]
 8007740:	4607      	mov	r7, r0
 8007742:	4293      	cmp	r3, r2
 8007744:	bfb8      	it	lt
 8007746:	4613      	movlt	r3, r2
 8007748:	6033      	str	r3, [r6, #0]
 800774a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800774e:	460c      	mov	r4, r1
 8007750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007754:	b10a      	cbz	r2, 800775a <_printf_common+0x26>
 8007756:	3301      	adds	r3, #1
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	0699      	lsls	r1, r3, #26
 800775e:	bf42      	ittt	mi
 8007760:	6833      	ldrmi	r3, [r6, #0]
 8007762:	3302      	addmi	r3, #2
 8007764:	6033      	strmi	r3, [r6, #0]
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	f015 0506 	ands.w	r5, r5, #6
 800776c:	d106      	bne.n	800777c <_printf_common+0x48>
 800776e:	f104 0a19 	add.w	sl, r4, #25
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	6832      	ldr	r2, [r6, #0]
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	42ab      	cmp	r3, r5
 800777a:	dc2b      	bgt.n	80077d4 <_printf_common+0xa0>
 800777c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	3b00      	subs	r3, #0
 8007784:	bf18      	it	ne
 8007786:	2301      	movne	r3, #1
 8007788:	0692      	lsls	r2, r2, #26
 800778a:	d430      	bmi.n	80077ee <_printf_common+0xba>
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007794:	47c8      	blx	r9
 8007796:	3001      	adds	r0, #1
 8007798:	d023      	beq.n	80077e2 <_printf_common+0xae>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	6922      	ldr	r2, [r4, #16]
 800779e:	f003 0306 	and.w	r3, r3, #6
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	bf14      	ite	ne
 80077a6:	2500      	movne	r5, #0
 80077a8:	6833      	ldreq	r3, [r6, #0]
 80077aa:	f04f 0600 	mov.w	r6, #0
 80077ae:	bf08      	it	eq
 80077b0:	68e5      	ldreq	r5, [r4, #12]
 80077b2:	f104 041a 	add.w	r4, r4, #26
 80077b6:	bf08      	it	eq
 80077b8:	1aed      	subeq	r5, r5, r3
 80077ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80077be:	bf08      	it	eq
 80077c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c4:	4293      	cmp	r3, r2
 80077c6:	bfc4      	itt	gt
 80077c8:	1a9b      	subgt	r3, r3, r2
 80077ca:	18ed      	addgt	r5, r5, r3
 80077cc:	42b5      	cmp	r5, r6
 80077ce:	d11a      	bne.n	8007806 <_printf_common+0xd2>
 80077d0:	2000      	movs	r0, #0
 80077d2:	e008      	b.n	80077e6 <_printf_common+0xb2>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4652      	mov	r2, sl
 80077d8:	4641      	mov	r1, r8
 80077da:	4638      	mov	r0, r7
 80077dc:	47c8      	blx	r9
 80077de:	3001      	adds	r0, #1
 80077e0:	d103      	bne.n	80077ea <_printf_common+0xb6>
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ea:	3501      	adds	r5, #1
 80077ec:	e7c1      	b.n	8007772 <_printf_common+0x3e>
 80077ee:	2030      	movs	r0, #48	@ 0x30
 80077f0:	18e1      	adds	r1, r4, r3
 80077f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077fc:	4422      	add	r2, r4
 80077fe:	3302      	adds	r3, #2
 8007800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007804:	e7c2      	b.n	800778c <_printf_common+0x58>
 8007806:	2301      	movs	r3, #1
 8007808:	4622      	mov	r2, r4
 800780a:	4641      	mov	r1, r8
 800780c:	4638      	mov	r0, r7
 800780e:	47c8      	blx	r9
 8007810:	3001      	adds	r0, #1
 8007812:	d0e6      	beq.n	80077e2 <_printf_common+0xae>
 8007814:	3601      	adds	r6, #1
 8007816:	e7d9      	b.n	80077cc <_printf_common+0x98>

08007818 <_printf_i>:
 8007818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	7e0f      	ldrb	r7, [r1, #24]
 800781e:	4691      	mov	r9, r2
 8007820:	2f78      	cmp	r7, #120	@ 0x78
 8007822:	4680      	mov	r8, r0
 8007824:	460c      	mov	r4, r1
 8007826:	469a      	mov	sl, r3
 8007828:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800782a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800782e:	d807      	bhi.n	8007840 <_printf_i+0x28>
 8007830:	2f62      	cmp	r7, #98	@ 0x62
 8007832:	d80a      	bhi.n	800784a <_printf_i+0x32>
 8007834:	2f00      	cmp	r7, #0
 8007836:	f000 80d1 	beq.w	80079dc <_printf_i+0x1c4>
 800783a:	2f58      	cmp	r7, #88	@ 0x58
 800783c:	f000 80b8 	beq.w	80079b0 <_printf_i+0x198>
 8007840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007848:	e03a      	b.n	80078c0 <_printf_i+0xa8>
 800784a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800784e:	2b15      	cmp	r3, #21
 8007850:	d8f6      	bhi.n	8007840 <_printf_i+0x28>
 8007852:	a101      	add	r1, pc, #4	@ (adr r1, 8007858 <_printf_i+0x40>)
 8007854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007858:	080078b1 	.word	0x080078b1
 800785c:	080078c5 	.word	0x080078c5
 8007860:	08007841 	.word	0x08007841
 8007864:	08007841 	.word	0x08007841
 8007868:	08007841 	.word	0x08007841
 800786c:	08007841 	.word	0x08007841
 8007870:	080078c5 	.word	0x080078c5
 8007874:	08007841 	.word	0x08007841
 8007878:	08007841 	.word	0x08007841
 800787c:	08007841 	.word	0x08007841
 8007880:	08007841 	.word	0x08007841
 8007884:	080079c3 	.word	0x080079c3
 8007888:	080078ef 	.word	0x080078ef
 800788c:	0800797d 	.word	0x0800797d
 8007890:	08007841 	.word	0x08007841
 8007894:	08007841 	.word	0x08007841
 8007898:	080079e5 	.word	0x080079e5
 800789c:	08007841 	.word	0x08007841
 80078a0:	080078ef 	.word	0x080078ef
 80078a4:	08007841 	.word	0x08007841
 80078a8:	08007841 	.word	0x08007841
 80078ac:	08007985 	.word	0x08007985
 80078b0:	6833      	ldr	r3, [r6, #0]
 80078b2:	1d1a      	adds	r2, r3, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6032      	str	r2, [r6, #0]
 80078b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078c0:	2301      	movs	r3, #1
 80078c2:	e09c      	b.n	80079fe <_printf_i+0x1e6>
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	1d19      	adds	r1, r3, #4
 80078ca:	6031      	str	r1, [r6, #0]
 80078cc:	0606      	lsls	r6, r0, #24
 80078ce:	d501      	bpl.n	80078d4 <_printf_i+0xbc>
 80078d0:	681d      	ldr	r5, [r3, #0]
 80078d2:	e003      	b.n	80078dc <_printf_i+0xc4>
 80078d4:	0645      	lsls	r5, r0, #25
 80078d6:	d5fb      	bpl.n	80078d0 <_printf_i+0xb8>
 80078d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078dc:	2d00      	cmp	r5, #0
 80078de:	da03      	bge.n	80078e8 <_printf_i+0xd0>
 80078e0:	232d      	movs	r3, #45	@ 0x2d
 80078e2:	426d      	negs	r5, r5
 80078e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e8:	230a      	movs	r3, #10
 80078ea:	4858      	ldr	r0, [pc, #352]	@ (8007a4c <_printf_i+0x234>)
 80078ec:	e011      	b.n	8007912 <_printf_i+0xfa>
 80078ee:	6821      	ldr	r1, [r4, #0]
 80078f0:	6833      	ldr	r3, [r6, #0]
 80078f2:	0608      	lsls	r0, r1, #24
 80078f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80078f8:	d402      	bmi.n	8007900 <_printf_i+0xe8>
 80078fa:	0649      	lsls	r1, r1, #25
 80078fc:	bf48      	it	mi
 80078fe:	b2ad      	uxthmi	r5, r5
 8007900:	2f6f      	cmp	r7, #111	@ 0x6f
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	bf14      	ite	ne
 8007906:	230a      	movne	r3, #10
 8007908:	2308      	moveq	r3, #8
 800790a:	4850      	ldr	r0, [pc, #320]	@ (8007a4c <_printf_i+0x234>)
 800790c:	2100      	movs	r1, #0
 800790e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007912:	6866      	ldr	r6, [r4, #4]
 8007914:	2e00      	cmp	r6, #0
 8007916:	60a6      	str	r6, [r4, #8]
 8007918:	db05      	blt.n	8007926 <_printf_i+0x10e>
 800791a:	6821      	ldr	r1, [r4, #0]
 800791c:	432e      	orrs	r6, r5
 800791e:	f021 0104 	bic.w	r1, r1, #4
 8007922:	6021      	str	r1, [r4, #0]
 8007924:	d04b      	beq.n	80079be <_printf_i+0x1a6>
 8007926:	4616      	mov	r6, r2
 8007928:	fbb5 f1f3 	udiv	r1, r5, r3
 800792c:	fb03 5711 	mls	r7, r3, r1, r5
 8007930:	5dc7      	ldrb	r7, [r0, r7]
 8007932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007936:	462f      	mov	r7, r5
 8007938:	42bb      	cmp	r3, r7
 800793a:	460d      	mov	r5, r1
 800793c:	d9f4      	bls.n	8007928 <_printf_i+0x110>
 800793e:	2b08      	cmp	r3, #8
 8007940:	d10b      	bne.n	800795a <_printf_i+0x142>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	07df      	lsls	r7, r3, #31
 8007946:	d508      	bpl.n	800795a <_printf_i+0x142>
 8007948:	6923      	ldr	r3, [r4, #16]
 800794a:	6861      	ldr	r1, [r4, #4]
 800794c:	4299      	cmp	r1, r3
 800794e:	bfde      	ittt	le
 8007950:	2330      	movle	r3, #48	@ 0x30
 8007952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800795a:	1b92      	subs	r2, r2, r6
 800795c:	6122      	str	r2, [r4, #16]
 800795e:	464b      	mov	r3, r9
 8007960:	4621      	mov	r1, r4
 8007962:	4640      	mov	r0, r8
 8007964:	f8cd a000 	str.w	sl, [sp]
 8007968:	aa03      	add	r2, sp, #12
 800796a:	f7ff fee3 	bl	8007734 <_printf_common>
 800796e:	3001      	adds	r0, #1
 8007970:	d14a      	bne.n	8007a08 <_printf_i+0x1f0>
 8007972:	f04f 30ff 	mov.w	r0, #4294967295
 8007976:	b004      	add	sp, #16
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	f043 0320 	orr.w	r3, r3, #32
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	2778      	movs	r7, #120	@ 0x78
 8007986:	4832      	ldr	r0, [pc, #200]	@ (8007a50 <_printf_i+0x238>)
 8007988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	6831      	ldr	r1, [r6, #0]
 8007990:	061f      	lsls	r7, r3, #24
 8007992:	f851 5b04 	ldr.w	r5, [r1], #4
 8007996:	d402      	bmi.n	800799e <_printf_i+0x186>
 8007998:	065f      	lsls	r7, r3, #25
 800799a:	bf48      	it	mi
 800799c:	b2ad      	uxthmi	r5, r5
 800799e:	6031      	str	r1, [r6, #0]
 80079a0:	07d9      	lsls	r1, r3, #31
 80079a2:	bf44      	itt	mi
 80079a4:	f043 0320 	orrmi.w	r3, r3, #32
 80079a8:	6023      	strmi	r3, [r4, #0]
 80079aa:	b11d      	cbz	r5, 80079b4 <_printf_i+0x19c>
 80079ac:	2310      	movs	r3, #16
 80079ae:	e7ad      	b.n	800790c <_printf_i+0xf4>
 80079b0:	4826      	ldr	r0, [pc, #152]	@ (8007a4c <_printf_i+0x234>)
 80079b2:	e7e9      	b.n	8007988 <_printf_i+0x170>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	f023 0320 	bic.w	r3, r3, #32
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	e7f6      	b.n	80079ac <_printf_i+0x194>
 80079be:	4616      	mov	r6, r2
 80079c0:	e7bd      	b.n	800793e <_printf_i+0x126>
 80079c2:	6833      	ldr	r3, [r6, #0]
 80079c4:	6825      	ldr	r5, [r4, #0]
 80079c6:	1d18      	adds	r0, r3, #4
 80079c8:	6961      	ldr	r1, [r4, #20]
 80079ca:	6030      	str	r0, [r6, #0]
 80079cc:	062e      	lsls	r6, r5, #24
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	d501      	bpl.n	80079d6 <_printf_i+0x1be>
 80079d2:	6019      	str	r1, [r3, #0]
 80079d4:	e002      	b.n	80079dc <_printf_i+0x1c4>
 80079d6:	0668      	lsls	r0, r5, #25
 80079d8:	d5fb      	bpl.n	80079d2 <_printf_i+0x1ba>
 80079da:	8019      	strh	r1, [r3, #0]
 80079dc:	2300      	movs	r3, #0
 80079de:	4616      	mov	r6, r2
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	e7bc      	b.n	800795e <_printf_i+0x146>
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	2100      	movs	r1, #0
 80079e8:	1d1a      	adds	r2, r3, #4
 80079ea:	6032      	str	r2, [r6, #0]
 80079ec:	681e      	ldr	r6, [r3, #0]
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	4630      	mov	r0, r6
 80079f2:	f000 f9d6 	bl	8007da2 <memchr>
 80079f6:	b108      	cbz	r0, 80079fc <_printf_i+0x1e4>
 80079f8:	1b80      	subs	r0, r0, r6
 80079fa:	6060      	str	r0, [r4, #4]
 80079fc:	6863      	ldr	r3, [r4, #4]
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	2300      	movs	r3, #0
 8007a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a06:	e7aa      	b.n	800795e <_printf_i+0x146>
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	47d0      	blx	sl
 8007a12:	3001      	adds	r0, #1
 8007a14:	d0ad      	beq.n	8007972 <_printf_i+0x15a>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	079b      	lsls	r3, r3, #30
 8007a1a:	d413      	bmi.n	8007a44 <_printf_i+0x22c>
 8007a1c:	68e0      	ldr	r0, [r4, #12]
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	4298      	cmp	r0, r3
 8007a22:	bfb8      	it	lt
 8007a24:	4618      	movlt	r0, r3
 8007a26:	e7a6      	b.n	8007976 <_printf_i+0x15e>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4640      	mov	r0, r8
 8007a30:	47d0      	blx	sl
 8007a32:	3001      	adds	r0, #1
 8007a34:	d09d      	beq.n	8007972 <_printf_i+0x15a>
 8007a36:	3501      	adds	r5, #1
 8007a38:	68e3      	ldr	r3, [r4, #12]
 8007a3a:	9903      	ldr	r1, [sp, #12]
 8007a3c:	1a5b      	subs	r3, r3, r1
 8007a3e:	42ab      	cmp	r3, r5
 8007a40:	dcf2      	bgt.n	8007a28 <_printf_i+0x210>
 8007a42:	e7eb      	b.n	8007a1c <_printf_i+0x204>
 8007a44:	2500      	movs	r5, #0
 8007a46:	f104 0619 	add.w	r6, r4, #25
 8007a4a:	e7f5      	b.n	8007a38 <_printf_i+0x220>
 8007a4c:	0800b398 	.word	0x0800b398
 8007a50:	0800b3a9 	.word	0x0800b3a9

08007a54 <std>:
 8007a54:	2300      	movs	r3, #0
 8007a56:	b510      	push	{r4, lr}
 8007a58:	4604      	mov	r4, r0
 8007a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a62:	6083      	str	r3, [r0, #8]
 8007a64:	8181      	strh	r1, [r0, #12]
 8007a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a68:	81c2      	strh	r2, [r0, #14]
 8007a6a:	6183      	str	r3, [r0, #24]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	2208      	movs	r2, #8
 8007a70:	305c      	adds	r0, #92	@ 0x5c
 8007a72:	f000 f916 	bl	8007ca2 <memset>
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <std+0x58>)
 8007a78:	6224      	str	r4, [r4, #32]
 8007a7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab0 <std+0x5c>)
 8007a7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a80:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <std+0x60>)
 8007a82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a84:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <std+0x64>)
 8007a86:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a88:	4b0c      	ldr	r3, [pc, #48]	@ (8007abc <std+0x68>)
 8007a8a:	429c      	cmp	r4, r3
 8007a8c:	d006      	beq.n	8007a9c <std+0x48>
 8007a8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a92:	4294      	cmp	r4, r2
 8007a94:	d002      	beq.n	8007a9c <std+0x48>
 8007a96:	33d0      	adds	r3, #208	@ 0xd0
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d105      	bne.n	8007aa8 <std+0x54>
 8007a9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa4:	f000 b97a 	b.w	8007d9c <__retarget_lock_init_recursive>
 8007aa8:	bd10      	pop	{r4, pc}
 8007aaa:	bf00      	nop
 8007aac:	08007c1d 	.word	0x08007c1d
 8007ab0:	08007c3f 	.word	0x08007c3f
 8007ab4:	08007c77 	.word	0x08007c77
 8007ab8:	08007c9b 	.word	0x08007c9b
 8007abc:	20000808 	.word	0x20000808

08007ac0 <stdio_exit_handler>:
 8007ac0:	4a02      	ldr	r2, [pc, #8]	@ (8007acc <stdio_exit_handler+0xc>)
 8007ac2:	4903      	ldr	r1, [pc, #12]	@ (8007ad0 <stdio_exit_handler+0x10>)
 8007ac4:	4803      	ldr	r0, [pc, #12]	@ (8007ad4 <stdio_exit_handler+0x14>)
 8007ac6:	f000 b869 	b.w	8007b9c <_fwalk_sglue>
 8007aca:	bf00      	nop
 8007acc:	2000001c 	.word	0x2000001c
 8007ad0:	08009719 	.word	0x08009719
 8007ad4:	2000002c 	.word	0x2000002c

08007ad8 <cleanup_stdio>:
 8007ad8:	6841      	ldr	r1, [r0, #4]
 8007ada:	4b0c      	ldr	r3, [pc, #48]	@ (8007b0c <cleanup_stdio+0x34>)
 8007adc:	b510      	push	{r4, lr}
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	d001      	beq.n	8007ae8 <cleanup_stdio+0x10>
 8007ae4:	f001 fe18 	bl	8009718 <_fflush_r>
 8007ae8:	68a1      	ldr	r1, [r4, #8]
 8007aea:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <cleanup_stdio+0x38>)
 8007aec:	4299      	cmp	r1, r3
 8007aee:	d002      	beq.n	8007af6 <cleanup_stdio+0x1e>
 8007af0:	4620      	mov	r0, r4
 8007af2:	f001 fe11 	bl	8009718 <_fflush_r>
 8007af6:	68e1      	ldr	r1, [r4, #12]
 8007af8:	4b06      	ldr	r3, [pc, #24]	@ (8007b14 <cleanup_stdio+0x3c>)
 8007afa:	4299      	cmp	r1, r3
 8007afc:	d004      	beq.n	8007b08 <cleanup_stdio+0x30>
 8007afe:	4620      	mov	r0, r4
 8007b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b04:	f001 be08 	b.w	8009718 <_fflush_r>
 8007b08:	bd10      	pop	{r4, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000808 	.word	0x20000808
 8007b10:	20000870 	.word	0x20000870
 8007b14:	200008d8 	.word	0x200008d8

08007b18 <global_stdio_init.part.0>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b48 <global_stdio_init.part.0+0x30>)
 8007b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007b4c <global_stdio_init.part.0+0x34>)
 8007b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b50 <global_stdio_init.part.0+0x38>)
 8007b20:	4620      	mov	r0, r4
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	2104      	movs	r1, #4
 8007b26:	2200      	movs	r2, #0
 8007b28:	f7ff ff94 	bl	8007a54 <std>
 8007b2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b30:	2201      	movs	r2, #1
 8007b32:	2109      	movs	r1, #9
 8007b34:	f7ff ff8e 	bl	8007a54 <std>
 8007b38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b42:	2112      	movs	r1, #18
 8007b44:	f7ff bf86 	b.w	8007a54 <std>
 8007b48:	20000940 	.word	0x20000940
 8007b4c:	20000808 	.word	0x20000808
 8007b50:	08007ac1 	.word	0x08007ac1

08007b54 <__sfp_lock_acquire>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__sfp_lock_acquire+0x8>)
 8007b56:	f000 b922 	b.w	8007d9e <__retarget_lock_acquire_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	20000949 	.word	0x20000949

08007b60 <__sfp_lock_release>:
 8007b60:	4801      	ldr	r0, [pc, #4]	@ (8007b68 <__sfp_lock_release+0x8>)
 8007b62:	f000 b91d 	b.w	8007da0 <__retarget_lock_release_recursive>
 8007b66:	bf00      	nop
 8007b68:	20000949 	.word	0x20000949

08007b6c <__sinit>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	f7ff fff0 	bl	8007b54 <__sfp_lock_acquire>
 8007b74:	6a23      	ldr	r3, [r4, #32]
 8007b76:	b11b      	cbz	r3, 8007b80 <__sinit+0x14>
 8007b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b7c:	f7ff bff0 	b.w	8007b60 <__sfp_lock_release>
 8007b80:	4b04      	ldr	r3, [pc, #16]	@ (8007b94 <__sinit+0x28>)
 8007b82:	6223      	str	r3, [r4, #32]
 8007b84:	4b04      	ldr	r3, [pc, #16]	@ (8007b98 <__sinit+0x2c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f5      	bne.n	8007b78 <__sinit+0xc>
 8007b8c:	f7ff ffc4 	bl	8007b18 <global_stdio_init.part.0>
 8007b90:	e7f2      	b.n	8007b78 <__sinit+0xc>
 8007b92:	bf00      	nop
 8007b94:	08007ad9 	.word	0x08007ad9
 8007b98:	20000940 	.word	0x20000940

08007b9c <_fwalk_sglue>:
 8007b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	4688      	mov	r8, r1
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bac:	f1b9 0901 	subs.w	r9, r9, #1
 8007bb0:	d505      	bpl.n	8007bbe <_fwalk_sglue+0x22>
 8007bb2:	6824      	ldr	r4, [r4, #0]
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	d1f7      	bne.n	8007ba8 <_fwalk_sglue+0xc>
 8007bb8:	4630      	mov	r0, r6
 8007bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d907      	bls.n	8007bd4 <_fwalk_sglue+0x38>
 8007bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	d003      	beq.n	8007bd4 <_fwalk_sglue+0x38>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4638      	mov	r0, r7
 8007bd0:	47c0      	blx	r8
 8007bd2:	4306      	orrs	r6, r0
 8007bd4:	3568      	adds	r5, #104	@ 0x68
 8007bd6:	e7e9      	b.n	8007bac <_fwalk_sglue+0x10>

08007bd8 <siprintf>:
 8007bd8:	b40e      	push	{r1, r2, r3}
 8007bda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bde:	b510      	push	{r4, lr}
 8007be0:	2400      	movs	r4, #0
 8007be2:	b09d      	sub	sp, #116	@ 0x74
 8007be4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007be6:	9002      	str	r0, [sp, #8]
 8007be8:	9006      	str	r0, [sp, #24]
 8007bea:	9107      	str	r1, [sp, #28]
 8007bec:	9104      	str	r1, [sp, #16]
 8007bee:	4809      	ldr	r0, [pc, #36]	@ (8007c14 <siprintf+0x3c>)
 8007bf0:	4909      	ldr	r1, [pc, #36]	@ (8007c18 <siprintf+0x40>)
 8007bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf6:	9105      	str	r1, [sp, #20]
 8007bf8:	6800      	ldr	r0, [r0, #0]
 8007bfa:	a902      	add	r1, sp, #8
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007c00:	f001 fc0e 	bl	8009420 <_svfiprintf_r>
 8007c04:	9b02      	ldr	r3, [sp, #8]
 8007c06:	701c      	strb	r4, [r3, #0]
 8007c08:	b01d      	add	sp, #116	@ 0x74
 8007c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0e:	b003      	add	sp, #12
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20000028 	.word	0x20000028
 8007c18:	ffff0208 	.word	0xffff0208

08007c1c <__sread>:
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	460c      	mov	r4, r1
 8007c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c24:	f000 f86c 	bl	8007d00 <_read_r>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	bfab      	itete	ge
 8007c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c30:	181b      	addge	r3, r3, r0
 8007c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c36:	bfac      	ite	ge
 8007c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c3a:	81a3      	strhlt	r3, [r4, #12]
 8007c3c:	bd10      	pop	{r4, pc}

08007c3e <__swrite>:
 8007c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c42:	461f      	mov	r7, r3
 8007c44:	898b      	ldrh	r3, [r1, #12]
 8007c46:	4605      	mov	r5, r0
 8007c48:	05db      	lsls	r3, r3, #23
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	d505      	bpl.n	8007c5c <__swrite+0x1e>
 8007c50:	2302      	movs	r3, #2
 8007c52:	2200      	movs	r2, #0
 8007c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c58:	f000 f840 	bl	8007cdc <_lseek_r>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	4632      	mov	r2, r6
 8007c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	4628      	mov	r0, r5
 8007c68:	463b      	mov	r3, r7
 8007c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c72:	f000 b857 	b.w	8007d24 <_write_r>

08007c76 <__sseek>:
 8007c76:	b510      	push	{r4, lr}
 8007c78:	460c      	mov	r4, r1
 8007c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7e:	f000 f82d 	bl	8007cdc <_lseek_r>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	bf15      	itete	ne
 8007c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c92:	81a3      	strheq	r3, [r4, #12]
 8007c94:	bf18      	it	ne
 8007c96:	81a3      	strhne	r3, [r4, #12]
 8007c98:	bd10      	pop	{r4, pc}

08007c9a <__sclose>:
 8007c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9e:	f000 b80d 	b.w	8007cbc <_close_r>

08007ca2 <memset>:
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4402      	add	r2, r0
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d100      	bne.n	8007cac <memset+0xa>
 8007caa:	4770      	bx	lr
 8007cac:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb0:	e7f9      	b.n	8007ca6 <memset+0x4>
	...

08007cb4 <_localeconv_r>:
 8007cb4:	4800      	ldr	r0, [pc, #0]	@ (8007cb8 <_localeconv_r+0x4>)
 8007cb6:	4770      	bx	lr
 8007cb8:	20000168 	.word	0x20000168

08007cbc <_close_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4d05      	ldr	r5, [pc, #20]	@ (8007cd8 <_close_r+0x1c>)
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7fa fa4f 	bl	800216a <_close>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_close_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_close_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	20000944 	.word	0x20000944

08007cdc <_lseek_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4d05      	ldr	r5, [pc, #20]	@ (8007cfc <_lseek_r+0x20>)
 8007ce8:	602a      	str	r2, [r5, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f7fa fa61 	bl	80021b2 <_lseek>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_lseek_r+0x1e>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_lseek_r+0x1e>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	20000944 	.word	0x20000944

08007d00 <_read_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4d05      	ldr	r5, [pc, #20]	@ (8007d20 <_read_r+0x20>)
 8007d0c:	602a      	str	r2, [r5, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7fa f9f2 	bl	80020f8 <_read>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_read_r+0x1e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_read_r+0x1e>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	20000944 	.word	0x20000944

08007d24 <_write_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4d05      	ldr	r5, [pc, #20]	@ (8007d44 <_write_r+0x20>)
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7fa f9fd 	bl	8002132 <_write>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_write_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_write_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20000944 	.word	0x20000944

08007d48 <__errno>:
 8007d48:	4b01      	ldr	r3, [pc, #4]	@ (8007d50 <__errno+0x8>)
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000028 	.word	0x20000028

08007d54 <__libc_init_array>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	2600      	movs	r6, #0
 8007d58:	4d0c      	ldr	r5, [pc, #48]	@ (8007d8c <__libc_init_array+0x38>)
 8007d5a:	4c0d      	ldr	r4, [pc, #52]	@ (8007d90 <__libc_init_array+0x3c>)
 8007d5c:	1b64      	subs	r4, r4, r5
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	42a6      	cmp	r6, r4
 8007d62:	d109      	bne.n	8007d78 <__libc_init_array+0x24>
 8007d64:	f002 f874 	bl	8009e50 <_init>
 8007d68:	2600      	movs	r6, #0
 8007d6a:	4d0a      	ldr	r5, [pc, #40]	@ (8007d94 <__libc_init_array+0x40>)
 8007d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8007d98 <__libc_init_array+0x44>)
 8007d6e:	1b64      	subs	r4, r4, r5
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	42a6      	cmp	r6, r4
 8007d74:	d105      	bne.n	8007d82 <__libc_init_array+0x2e>
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7c:	4798      	blx	r3
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7ee      	b.n	8007d60 <__libc_init_array+0xc>
 8007d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d86:	4798      	blx	r3
 8007d88:	3601      	adds	r6, #1
 8007d8a:	e7f2      	b.n	8007d72 <__libc_init_array+0x1e>
 8007d8c:	0800b704 	.word	0x0800b704
 8007d90:	0800b704 	.word	0x0800b704
 8007d94:	0800b704 	.word	0x0800b704
 8007d98:	0800b708 	.word	0x0800b708

08007d9c <__retarget_lock_init_recursive>:
 8007d9c:	4770      	bx	lr

08007d9e <__retarget_lock_acquire_recursive>:
 8007d9e:	4770      	bx	lr

08007da0 <__retarget_lock_release_recursive>:
 8007da0:	4770      	bx	lr

08007da2 <memchr>:
 8007da2:	4603      	mov	r3, r0
 8007da4:	b510      	push	{r4, lr}
 8007da6:	b2c9      	uxtb	r1, r1
 8007da8:	4402      	add	r2, r0
 8007daa:	4293      	cmp	r3, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	d101      	bne.n	8007db4 <memchr+0x12>
 8007db0:	2000      	movs	r0, #0
 8007db2:	e003      	b.n	8007dbc <memchr+0x1a>
 8007db4:	7804      	ldrb	r4, [r0, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	428c      	cmp	r4, r1
 8007dba:	d1f6      	bne.n	8007daa <memchr+0x8>
 8007dbc:	bd10      	pop	{r4, pc}

08007dbe <quorem>:
 8007dbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc2:	6903      	ldr	r3, [r0, #16]
 8007dc4:	690c      	ldr	r4, [r1, #16]
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	db7e      	blt.n	8007eca <quorem+0x10c>
 8007dcc:	3c01      	subs	r4, #1
 8007dce:	00a3      	lsls	r3, r4, #2
 8007dd0:	f100 0514 	add.w	r5, r0, #20
 8007dd4:	f101 0814 	add.w	r8, r1, #20
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007de8:	3301      	adds	r3, #1
 8007dea:	429a      	cmp	r2, r3
 8007dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8007df0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007df4:	d32e      	bcc.n	8007e54 <quorem+0x96>
 8007df6:	f04f 0a00 	mov.w	sl, #0
 8007dfa:	46c4      	mov	ip, r8
 8007dfc:	46ae      	mov	lr, r5
 8007dfe:	46d3      	mov	fp, sl
 8007e00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e04:	b298      	uxth	r0, r3
 8007e06:	fb06 a000 	mla	r0, r6, r0, sl
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	0c02      	lsrs	r2, r0, #16
 8007e0e:	fb06 2303 	mla	r3, r6, r3, r2
 8007e12:	f8de 2000 	ldr.w	r2, [lr]
 8007e16:	b280      	uxth	r0, r0
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	1a12      	subs	r2, r2, r0
 8007e1c:	445a      	add	r2, fp
 8007e1e:	f8de 0000 	ldr.w	r0, [lr]
 8007e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e30:	b292      	uxth	r2, r2
 8007e32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e36:	45e1      	cmp	r9, ip
 8007e38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e3c:	f84e 2b04 	str.w	r2, [lr], #4
 8007e40:	d2de      	bcs.n	8007e00 <quorem+0x42>
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	58eb      	ldr	r3, [r5, r3]
 8007e46:	b92b      	cbnz	r3, 8007e54 <quorem+0x96>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	3b04      	subs	r3, #4
 8007e4c:	429d      	cmp	r5, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	d32f      	bcc.n	8007eb2 <quorem+0xf4>
 8007e52:	613c      	str	r4, [r7, #16]
 8007e54:	4638      	mov	r0, r7
 8007e56:	f001 f97f 	bl	8009158 <__mcmp>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	db25      	blt.n	8007eaa <quorem+0xec>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	2000      	movs	r0, #0
 8007e62:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e66:	f8d1 c000 	ldr.w	ip, [r1]
 8007e6a:	fa1f fe82 	uxth.w	lr, r2
 8007e6e:	fa1f f38c 	uxth.w	r3, ip
 8007e72:	eba3 030e 	sub.w	r3, r3, lr
 8007e76:	4403      	add	r3, r0
 8007e78:	0c12      	lsrs	r2, r2, #16
 8007e7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e88:	45c1      	cmp	r9, r8
 8007e8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e8e:	f841 3b04 	str.w	r3, [r1], #4
 8007e92:	d2e6      	bcs.n	8007e62 <quorem+0xa4>
 8007e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e9c:	b922      	cbnz	r2, 8007ea8 <quorem+0xea>
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	429d      	cmp	r5, r3
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	d30b      	bcc.n	8007ebe <quorem+0x100>
 8007ea6:	613c      	str	r4, [r7, #16]
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	4630      	mov	r0, r6
 8007eac:	b003      	add	sp, #12
 8007eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	d1cb      	bne.n	8007e52 <quorem+0x94>
 8007eba:	3c01      	subs	r4, #1
 8007ebc:	e7c6      	b.n	8007e4c <quorem+0x8e>
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	d1ef      	bne.n	8007ea6 <quorem+0xe8>
 8007ec6:	3c01      	subs	r4, #1
 8007ec8:	e7ea      	b.n	8007ea0 <quorem+0xe2>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e7ee      	b.n	8007eac <quorem+0xee>
	...

08007ed0 <_dtoa_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	461d      	mov	r5, r3
 8007ed8:	69c7      	ldr	r7, [r0, #28]
 8007eda:	b097      	sub	sp, #92	@ 0x5c
 8007edc:	4681      	mov	r9, r0
 8007ede:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ee2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ee4:	b97f      	cbnz	r7, 8007f06 <_dtoa_r+0x36>
 8007ee6:	2010      	movs	r0, #16
 8007ee8:	f000 fe0e 	bl	8008b08 <malloc>
 8007eec:	4602      	mov	r2, r0
 8007eee:	f8c9 001c 	str.w	r0, [r9, #28]
 8007ef2:	b920      	cbnz	r0, 8007efe <_dtoa_r+0x2e>
 8007ef4:	21ef      	movs	r1, #239	@ 0xef
 8007ef6:	4bac      	ldr	r3, [pc, #688]	@ (80081a8 <_dtoa_r+0x2d8>)
 8007ef8:	48ac      	ldr	r0, [pc, #688]	@ (80081ac <_dtoa_r+0x2dc>)
 8007efa:	f001 fc6d 	bl	80097d8 <__assert_func>
 8007efe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f02:	6007      	str	r7, [r0, #0]
 8007f04:	60c7      	str	r7, [r0, #12]
 8007f06:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f0a:	6819      	ldr	r1, [r3, #0]
 8007f0c:	b159      	cbz	r1, 8007f26 <_dtoa_r+0x56>
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	2301      	movs	r3, #1
 8007f12:	4093      	lsls	r3, r2
 8007f14:	604a      	str	r2, [r1, #4]
 8007f16:	608b      	str	r3, [r1, #8]
 8007f18:	4648      	mov	r0, r9
 8007f1a:	f000 feeb 	bl	8008cf4 <_Bfree>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	1e2b      	subs	r3, r5, #0
 8007f28:	bfaf      	iteee	ge
 8007f2a:	2300      	movge	r3, #0
 8007f2c:	2201      	movlt	r2, #1
 8007f2e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f32:	9307      	strlt	r3, [sp, #28]
 8007f34:	bfa8      	it	ge
 8007f36:	6033      	strge	r3, [r6, #0]
 8007f38:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80081b0 <_dtoa_r+0x2e0>)
 8007f3e:	bfb8      	it	lt
 8007f40:	6032      	strlt	r2, [r6, #0]
 8007f42:	ea33 0308 	bics.w	r3, r3, r8
 8007f46:	d112      	bne.n	8007f6e <_dtoa_r+0x9e>
 8007f48:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f54:	4323      	orrs	r3, r4
 8007f56:	f000 855e 	beq.w	8008a16 <_dtoa_r+0xb46>
 8007f5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80081b4 <_dtoa_r+0x2e4>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 8560 	beq.w	8008a26 <_dtoa_r+0xb56>
 8007f66:	f10a 0303 	add.w	r3, sl, #3
 8007f6a:	f000 bd5a 	b.w	8008a22 <_dtoa_r+0xb52>
 8007f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f7f8 fd13 	bl	80009a8 <__aeabi_dcmpeq>
 8007f82:	4607      	mov	r7, r0
 8007f84:	b158      	cbz	r0, 8007f9e <_dtoa_r+0xce>
 8007f86:	2301      	movs	r3, #1
 8007f88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f8e:	b113      	cbz	r3, 8007f96 <_dtoa_r+0xc6>
 8007f90:	4b89      	ldr	r3, [pc, #548]	@ (80081b8 <_dtoa_r+0x2e8>)
 8007f92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80081bc <_dtoa_r+0x2ec>
 8007f9a:	f000 bd44 	b.w	8008a26 <_dtoa_r+0xb56>
 8007f9e:	ab14      	add	r3, sp, #80	@ 0x50
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	ab15      	add	r3, sp, #84	@ 0x54
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4648      	mov	r0, r9
 8007fa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fac:	f001 f984 	bl	80092b8 <__d2b>
 8007fb0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007fb4:	9003      	str	r0, [sp, #12]
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	d078      	beq.n	80080ac <_dtoa_r+0x1dc>
 8007fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fc0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007fcc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007fd0:	9712      	str	r7, [sp, #72]	@ 0x48
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80081c0 <_dtoa_r+0x2f0>)
 8007fd8:	f7f8 f8c6 	bl	8000168 <__aeabi_dsub>
 8007fdc:	a36c      	add	r3, pc, #432	@ (adr r3, 8008190 <_dtoa_r+0x2c0>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 fa79 	bl	80004d8 <__aeabi_dmul>
 8007fe6:	a36c      	add	r3, pc, #432	@ (adr r3, 8008198 <_dtoa_r+0x2c8>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f7f8 f8be 	bl	800016c <__adddf3>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	460d      	mov	r5, r1
 8007ff6:	f7f8 fa05 	bl	8000404 <__aeabi_i2d>
 8007ffa:	a369      	add	r3, pc, #420	@ (adr r3, 80081a0 <_dtoa_r+0x2d0>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 fa6a 	bl	80004d8 <__aeabi_dmul>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4620      	mov	r0, r4
 800800a:	4629      	mov	r1, r5
 800800c:	f7f8 f8ae 	bl	800016c <__adddf3>
 8008010:	4604      	mov	r4, r0
 8008012:	460d      	mov	r5, r1
 8008014:	f7f8 fd10 	bl	8000a38 <__aeabi_d2iz>
 8008018:	2200      	movs	r2, #0
 800801a:	4607      	mov	r7, r0
 800801c:	2300      	movs	r3, #0
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 fccb 	bl	80009bc <__aeabi_dcmplt>
 8008026:	b140      	cbz	r0, 800803a <_dtoa_r+0x16a>
 8008028:	4638      	mov	r0, r7
 800802a:	f7f8 f9eb 	bl	8000404 <__aeabi_i2d>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f7f8 fcb9 	bl	80009a8 <__aeabi_dcmpeq>
 8008036:	b900      	cbnz	r0, 800803a <_dtoa_r+0x16a>
 8008038:	3f01      	subs	r7, #1
 800803a:	2f16      	cmp	r7, #22
 800803c:	d854      	bhi.n	80080e8 <_dtoa_r+0x218>
 800803e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008042:	4b60      	ldr	r3, [pc, #384]	@ (80081c4 <_dtoa_r+0x2f4>)
 8008044:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f7f8 fcb6 	bl	80009bc <__aeabi_dcmplt>
 8008050:	2800      	cmp	r0, #0
 8008052:	d04b      	beq.n	80080ec <_dtoa_r+0x21c>
 8008054:	2300      	movs	r3, #0
 8008056:	3f01      	subs	r7, #1
 8008058:	930f      	str	r3, [sp, #60]	@ 0x3c
 800805a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800805c:	1b9b      	subs	r3, r3, r6
 800805e:	1e5a      	subs	r2, r3, #1
 8008060:	bf49      	itett	mi
 8008062:	f1c3 0301 	rsbmi	r3, r3, #1
 8008066:	2300      	movpl	r3, #0
 8008068:	9304      	strmi	r3, [sp, #16]
 800806a:	2300      	movmi	r3, #0
 800806c:	9209      	str	r2, [sp, #36]	@ 0x24
 800806e:	bf54      	ite	pl
 8008070:	9304      	strpl	r3, [sp, #16]
 8008072:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008074:	2f00      	cmp	r7, #0
 8008076:	db3b      	blt.n	80080f0 <_dtoa_r+0x220>
 8008078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807a:	970e      	str	r7, [sp, #56]	@ 0x38
 800807c:	443b      	add	r3, r7
 800807e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008080:	2300      	movs	r3, #0
 8008082:	930a      	str	r3, [sp, #40]	@ 0x28
 8008084:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008086:	2b09      	cmp	r3, #9
 8008088:	d865      	bhi.n	8008156 <_dtoa_r+0x286>
 800808a:	2b05      	cmp	r3, #5
 800808c:	bfc4      	itt	gt
 800808e:	3b04      	subgt	r3, #4
 8008090:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008092:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008094:	bfc8      	it	gt
 8008096:	2400      	movgt	r4, #0
 8008098:	f1a3 0302 	sub.w	r3, r3, #2
 800809c:	bfd8      	it	le
 800809e:	2401      	movle	r4, #1
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d864      	bhi.n	800816e <_dtoa_r+0x29e>
 80080a4:	e8df f003 	tbb	[pc, r3]
 80080a8:	2c385553 	.word	0x2c385553
 80080ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80080b0:	441e      	add	r6, r3
 80080b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	bfc1      	itttt	gt
 80080ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080be:	fa08 f803 	lslgt.w	r8, r8, r3
 80080c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80080ca:	bfd6      	itet	le
 80080cc:	f1c3 0320 	rsble	r3, r3, #32
 80080d0:	ea48 0003 	orrgt.w	r0, r8, r3
 80080d4:	fa04 f003 	lslle.w	r0, r4, r3
 80080d8:	f7f8 f984 	bl	80003e4 <__aeabi_ui2d>
 80080dc:	2201      	movs	r2, #1
 80080de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080e2:	3e01      	subs	r6, #1
 80080e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80080e6:	e774      	b.n	8007fd2 <_dtoa_r+0x102>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7b5      	b.n	8008058 <_dtoa_r+0x188>
 80080ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80080ee:	e7b4      	b.n	800805a <_dtoa_r+0x18a>
 80080f0:	9b04      	ldr	r3, [sp, #16]
 80080f2:	1bdb      	subs	r3, r3, r7
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	427b      	negs	r3, r7
 80080f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080fa:	2300      	movs	r3, #0
 80080fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80080fe:	e7c1      	b.n	8008084 <_dtoa_r+0x1b4>
 8008100:	2301      	movs	r3, #1
 8008102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008104:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008106:	eb07 0b03 	add.w	fp, r7, r3
 800810a:	f10b 0301 	add.w	r3, fp, #1
 800810e:	2b01      	cmp	r3, #1
 8008110:	9308      	str	r3, [sp, #32]
 8008112:	bfb8      	it	lt
 8008114:	2301      	movlt	r3, #1
 8008116:	e006      	b.n	8008126 <_dtoa_r+0x256>
 8008118:	2301      	movs	r3, #1
 800811a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800811c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800811e:	2b00      	cmp	r3, #0
 8008120:	dd28      	ble.n	8008174 <_dtoa_r+0x2a4>
 8008122:	469b      	mov	fp, r3
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	2100      	movs	r1, #0
 8008128:	2204      	movs	r2, #4
 800812a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800812e:	f102 0514 	add.w	r5, r2, #20
 8008132:	429d      	cmp	r5, r3
 8008134:	d926      	bls.n	8008184 <_dtoa_r+0x2b4>
 8008136:	6041      	str	r1, [r0, #4]
 8008138:	4648      	mov	r0, r9
 800813a:	f000 fd9b 	bl	8008c74 <_Balloc>
 800813e:	4682      	mov	sl, r0
 8008140:	2800      	cmp	r0, #0
 8008142:	d143      	bne.n	80081cc <_dtoa_r+0x2fc>
 8008144:	4602      	mov	r2, r0
 8008146:	f240 11af 	movw	r1, #431	@ 0x1af
 800814a:	4b1f      	ldr	r3, [pc, #124]	@ (80081c8 <_dtoa_r+0x2f8>)
 800814c:	e6d4      	b.n	8007ef8 <_dtoa_r+0x28>
 800814e:	2300      	movs	r3, #0
 8008150:	e7e3      	b.n	800811a <_dtoa_r+0x24a>
 8008152:	2300      	movs	r3, #0
 8008154:	e7d5      	b.n	8008102 <_dtoa_r+0x232>
 8008156:	2401      	movs	r4, #1
 8008158:	2300      	movs	r3, #0
 800815a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800815c:	9320      	str	r3, [sp, #128]	@ 0x80
 800815e:	f04f 3bff 	mov.w	fp, #4294967295
 8008162:	2200      	movs	r2, #0
 8008164:	2312      	movs	r3, #18
 8008166:	f8cd b020 	str.w	fp, [sp, #32]
 800816a:	9221      	str	r2, [sp, #132]	@ 0x84
 800816c:	e7db      	b.n	8008126 <_dtoa_r+0x256>
 800816e:	2301      	movs	r3, #1
 8008170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008172:	e7f4      	b.n	800815e <_dtoa_r+0x28e>
 8008174:	f04f 0b01 	mov.w	fp, #1
 8008178:	465b      	mov	r3, fp
 800817a:	f8cd b020 	str.w	fp, [sp, #32]
 800817e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008182:	e7d0      	b.n	8008126 <_dtoa_r+0x256>
 8008184:	3101      	adds	r1, #1
 8008186:	0052      	lsls	r2, r2, #1
 8008188:	e7d1      	b.n	800812e <_dtoa_r+0x25e>
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w
 8008190:	636f4361 	.word	0x636f4361
 8008194:	3fd287a7 	.word	0x3fd287a7
 8008198:	8b60c8b3 	.word	0x8b60c8b3
 800819c:	3fc68a28 	.word	0x3fc68a28
 80081a0:	509f79fb 	.word	0x509f79fb
 80081a4:	3fd34413 	.word	0x3fd34413
 80081a8:	0800b3c7 	.word	0x0800b3c7
 80081ac:	0800b3de 	.word	0x0800b3de
 80081b0:	7ff00000 	.word	0x7ff00000
 80081b4:	0800b3c3 	.word	0x0800b3c3
 80081b8:	0800b397 	.word	0x0800b397
 80081bc:	0800b396 	.word	0x0800b396
 80081c0:	3ff80000 	.word	0x3ff80000
 80081c4:	0800b530 	.word	0x0800b530
 80081c8:	0800b436 	.word	0x0800b436
 80081cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081d0:	6018      	str	r0, [r3, #0]
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	2b0e      	cmp	r3, #14
 80081d6:	f200 80a1 	bhi.w	800831c <_dtoa_r+0x44c>
 80081da:	2c00      	cmp	r4, #0
 80081dc:	f000 809e 	beq.w	800831c <_dtoa_r+0x44c>
 80081e0:	2f00      	cmp	r7, #0
 80081e2:	dd33      	ble.n	800824c <_dtoa_r+0x37c>
 80081e4:	4b9c      	ldr	r3, [pc, #624]	@ (8008458 <_dtoa_r+0x588>)
 80081e6:	f007 020f 	and.w	r2, r7, #15
 80081ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ee:	05f8      	lsls	r0, r7, #23
 80081f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80081f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081fc:	d516      	bpl.n	800822c <_dtoa_r+0x35c>
 80081fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008202:	4b96      	ldr	r3, [pc, #600]	@ (800845c <_dtoa_r+0x58c>)
 8008204:	2603      	movs	r6, #3
 8008206:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800820a:	f7f8 fa8f 	bl	800072c <__aeabi_ddiv>
 800820e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008212:	f004 040f 	and.w	r4, r4, #15
 8008216:	4d91      	ldr	r5, [pc, #580]	@ (800845c <_dtoa_r+0x58c>)
 8008218:	b954      	cbnz	r4, 8008230 <_dtoa_r+0x360>
 800821a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800821e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008222:	f7f8 fa83 	bl	800072c <__aeabi_ddiv>
 8008226:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800822a:	e028      	b.n	800827e <_dtoa_r+0x3ae>
 800822c:	2602      	movs	r6, #2
 800822e:	e7f2      	b.n	8008216 <_dtoa_r+0x346>
 8008230:	07e1      	lsls	r1, r4, #31
 8008232:	d508      	bpl.n	8008246 <_dtoa_r+0x376>
 8008234:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008238:	e9d5 2300 	ldrd	r2, r3, [r5]
 800823c:	f7f8 f94c 	bl	80004d8 <__aeabi_dmul>
 8008240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008244:	3601      	adds	r6, #1
 8008246:	1064      	asrs	r4, r4, #1
 8008248:	3508      	adds	r5, #8
 800824a:	e7e5      	b.n	8008218 <_dtoa_r+0x348>
 800824c:	f000 80af 	beq.w	80083ae <_dtoa_r+0x4de>
 8008250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008254:	427c      	negs	r4, r7
 8008256:	4b80      	ldr	r3, [pc, #512]	@ (8008458 <_dtoa_r+0x588>)
 8008258:	f004 020f 	and.w	r2, r4, #15
 800825c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f938 	bl	80004d8 <__aeabi_dmul>
 8008268:	2602      	movs	r6, #2
 800826a:	2300      	movs	r3, #0
 800826c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008270:	4d7a      	ldr	r5, [pc, #488]	@ (800845c <_dtoa_r+0x58c>)
 8008272:	1124      	asrs	r4, r4, #4
 8008274:	2c00      	cmp	r4, #0
 8008276:	f040 808f 	bne.w	8008398 <_dtoa_r+0x4c8>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1d3      	bne.n	8008226 <_dtoa_r+0x356>
 800827e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8094 	beq.w	80083b2 <_dtoa_r+0x4e2>
 800828a:	2200      	movs	r2, #0
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	4b73      	ldr	r3, [pc, #460]	@ (8008460 <_dtoa_r+0x590>)
 8008292:	f7f8 fb93 	bl	80009bc <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	f000 808b 	beq.w	80083b2 <_dtoa_r+0x4e2>
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8087 	beq.w	80083b2 <_dtoa_r+0x4e2>
 80082a4:	f1bb 0f00 	cmp.w	fp, #0
 80082a8:	dd34      	ble.n	8008314 <_dtoa_r+0x444>
 80082aa:	4620      	mov	r0, r4
 80082ac:	2200      	movs	r2, #0
 80082ae:	4629      	mov	r1, r5
 80082b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008464 <_dtoa_r+0x594>)
 80082b2:	f7f8 f911 	bl	80004d8 <__aeabi_dmul>
 80082b6:	465c      	mov	r4, fp
 80082b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80082c0:	3601      	adds	r6, #1
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7f8 f89e 	bl	8000404 <__aeabi_i2d>
 80082c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082cc:	f7f8 f904 	bl	80004d8 <__aeabi_dmul>
 80082d0:	2200      	movs	r2, #0
 80082d2:	4b65      	ldr	r3, [pc, #404]	@ (8008468 <_dtoa_r+0x598>)
 80082d4:	f7f7 ff4a 	bl	800016c <__adddf3>
 80082d8:	4605      	mov	r5, r0
 80082da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80082de:	2c00      	cmp	r4, #0
 80082e0:	d16a      	bne.n	80083b8 <_dtoa_r+0x4e8>
 80082e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082e6:	2200      	movs	r2, #0
 80082e8:	4b60      	ldr	r3, [pc, #384]	@ (800846c <_dtoa_r+0x59c>)
 80082ea:	f7f7 ff3d 	bl	8000168 <__aeabi_dsub>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082f6:	462a      	mov	r2, r5
 80082f8:	4633      	mov	r3, r6
 80082fa:	f7f8 fb7d 	bl	80009f8 <__aeabi_dcmpgt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	f040 8298 	bne.w	8008834 <_dtoa_r+0x964>
 8008304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008308:	462a      	mov	r2, r5
 800830a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800830e:	f7f8 fb55 	bl	80009bc <__aeabi_dcmplt>
 8008312:	bb38      	cbnz	r0, 8008364 <_dtoa_r+0x494>
 8008314:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008318:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800831c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800831e:	2b00      	cmp	r3, #0
 8008320:	f2c0 8157 	blt.w	80085d2 <_dtoa_r+0x702>
 8008324:	2f0e      	cmp	r7, #14
 8008326:	f300 8154 	bgt.w	80085d2 <_dtoa_r+0x702>
 800832a:	4b4b      	ldr	r3, [pc, #300]	@ (8008458 <_dtoa_r+0x588>)
 800832c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008334:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008338:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800833a:	2b00      	cmp	r3, #0
 800833c:	f280 80e5 	bge.w	800850a <_dtoa_r+0x63a>
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f300 80e1 	bgt.w	800850a <_dtoa_r+0x63a>
 8008348:	d10c      	bne.n	8008364 <_dtoa_r+0x494>
 800834a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800834e:	2200      	movs	r2, #0
 8008350:	4b46      	ldr	r3, [pc, #280]	@ (800846c <_dtoa_r+0x59c>)
 8008352:	f7f8 f8c1 	bl	80004d8 <__aeabi_dmul>
 8008356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800835a:	f7f8 fb43 	bl	80009e4 <__aeabi_dcmpge>
 800835e:	2800      	cmp	r0, #0
 8008360:	f000 8266 	beq.w	8008830 <_dtoa_r+0x960>
 8008364:	2400      	movs	r4, #0
 8008366:	4625      	mov	r5, r4
 8008368:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800836a:	4656      	mov	r6, sl
 800836c:	ea6f 0803 	mvn.w	r8, r3
 8008370:	2700      	movs	r7, #0
 8008372:	4621      	mov	r1, r4
 8008374:	4648      	mov	r0, r9
 8008376:	f000 fcbd 	bl	8008cf4 <_Bfree>
 800837a:	2d00      	cmp	r5, #0
 800837c:	f000 80bd 	beq.w	80084fa <_dtoa_r+0x62a>
 8008380:	b12f      	cbz	r7, 800838e <_dtoa_r+0x4be>
 8008382:	42af      	cmp	r7, r5
 8008384:	d003      	beq.n	800838e <_dtoa_r+0x4be>
 8008386:	4639      	mov	r1, r7
 8008388:	4648      	mov	r0, r9
 800838a:	f000 fcb3 	bl	8008cf4 <_Bfree>
 800838e:	4629      	mov	r1, r5
 8008390:	4648      	mov	r0, r9
 8008392:	f000 fcaf 	bl	8008cf4 <_Bfree>
 8008396:	e0b0      	b.n	80084fa <_dtoa_r+0x62a>
 8008398:	07e2      	lsls	r2, r4, #31
 800839a:	d505      	bpl.n	80083a8 <_dtoa_r+0x4d8>
 800839c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083a0:	f7f8 f89a 	bl	80004d8 <__aeabi_dmul>
 80083a4:	2301      	movs	r3, #1
 80083a6:	3601      	adds	r6, #1
 80083a8:	1064      	asrs	r4, r4, #1
 80083aa:	3508      	adds	r5, #8
 80083ac:	e762      	b.n	8008274 <_dtoa_r+0x3a4>
 80083ae:	2602      	movs	r6, #2
 80083b0:	e765      	b.n	800827e <_dtoa_r+0x3ae>
 80083b2:	46b8      	mov	r8, r7
 80083b4:	9c08      	ldr	r4, [sp, #32]
 80083b6:	e784      	b.n	80082c2 <_dtoa_r+0x3f2>
 80083b8:	4b27      	ldr	r3, [pc, #156]	@ (8008458 <_dtoa_r+0x588>)
 80083ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083c4:	4454      	add	r4, sl
 80083c6:	2900      	cmp	r1, #0
 80083c8:	d054      	beq.n	8008474 <_dtoa_r+0x5a4>
 80083ca:	2000      	movs	r0, #0
 80083cc:	4928      	ldr	r1, [pc, #160]	@ (8008470 <_dtoa_r+0x5a0>)
 80083ce:	f7f8 f9ad 	bl	800072c <__aeabi_ddiv>
 80083d2:	4633      	mov	r3, r6
 80083d4:	462a      	mov	r2, r5
 80083d6:	f7f7 fec7 	bl	8000168 <__aeabi_dsub>
 80083da:	4656      	mov	r6, sl
 80083dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083e4:	f7f8 fb28 	bl	8000a38 <__aeabi_d2iz>
 80083e8:	4605      	mov	r5, r0
 80083ea:	f7f8 f80b 	bl	8000404 <__aeabi_i2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f6:	f7f7 feb7 	bl	8000168 <__aeabi_dsub>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	3530      	adds	r5, #48	@ 0x30
 8008400:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008408:	f806 5b01 	strb.w	r5, [r6], #1
 800840c:	f7f8 fad6 	bl	80009bc <__aeabi_dcmplt>
 8008410:	2800      	cmp	r0, #0
 8008412:	d172      	bne.n	80084fa <_dtoa_r+0x62a>
 8008414:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008418:	2000      	movs	r0, #0
 800841a:	4911      	ldr	r1, [pc, #68]	@ (8008460 <_dtoa_r+0x590>)
 800841c:	f7f7 fea4 	bl	8000168 <__aeabi_dsub>
 8008420:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008424:	f7f8 faca 	bl	80009bc <__aeabi_dcmplt>
 8008428:	2800      	cmp	r0, #0
 800842a:	f040 80b4 	bne.w	8008596 <_dtoa_r+0x6c6>
 800842e:	42a6      	cmp	r6, r4
 8008430:	f43f af70 	beq.w	8008314 <_dtoa_r+0x444>
 8008434:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008438:	2200      	movs	r2, #0
 800843a:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <_dtoa_r+0x594>)
 800843c:	f7f8 f84c 	bl	80004d8 <__aeabi_dmul>
 8008440:	2200      	movs	r2, #0
 8008442:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800844a:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <_dtoa_r+0x594>)
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008454:	e7c4      	b.n	80083e0 <_dtoa_r+0x510>
 8008456:	bf00      	nop
 8008458:	0800b530 	.word	0x0800b530
 800845c:	0800b508 	.word	0x0800b508
 8008460:	3ff00000 	.word	0x3ff00000
 8008464:	40240000 	.word	0x40240000
 8008468:	401c0000 	.word	0x401c0000
 800846c:	40140000 	.word	0x40140000
 8008470:	3fe00000 	.word	0x3fe00000
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	f7f8 f82e 	bl	80004d8 <__aeabi_dmul>
 800847c:	4656      	mov	r6, sl
 800847e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008482:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008488:	f7f8 fad6 	bl	8000a38 <__aeabi_d2iz>
 800848c:	4605      	mov	r5, r0
 800848e:	f7f7 ffb9 	bl	8000404 <__aeabi_i2d>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800849a:	f7f7 fe65 	bl	8000168 <__aeabi_dsub>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	3530      	adds	r5, #48	@ 0x30
 80084a4:	f806 5b01 	strb.w	r5, [r6], #1
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084ae:	f04f 0200 	mov.w	r2, #0
 80084b2:	d124      	bne.n	80084fe <_dtoa_r+0x62e>
 80084b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084b8:	4bae      	ldr	r3, [pc, #696]	@ (8008774 <_dtoa_r+0x8a4>)
 80084ba:	f7f7 fe57 	bl	800016c <__adddf3>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084c6:	f7f8 fa97 	bl	80009f8 <__aeabi_dcmpgt>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d163      	bne.n	8008596 <_dtoa_r+0x6c6>
 80084ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084d2:	2000      	movs	r0, #0
 80084d4:	49a7      	ldr	r1, [pc, #668]	@ (8008774 <_dtoa_r+0x8a4>)
 80084d6:	f7f7 fe47 	bl	8000168 <__aeabi_dsub>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084e2:	f7f8 fa6b 	bl	80009bc <__aeabi_dcmplt>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f43f af14 	beq.w	8008314 <_dtoa_r+0x444>
 80084ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80084ee:	1e73      	subs	r3, r6, #1
 80084f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084f6:	2b30      	cmp	r3, #48	@ 0x30
 80084f8:	d0f8      	beq.n	80084ec <_dtoa_r+0x61c>
 80084fa:	4647      	mov	r7, r8
 80084fc:	e03b      	b.n	8008576 <_dtoa_r+0x6a6>
 80084fe:	4b9e      	ldr	r3, [pc, #632]	@ (8008778 <_dtoa_r+0x8a8>)
 8008500:	f7f7 ffea 	bl	80004d8 <__aeabi_dmul>
 8008504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008508:	e7bc      	b.n	8008484 <_dtoa_r+0x5b4>
 800850a:	4656      	mov	r6, sl
 800850c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008514:	4620      	mov	r0, r4
 8008516:	4629      	mov	r1, r5
 8008518:	f7f8 f908 	bl	800072c <__aeabi_ddiv>
 800851c:	f7f8 fa8c 	bl	8000a38 <__aeabi_d2iz>
 8008520:	4680      	mov	r8, r0
 8008522:	f7f7 ff6f 	bl	8000404 <__aeabi_i2d>
 8008526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800852a:	f7f7 ffd5 	bl	80004d8 <__aeabi_dmul>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f7 fe17 	bl	8000168 <__aeabi_dsub>
 800853a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800853e:	9d08      	ldr	r5, [sp, #32]
 8008540:	f806 4b01 	strb.w	r4, [r6], #1
 8008544:	eba6 040a 	sub.w	r4, r6, sl
 8008548:	42a5      	cmp	r5, r4
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	d133      	bne.n	80085b8 <_dtoa_r+0x6e8>
 8008550:	f7f7 fe0c 	bl	800016c <__adddf3>
 8008554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008558:	4604      	mov	r4, r0
 800855a:	460d      	mov	r5, r1
 800855c:	f7f8 fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8008560:	b9c0      	cbnz	r0, 8008594 <_dtoa_r+0x6c4>
 8008562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f8 fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800856e:	b110      	cbz	r0, 8008576 <_dtoa_r+0x6a6>
 8008570:	f018 0f01 	tst.w	r8, #1
 8008574:	d10e      	bne.n	8008594 <_dtoa_r+0x6c4>
 8008576:	4648      	mov	r0, r9
 8008578:	9903      	ldr	r1, [sp, #12]
 800857a:	f000 fbbb 	bl	8008cf4 <_Bfree>
 800857e:	2300      	movs	r3, #0
 8008580:	7033      	strb	r3, [r6, #0]
 8008582:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008584:	3701      	adds	r7, #1
 8008586:	601f      	str	r7, [r3, #0]
 8008588:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 824b 	beq.w	8008a26 <_dtoa_r+0xb56>
 8008590:	601e      	str	r6, [r3, #0]
 8008592:	e248      	b.n	8008a26 <_dtoa_r+0xb56>
 8008594:	46b8      	mov	r8, r7
 8008596:	4633      	mov	r3, r6
 8008598:	461e      	mov	r6, r3
 800859a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800859e:	2a39      	cmp	r2, #57	@ 0x39
 80085a0:	d106      	bne.n	80085b0 <_dtoa_r+0x6e0>
 80085a2:	459a      	cmp	sl, r3
 80085a4:	d1f8      	bne.n	8008598 <_dtoa_r+0x6c8>
 80085a6:	2230      	movs	r2, #48	@ 0x30
 80085a8:	f108 0801 	add.w	r8, r8, #1
 80085ac:	f88a 2000 	strb.w	r2, [sl]
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	3201      	adds	r2, #1
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	e7a0      	b.n	80084fa <_dtoa_r+0x62a>
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b6f      	ldr	r3, [pc, #444]	@ (8008778 <_dtoa_r+0x8a8>)
 80085bc:	f7f7 ff8c 	bl	80004d8 <__aeabi_dmul>
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	f7f8 f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d09f      	beq.n	8008510 <_dtoa_r+0x640>
 80085d0:	e7d1      	b.n	8008576 <_dtoa_r+0x6a6>
 80085d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	f000 80ea 	beq.w	80087ae <_dtoa_r+0x8de>
 80085da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085dc:	2a01      	cmp	r2, #1
 80085de:	f300 80cd 	bgt.w	800877c <_dtoa_r+0x8ac>
 80085e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	f000 80c1 	beq.w	800876c <_dtoa_r+0x89c>
 80085ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085f0:	9e04      	ldr	r6, [sp, #16]
 80085f2:	9a04      	ldr	r2, [sp, #16]
 80085f4:	2101      	movs	r1, #1
 80085f6:	441a      	add	r2, r3
 80085f8:	9204      	str	r2, [sp, #16]
 80085fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085fc:	4648      	mov	r0, r9
 80085fe:	441a      	add	r2, r3
 8008600:	9209      	str	r2, [sp, #36]	@ 0x24
 8008602:	f000 fc2b 	bl	8008e5c <__i2b>
 8008606:	4605      	mov	r5, r0
 8008608:	b166      	cbz	r6, 8008624 <_dtoa_r+0x754>
 800860a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd09      	ble.n	8008624 <_dtoa_r+0x754>
 8008610:	42b3      	cmp	r3, r6
 8008612:	bfa8      	it	ge
 8008614:	4633      	movge	r3, r6
 8008616:	9a04      	ldr	r2, [sp, #16]
 8008618:	1af6      	subs	r6, r6, r3
 800861a:	1ad2      	subs	r2, r2, r3
 800861c:	9204      	str	r2, [sp, #16]
 800861e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	9309      	str	r3, [sp, #36]	@ 0x24
 8008624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008626:	b30b      	cbz	r3, 800866c <_dtoa_r+0x79c>
 8008628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80c6 	beq.w	80087bc <_dtoa_r+0x8ec>
 8008630:	2c00      	cmp	r4, #0
 8008632:	f000 80c0 	beq.w	80087b6 <_dtoa_r+0x8e6>
 8008636:	4629      	mov	r1, r5
 8008638:	4622      	mov	r2, r4
 800863a:	4648      	mov	r0, r9
 800863c:	f000 fcc6 	bl	8008fcc <__pow5mult>
 8008640:	9a03      	ldr	r2, [sp, #12]
 8008642:	4601      	mov	r1, r0
 8008644:	4605      	mov	r5, r0
 8008646:	4648      	mov	r0, r9
 8008648:	f000 fc1e 	bl	8008e88 <__multiply>
 800864c:	9903      	ldr	r1, [sp, #12]
 800864e:	4680      	mov	r8, r0
 8008650:	4648      	mov	r0, r9
 8008652:	f000 fb4f 	bl	8008cf4 <_Bfree>
 8008656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008658:	1b1b      	subs	r3, r3, r4
 800865a:	930a      	str	r3, [sp, #40]	@ 0x28
 800865c:	f000 80b1 	beq.w	80087c2 <_dtoa_r+0x8f2>
 8008660:	4641      	mov	r1, r8
 8008662:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008664:	4648      	mov	r0, r9
 8008666:	f000 fcb1 	bl	8008fcc <__pow5mult>
 800866a:	9003      	str	r0, [sp, #12]
 800866c:	2101      	movs	r1, #1
 800866e:	4648      	mov	r0, r9
 8008670:	f000 fbf4 	bl	8008e5c <__i2b>
 8008674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008676:	4604      	mov	r4, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 81d8 	beq.w	8008a2e <_dtoa_r+0xb5e>
 800867e:	461a      	mov	r2, r3
 8008680:	4601      	mov	r1, r0
 8008682:	4648      	mov	r0, r9
 8008684:	f000 fca2 	bl	8008fcc <__pow5mult>
 8008688:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800868a:	4604      	mov	r4, r0
 800868c:	2b01      	cmp	r3, #1
 800868e:	f300 809f 	bgt.w	80087d0 <_dtoa_r+0x900>
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f040 8097 	bne.w	80087c8 <_dtoa_r+0x8f8>
 800869a:	9b07      	ldr	r3, [sp, #28]
 800869c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f040 8093 	bne.w	80087cc <_dtoa_r+0x8fc>
 80086a6:	9b07      	ldr	r3, [sp, #28]
 80086a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086ac:	0d1b      	lsrs	r3, r3, #20
 80086ae:	051b      	lsls	r3, r3, #20
 80086b0:	b133      	cbz	r3, 80086c0 <_dtoa_r+0x7f0>
 80086b2:	9b04      	ldr	r3, [sp, #16]
 80086b4:	3301      	adds	r3, #1
 80086b6:	9304      	str	r3, [sp, #16]
 80086b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ba:	3301      	adds	r3, #1
 80086bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086be:	2301      	movs	r3, #1
 80086c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 81b8 	beq.w	8008a3a <_dtoa_r+0xb6a>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086d0:	6918      	ldr	r0, [r3, #16]
 80086d2:	f000 fb77 	bl	8008dc4 <__hi0bits>
 80086d6:	f1c0 0020 	rsb	r0, r0, #32
 80086da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086dc:	4418      	add	r0, r3
 80086de:	f010 001f 	ands.w	r0, r0, #31
 80086e2:	f000 8082 	beq.w	80087ea <_dtoa_r+0x91a>
 80086e6:	f1c0 0320 	rsb	r3, r0, #32
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	dd73      	ble.n	80087d6 <_dtoa_r+0x906>
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	f1c0 001c 	rsb	r0, r0, #28
 80086f4:	4403      	add	r3, r0
 80086f6:	9304      	str	r3, [sp, #16]
 80086f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fa:	4406      	add	r6, r0
 80086fc:	4403      	add	r3, r0
 80086fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	dd05      	ble.n	8008712 <_dtoa_r+0x842>
 8008706:	461a      	mov	r2, r3
 8008708:	4648      	mov	r0, r9
 800870a:	9903      	ldr	r1, [sp, #12]
 800870c:	f000 fcb8 	bl	8009080 <__lshift>
 8008710:	9003      	str	r0, [sp, #12]
 8008712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	dd05      	ble.n	8008724 <_dtoa_r+0x854>
 8008718:	4621      	mov	r1, r4
 800871a:	461a      	mov	r2, r3
 800871c:	4648      	mov	r0, r9
 800871e:	f000 fcaf 	bl	8009080 <__lshift>
 8008722:	4604      	mov	r4, r0
 8008724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d061      	beq.n	80087ee <_dtoa_r+0x91e>
 800872a:	4621      	mov	r1, r4
 800872c:	9803      	ldr	r0, [sp, #12]
 800872e:	f000 fd13 	bl	8009158 <__mcmp>
 8008732:	2800      	cmp	r0, #0
 8008734:	da5b      	bge.n	80087ee <_dtoa_r+0x91e>
 8008736:	2300      	movs	r3, #0
 8008738:	220a      	movs	r2, #10
 800873a:	4648      	mov	r0, r9
 800873c:	9903      	ldr	r1, [sp, #12]
 800873e:	f000 fafb 	bl	8008d38 <__multadd>
 8008742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008744:	f107 38ff 	add.w	r8, r7, #4294967295
 8008748:	9003      	str	r0, [sp, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 8177 	beq.w	8008a3e <_dtoa_r+0xb6e>
 8008750:	4629      	mov	r1, r5
 8008752:	2300      	movs	r3, #0
 8008754:	220a      	movs	r2, #10
 8008756:	4648      	mov	r0, r9
 8008758:	f000 faee 	bl	8008d38 <__multadd>
 800875c:	f1bb 0f00 	cmp.w	fp, #0
 8008760:	4605      	mov	r5, r0
 8008762:	dc6f      	bgt.n	8008844 <_dtoa_r+0x974>
 8008764:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008766:	2b02      	cmp	r3, #2
 8008768:	dc49      	bgt.n	80087fe <_dtoa_r+0x92e>
 800876a:	e06b      	b.n	8008844 <_dtoa_r+0x974>
 800876c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800876e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008772:	e73c      	b.n	80085ee <_dtoa_r+0x71e>
 8008774:	3fe00000 	.word	0x3fe00000
 8008778:	40240000 	.word	0x40240000
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	1e5c      	subs	r4, r3, #1
 8008780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008782:	42a3      	cmp	r3, r4
 8008784:	db09      	blt.n	800879a <_dtoa_r+0x8ca>
 8008786:	1b1c      	subs	r4, r3, r4
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f6bf af30 	bge.w	80085f0 <_dtoa_r+0x720>
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	9a08      	ldr	r2, [sp, #32]
 8008794:	1a9e      	subs	r6, r3, r2
 8008796:	2300      	movs	r3, #0
 8008798:	e72b      	b.n	80085f2 <_dtoa_r+0x722>
 800879a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800879c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800879e:	1ae3      	subs	r3, r4, r3
 80087a0:	441a      	add	r2, r3
 80087a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80087a4:	9e04      	ldr	r6, [sp, #16]
 80087a6:	2400      	movs	r4, #0
 80087a8:	9b08      	ldr	r3, [sp, #32]
 80087aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80087ac:	e721      	b.n	80085f2 <_dtoa_r+0x722>
 80087ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087b0:	9e04      	ldr	r6, [sp, #16]
 80087b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80087b4:	e728      	b.n	8008608 <_dtoa_r+0x738>
 80087b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087ba:	e751      	b.n	8008660 <_dtoa_r+0x790>
 80087bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087be:	9903      	ldr	r1, [sp, #12]
 80087c0:	e750      	b.n	8008664 <_dtoa_r+0x794>
 80087c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c6:	e751      	b.n	800866c <_dtoa_r+0x79c>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e779      	b.n	80086c0 <_dtoa_r+0x7f0>
 80087cc:	9b06      	ldr	r3, [sp, #24]
 80087ce:	e777      	b.n	80086c0 <_dtoa_r+0x7f0>
 80087d0:	2300      	movs	r3, #0
 80087d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d4:	e779      	b.n	80086ca <_dtoa_r+0x7fa>
 80087d6:	d093      	beq.n	8008700 <_dtoa_r+0x830>
 80087d8:	9a04      	ldr	r2, [sp, #16]
 80087da:	331c      	adds	r3, #28
 80087dc:	441a      	add	r2, r3
 80087de:	9204      	str	r2, [sp, #16]
 80087e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087e2:	441e      	add	r6, r3
 80087e4:	441a      	add	r2, r3
 80087e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80087e8:	e78a      	b.n	8008700 <_dtoa_r+0x830>
 80087ea:	4603      	mov	r3, r0
 80087ec:	e7f4      	b.n	80087d8 <_dtoa_r+0x908>
 80087ee:	9b08      	ldr	r3, [sp, #32]
 80087f0:	46b8      	mov	r8, r7
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dc20      	bgt.n	8008838 <_dtoa_r+0x968>
 80087f6:	469b      	mov	fp, r3
 80087f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	dd1e      	ble.n	800883c <_dtoa_r+0x96c>
 80087fe:	f1bb 0f00 	cmp.w	fp, #0
 8008802:	f47f adb1 	bne.w	8008368 <_dtoa_r+0x498>
 8008806:	4621      	mov	r1, r4
 8008808:	465b      	mov	r3, fp
 800880a:	2205      	movs	r2, #5
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fa93 	bl	8008d38 <__multadd>
 8008812:	4601      	mov	r1, r0
 8008814:	4604      	mov	r4, r0
 8008816:	9803      	ldr	r0, [sp, #12]
 8008818:	f000 fc9e 	bl	8009158 <__mcmp>
 800881c:	2800      	cmp	r0, #0
 800881e:	f77f ada3 	ble.w	8008368 <_dtoa_r+0x498>
 8008822:	4656      	mov	r6, sl
 8008824:	2331      	movs	r3, #49	@ 0x31
 8008826:	f108 0801 	add.w	r8, r8, #1
 800882a:	f806 3b01 	strb.w	r3, [r6], #1
 800882e:	e59f      	b.n	8008370 <_dtoa_r+0x4a0>
 8008830:	46b8      	mov	r8, r7
 8008832:	9c08      	ldr	r4, [sp, #32]
 8008834:	4625      	mov	r5, r4
 8008836:	e7f4      	b.n	8008822 <_dtoa_r+0x952>
 8008838:	f8dd b020 	ldr.w	fp, [sp, #32]
 800883c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 8101 	beq.w	8008a46 <_dtoa_r+0xb76>
 8008844:	2e00      	cmp	r6, #0
 8008846:	dd05      	ble.n	8008854 <_dtoa_r+0x984>
 8008848:	4629      	mov	r1, r5
 800884a:	4632      	mov	r2, r6
 800884c:	4648      	mov	r0, r9
 800884e:	f000 fc17 	bl	8009080 <__lshift>
 8008852:	4605      	mov	r5, r0
 8008854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	d05c      	beq.n	8008914 <_dtoa_r+0xa44>
 800885a:	4648      	mov	r0, r9
 800885c:	6869      	ldr	r1, [r5, #4]
 800885e:	f000 fa09 	bl	8008c74 <_Balloc>
 8008862:	4606      	mov	r6, r0
 8008864:	b928      	cbnz	r0, 8008872 <_dtoa_r+0x9a2>
 8008866:	4602      	mov	r2, r0
 8008868:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800886c:	4b80      	ldr	r3, [pc, #512]	@ (8008a70 <_dtoa_r+0xba0>)
 800886e:	f7ff bb43 	b.w	8007ef8 <_dtoa_r+0x28>
 8008872:	692a      	ldr	r2, [r5, #16]
 8008874:	f105 010c 	add.w	r1, r5, #12
 8008878:	3202      	adds	r2, #2
 800887a:	0092      	lsls	r2, r2, #2
 800887c:	300c      	adds	r0, #12
 800887e:	f000 ff9d 	bl	80097bc <memcpy>
 8008882:	2201      	movs	r2, #1
 8008884:	4631      	mov	r1, r6
 8008886:	4648      	mov	r0, r9
 8008888:	f000 fbfa 	bl	8009080 <__lshift>
 800888c:	462f      	mov	r7, r5
 800888e:	4605      	mov	r5, r0
 8008890:	f10a 0301 	add.w	r3, sl, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	eb0a 030b 	add.w	r3, sl, fp
 800889a:	930a      	str	r3, [sp, #40]	@ 0x28
 800889c:	9b06      	ldr	r3, [sp, #24]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	4621      	mov	r1, r4
 80088a8:	9803      	ldr	r0, [sp, #12]
 80088aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80088ae:	f7ff fa86 	bl	8007dbe <quorem>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4639      	mov	r1, r7
 80088b6:	3330      	adds	r3, #48	@ 0x30
 80088b8:	9006      	str	r0, [sp, #24]
 80088ba:	9803      	ldr	r0, [sp, #12]
 80088bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088be:	f000 fc4b 	bl	8009158 <__mcmp>
 80088c2:	462a      	mov	r2, r5
 80088c4:	9008      	str	r0, [sp, #32]
 80088c6:	4621      	mov	r1, r4
 80088c8:	4648      	mov	r0, r9
 80088ca:	f000 fc61 	bl	8009190 <__mdiff>
 80088ce:	68c2      	ldr	r2, [r0, #12]
 80088d0:	4606      	mov	r6, r0
 80088d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088d4:	bb02      	cbnz	r2, 8008918 <_dtoa_r+0xa48>
 80088d6:	4601      	mov	r1, r0
 80088d8:	9803      	ldr	r0, [sp, #12]
 80088da:	f000 fc3d 	bl	8009158 <__mcmp>
 80088de:	4602      	mov	r2, r0
 80088e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e2:	4631      	mov	r1, r6
 80088e4:	4648      	mov	r0, r9
 80088e6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80088ea:	f000 fa03 	bl	8008cf4 <_Bfree>
 80088ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088f2:	9e04      	ldr	r6, [sp, #16]
 80088f4:	ea42 0103 	orr.w	r1, r2, r3
 80088f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fa:	4319      	orrs	r1, r3
 80088fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088fe:	d10d      	bne.n	800891c <_dtoa_r+0xa4c>
 8008900:	2b39      	cmp	r3, #57	@ 0x39
 8008902:	d027      	beq.n	8008954 <_dtoa_r+0xa84>
 8008904:	9a08      	ldr	r2, [sp, #32]
 8008906:	2a00      	cmp	r2, #0
 8008908:	dd01      	ble.n	800890e <_dtoa_r+0xa3e>
 800890a:	9b06      	ldr	r3, [sp, #24]
 800890c:	3331      	adds	r3, #49	@ 0x31
 800890e:	f88b 3000 	strb.w	r3, [fp]
 8008912:	e52e      	b.n	8008372 <_dtoa_r+0x4a2>
 8008914:	4628      	mov	r0, r5
 8008916:	e7b9      	b.n	800888c <_dtoa_r+0x9bc>
 8008918:	2201      	movs	r2, #1
 800891a:	e7e2      	b.n	80088e2 <_dtoa_r+0xa12>
 800891c:	9908      	ldr	r1, [sp, #32]
 800891e:	2900      	cmp	r1, #0
 8008920:	db04      	blt.n	800892c <_dtoa_r+0xa5c>
 8008922:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008924:	4301      	orrs	r1, r0
 8008926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008928:	4301      	orrs	r1, r0
 800892a:	d120      	bne.n	800896e <_dtoa_r+0xa9e>
 800892c:	2a00      	cmp	r2, #0
 800892e:	ddee      	ble.n	800890e <_dtoa_r+0xa3e>
 8008930:	2201      	movs	r2, #1
 8008932:	9903      	ldr	r1, [sp, #12]
 8008934:	4648      	mov	r0, r9
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	f000 fba2 	bl	8009080 <__lshift>
 800893c:	4621      	mov	r1, r4
 800893e:	9003      	str	r0, [sp, #12]
 8008940:	f000 fc0a 	bl	8009158 <__mcmp>
 8008944:	2800      	cmp	r0, #0
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	dc02      	bgt.n	8008950 <_dtoa_r+0xa80>
 800894a:	d1e0      	bne.n	800890e <_dtoa_r+0xa3e>
 800894c:	07da      	lsls	r2, r3, #31
 800894e:	d5de      	bpl.n	800890e <_dtoa_r+0xa3e>
 8008950:	2b39      	cmp	r3, #57	@ 0x39
 8008952:	d1da      	bne.n	800890a <_dtoa_r+0xa3a>
 8008954:	2339      	movs	r3, #57	@ 0x39
 8008956:	f88b 3000 	strb.w	r3, [fp]
 800895a:	4633      	mov	r3, r6
 800895c:	461e      	mov	r6, r3
 800895e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008962:	3b01      	subs	r3, #1
 8008964:	2a39      	cmp	r2, #57	@ 0x39
 8008966:	d04e      	beq.n	8008a06 <_dtoa_r+0xb36>
 8008968:	3201      	adds	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	e501      	b.n	8008372 <_dtoa_r+0x4a2>
 800896e:	2a00      	cmp	r2, #0
 8008970:	dd03      	ble.n	800897a <_dtoa_r+0xaaa>
 8008972:	2b39      	cmp	r3, #57	@ 0x39
 8008974:	d0ee      	beq.n	8008954 <_dtoa_r+0xa84>
 8008976:	3301      	adds	r3, #1
 8008978:	e7c9      	b.n	800890e <_dtoa_r+0xa3e>
 800897a:	9a04      	ldr	r2, [sp, #16]
 800897c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800897e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008982:	428a      	cmp	r2, r1
 8008984:	d028      	beq.n	80089d8 <_dtoa_r+0xb08>
 8008986:	2300      	movs	r3, #0
 8008988:	220a      	movs	r2, #10
 800898a:	9903      	ldr	r1, [sp, #12]
 800898c:	4648      	mov	r0, r9
 800898e:	f000 f9d3 	bl	8008d38 <__multadd>
 8008992:	42af      	cmp	r7, r5
 8008994:	9003      	str	r0, [sp, #12]
 8008996:	f04f 0300 	mov.w	r3, #0
 800899a:	f04f 020a 	mov.w	r2, #10
 800899e:	4639      	mov	r1, r7
 80089a0:	4648      	mov	r0, r9
 80089a2:	d107      	bne.n	80089b4 <_dtoa_r+0xae4>
 80089a4:	f000 f9c8 	bl	8008d38 <__multadd>
 80089a8:	4607      	mov	r7, r0
 80089aa:	4605      	mov	r5, r0
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	e777      	b.n	80088a4 <_dtoa_r+0x9d4>
 80089b4:	f000 f9c0 	bl	8008d38 <__multadd>
 80089b8:	4629      	mov	r1, r5
 80089ba:	4607      	mov	r7, r0
 80089bc:	2300      	movs	r3, #0
 80089be:	220a      	movs	r2, #10
 80089c0:	4648      	mov	r0, r9
 80089c2:	f000 f9b9 	bl	8008d38 <__multadd>
 80089c6:	4605      	mov	r5, r0
 80089c8:	e7f0      	b.n	80089ac <_dtoa_r+0xadc>
 80089ca:	f1bb 0f00 	cmp.w	fp, #0
 80089ce:	bfcc      	ite	gt
 80089d0:	465e      	movgt	r6, fp
 80089d2:	2601      	movle	r6, #1
 80089d4:	2700      	movs	r7, #0
 80089d6:	4456      	add	r6, sl
 80089d8:	2201      	movs	r2, #1
 80089da:	9903      	ldr	r1, [sp, #12]
 80089dc:	4648      	mov	r0, r9
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	f000 fb4e 	bl	8009080 <__lshift>
 80089e4:	4621      	mov	r1, r4
 80089e6:	9003      	str	r0, [sp, #12]
 80089e8:	f000 fbb6 	bl	8009158 <__mcmp>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	dcb4      	bgt.n	800895a <_dtoa_r+0xa8a>
 80089f0:	d102      	bne.n	80089f8 <_dtoa_r+0xb28>
 80089f2:	9b04      	ldr	r3, [sp, #16]
 80089f4:	07db      	lsls	r3, r3, #31
 80089f6:	d4b0      	bmi.n	800895a <_dtoa_r+0xa8a>
 80089f8:	4633      	mov	r3, r6
 80089fa:	461e      	mov	r6, r3
 80089fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a00:	2a30      	cmp	r2, #48	@ 0x30
 8008a02:	d0fa      	beq.n	80089fa <_dtoa_r+0xb2a>
 8008a04:	e4b5      	b.n	8008372 <_dtoa_r+0x4a2>
 8008a06:	459a      	cmp	sl, r3
 8008a08:	d1a8      	bne.n	800895c <_dtoa_r+0xa8c>
 8008a0a:	2331      	movs	r3, #49	@ 0x31
 8008a0c:	f108 0801 	add.w	r8, r8, #1
 8008a10:	f88a 3000 	strb.w	r3, [sl]
 8008a14:	e4ad      	b.n	8008372 <_dtoa_r+0x4a2>
 8008a16:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008a74 <_dtoa_r+0xba4>
 8008a1c:	b11b      	cbz	r3, 8008a26 <_dtoa_r+0xb56>
 8008a1e:	f10a 0308 	add.w	r3, sl, #8
 8008a22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	4650      	mov	r0, sl
 8008a28:	b017      	add	sp, #92	@ 0x5c
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	f77f ae2e 	ble.w	8008692 <_dtoa_r+0x7c2>
 8008a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	e64d      	b.n	80086da <_dtoa_r+0x80a>
 8008a3e:	f1bb 0f00 	cmp.w	fp, #0
 8008a42:	f77f aed9 	ble.w	80087f8 <_dtoa_r+0x928>
 8008a46:	4656      	mov	r6, sl
 8008a48:	4621      	mov	r1, r4
 8008a4a:	9803      	ldr	r0, [sp, #12]
 8008a4c:	f7ff f9b7 	bl	8007dbe <quorem>
 8008a50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008a54:	f806 3b01 	strb.w	r3, [r6], #1
 8008a58:	eba6 020a 	sub.w	r2, r6, sl
 8008a5c:	4593      	cmp	fp, r2
 8008a5e:	ddb4      	ble.n	80089ca <_dtoa_r+0xafa>
 8008a60:	2300      	movs	r3, #0
 8008a62:	220a      	movs	r2, #10
 8008a64:	4648      	mov	r0, r9
 8008a66:	9903      	ldr	r1, [sp, #12]
 8008a68:	f000 f966 	bl	8008d38 <__multadd>
 8008a6c:	9003      	str	r0, [sp, #12]
 8008a6e:	e7eb      	b.n	8008a48 <_dtoa_r+0xb78>
 8008a70:	0800b436 	.word	0x0800b436
 8008a74:	0800b3ba 	.word	0x0800b3ba

08008a78 <_free_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	d040      	beq.n	8008b02 <_free_r+0x8a>
 8008a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a84:	1f0c      	subs	r4, r1, #4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfb8      	it	lt
 8008a8a:	18e4      	addlt	r4, r4, r3
 8008a8c:	f000 f8e6 	bl	8008c5c <__malloc_lock>
 8008a90:	4a1c      	ldr	r2, [pc, #112]	@ (8008b04 <_free_r+0x8c>)
 8008a92:	6813      	ldr	r3, [r2, #0]
 8008a94:	b933      	cbnz	r3, 8008aa4 <_free_r+0x2c>
 8008a96:	6063      	str	r3, [r4, #4]
 8008a98:	6014      	str	r4, [r2, #0]
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa0:	f000 b8e2 	b.w	8008c68 <__malloc_unlock>
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	d908      	bls.n	8008aba <_free_r+0x42>
 8008aa8:	6820      	ldr	r0, [r4, #0]
 8008aaa:	1821      	adds	r1, r4, r0
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf01      	itttt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	1809      	addeq	r1, r1, r0
 8008ab6:	6021      	streq	r1, [r4, #0]
 8008ab8:	e7ed      	b.n	8008a96 <_free_r+0x1e>
 8008aba:	461a      	mov	r2, r3
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b10b      	cbz	r3, 8008ac4 <_free_r+0x4c>
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d9fa      	bls.n	8008aba <_free_r+0x42>
 8008ac4:	6811      	ldr	r1, [r2, #0]
 8008ac6:	1850      	adds	r0, r2, r1
 8008ac8:	42a0      	cmp	r0, r4
 8008aca:	d10b      	bne.n	8008ae4 <_free_r+0x6c>
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	4401      	add	r1, r0
 8008ad0:	1850      	adds	r0, r2, r1
 8008ad2:	4283      	cmp	r3, r0
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	d1e0      	bne.n	8008a9a <_free_r+0x22>
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	4408      	add	r0, r1
 8008ade:	6010      	str	r0, [r2, #0]
 8008ae0:	6053      	str	r3, [r2, #4]
 8008ae2:	e7da      	b.n	8008a9a <_free_r+0x22>
 8008ae4:	d902      	bls.n	8008aec <_free_r+0x74>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	e7d6      	b.n	8008a9a <_free_r+0x22>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	1821      	adds	r1, r4, r0
 8008af0:	428b      	cmp	r3, r1
 8008af2:	bf01      	itttt	eq
 8008af4:	6819      	ldreq	r1, [r3, #0]
 8008af6:	685b      	ldreq	r3, [r3, #4]
 8008af8:	1809      	addeq	r1, r1, r0
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	6054      	str	r4, [r2, #4]
 8008b00:	e7cb      	b.n	8008a9a <_free_r+0x22>
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20000950 	.word	0x20000950

08008b08 <malloc>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	@ (8008b14 <malloc+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f000 b825 	b.w	8008b5c <_malloc_r>
 8008b12:	bf00      	nop
 8008b14:	20000028 	.word	0x20000028

08008b18 <sbrk_aligned>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8008b58 <sbrk_aligned+0x40>)
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	6831      	ldr	r1, [r6, #0]
 8008b20:	4605      	mov	r5, r0
 8008b22:	b911      	cbnz	r1, 8008b2a <sbrk_aligned+0x12>
 8008b24:	f000 fe3a 	bl	800979c <_sbrk_r>
 8008b28:	6030      	str	r0, [r6, #0]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 fe35 	bl	800979c <_sbrk_r>
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	d103      	bne.n	8008b3e <sbrk_aligned+0x26>
 8008b36:	f04f 34ff 	mov.w	r4, #4294967295
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	bd70      	pop	{r4, r5, r6, pc}
 8008b3e:	1cc4      	adds	r4, r0, #3
 8008b40:	f024 0403 	bic.w	r4, r4, #3
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d0f8      	beq.n	8008b3a <sbrk_aligned+0x22>
 8008b48:	1a21      	subs	r1, r4, r0
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 fe26 	bl	800979c <_sbrk_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d1f2      	bne.n	8008b3a <sbrk_aligned+0x22>
 8008b54:	e7ef      	b.n	8008b36 <sbrk_aligned+0x1e>
 8008b56:	bf00      	nop
 8008b58:	2000094c 	.word	0x2000094c

08008b5c <_malloc_r>:
 8008b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b60:	1ccd      	adds	r5, r1, #3
 8008b62:	f025 0503 	bic.w	r5, r5, #3
 8008b66:	3508      	adds	r5, #8
 8008b68:	2d0c      	cmp	r5, #12
 8008b6a:	bf38      	it	cc
 8008b6c:	250c      	movcc	r5, #12
 8008b6e:	2d00      	cmp	r5, #0
 8008b70:	4606      	mov	r6, r0
 8008b72:	db01      	blt.n	8008b78 <_malloc_r+0x1c>
 8008b74:	42a9      	cmp	r1, r5
 8008b76:	d904      	bls.n	8008b82 <_malloc_r+0x26>
 8008b78:	230c      	movs	r3, #12
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c58 <_malloc_r+0xfc>
 8008b86:	f000 f869 	bl	8008c5c <__malloc_lock>
 8008b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8e:	461c      	mov	r4, r3
 8008b90:	bb44      	cbnz	r4, 8008be4 <_malloc_r+0x88>
 8008b92:	4629      	mov	r1, r5
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7ff ffbf 	bl	8008b18 <sbrk_aligned>
 8008b9a:	1c43      	adds	r3, r0, #1
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	d158      	bne.n	8008c52 <_malloc_r+0xf6>
 8008ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba4:	4627      	mov	r7, r4
 8008ba6:	2f00      	cmp	r7, #0
 8008ba8:	d143      	bne.n	8008c32 <_malloc_r+0xd6>
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	d04b      	beq.n	8008c46 <_malloc_r+0xea>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	eb04 0903 	add.w	r9, r4, r3
 8008bb8:	f000 fdf0 	bl	800979c <_sbrk_r>
 8008bbc:	4581      	cmp	r9, r0
 8008bbe:	d142      	bne.n	8008c46 <_malloc_r+0xea>
 8008bc0:	6821      	ldr	r1, [r4, #0]
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	1a6d      	subs	r5, r5, r1
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7ff ffa6 	bl	8008b18 <sbrk_aligned>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d03a      	beq.n	8008c46 <_malloc_r+0xea>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	442b      	add	r3, r5
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	bb62      	cbnz	r2, 8008c38 <_malloc_r+0xdc>
 8008bde:	f8c8 7000 	str.w	r7, [r8]
 8008be2:	e00f      	b.n	8008c04 <_malloc_r+0xa8>
 8008be4:	6822      	ldr	r2, [r4, #0]
 8008be6:	1b52      	subs	r2, r2, r5
 8008be8:	d420      	bmi.n	8008c2c <_malloc_r+0xd0>
 8008bea:	2a0b      	cmp	r2, #11
 8008bec:	d917      	bls.n	8008c1e <_malloc_r+0xc2>
 8008bee:	1961      	adds	r1, r4, r5
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	6025      	str	r5, [r4, #0]
 8008bf4:	bf18      	it	ne
 8008bf6:	6059      	strne	r1, [r3, #4]
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	bf08      	it	eq
 8008bfc:	f8c8 1000 	streq.w	r1, [r8]
 8008c00:	5162      	str	r2, [r4, r5]
 8008c02:	604b      	str	r3, [r1, #4]
 8008c04:	4630      	mov	r0, r6
 8008c06:	f000 f82f 	bl	8008c68 <__malloc_unlock>
 8008c0a:	f104 000b 	add.w	r0, r4, #11
 8008c0e:	1d23      	adds	r3, r4, #4
 8008c10:	f020 0007 	bic.w	r0, r0, #7
 8008c14:	1ac2      	subs	r2, r0, r3
 8008c16:	bf1c      	itt	ne
 8008c18:	1a1b      	subne	r3, r3, r0
 8008c1a:	50a3      	strne	r3, [r4, r2]
 8008c1c:	e7af      	b.n	8008b7e <_malloc_r+0x22>
 8008c1e:	6862      	ldr	r2, [r4, #4]
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	bf0c      	ite	eq
 8008c24:	f8c8 2000 	streq.w	r2, [r8]
 8008c28:	605a      	strne	r2, [r3, #4]
 8008c2a:	e7eb      	b.n	8008c04 <_malloc_r+0xa8>
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	6864      	ldr	r4, [r4, #4]
 8008c30:	e7ae      	b.n	8008b90 <_malloc_r+0x34>
 8008c32:	463c      	mov	r4, r7
 8008c34:	687f      	ldr	r7, [r7, #4]
 8008c36:	e7b6      	b.n	8008ba6 <_malloc_r+0x4a>
 8008c38:	461a      	mov	r2, r3
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d1fb      	bne.n	8008c38 <_malloc_r+0xdc>
 8008c40:	2300      	movs	r3, #0
 8008c42:	6053      	str	r3, [r2, #4]
 8008c44:	e7de      	b.n	8008c04 <_malloc_r+0xa8>
 8008c46:	230c      	movs	r3, #12
 8008c48:	4630      	mov	r0, r6
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	f000 f80c 	bl	8008c68 <__malloc_unlock>
 8008c50:	e794      	b.n	8008b7c <_malloc_r+0x20>
 8008c52:	6005      	str	r5, [r0, #0]
 8008c54:	e7d6      	b.n	8008c04 <_malloc_r+0xa8>
 8008c56:	bf00      	nop
 8008c58:	20000950 	.word	0x20000950

08008c5c <__malloc_lock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	@ (8008c64 <__malloc_lock+0x8>)
 8008c5e:	f7ff b89e 	b.w	8007d9e <__retarget_lock_acquire_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000948 	.word	0x20000948

08008c68 <__malloc_unlock>:
 8008c68:	4801      	ldr	r0, [pc, #4]	@ (8008c70 <__malloc_unlock+0x8>)
 8008c6a:	f7ff b899 	b.w	8007da0 <__retarget_lock_release_recursive>
 8008c6e:	bf00      	nop
 8008c70:	20000948 	.word	0x20000948

08008c74 <_Balloc>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	69c6      	ldr	r6, [r0, #28]
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	b976      	cbnz	r6, 8008c9c <_Balloc+0x28>
 8008c7e:	2010      	movs	r0, #16
 8008c80:	f7ff ff42 	bl	8008b08 <malloc>
 8008c84:	4602      	mov	r2, r0
 8008c86:	61e0      	str	r0, [r4, #28]
 8008c88:	b920      	cbnz	r0, 8008c94 <_Balloc+0x20>
 8008c8a:	216b      	movs	r1, #107	@ 0x6b
 8008c8c:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <_Balloc+0x78>)
 8008c8e:	4818      	ldr	r0, [pc, #96]	@ (8008cf0 <_Balloc+0x7c>)
 8008c90:	f000 fda2 	bl	80097d8 <__assert_func>
 8008c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c98:	6006      	str	r6, [r0, #0]
 8008c9a:	60c6      	str	r6, [r0, #12]
 8008c9c:	69e6      	ldr	r6, [r4, #28]
 8008c9e:	68f3      	ldr	r3, [r6, #12]
 8008ca0:	b183      	cbz	r3, 8008cc4 <_Balloc+0x50>
 8008ca2:	69e3      	ldr	r3, [r4, #28]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008caa:	b9b8      	cbnz	r0, 8008cdc <_Balloc+0x68>
 8008cac:	2101      	movs	r1, #1
 8008cae:	fa01 f605 	lsl.w	r6, r1, r5
 8008cb2:	1d72      	adds	r2, r6, #5
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	0092      	lsls	r2, r2, #2
 8008cb8:	f000 fdac 	bl	8009814 <_calloc_r>
 8008cbc:	b160      	cbz	r0, 8008cd8 <_Balloc+0x64>
 8008cbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cc2:	e00e      	b.n	8008ce2 <_Balloc+0x6e>
 8008cc4:	2221      	movs	r2, #33	@ 0x21
 8008cc6:	2104      	movs	r1, #4
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 fda3 	bl	8009814 <_calloc_r>
 8008cce:	69e3      	ldr	r3, [r4, #28]
 8008cd0:	60f0      	str	r0, [r6, #12]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e4      	bne.n	8008ca2 <_Balloc+0x2e>
 8008cd8:	2000      	movs	r0, #0
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	6802      	ldr	r2, [r0, #0]
 8008cde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ce8:	e7f7      	b.n	8008cda <_Balloc+0x66>
 8008cea:	bf00      	nop
 8008cec:	0800b3c7 	.word	0x0800b3c7
 8008cf0:	0800b447 	.word	0x0800b447

08008cf4 <_Bfree>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	69c6      	ldr	r6, [r0, #28]
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	b976      	cbnz	r6, 8008d1c <_Bfree+0x28>
 8008cfe:	2010      	movs	r0, #16
 8008d00:	f7ff ff02 	bl	8008b08 <malloc>
 8008d04:	4602      	mov	r2, r0
 8008d06:	61e8      	str	r0, [r5, #28]
 8008d08:	b920      	cbnz	r0, 8008d14 <_Bfree+0x20>
 8008d0a:	218f      	movs	r1, #143	@ 0x8f
 8008d0c:	4b08      	ldr	r3, [pc, #32]	@ (8008d30 <_Bfree+0x3c>)
 8008d0e:	4809      	ldr	r0, [pc, #36]	@ (8008d34 <_Bfree+0x40>)
 8008d10:	f000 fd62 	bl	80097d8 <__assert_func>
 8008d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d18:	6006      	str	r6, [r0, #0]
 8008d1a:	60c6      	str	r6, [r0, #12]
 8008d1c:	b13c      	cbz	r4, 8008d2e <_Bfree+0x3a>
 8008d1e:	69eb      	ldr	r3, [r5, #28]
 8008d20:	6862      	ldr	r2, [r4, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d28:	6021      	str	r1, [r4, #0]
 8008d2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	0800b3c7 	.word	0x0800b3c7
 8008d34:	0800b447 	.word	0x0800b447

08008d38 <__multadd>:
 8008d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	461e      	mov	r6, r3
 8008d42:	2000      	movs	r0, #0
 8008d44:	690d      	ldr	r5, [r1, #16]
 8008d46:	f101 0c14 	add.w	ip, r1, #20
 8008d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8008d4e:	3001      	adds	r0, #1
 8008d50:	b299      	uxth	r1, r3
 8008d52:	fb02 6101 	mla	r1, r2, r1, r6
 8008d56:	0c1e      	lsrs	r6, r3, #16
 8008d58:	0c0b      	lsrs	r3, r1, #16
 8008d5a:	fb02 3306 	mla	r3, r2, r6, r3
 8008d5e:	b289      	uxth	r1, r1
 8008d60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d64:	4285      	cmp	r5, r0
 8008d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d6e:	dcec      	bgt.n	8008d4a <__multadd+0x12>
 8008d70:	b30e      	cbz	r6, 8008db6 <__multadd+0x7e>
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dc19      	bgt.n	8008dac <__multadd+0x74>
 8008d78:	6861      	ldr	r1, [r4, #4]
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	3101      	adds	r1, #1
 8008d7e:	f7ff ff79 	bl	8008c74 <_Balloc>
 8008d82:	4680      	mov	r8, r0
 8008d84:	b928      	cbnz	r0, 8008d92 <__multadd+0x5a>
 8008d86:	4602      	mov	r2, r0
 8008d88:	21ba      	movs	r1, #186	@ 0xba
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dbc <__multadd+0x84>)
 8008d8c:	480c      	ldr	r0, [pc, #48]	@ (8008dc0 <__multadd+0x88>)
 8008d8e:	f000 fd23 	bl	80097d8 <__assert_func>
 8008d92:	6922      	ldr	r2, [r4, #16]
 8008d94:	f104 010c 	add.w	r1, r4, #12
 8008d98:	3202      	adds	r2, #2
 8008d9a:	0092      	lsls	r2, r2, #2
 8008d9c:	300c      	adds	r0, #12
 8008d9e:	f000 fd0d 	bl	80097bc <memcpy>
 8008da2:	4621      	mov	r1, r4
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff ffa5 	bl	8008cf4 <_Bfree>
 8008daa:	4644      	mov	r4, r8
 8008dac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008db0:	3501      	adds	r5, #1
 8008db2:	615e      	str	r6, [r3, #20]
 8008db4:	6125      	str	r5, [r4, #16]
 8008db6:	4620      	mov	r0, r4
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	0800b436 	.word	0x0800b436
 8008dc0:	0800b447 	.word	0x0800b447

08008dc4 <__hi0bits>:
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dca:	bf3a      	itte	cc
 8008dcc:	0403      	lslcc	r3, r0, #16
 8008dce:	2010      	movcc	r0, #16
 8008dd0:	2000      	movcs	r0, #0
 8008dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dd6:	bf3c      	itt	cc
 8008dd8:	021b      	lslcc	r3, r3, #8
 8008dda:	3008      	addcc	r0, #8
 8008ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de0:	bf3c      	itt	cc
 8008de2:	011b      	lslcc	r3, r3, #4
 8008de4:	3004      	addcc	r0, #4
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dea:	bf3c      	itt	cc
 8008dec:	009b      	lslcc	r3, r3, #2
 8008dee:	3002      	addcc	r0, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	db05      	blt.n	8008e00 <__hi0bits+0x3c>
 8008df4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008df8:	f100 0001 	add.w	r0, r0, #1
 8008dfc:	bf08      	it	eq
 8008dfe:	2020      	moveq	r0, #32
 8008e00:	4770      	bx	lr

08008e02 <__lo0bits>:
 8008e02:	6803      	ldr	r3, [r0, #0]
 8008e04:	4602      	mov	r2, r0
 8008e06:	f013 0007 	ands.w	r0, r3, #7
 8008e0a:	d00b      	beq.n	8008e24 <__lo0bits+0x22>
 8008e0c:	07d9      	lsls	r1, r3, #31
 8008e0e:	d421      	bmi.n	8008e54 <__lo0bits+0x52>
 8008e10:	0798      	lsls	r0, r3, #30
 8008e12:	bf49      	itett	mi
 8008e14:	085b      	lsrmi	r3, r3, #1
 8008e16:	089b      	lsrpl	r3, r3, #2
 8008e18:	2001      	movmi	r0, #1
 8008e1a:	6013      	strmi	r3, [r2, #0]
 8008e1c:	bf5c      	itt	pl
 8008e1e:	2002      	movpl	r0, #2
 8008e20:	6013      	strpl	r3, [r2, #0]
 8008e22:	4770      	bx	lr
 8008e24:	b299      	uxth	r1, r3
 8008e26:	b909      	cbnz	r1, 8008e2c <__lo0bits+0x2a>
 8008e28:	2010      	movs	r0, #16
 8008e2a:	0c1b      	lsrs	r3, r3, #16
 8008e2c:	b2d9      	uxtb	r1, r3
 8008e2e:	b909      	cbnz	r1, 8008e34 <__lo0bits+0x32>
 8008e30:	3008      	adds	r0, #8
 8008e32:	0a1b      	lsrs	r3, r3, #8
 8008e34:	0719      	lsls	r1, r3, #28
 8008e36:	bf04      	itt	eq
 8008e38:	091b      	lsreq	r3, r3, #4
 8008e3a:	3004      	addeq	r0, #4
 8008e3c:	0799      	lsls	r1, r3, #30
 8008e3e:	bf04      	itt	eq
 8008e40:	089b      	lsreq	r3, r3, #2
 8008e42:	3002      	addeq	r0, #2
 8008e44:	07d9      	lsls	r1, r3, #31
 8008e46:	d403      	bmi.n	8008e50 <__lo0bits+0x4e>
 8008e48:	085b      	lsrs	r3, r3, #1
 8008e4a:	f100 0001 	add.w	r0, r0, #1
 8008e4e:	d003      	beq.n	8008e58 <__lo0bits+0x56>
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	4770      	bx	lr
 8008e54:	2000      	movs	r0, #0
 8008e56:	4770      	bx	lr
 8008e58:	2020      	movs	r0, #32
 8008e5a:	4770      	bx	lr

08008e5c <__i2b>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	460c      	mov	r4, r1
 8008e60:	2101      	movs	r1, #1
 8008e62:	f7ff ff07 	bl	8008c74 <_Balloc>
 8008e66:	4602      	mov	r2, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <__i2b+0x1a>
 8008e6a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e6e:	4b04      	ldr	r3, [pc, #16]	@ (8008e80 <__i2b+0x24>)
 8008e70:	4804      	ldr	r0, [pc, #16]	@ (8008e84 <__i2b+0x28>)
 8008e72:	f000 fcb1 	bl	80097d8 <__assert_func>
 8008e76:	2301      	movs	r3, #1
 8008e78:	6144      	str	r4, [r0, #20]
 8008e7a:	6103      	str	r3, [r0, #16]
 8008e7c:	bd10      	pop	{r4, pc}
 8008e7e:	bf00      	nop
 8008e80:	0800b436 	.word	0x0800b436
 8008e84:	0800b447 	.word	0x0800b447

08008e88 <__multiply>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4617      	mov	r7, r2
 8008e8e:	690a      	ldr	r2, [r1, #16]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4689      	mov	r9, r1
 8008e94:	429a      	cmp	r2, r3
 8008e96:	bfa2      	ittt	ge
 8008e98:	463b      	movge	r3, r7
 8008e9a:	460f      	movge	r7, r1
 8008e9c:	4699      	movge	r9, r3
 8008e9e:	693d      	ldr	r5, [r7, #16]
 8008ea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	eb05 060a 	add.w	r6, r5, sl
 8008eac:	42b3      	cmp	r3, r6
 8008eae:	b085      	sub	sp, #20
 8008eb0:	bfb8      	it	lt
 8008eb2:	3101      	addlt	r1, #1
 8008eb4:	f7ff fede 	bl	8008c74 <_Balloc>
 8008eb8:	b930      	cbnz	r0, 8008ec8 <__multiply+0x40>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ec0:	4b40      	ldr	r3, [pc, #256]	@ (8008fc4 <__multiply+0x13c>)
 8008ec2:	4841      	ldr	r0, [pc, #260]	@ (8008fc8 <__multiply+0x140>)
 8008ec4:	f000 fc88 	bl	80097d8 <__assert_func>
 8008ec8:	f100 0414 	add.w	r4, r0, #20
 8008ecc:	4623      	mov	r3, r4
 8008ece:	2200      	movs	r2, #0
 8008ed0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ed4:	4573      	cmp	r3, lr
 8008ed6:	d320      	bcc.n	8008f1a <__multiply+0x92>
 8008ed8:	f107 0814 	add.w	r8, r7, #20
 8008edc:	f109 0114 	add.w	r1, r9, #20
 8008ee0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ee4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	1beb      	subs	r3, r5, r7
 8008eec:	3b15      	subs	r3, #21
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	3715      	adds	r7, #21
 8008ef6:	42bd      	cmp	r5, r7
 8008ef8:	bf38      	it	cc
 8008efa:	2304      	movcc	r3, #4
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	9b02      	ldr	r3, [sp, #8]
 8008f00:	9103      	str	r1, [sp, #12]
 8008f02:	428b      	cmp	r3, r1
 8008f04:	d80c      	bhi.n	8008f20 <__multiply+0x98>
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	dd03      	ble.n	8008f12 <__multiply+0x8a>
 8008f0a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d055      	beq.n	8008fbe <__multiply+0x136>
 8008f12:	6106      	str	r6, [r0, #16]
 8008f14:	b005      	add	sp, #20
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	f843 2b04 	str.w	r2, [r3], #4
 8008f1e:	e7d9      	b.n	8008ed4 <__multiply+0x4c>
 8008f20:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f24:	f1ba 0f00 	cmp.w	sl, #0
 8008f28:	d01f      	beq.n	8008f6a <__multiply+0xe2>
 8008f2a:	46c4      	mov	ip, r8
 8008f2c:	46a1      	mov	r9, r4
 8008f2e:	2700      	movs	r7, #0
 8008f30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f34:	f8d9 3000 	ldr.w	r3, [r9]
 8008f38:	fa1f fb82 	uxth.w	fp, r2
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f42:	443b      	add	r3, r7
 8008f44:	f8d9 7000 	ldr.w	r7, [r9]
 8008f48:	0c12      	lsrs	r2, r2, #16
 8008f4a:	0c3f      	lsrs	r7, r7, #16
 8008f4c:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f50:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f5a:	4565      	cmp	r5, ip
 8008f5c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f60:	f849 3b04 	str.w	r3, [r9], #4
 8008f64:	d8e4      	bhi.n	8008f30 <__multiply+0xa8>
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	50e7      	str	r7, [r4, r3]
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	3104      	adds	r1, #4
 8008f6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f72:	f1b9 0f00 	cmp.w	r9, #0
 8008f76:	d020      	beq.n	8008fba <__multiply+0x132>
 8008f78:	4647      	mov	r7, r8
 8008f7a:	46a4      	mov	ip, r4
 8008f7c:	f04f 0a00 	mov.w	sl, #0
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f86:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	fb09 220b 	mla	r2, r9, fp, r2
 8008f90:	4452      	add	r2, sl
 8008f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f96:	f84c 3b04 	str.w	r3, [ip], #4
 8008f9a:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa2:	f8bc 3000 	ldrh.w	r3, [ip]
 8008fa6:	42bd      	cmp	r5, r7
 8008fa8:	fb09 330a 	mla	r3, r9, sl, r3
 8008fac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008fb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb4:	d8e5      	bhi.n	8008f82 <__multiply+0xfa>
 8008fb6:	9a01      	ldr	r2, [sp, #4]
 8008fb8:	50a3      	str	r3, [r4, r2]
 8008fba:	3404      	adds	r4, #4
 8008fbc:	e79f      	b.n	8008efe <__multiply+0x76>
 8008fbe:	3e01      	subs	r6, #1
 8008fc0:	e7a1      	b.n	8008f06 <__multiply+0x7e>
 8008fc2:	bf00      	nop
 8008fc4:	0800b436 	.word	0x0800b436
 8008fc8:	0800b447 	.word	0x0800b447

08008fcc <__pow5mult>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	4615      	mov	r5, r2
 8008fd2:	f012 0203 	ands.w	r2, r2, #3
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	460e      	mov	r6, r1
 8008fda:	d007      	beq.n	8008fec <__pow5mult+0x20>
 8008fdc:	4c25      	ldr	r4, [pc, #148]	@ (8009074 <__pow5mult+0xa8>)
 8008fde:	3a01      	subs	r2, #1
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe6:	f7ff fea7 	bl	8008d38 <__multadd>
 8008fea:	4606      	mov	r6, r0
 8008fec:	10ad      	asrs	r5, r5, #2
 8008fee:	d03d      	beq.n	800906c <__pow5mult+0xa0>
 8008ff0:	69fc      	ldr	r4, [r7, #28]
 8008ff2:	b97c      	cbnz	r4, 8009014 <__pow5mult+0x48>
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	f7ff fd87 	bl	8008b08 <malloc>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	61f8      	str	r0, [r7, #28]
 8008ffe:	b928      	cbnz	r0, 800900c <__pow5mult+0x40>
 8009000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009004:	4b1c      	ldr	r3, [pc, #112]	@ (8009078 <__pow5mult+0xac>)
 8009006:	481d      	ldr	r0, [pc, #116]	@ (800907c <__pow5mult+0xb0>)
 8009008:	f000 fbe6 	bl	80097d8 <__assert_func>
 800900c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009010:	6004      	str	r4, [r0, #0]
 8009012:	60c4      	str	r4, [r0, #12]
 8009014:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800901c:	b94c      	cbnz	r4, 8009032 <__pow5mult+0x66>
 800901e:	f240 2171 	movw	r1, #625	@ 0x271
 8009022:	4638      	mov	r0, r7
 8009024:	f7ff ff1a 	bl	8008e5c <__i2b>
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	f04f 0900 	mov.w	r9, #0
 8009036:	07eb      	lsls	r3, r5, #31
 8009038:	d50a      	bpl.n	8009050 <__pow5mult+0x84>
 800903a:	4631      	mov	r1, r6
 800903c:	4622      	mov	r2, r4
 800903e:	4638      	mov	r0, r7
 8009040:	f7ff ff22 	bl	8008e88 <__multiply>
 8009044:	4680      	mov	r8, r0
 8009046:	4631      	mov	r1, r6
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff fe53 	bl	8008cf4 <_Bfree>
 800904e:	4646      	mov	r6, r8
 8009050:	106d      	asrs	r5, r5, #1
 8009052:	d00b      	beq.n	800906c <__pow5mult+0xa0>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	b938      	cbnz	r0, 8009068 <__pow5mult+0x9c>
 8009058:	4622      	mov	r2, r4
 800905a:	4621      	mov	r1, r4
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ff13 	bl	8008e88 <__multiply>
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	f8c0 9000 	str.w	r9, [r0]
 8009068:	4604      	mov	r4, r0
 800906a:	e7e4      	b.n	8009036 <__pow5mult+0x6a>
 800906c:	4630      	mov	r0, r6
 800906e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009072:	bf00      	nop
 8009074:	0800b4f8 	.word	0x0800b4f8
 8009078:	0800b3c7 	.word	0x0800b3c7
 800907c:	0800b447 	.word	0x0800b447

08009080 <__lshift>:
 8009080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	4607      	mov	r7, r0
 8009088:	4691      	mov	r9, r2
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	6849      	ldr	r1, [r1, #4]
 800908e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009098:	f108 0601 	add.w	r6, r8, #1
 800909c:	42b3      	cmp	r3, r6
 800909e:	db0b      	blt.n	80090b8 <__lshift+0x38>
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff fde7 	bl	8008c74 <_Balloc>
 80090a6:	4605      	mov	r5, r0
 80090a8:	b948      	cbnz	r0, 80090be <__lshift+0x3e>
 80090aa:	4602      	mov	r2, r0
 80090ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090b0:	4b27      	ldr	r3, [pc, #156]	@ (8009150 <__lshift+0xd0>)
 80090b2:	4828      	ldr	r0, [pc, #160]	@ (8009154 <__lshift+0xd4>)
 80090b4:	f000 fb90 	bl	80097d8 <__assert_func>
 80090b8:	3101      	adds	r1, #1
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	e7ee      	b.n	800909c <__lshift+0x1c>
 80090be:	2300      	movs	r3, #0
 80090c0:	f100 0114 	add.w	r1, r0, #20
 80090c4:	f100 0210 	add.w	r2, r0, #16
 80090c8:	4618      	mov	r0, r3
 80090ca:	4553      	cmp	r3, sl
 80090cc:	db33      	blt.n	8009136 <__lshift+0xb6>
 80090ce:	6920      	ldr	r0, [r4, #16]
 80090d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d4:	f104 0314 	add.w	r3, r4, #20
 80090d8:	f019 091f 	ands.w	r9, r9, #31
 80090dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e4:	d02b      	beq.n	800913e <__lshift+0xbe>
 80090e6:	468a      	mov	sl, r1
 80090e8:	2200      	movs	r2, #0
 80090ea:	f1c9 0e20 	rsb	lr, r9, #32
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	fa00 f009 	lsl.w	r0, r0, r9
 80090f4:	4310      	orrs	r0, r2
 80090f6:	f84a 0b04 	str.w	r0, [sl], #4
 80090fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fe:	459c      	cmp	ip, r3
 8009100:	fa22 f20e 	lsr.w	r2, r2, lr
 8009104:	d8f3      	bhi.n	80090ee <__lshift+0x6e>
 8009106:	ebac 0304 	sub.w	r3, ip, r4
 800910a:	3b15      	subs	r3, #21
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	3304      	adds	r3, #4
 8009112:	f104 0015 	add.w	r0, r4, #21
 8009116:	4560      	cmp	r0, ip
 8009118:	bf88      	it	hi
 800911a:	2304      	movhi	r3, #4
 800911c:	50ca      	str	r2, [r1, r3]
 800911e:	b10a      	cbz	r2, 8009124 <__lshift+0xa4>
 8009120:	f108 0602 	add.w	r6, r8, #2
 8009124:	3e01      	subs	r6, #1
 8009126:	4638      	mov	r0, r7
 8009128:	4621      	mov	r1, r4
 800912a:	612e      	str	r6, [r5, #16]
 800912c:	f7ff fde2 	bl	8008cf4 <_Bfree>
 8009130:	4628      	mov	r0, r5
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	f842 0f04 	str.w	r0, [r2, #4]!
 800913a:	3301      	adds	r3, #1
 800913c:	e7c5      	b.n	80090ca <__lshift+0x4a>
 800913e:	3904      	subs	r1, #4
 8009140:	f853 2b04 	ldr.w	r2, [r3], #4
 8009144:	459c      	cmp	ip, r3
 8009146:	f841 2f04 	str.w	r2, [r1, #4]!
 800914a:	d8f9      	bhi.n	8009140 <__lshift+0xc0>
 800914c:	e7ea      	b.n	8009124 <__lshift+0xa4>
 800914e:	bf00      	nop
 8009150:	0800b436 	.word	0x0800b436
 8009154:	0800b447 	.word	0x0800b447

08009158 <__mcmp>:
 8009158:	4603      	mov	r3, r0
 800915a:	690a      	ldr	r2, [r1, #16]
 800915c:	6900      	ldr	r0, [r0, #16]
 800915e:	b530      	push	{r4, r5, lr}
 8009160:	1a80      	subs	r0, r0, r2
 8009162:	d10e      	bne.n	8009182 <__mcmp+0x2a>
 8009164:	3314      	adds	r3, #20
 8009166:	3114      	adds	r1, #20
 8009168:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800916c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009178:	4295      	cmp	r5, r2
 800917a:	d003      	beq.n	8009184 <__mcmp+0x2c>
 800917c:	d205      	bcs.n	800918a <__mcmp+0x32>
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	bd30      	pop	{r4, r5, pc}
 8009184:	42a3      	cmp	r3, r4
 8009186:	d3f3      	bcc.n	8009170 <__mcmp+0x18>
 8009188:	e7fb      	b.n	8009182 <__mcmp+0x2a>
 800918a:	2001      	movs	r0, #1
 800918c:	e7f9      	b.n	8009182 <__mcmp+0x2a>
	...

08009190 <__mdiff>:
 8009190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	4689      	mov	r9, r1
 8009196:	4606      	mov	r6, r0
 8009198:	4611      	mov	r1, r2
 800919a:	4648      	mov	r0, r9
 800919c:	4614      	mov	r4, r2
 800919e:	f7ff ffdb 	bl	8009158 <__mcmp>
 80091a2:	1e05      	subs	r5, r0, #0
 80091a4:	d112      	bne.n	80091cc <__mdiff+0x3c>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff fd63 	bl	8008c74 <_Balloc>
 80091ae:	4602      	mov	r2, r0
 80091b0:	b928      	cbnz	r0, 80091be <__mdiff+0x2e>
 80091b2:	f240 2137 	movw	r1, #567	@ 0x237
 80091b6:	4b3e      	ldr	r3, [pc, #248]	@ (80092b0 <__mdiff+0x120>)
 80091b8:	483e      	ldr	r0, [pc, #248]	@ (80092b4 <__mdiff+0x124>)
 80091ba:	f000 fb0d 	bl	80097d8 <__assert_func>
 80091be:	2301      	movs	r3, #1
 80091c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c4:	4610      	mov	r0, r2
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	bfbc      	itt	lt
 80091ce:	464b      	movlt	r3, r9
 80091d0:	46a1      	movlt	r9, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d8:	bfba      	itte	lt
 80091da:	461c      	movlt	r4, r3
 80091dc:	2501      	movlt	r5, #1
 80091de:	2500      	movge	r5, #0
 80091e0:	f7ff fd48 	bl	8008c74 <_Balloc>
 80091e4:	4602      	mov	r2, r0
 80091e6:	b918      	cbnz	r0, 80091f0 <__mdiff+0x60>
 80091e8:	f240 2145 	movw	r1, #581	@ 0x245
 80091ec:	4b30      	ldr	r3, [pc, #192]	@ (80092b0 <__mdiff+0x120>)
 80091ee:	e7e3      	b.n	80091b8 <__mdiff+0x28>
 80091f0:	f100 0b14 	add.w	fp, r0, #20
 80091f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091f8:	f109 0310 	add.w	r3, r9, #16
 80091fc:	60c5      	str	r5, [r0, #12]
 80091fe:	f04f 0c00 	mov.w	ip, #0
 8009202:	f109 0514 	add.w	r5, r9, #20
 8009206:	46d9      	mov	r9, fp
 8009208:	6926      	ldr	r6, [r4, #16]
 800920a:	f104 0e14 	add.w	lr, r4, #20
 800920e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009212:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800921e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009222:	b281      	uxth	r1, r0
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	fa1f f38a 	uxth.w	r3, sl
 800922a:	1a5b      	subs	r3, r3, r1
 800922c:	0c00      	lsrs	r0, r0, #16
 800922e:	4463      	add	r3, ip
 8009230:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009234:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009238:	b29b      	uxth	r3, r3
 800923a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800923e:	4576      	cmp	r6, lr
 8009240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009244:	f849 3b04 	str.w	r3, [r9], #4
 8009248:	d8e6      	bhi.n	8009218 <__mdiff+0x88>
 800924a:	1b33      	subs	r3, r6, r4
 800924c:	3b15      	subs	r3, #21
 800924e:	f023 0303 	bic.w	r3, r3, #3
 8009252:	3415      	adds	r4, #21
 8009254:	3304      	adds	r3, #4
 8009256:	42a6      	cmp	r6, r4
 8009258:	bf38      	it	cc
 800925a:	2304      	movcc	r3, #4
 800925c:	441d      	add	r5, r3
 800925e:	445b      	add	r3, fp
 8009260:	461e      	mov	r6, r3
 8009262:	462c      	mov	r4, r5
 8009264:	4544      	cmp	r4, r8
 8009266:	d30e      	bcc.n	8009286 <__mdiff+0xf6>
 8009268:	f108 0103 	add.w	r1, r8, #3
 800926c:	1b49      	subs	r1, r1, r5
 800926e:	f021 0103 	bic.w	r1, r1, #3
 8009272:	3d03      	subs	r5, #3
 8009274:	45a8      	cmp	r8, r5
 8009276:	bf38      	it	cc
 8009278:	2100      	movcc	r1, #0
 800927a:	440b      	add	r3, r1
 800927c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009280:	b199      	cbz	r1, 80092aa <__mdiff+0x11a>
 8009282:	6117      	str	r7, [r2, #16]
 8009284:	e79e      	b.n	80091c4 <__mdiff+0x34>
 8009286:	46e6      	mov	lr, ip
 8009288:	f854 1b04 	ldr.w	r1, [r4], #4
 800928c:	fa1f fc81 	uxth.w	ip, r1
 8009290:	44f4      	add	ip, lr
 8009292:	0c08      	lsrs	r0, r1, #16
 8009294:	4471      	add	r1, lr
 8009296:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800929a:	b289      	uxth	r1, r1
 800929c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a4:	f846 1b04 	str.w	r1, [r6], #4
 80092a8:	e7dc      	b.n	8009264 <__mdiff+0xd4>
 80092aa:	3f01      	subs	r7, #1
 80092ac:	e7e6      	b.n	800927c <__mdiff+0xec>
 80092ae:	bf00      	nop
 80092b0:	0800b436 	.word	0x0800b436
 80092b4:	0800b447 	.word	0x0800b447

080092b8 <__d2b>:
 80092b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80092bc:	2101      	movs	r1, #1
 80092be:	4690      	mov	r8, r2
 80092c0:	4699      	mov	r9, r3
 80092c2:	9e08      	ldr	r6, [sp, #32]
 80092c4:	f7ff fcd6 	bl	8008c74 <_Balloc>
 80092c8:	4604      	mov	r4, r0
 80092ca:	b930      	cbnz	r0, 80092da <__d2b+0x22>
 80092cc:	4602      	mov	r2, r0
 80092ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80092d2:	4b23      	ldr	r3, [pc, #140]	@ (8009360 <__d2b+0xa8>)
 80092d4:	4823      	ldr	r0, [pc, #140]	@ (8009364 <__d2b+0xac>)
 80092d6:	f000 fa7f 	bl	80097d8 <__assert_func>
 80092da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e2:	b10d      	cbz	r5, 80092e8 <__d2b+0x30>
 80092e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	f1b8 0300 	subs.w	r3, r8, #0
 80092ee:	d024      	beq.n	800933a <__d2b+0x82>
 80092f0:	4668      	mov	r0, sp
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	f7ff fd85 	bl	8008e02 <__lo0bits>
 80092f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092fc:	b1d8      	cbz	r0, 8009336 <__d2b+0x7e>
 80092fe:	f1c0 0320 	rsb	r3, r0, #32
 8009302:	fa02 f303 	lsl.w	r3, r2, r3
 8009306:	430b      	orrs	r3, r1
 8009308:	40c2      	lsrs	r2, r0
 800930a:	6163      	str	r3, [r4, #20]
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf0c      	ite	eq
 8009314:	2201      	moveq	r2, #1
 8009316:	2202      	movne	r2, #2
 8009318:	61a3      	str	r3, [r4, #24]
 800931a:	6122      	str	r2, [r4, #16]
 800931c:	b1ad      	cbz	r5, 800934a <__d2b+0x92>
 800931e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009322:	4405      	add	r5, r0
 8009324:	6035      	str	r5, [r6, #0]
 8009326:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800932a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932c:	6018      	str	r0, [r3, #0]
 800932e:	4620      	mov	r0, r4
 8009330:	b002      	add	sp, #8
 8009332:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009336:	6161      	str	r1, [r4, #20]
 8009338:	e7e9      	b.n	800930e <__d2b+0x56>
 800933a:	a801      	add	r0, sp, #4
 800933c:	f7ff fd61 	bl	8008e02 <__lo0bits>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	6163      	str	r3, [r4, #20]
 8009346:	3020      	adds	r0, #32
 8009348:	e7e7      	b.n	800931a <__d2b+0x62>
 800934a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800934e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009352:	6030      	str	r0, [r6, #0]
 8009354:	6918      	ldr	r0, [r3, #16]
 8009356:	f7ff fd35 	bl	8008dc4 <__hi0bits>
 800935a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800935e:	e7e4      	b.n	800932a <__d2b+0x72>
 8009360:	0800b436 	.word	0x0800b436
 8009364:	0800b447 	.word	0x0800b447

08009368 <__ssputs_r>:
 8009368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	461f      	mov	r7, r3
 800936e:	688e      	ldr	r6, [r1, #8]
 8009370:	4682      	mov	sl, r0
 8009372:	42be      	cmp	r6, r7
 8009374:	460c      	mov	r4, r1
 8009376:	4690      	mov	r8, r2
 8009378:	680b      	ldr	r3, [r1, #0]
 800937a:	d82d      	bhi.n	80093d8 <__ssputs_r+0x70>
 800937c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009384:	d026      	beq.n	80093d4 <__ssputs_r+0x6c>
 8009386:	6965      	ldr	r5, [r4, #20]
 8009388:	6909      	ldr	r1, [r1, #16]
 800938a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800938e:	eba3 0901 	sub.w	r9, r3, r1
 8009392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009396:	1c7b      	adds	r3, r7, #1
 8009398:	444b      	add	r3, r9
 800939a:	106d      	asrs	r5, r5, #1
 800939c:	429d      	cmp	r5, r3
 800939e:	bf38      	it	cc
 80093a0:	461d      	movcc	r5, r3
 80093a2:	0553      	lsls	r3, r2, #21
 80093a4:	d527      	bpl.n	80093f6 <__ssputs_r+0x8e>
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7ff fbd8 	bl	8008b5c <_malloc_r>
 80093ac:	4606      	mov	r6, r0
 80093ae:	b360      	cbz	r0, 800940a <__ssputs_r+0xa2>
 80093b0:	464a      	mov	r2, r9
 80093b2:	6921      	ldr	r1, [r4, #16]
 80093b4:	f000 fa02 	bl	80097bc <memcpy>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	6126      	str	r6, [r4, #16]
 80093c6:	444e      	add	r6, r9
 80093c8:	6026      	str	r6, [r4, #0]
 80093ca:	463e      	mov	r6, r7
 80093cc:	6165      	str	r5, [r4, #20]
 80093ce:	eba5 0509 	sub.w	r5, r5, r9
 80093d2:	60a5      	str	r5, [r4, #8]
 80093d4:	42be      	cmp	r6, r7
 80093d6:	d900      	bls.n	80093da <__ssputs_r+0x72>
 80093d8:	463e      	mov	r6, r7
 80093da:	4632      	mov	r2, r6
 80093dc:	4641      	mov	r1, r8
 80093de:	6820      	ldr	r0, [r4, #0]
 80093e0:	f000 f9c2 	bl	8009768 <memmove>
 80093e4:	2000      	movs	r0, #0
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	1b9b      	subs	r3, r3, r6
 80093ea:	60a3      	str	r3, [r4, #8]
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	4433      	add	r3, r6
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	462a      	mov	r2, r5
 80093f8:	f000 fa32 	bl	8009860 <_realloc_r>
 80093fc:	4606      	mov	r6, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1e0      	bne.n	80093c4 <__ssputs_r+0x5c>
 8009402:	4650      	mov	r0, sl
 8009404:	6921      	ldr	r1, [r4, #16]
 8009406:	f7ff fb37 	bl	8008a78 <_free_r>
 800940a:	230c      	movs	r3, #12
 800940c:	f8ca 3000 	str.w	r3, [sl]
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	e7e9      	b.n	80093f2 <__ssputs_r+0x8a>
	...

08009420 <_svfiprintf_r>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	4698      	mov	r8, r3
 8009426:	898b      	ldrh	r3, [r1, #12]
 8009428:	4607      	mov	r7, r0
 800942a:	061b      	lsls	r3, r3, #24
 800942c:	460d      	mov	r5, r1
 800942e:	4614      	mov	r4, r2
 8009430:	b09d      	sub	sp, #116	@ 0x74
 8009432:	d510      	bpl.n	8009456 <_svfiprintf_r+0x36>
 8009434:	690b      	ldr	r3, [r1, #16]
 8009436:	b973      	cbnz	r3, 8009456 <_svfiprintf_r+0x36>
 8009438:	2140      	movs	r1, #64	@ 0x40
 800943a:	f7ff fb8f 	bl	8008b5c <_malloc_r>
 800943e:	6028      	str	r0, [r5, #0]
 8009440:	6128      	str	r0, [r5, #16]
 8009442:	b930      	cbnz	r0, 8009452 <_svfiprintf_r+0x32>
 8009444:	230c      	movs	r3, #12
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	b01d      	add	sp, #116	@ 0x74
 800944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009452:	2340      	movs	r3, #64	@ 0x40
 8009454:	616b      	str	r3, [r5, #20]
 8009456:	2300      	movs	r3, #0
 8009458:	9309      	str	r3, [sp, #36]	@ 0x24
 800945a:	2320      	movs	r3, #32
 800945c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009460:	2330      	movs	r3, #48	@ 0x30
 8009462:	f04f 0901 	mov.w	r9, #1
 8009466:	f8cd 800c 	str.w	r8, [sp, #12]
 800946a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009604 <_svfiprintf_r+0x1e4>
 800946e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009472:	4623      	mov	r3, r4
 8009474:	469a      	mov	sl, r3
 8009476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800947a:	b10a      	cbz	r2, 8009480 <_svfiprintf_r+0x60>
 800947c:	2a25      	cmp	r2, #37	@ 0x25
 800947e:	d1f9      	bne.n	8009474 <_svfiprintf_r+0x54>
 8009480:	ebba 0b04 	subs.w	fp, sl, r4
 8009484:	d00b      	beq.n	800949e <_svfiprintf_r+0x7e>
 8009486:	465b      	mov	r3, fp
 8009488:	4622      	mov	r2, r4
 800948a:	4629      	mov	r1, r5
 800948c:	4638      	mov	r0, r7
 800948e:	f7ff ff6b 	bl	8009368 <__ssputs_r>
 8009492:	3001      	adds	r0, #1
 8009494:	f000 80a7 	beq.w	80095e6 <_svfiprintf_r+0x1c6>
 8009498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800949a:	445a      	add	r2, fp
 800949c:	9209      	str	r2, [sp, #36]	@ 0x24
 800949e:	f89a 3000 	ldrb.w	r3, [sl]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 809f 	beq.w	80095e6 <_svfiprintf_r+0x1c6>
 80094a8:	2300      	movs	r3, #0
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295
 80094ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b2:	f10a 0a01 	add.w	sl, sl, #1
 80094b6:	9304      	str	r3, [sp, #16]
 80094b8:	9307      	str	r3, [sp, #28]
 80094ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094be:	931a      	str	r3, [sp, #104]	@ 0x68
 80094c0:	4654      	mov	r4, sl
 80094c2:	2205      	movs	r2, #5
 80094c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c8:	484e      	ldr	r0, [pc, #312]	@ (8009604 <_svfiprintf_r+0x1e4>)
 80094ca:	f7fe fc6a 	bl	8007da2 <memchr>
 80094ce:	9a04      	ldr	r2, [sp, #16]
 80094d0:	b9d8      	cbnz	r0, 800950a <_svfiprintf_r+0xea>
 80094d2:	06d0      	lsls	r0, r2, #27
 80094d4:	bf44      	itt	mi
 80094d6:	2320      	movmi	r3, #32
 80094d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094dc:	0711      	lsls	r1, r2, #28
 80094de:	bf44      	itt	mi
 80094e0:	232b      	movmi	r3, #43	@ 0x2b
 80094e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094e6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ec:	d015      	beq.n	800951a <_svfiprintf_r+0xfa>
 80094ee:	4654      	mov	r4, sl
 80094f0:	2000      	movs	r0, #0
 80094f2:	f04f 0c0a 	mov.w	ip, #10
 80094f6:	9a07      	ldr	r2, [sp, #28]
 80094f8:	4621      	mov	r1, r4
 80094fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094fe:	3b30      	subs	r3, #48	@ 0x30
 8009500:	2b09      	cmp	r3, #9
 8009502:	d94b      	bls.n	800959c <_svfiprintf_r+0x17c>
 8009504:	b1b0      	cbz	r0, 8009534 <_svfiprintf_r+0x114>
 8009506:	9207      	str	r2, [sp, #28]
 8009508:	e014      	b.n	8009534 <_svfiprintf_r+0x114>
 800950a:	eba0 0308 	sub.w	r3, r0, r8
 800950e:	fa09 f303 	lsl.w	r3, r9, r3
 8009512:	4313      	orrs	r3, r2
 8009514:	46a2      	mov	sl, r4
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	e7d2      	b.n	80094c0 <_svfiprintf_r+0xa0>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	1d19      	adds	r1, r3, #4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	9103      	str	r1, [sp, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	bfbb      	ittet	lt
 8009526:	425b      	neglt	r3, r3
 8009528:	f042 0202 	orrlt.w	r2, r2, #2
 800952c:	9307      	strge	r3, [sp, #28]
 800952e:	9307      	strlt	r3, [sp, #28]
 8009530:	bfb8      	it	lt
 8009532:	9204      	strlt	r2, [sp, #16]
 8009534:	7823      	ldrb	r3, [r4, #0]
 8009536:	2b2e      	cmp	r3, #46	@ 0x2e
 8009538:	d10a      	bne.n	8009550 <_svfiprintf_r+0x130>
 800953a:	7863      	ldrb	r3, [r4, #1]
 800953c:	2b2a      	cmp	r3, #42	@ 0x2a
 800953e:	d132      	bne.n	80095a6 <_svfiprintf_r+0x186>
 8009540:	9b03      	ldr	r3, [sp, #12]
 8009542:	3402      	adds	r4, #2
 8009544:	1d1a      	adds	r2, r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	9203      	str	r2, [sp, #12]
 800954a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800954e:	9305      	str	r3, [sp, #20]
 8009550:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009608 <_svfiprintf_r+0x1e8>
 8009554:	2203      	movs	r2, #3
 8009556:	4650      	mov	r0, sl
 8009558:	7821      	ldrb	r1, [r4, #0]
 800955a:	f7fe fc22 	bl	8007da2 <memchr>
 800955e:	b138      	cbz	r0, 8009570 <_svfiprintf_r+0x150>
 8009560:	2240      	movs	r2, #64	@ 0x40
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	eba0 000a 	sub.w	r0, r0, sl
 8009568:	4082      	lsls	r2, r0
 800956a:	4313      	orrs	r3, r2
 800956c:	3401      	adds	r4, #1
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009574:	2206      	movs	r2, #6
 8009576:	4825      	ldr	r0, [pc, #148]	@ (800960c <_svfiprintf_r+0x1ec>)
 8009578:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800957c:	f7fe fc11 	bl	8007da2 <memchr>
 8009580:	2800      	cmp	r0, #0
 8009582:	d036      	beq.n	80095f2 <_svfiprintf_r+0x1d2>
 8009584:	4b22      	ldr	r3, [pc, #136]	@ (8009610 <_svfiprintf_r+0x1f0>)
 8009586:	bb1b      	cbnz	r3, 80095d0 <_svfiprintf_r+0x1b0>
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	3307      	adds	r3, #7
 800958c:	f023 0307 	bic.w	r3, r3, #7
 8009590:	3308      	adds	r3, #8
 8009592:	9303      	str	r3, [sp, #12]
 8009594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009596:	4433      	add	r3, r6
 8009598:	9309      	str	r3, [sp, #36]	@ 0x24
 800959a:	e76a      	b.n	8009472 <_svfiprintf_r+0x52>
 800959c:	460c      	mov	r4, r1
 800959e:	2001      	movs	r0, #1
 80095a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095a4:	e7a8      	b.n	80094f8 <_svfiprintf_r+0xd8>
 80095a6:	2300      	movs	r3, #0
 80095a8:	f04f 0c0a 	mov.w	ip, #10
 80095ac:	4619      	mov	r1, r3
 80095ae:	3401      	adds	r4, #1
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	4620      	mov	r0, r4
 80095b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b8:	3a30      	subs	r2, #48	@ 0x30
 80095ba:	2a09      	cmp	r2, #9
 80095bc:	d903      	bls.n	80095c6 <_svfiprintf_r+0x1a6>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0c6      	beq.n	8009550 <_svfiprintf_r+0x130>
 80095c2:	9105      	str	r1, [sp, #20]
 80095c4:	e7c4      	b.n	8009550 <_svfiprintf_r+0x130>
 80095c6:	4604      	mov	r4, r0
 80095c8:	2301      	movs	r3, #1
 80095ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ce:	e7f0      	b.n	80095b2 <_svfiprintf_r+0x192>
 80095d0:	ab03      	add	r3, sp, #12
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	462a      	mov	r2, r5
 80095d6:	4638      	mov	r0, r7
 80095d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009614 <_svfiprintf_r+0x1f4>)
 80095da:	a904      	add	r1, sp, #16
 80095dc:	f7fd fe7e 	bl	80072dc <_printf_float>
 80095e0:	1c42      	adds	r2, r0, #1
 80095e2:	4606      	mov	r6, r0
 80095e4:	d1d6      	bne.n	8009594 <_svfiprintf_r+0x174>
 80095e6:	89ab      	ldrh	r3, [r5, #12]
 80095e8:	065b      	lsls	r3, r3, #25
 80095ea:	f53f af2d 	bmi.w	8009448 <_svfiprintf_r+0x28>
 80095ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095f0:	e72c      	b.n	800944c <_svfiprintf_r+0x2c>
 80095f2:	ab03      	add	r3, sp, #12
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	462a      	mov	r2, r5
 80095f8:	4638      	mov	r0, r7
 80095fa:	4b06      	ldr	r3, [pc, #24]	@ (8009614 <_svfiprintf_r+0x1f4>)
 80095fc:	a904      	add	r1, sp, #16
 80095fe:	f7fe f90b 	bl	8007818 <_printf_i>
 8009602:	e7ed      	b.n	80095e0 <_svfiprintf_r+0x1c0>
 8009604:	0800b4a0 	.word	0x0800b4a0
 8009608:	0800b4a6 	.word	0x0800b4a6
 800960c:	0800b4aa 	.word	0x0800b4aa
 8009610:	080072dd 	.word	0x080072dd
 8009614:	08009369 	.word	0x08009369

08009618 <__sflush_r>:
 8009618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	0716      	lsls	r6, r2, #28
 8009620:	4605      	mov	r5, r0
 8009622:	460c      	mov	r4, r1
 8009624:	d454      	bmi.n	80096d0 <__sflush_r+0xb8>
 8009626:	684b      	ldr	r3, [r1, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	dc02      	bgt.n	8009632 <__sflush_r+0x1a>
 800962c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	dd48      	ble.n	80096c4 <__sflush_r+0xac>
 8009632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009634:	2e00      	cmp	r6, #0
 8009636:	d045      	beq.n	80096c4 <__sflush_r+0xac>
 8009638:	2300      	movs	r3, #0
 800963a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800963e:	682f      	ldr	r7, [r5, #0]
 8009640:	6a21      	ldr	r1, [r4, #32]
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	d030      	beq.n	80096a8 <__sflush_r+0x90>
 8009646:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	0759      	lsls	r1, r3, #29
 800964c:	d505      	bpl.n	800965a <__sflush_r+0x42>
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009654:	b10b      	cbz	r3, 800965a <__sflush_r+0x42>
 8009656:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009658:	1ad2      	subs	r2, r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	4628      	mov	r0, r5
 800965e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009660:	6a21      	ldr	r1, [r4, #32]
 8009662:	47b0      	blx	r6
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	d106      	bne.n	8009678 <__sflush_r+0x60>
 800966a:	6829      	ldr	r1, [r5, #0]
 800966c:	291d      	cmp	r1, #29
 800966e:	d82b      	bhi.n	80096c8 <__sflush_r+0xb0>
 8009670:	4a28      	ldr	r2, [pc, #160]	@ (8009714 <__sflush_r+0xfc>)
 8009672:	40ca      	lsrs	r2, r1
 8009674:	07d6      	lsls	r6, r2, #31
 8009676:	d527      	bpl.n	80096c8 <__sflush_r+0xb0>
 8009678:	2200      	movs	r2, #0
 800967a:	6062      	str	r2, [r4, #4]
 800967c:	6922      	ldr	r2, [r4, #16]
 800967e:	04d9      	lsls	r1, r3, #19
 8009680:	6022      	str	r2, [r4, #0]
 8009682:	d504      	bpl.n	800968e <__sflush_r+0x76>
 8009684:	1c42      	adds	r2, r0, #1
 8009686:	d101      	bne.n	800968c <__sflush_r+0x74>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b903      	cbnz	r3, 800968e <__sflush_r+0x76>
 800968c:	6560      	str	r0, [r4, #84]	@ 0x54
 800968e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009690:	602f      	str	r7, [r5, #0]
 8009692:	b1b9      	cbz	r1, 80096c4 <__sflush_r+0xac>
 8009694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009698:	4299      	cmp	r1, r3
 800969a:	d002      	beq.n	80096a2 <__sflush_r+0x8a>
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff f9eb 	bl	8008a78 <_free_r>
 80096a2:	2300      	movs	r3, #0
 80096a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80096a6:	e00d      	b.n	80096c4 <__sflush_r+0xac>
 80096a8:	2301      	movs	r3, #1
 80096aa:	4628      	mov	r0, r5
 80096ac:	47b0      	blx	r6
 80096ae:	4602      	mov	r2, r0
 80096b0:	1c50      	adds	r0, r2, #1
 80096b2:	d1c9      	bne.n	8009648 <__sflush_r+0x30>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c6      	beq.n	8009648 <__sflush_r+0x30>
 80096ba:	2b1d      	cmp	r3, #29
 80096bc:	d001      	beq.n	80096c2 <__sflush_r+0xaa>
 80096be:	2b16      	cmp	r3, #22
 80096c0:	d11d      	bne.n	80096fe <__sflush_r+0xe6>
 80096c2:	602f      	str	r7, [r5, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e021      	b.n	800970c <__sflush_r+0xf4>
 80096c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096cc:	b21b      	sxth	r3, r3
 80096ce:	e01a      	b.n	8009706 <__sflush_r+0xee>
 80096d0:	690f      	ldr	r7, [r1, #16]
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	d0f6      	beq.n	80096c4 <__sflush_r+0xac>
 80096d6:	0793      	lsls	r3, r2, #30
 80096d8:	bf18      	it	ne
 80096da:	2300      	movne	r3, #0
 80096dc:	680e      	ldr	r6, [r1, #0]
 80096de:	bf08      	it	eq
 80096e0:	694b      	ldreq	r3, [r1, #20]
 80096e2:	1bf6      	subs	r6, r6, r7
 80096e4:	600f      	str	r7, [r1, #0]
 80096e6:	608b      	str	r3, [r1, #8]
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	ddeb      	ble.n	80096c4 <__sflush_r+0xac>
 80096ec:	4633      	mov	r3, r6
 80096ee:	463a      	mov	r2, r7
 80096f0:	4628      	mov	r0, r5
 80096f2:	6a21      	ldr	r1, [r4, #32]
 80096f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80096f8:	47e0      	blx	ip
 80096fa:	2800      	cmp	r0, #0
 80096fc:	dc07      	bgt.n	800970e <__sflush_r+0xf6>
 80096fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009706:	f04f 30ff 	mov.w	r0, #4294967295
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970e:	4407      	add	r7, r0
 8009710:	1a36      	subs	r6, r6, r0
 8009712:	e7e9      	b.n	80096e8 <__sflush_r+0xd0>
 8009714:	20400001 	.word	0x20400001

08009718 <_fflush_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	690b      	ldr	r3, [r1, #16]
 800971c:	4605      	mov	r5, r0
 800971e:	460c      	mov	r4, r1
 8009720:	b913      	cbnz	r3, 8009728 <_fflush_r+0x10>
 8009722:	2500      	movs	r5, #0
 8009724:	4628      	mov	r0, r5
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	b118      	cbz	r0, 8009732 <_fflush_r+0x1a>
 800972a:	6a03      	ldr	r3, [r0, #32]
 800972c:	b90b      	cbnz	r3, 8009732 <_fflush_r+0x1a>
 800972e:	f7fe fa1d 	bl	8007b6c <__sinit>
 8009732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f3      	beq.n	8009722 <_fflush_r+0xa>
 800973a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800973c:	07d0      	lsls	r0, r2, #31
 800973e:	d404      	bmi.n	800974a <_fflush_r+0x32>
 8009740:	0599      	lsls	r1, r3, #22
 8009742:	d402      	bmi.n	800974a <_fflush_r+0x32>
 8009744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009746:	f7fe fb2a 	bl	8007d9e <__retarget_lock_acquire_recursive>
 800974a:	4628      	mov	r0, r5
 800974c:	4621      	mov	r1, r4
 800974e:	f7ff ff63 	bl	8009618 <__sflush_r>
 8009752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009754:	4605      	mov	r5, r0
 8009756:	07da      	lsls	r2, r3, #31
 8009758:	d4e4      	bmi.n	8009724 <_fflush_r+0xc>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	059b      	lsls	r3, r3, #22
 800975e:	d4e1      	bmi.n	8009724 <_fflush_r+0xc>
 8009760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009762:	f7fe fb1d 	bl	8007da0 <__retarget_lock_release_recursive>
 8009766:	e7dd      	b.n	8009724 <_fflush_r+0xc>

08009768 <memmove>:
 8009768:	4288      	cmp	r0, r1
 800976a:	b510      	push	{r4, lr}
 800976c:	eb01 0402 	add.w	r4, r1, r2
 8009770:	d902      	bls.n	8009778 <memmove+0x10>
 8009772:	4284      	cmp	r4, r0
 8009774:	4623      	mov	r3, r4
 8009776:	d807      	bhi.n	8009788 <memmove+0x20>
 8009778:	1e43      	subs	r3, r0, #1
 800977a:	42a1      	cmp	r1, r4
 800977c:	d008      	beq.n	8009790 <memmove+0x28>
 800977e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009786:	e7f8      	b.n	800977a <memmove+0x12>
 8009788:	4601      	mov	r1, r0
 800978a:	4402      	add	r2, r0
 800978c:	428a      	cmp	r2, r1
 800978e:	d100      	bne.n	8009792 <memmove+0x2a>
 8009790:	bd10      	pop	{r4, pc}
 8009792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800979a:	e7f7      	b.n	800978c <memmove+0x24>

0800979c <_sbrk_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	2300      	movs	r3, #0
 80097a0:	4d05      	ldr	r5, [pc, #20]	@ (80097b8 <_sbrk_r+0x1c>)
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	602b      	str	r3, [r5, #0]
 80097a8:	f7f8 fd10 	bl	80021cc <_sbrk>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_sbrk_r+0x1a>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_sbrk_r+0x1a>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	20000944 	.word	0x20000944

080097bc <memcpy>:
 80097bc:	440a      	add	r2, r1
 80097be:	4291      	cmp	r1, r2
 80097c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097c4:	d100      	bne.n	80097c8 <memcpy+0xc>
 80097c6:	4770      	bx	lr
 80097c8:	b510      	push	{r4, lr}
 80097ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ce:	4291      	cmp	r1, r2
 80097d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d4:	d1f9      	bne.n	80097ca <memcpy+0xe>
 80097d6:	bd10      	pop	{r4, pc}

080097d8 <__assert_func>:
 80097d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097da:	4614      	mov	r4, r2
 80097dc:	461a      	mov	r2, r3
 80097de:	4b09      	ldr	r3, [pc, #36]	@ (8009804 <__assert_func+0x2c>)
 80097e0:	4605      	mov	r5, r0
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68d8      	ldr	r0, [r3, #12]
 80097e6:	b14c      	cbz	r4, 80097fc <__assert_func+0x24>
 80097e8:	4b07      	ldr	r3, [pc, #28]	@ (8009808 <__assert_func+0x30>)
 80097ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097ee:	9100      	str	r1, [sp, #0]
 80097f0:	462b      	mov	r3, r5
 80097f2:	4906      	ldr	r1, [pc, #24]	@ (800980c <__assert_func+0x34>)
 80097f4:	f000 f870 	bl	80098d8 <fiprintf>
 80097f8:	f000 f880 	bl	80098fc <abort>
 80097fc:	4b04      	ldr	r3, [pc, #16]	@ (8009810 <__assert_func+0x38>)
 80097fe:	461c      	mov	r4, r3
 8009800:	e7f3      	b.n	80097ea <__assert_func+0x12>
 8009802:	bf00      	nop
 8009804:	20000028 	.word	0x20000028
 8009808:	0800b4bb 	.word	0x0800b4bb
 800980c:	0800b4c8 	.word	0x0800b4c8
 8009810:	0800b4f6 	.word	0x0800b4f6

08009814 <_calloc_r>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	fba1 5402 	umull	r5, r4, r1, r2
 800981a:	b934      	cbnz	r4, 800982a <_calloc_r+0x16>
 800981c:	4629      	mov	r1, r5
 800981e:	f7ff f99d 	bl	8008b5c <_malloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	b928      	cbnz	r0, 8009832 <_calloc_r+0x1e>
 8009826:	4630      	mov	r0, r6
 8009828:	bd70      	pop	{r4, r5, r6, pc}
 800982a:	220c      	movs	r2, #12
 800982c:	2600      	movs	r6, #0
 800982e:	6002      	str	r2, [r0, #0]
 8009830:	e7f9      	b.n	8009826 <_calloc_r+0x12>
 8009832:	462a      	mov	r2, r5
 8009834:	4621      	mov	r1, r4
 8009836:	f7fe fa34 	bl	8007ca2 <memset>
 800983a:	e7f4      	b.n	8009826 <_calloc_r+0x12>

0800983c <__ascii_mbtowc>:
 800983c:	b082      	sub	sp, #8
 800983e:	b901      	cbnz	r1, 8009842 <__ascii_mbtowc+0x6>
 8009840:	a901      	add	r1, sp, #4
 8009842:	b142      	cbz	r2, 8009856 <__ascii_mbtowc+0x1a>
 8009844:	b14b      	cbz	r3, 800985a <__ascii_mbtowc+0x1e>
 8009846:	7813      	ldrb	r3, [r2, #0]
 8009848:	600b      	str	r3, [r1, #0]
 800984a:	7812      	ldrb	r2, [r2, #0]
 800984c:	1e10      	subs	r0, r2, #0
 800984e:	bf18      	it	ne
 8009850:	2001      	movne	r0, #1
 8009852:	b002      	add	sp, #8
 8009854:	4770      	bx	lr
 8009856:	4610      	mov	r0, r2
 8009858:	e7fb      	b.n	8009852 <__ascii_mbtowc+0x16>
 800985a:	f06f 0001 	mvn.w	r0, #1
 800985e:	e7f8      	b.n	8009852 <__ascii_mbtowc+0x16>

08009860 <_realloc_r>:
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	4607      	mov	r7, r0
 8009866:	4614      	mov	r4, r2
 8009868:	460d      	mov	r5, r1
 800986a:	b921      	cbnz	r1, 8009876 <_realloc_r+0x16>
 800986c:	4611      	mov	r1, r2
 800986e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	f7ff b973 	b.w	8008b5c <_malloc_r>
 8009876:	b92a      	cbnz	r2, 8009884 <_realloc_r+0x24>
 8009878:	f7ff f8fe 	bl	8008a78 <_free_r>
 800987c:	4625      	mov	r5, r4
 800987e:	4628      	mov	r0, r5
 8009880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009884:	f000 f841 	bl	800990a <_malloc_usable_size_r>
 8009888:	4284      	cmp	r4, r0
 800988a:	4606      	mov	r6, r0
 800988c:	d802      	bhi.n	8009894 <_realloc_r+0x34>
 800988e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009892:	d8f4      	bhi.n	800987e <_realloc_r+0x1e>
 8009894:	4621      	mov	r1, r4
 8009896:	4638      	mov	r0, r7
 8009898:	f7ff f960 	bl	8008b5c <_malloc_r>
 800989c:	4680      	mov	r8, r0
 800989e:	b908      	cbnz	r0, 80098a4 <_realloc_r+0x44>
 80098a0:	4645      	mov	r5, r8
 80098a2:	e7ec      	b.n	800987e <_realloc_r+0x1e>
 80098a4:	42b4      	cmp	r4, r6
 80098a6:	4622      	mov	r2, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	bf28      	it	cs
 80098ac:	4632      	movcs	r2, r6
 80098ae:	f7ff ff85 	bl	80097bc <memcpy>
 80098b2:	4629      	mov	r1, r5
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7ff f8df 	bl	8008a78 <_free_r>
 80098ba:	e7f1      	b.n	80098a0 <_realloc_r+0x40>

080098bc <__ascii_wctomb>:
 80098bc:	4603      	mov	r3, r0
 80098be:	4608      	mov	r0, r1
 80098c0:	b141      	cbz	r1, 80098d4 <__ascii_wctomb+0x18>
 80098c2:	2aff      	cmp	r2, #255	@ 0xff
 80098c4:	d904      	bls.n	80098d0 <__ascii_wctomb+0x14>
 80098c6:	228a      	movs	r2, #138	@ 0x8a
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	4770      	bx	lr
 80098d0:	2001      	movs	r0, #1
 80098d2:	700a      	strb	r2, [r1, #0]
 80098d4:	4770      	bx	lr
	...

080098d8 <fiprintf>:
 80098d8:	b40e      	push	{r1, r2, r3}
 80098da:	b503      	push	{r0, r1, lr}
 80098dc:	4601      	mov	r1, r0
 80098de:	ab03      	add	r3, sp, #12
 80098e0:	4805      	ldr	r0, [pc, #20]	@ (80098f8 <fiprintf+0x20>)
 80098e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e6:	6800      	ldr	r0, [r0, #0]
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	f000 f83d 	bl	8009968 <_vfiprintf_r>
 80098ee:	b002      	add	sp, #8
 80098f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f4:	b003      	add	sp, #12
 80098f6:	4770      	bx	lr
 80098f8:	20000028 	.word	0x20000028

080098fc <abort>:
 80098fc:	2006      	movs	r0, #6
 80098fe:	b508      	push	{r3, lr}
 8009900:	f000 fa06 	bl	8009d10 <raise>
 8009904:	2001      	movs	r0, #1
 8009906:	f7f8 fbec 	bl	80020e2 <_exit>

0800990a <_malloc_usable_size_r>:
 800990a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800990e:	1f18      	subs	r0, r3, #4
 8009910:	2b00      	cmp	r3, #0
 8009912:	bfbc      	itt	lt
 8009914:	580b      	ldrlt	r3, [r1, r0]
 8009916:	18c0      	addlt	r0, r0, r3
 8009918:	4770      	bx	lr

0800991a <__sfputc_r>:
 800991a:	6893      	ldr	r3, [r2, #8]
 800991c:	b410      	push	{r4}
 800991e:	3b01      	subs	r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	6093      	str	r3, [r2, #8]
 8009924:	da07      	bge.n	8009936 <__sfputc_r+0x1c>
 8009926:	6994      	ldr	r4, [r2, #24]
 8009928:	42a3      	cmp	r3, r4
 800992a:	db01      	blt.n	8009930 <__sfputc_r+0x16>
 800992c:	290a      	cmp	r1, #10
 800992e:	d102      	bne.n	8009936 <__sfputc_r+0x1c>
 8009930:	bc10      	pop	{r4}
 8009932:	f000 b931 	b.w	8009b98 <__swbuf_r>
 8009936:	6813      	ldr	r3, [r2, #0]
 8009938:	1c58      	adds	r0, r3, #1
 800993a:	6010      	str	r0, [r2, #0]
 800993c:	7019      	strb	r1, [r3, #0]
 800993e:	4608      	mov	r0, r1
 8009940:	bc10      	pop	{r4}
 8009942:	4770      	bx	lr

08009944 <__sfputs_r>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	4614      	mov	r4, r2
 800994c:	18d5      	adds	r5, r2, r3
 800994e:	42ac      	cmp	r4, r5
 8009950:	d101      	bne.n	8009956 <__sfputs_r+0x12>
 8009952:	2000      	movs	r0, #0
 8009954:	e007      	b.n	8009966 <__sfputs_r+0x22>
 8009956:	463a      	mov	r2, r7
 8009958:	4630      	mov	r0, r6
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	f7ff ffdc 	bl	800991a <__sfputc_r>
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	d1f3      	bne.n	800994e <__sfputs_r+0xa>
 8009966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009968 <_vfiprintf_r>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	460d      	mov	r5, r1
 800996e:	4614      	mov	r4, r2
 8009970:	4698      	mov	r8, r3
 8009972:	4606      	mov	r6, r0
 8009974:	b09d      	sub	sp, #116	@ 0x74
 8009976:	b118      	cbz	r0, 8009980 <_vfiprintf_r+0x18>
 8009978:	6a03      	ldr	r3, [r0, #32]
 800997a:	b90b      	cbnz	r3, 8009980 <_vfiprintf_r+0x18>
 800997c:	f7fe f8f6 	bl	8007b6c <__sinit>
 8009980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009982:	07d9      	lsls	r1, r3, #31
 8009984:	d405      	bmi.n	8009992 <_vfiprintf_r+0x2a>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	059a      	lsls	r2, r3, #22
 800998a:	d402      	bmi.n	8009992 <_vfiprintf_r+0x2a>
 800998c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998e:	f7fe fa06 	bl	8007d9e <__retarget_lock_acquire_recursive>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	071b      	lsls	r3, r3, #28
 8009996:	d501      	bpl.n	800999c <_vfiprintf_r+0x34>
 8009998:	692b      	ldr	r3, [r5, #16]
 800999a:	b99b      	cbnz	r3, 80099c4 <_vfiprintf_r+0x5c>
 800999c:	4629      	mov	r1, r5
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 f938 	bl	8009c14 <__swsetup_r>
 80099a4:	b170      	cbz	r0, 80099c4 <_vfiprintf_r+0x5c>
 80099a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a8:	07dc      	lsls	r4, r3, #31
 80099aa:	d504      	bpl.n	80099b6 <_vfiprintf_r+0x4e>
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	b01d      	add	sp, #116	@ 0x74
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	0598      	lsls	r0, r3, #22
 80099ba:	d4f7      	bmi.n	80099ac <_vfiprintf_r+0x44>
 80099bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099be:	f7fe f9ef 	bl	8007da0 <__retarget_lock_release_recursive>
 80099c2:	e7f3      	b.n	80099ac <_vfiprintf_r+0x44>
 80099c4:	2300      	movs	r3, #0
 80099c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c8:	2320      	movs	r3, #32
 80099ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ce:	2330      	movs	r3, #48	@ 0x30
 80099d0:	f04f 0901 	mov.w	r9, #1
 80099d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009b84 <_vfiprintf_r+0x21c>
 80099dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099e0:	4623      	mov	r3, r4
 80099e2:	469a      	mov	sl, r3
 80099e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e8:	b10a      	cbz	r2, 80099ee <_vfiprintf_r+0x86>
 80099ea:	2a25      	cmp	r2, #37	@ 0x25
 80099ec:	d1f9      	bne.n	80099e2 <_vfiprintf_r+0x7a>
 80099ee:	ebba 0b04 	subs.w	fp, sl, r4
 80099f2:	d00b      	beq.n	8009a0c <_vfiprintf_r+0xa4>
 80099f4:	465b      	mov	r3, fp
 80099f6:	4622      	mov	r2, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7ff ffa2 	bl	8009944 <__sfputs_r>
 8009a00:	3001      	adds	r0, #1
 8009a02:	f000 80a7 	beq.w	8009b54 <_vfiprintf_r+0x1ec>
 8009a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a08:	445a      	add	r2, fp
 8009a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 809f 	beq.w	8009b54 <_vfiprintf_r+0x1ec>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a20:	f10a 0a01 	add.w	sl, sl, #1
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	9307      	str	r3, [sp, #28]
 8009a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2205      	movs	r2, #5
 8009a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a36:	4853      	ldr	r0, [pc, #332]	@ (8009b84 <_vfiprintf_r+0x21c>)
 8009a38:	f7fe f9b3 	bl	8007da2 <memchr>
 8009a3c:	9a04      	ldr	r2, [sp, #16]
 8009a3e:	b9d8      	cbnz	r0, 8009a78 <_vfiprintf_r+0x110>
 8009a40:	06d1      	lsls	r1, r2, #27
 8009a42:	bf44      	itt	mi
 8009a44:	2320      	movmi	r3, #32
 8009a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a4a:	0713      	lsls	r3, r2, #28
 8009a4c:	bf44      	itt	mi
 8009a4e:	232b      	movmi	r3, #43	@ 0x2b
 8009a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a54:	f89a 3000 	ldrb.w	r3, [sl]
 8009a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a5a:	d015      	beq.n	8009a88 <_vfiprintf_r+0x120>
 8009a5c:	4654      	mov	r4, sl
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f04f 0c0a 	mov.w	ip, #10
 8009a64:	9a07      	ldr	r2, [sp, #28]
 8009a66:	4621      	mov	r1, r4
 8009a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a6c:	3b30      	subs	r3, #48	@ 0x30
 8009a6e:	2b09      	cmp	r3, #9
 8009a70:	d94b      	bls.n	8009b0a <_vfiprintf_r+0x1a2>
 8009a72:	b1b0      	cbz	r0, 8009aa2 <_vfiprintf_r+0x13a>
 8009a74:	9207      	str	r2, [sp, #28]
 8009a76:	e014      	b.n	8009aa2 <_vfiprintf_r+0x13a>
 8009a78:	eba0 0308 	sub.w	r3, r0, r8
 8009a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a80:	4313      	orrs	r3, r2
 8009a82:	46a2      	mov	sl, r4
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	e7d2      	b.n	8009a2e <_vfiprintf_r+0xc6>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	1d19      	adds	r1, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	9103      	str	r1, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bfbb      	ittet	lt
 8009a94:	425b      	neglt	r3, r3
 8009a96:	f042 0202 	orrlt.w	r2, r2, #2
 8009a9a:	9307      	strge	r3, [sp, #28]
 8009a9c:	9307      	strlt	r3, [sp, #28]
 8009a9e:	bfb8      	it	lt
 8009aa0:	9204      	strlt	r2, [sp, #16]
 8009aa2:	7823      	ldrb	r3, [r4, #0]
 8009aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aa6:	d10a      	bne.n	8009abe <_vfiprintf_r+0x156>
 8009aa8:	7863      	ldrb	r3, [r4, #1]
 8009aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aac:	d132      	bne.n	8009b14 <_vfiprintf_r+0x1ac>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	3402      	adds	r4, #2
 8009ab2:	1d1a      	adds	r2, r3, #4
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	9203      	str	r2, [sp, #12]
 8009ab8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009b88 <_vfiprintf_r+0x220>
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	7821      	ldrb	r1, [r4, #0]
 8009ac8:	f7fe f96b 	bl	8007da2 <memchr>
 8009acc:	b138      	cbz	r0, 8009ade <_vfiprintf_r+0x176>
 8009ace:	2240      	movs	r2, #64	@ 0x40
 8009ad0:	9b04      	ldr	r3, [sp, #16]
 8009ad2:	eba0 000a 	sub.w	r0, r0, sl
 8009ad6:	4082      	lsls	r2, r0
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	3401      	adds	r4, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae2:	2206      	movs	r2, #6
 8009ae4:	4829      	ldr	r0, [pc, #164]	@ (8009b8c <_vfiprintf_r+0x224>)
 8009ae6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aea:	f7fe f95a 	bl	8007da2 <memchr>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d03f      	beq.n	8009b72 <_vfiprintf_r+0x20a>
 8009af2:	4b27      	ldr	r3, [pc, #156]	@ (8009b90 <_vfiprintf_r+0x228>)
 8009af4:	bb1b      	cbnz	r3, 8009b3e <_vfiprintf_r+0x1d6>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	3307      	adds	r3, #7
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	3308      	adds	r3, #8
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b04:	443b      	add	r3, r7
 8009b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b08:	e76a      	b.n	80099e0 <_vfiprintf_r+0x78>
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b12:	e7a8      	b.n	8009a66 <_vfiprintf_r+0xfe>
 8009b14:	2300      	movs	r3, #0
 8009b16:	f04f 0c0a 	mov.w	ip, #10
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	3401      	adds	r4, #1
 8009b1e:	9305      	str	r3, [sp, #20]
 8009b20:	4620      	mov	r0, r4
 8009b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b26:	3a30      	subs	r2, #48	@ 0x30
 8009b28:	2a09      	cmp	r2, #9
 8009b2a:	d903      	bls.n	8009b34 <_vfiprintf_r+0x1cc>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0c6      	beq.n	8009abe <_vfiprintf_r+0x156>
 8009b30:	9105      	str	r1, [sp, #20]
 8009b32:	e7c4      	b.n	8009abe <_vfiprintf_r+0x156>
 8009b34:	4604      	mov	r4, r0
 8009b36:	2301      	movs	r3, #1
 8009b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b3c:	e7f0      	b.n	8009b20 <_vfiprintf_r+0x1b8>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4630      	mov	r0, r6
 8009b46:	4b13      	ldr	r3, [pc, #76]	@ (8009b94 <_vfiprintf_r+0x22c>)
 8009b48:	a904      	add	r1, sp, #16
 8009b4a:	f7fd fbc7 	bl	80072dc <_printf_float>
 8009b4e:	4607      	mov	r7, r0
 8009b50:	1c78      	adds	r0, r7, #1
 8009b52:	d1d6      	bne.n	8009b02 <_vfiprintf_r+0x19a>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x1fe>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x1fe>
 8009b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b62:	f7fe f91d 	bl	8007da0 <__retarget_lock_release_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	065b      	lsls	r3, r3, #25
 8009b6a:	f53f af1f 	bmi.w	80099ac <_vfiprintf_r+0x44>
 8009b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b70:	e71e      	b.n	80099b0 <_vfiprintf_r+0x48>
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	462a      	mov	r2, r5
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4b06      	ldr	r3, [pc, #24]	@ (8009b94 <_vfiprintf_r+0x22c>)
 8009b7c:	a904      	add	r1, sp, #16
 8009b7e:	f7fd fe4b 	bl	8007818 <_printf_i>
 8009b82:	e7e4      	b.n	8009b4e <_vfiprintf_r+0x1e6>
 8009b84:	0800b4a0 	.word	0x0800b4a0
 8009b88:	0800b4a6 	.word	0x0800b4a6
 8009b8c:	0800b4aa 	.word	0x0800b4aa
 8009b90:	080072dd 	.word	0x080072dd
 8009b94:	08009945 	.word	0x08009945

08009b98 <__swbuf_r>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	b118      	cbz	r0, 8009baa <__swbuf_r+0x12>
 8009ba2:	6a03      	ldr	r3, [r0, #32]
 8009ba4:	b90b      	cbnz	r3, 8009baa <__swbuf_r+0x12>
 8009ba6:	f7fd ffe1 	bl	8007b6c <__sinit>
 8009baa:	69a3      	ldr	r3, [r4, #24]
 8009bac:	60a3      	str	r3, [r4, #8]
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	071a      	lsls	r2, r3, #28
 8009bb2:	d501      	bpl.n	8009bb8 <__swbuf_r+0x20>
 8009bb4:	6923      	ldr	r3, [r4, #16]
 8009bb6:	b943      	cbnz	r3, 8009bca <__swbuf_r+0x32>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f82a 	bl	8009c14 <__swsetup_r>
 8009bc0:	b118      	cbz	r0, 8009bca <__swbuf_r+0x32>
 8009bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	6922      	ldr	r2, [r4, #16]
 8009bce:	b2f6      	uxtb	r6, r6
 8009bd0:	1a98      	subs	r0, r3, r2
 8009bd2:	6963      	ldr	r3, [r4, #20]
 8009bd4:	4637      	mov	r7, r6
 8009bd6:	4283      	cmp	r3, r0
 8009bd8:	dc05      	bgt.n	8009be6 <__swbuf_r+0x4e>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4628      	mov	r0, r5
 8009bde:	f7ff fd9b 	bl	8009718 <_fflush_r>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d1ed      	bne.n	8009bc2 <__swbuf_r+0x2a>
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	60a3      	str	r3, [r4, #8]
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	6022      	str	r2, [r4, #0]
 8009bf2:	701e      	strb	r6, [r3, #0]
 8009bf4:	6962      	ldr	r2, [r4, #20]
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d004      	beq.n	8009c06 <__swbuf_r+0x6e>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	07db      	lsls	r3, r3, #31
 8009c00:	d5e1      	bpl.n	8009bc6 <__swbuf_r+0x2e>
 8009c02:	2e0a      	cmp	r6, #10
 8009c04:	d1df      	bne.n	8009bc6 <__swbuf_r+0x2e>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f7ff fd85 	bl	8009718 <_fflush_r>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d0d9      	beq.n	8009bc6 <__swbuf_r+0x2e>
 8009c12:	e7d6      	b.n	8009bc2 <__swbuf_r+0x2a>

08009c14 <__swsetup_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4b29      	ldr	r3, [pc, #164]	@ (8009cbc <__swsetup_r+0xa8>)
 8009c18:	4605      	mov	r5, r0
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b118      	cbz	r0, 8009c28 <__swsetup_r+0x14>
 8009c20:	6a03      	ldr	r3, [r0, #32]
 8009c22:	b90b      	cbnz	r3, 8009c28 <__swsetup_r+0x14>
 8009c24:	f7fd ffa2 	bl	8007b6c <__sinit>
 8009c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c2c:	0719      	lsls	r1, r3, #28
 8009c2e:	d422      	bmi.n	8009c76 <__swsetup_r+0x62>
 8009c30:	06da      	lsls	r2, r3, #27
 8009c32:	d407      	bmi.n	8009c44 <__swsetup_r+0x30>
 8009c34:	2209      	movs	r2, #9
 8009c36:	602a      	str	r2, [r5, #0]
 8009c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	e033      	b.n	8009cac <__swsetup_r+0x98>
 8009c44:	0758      	lsls	r0, r3, #29
 8009c46:	d512      	bpl.n	8009c6e <__swsetup_r+0x5a>
 8009c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c4a:	b141      	cbz	r1, 8009c5e <__swsetup_r+0x4a>
 8009c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c50:	4299      	cmp	r1, r3
 8009c52:	d002      	beq.n	8009c5a <__swsetup_r+0x46>
 8009c54:	4628      	mov	r0, r5
 8009c56:	f7fe ff0f 	bl	8008a78 <_free_r>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	2300      	movs	r3, #0
 8009c68:	6063      	str	r3, [r4, #4]
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	f043 0308 	orr.w	r3, r3, #8
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	b94b      	cbnz	r3, 8009c8e <__swsetup_r+0x7a>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c84:	d003      	beq.n	8009c8e <__swsetup_r+0x7a>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 f882 	bl	8009d92 <__smakebuf_r>
 8009c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c92:	f013 0201 	ands.w	r2, r3, #1
 8009c96:	d00a      	beq.n	8009cae <__swsetup_r+0x9a>
 8009c98:	2200      	movs	r2, #0
 8009c9a:	60a2      	str	r2, [r4, #8]
 8009c9c:	6962      	ldr	r2, [r4, #20]
 8009c9e:	4252      	negs	r2, r2
 8009ca0:	61a2      	str	r2, [r4, #24]
 8009ca2:	6922      	ldr	r2, [r4, #16]
 8009ca4:	b942      	cbnz	r2, 8009cb8 <__swsetup_r+0xa4>
 8009ca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009caa:	d1c5      	bne.n	8009c38 <__swsetup_r+0x24>
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	0799      	lsls	r1, r3, #30
 8009cb0:	bf58      	it	pl
 8009cb2:	6962      	ldrpl	r2, [r4, #20]
 8009cb4:	60a2      	str	r2, [r4, #8]
 8009cb6:	e7f4      	b.n	8009ca2 <__swsetup_r+0x8e>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e7f7      	b.n	8009cac <__swsetup_r+0x98>
 8009cbc:	20000028 	.word	0x20000028

08009cc0 <_raise_r>:
 8009cc0:	291f      	cmp	r1, #31
 8009cc2:	b538      	push	{r3, r4, r5, lr}
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	d904      	bls.n	8009cd4 <_raise_r+0x14>
 8009cca:	2316      	movs	r3, #22
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cd6:	b112      	cbz	r2, 8009cde <_raise_r+0x1e>
 8009cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cdc:	b94b      	cbnz	r3, 8009cf2 <_raise_r+0x32>
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 f830 	bl	8009d44 <_getpid_r>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	4628      	mov	r0, r5
 8009cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cee:	f000 b817 	b.w	8009d20 <_kill_r>
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d00a      	beq.n	8009d0c <_raise_r+0x4c>
 8009cf6:	1c59      	adds	r1, r3, #1
 8009cf8:	d103      	bne.n	8009d02 <_raise_r+0x42>
 8009cfa:	2316      	movs	r3, #22
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	2001      	movs	r0, #1
 8009d00:	e7e7      	b.n	8009cd2 <_raise_r+0x12>
 8009d02:	2100      	movs	r1, #0
 8009d04:	4620      	mov	r0, r4
 8009d06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d0a:	4798      	blx	r3
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	e7e0      	b.n	8009cd2 <_raise_r+0x12>

08009d10 <raise>:
 8009d10:	4b02      	ldr	r3, [pc, #8]	@ (8009d1c <raise+0xc>)
 8009d12:	4601      	mov	r1, r0
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	f7ff bfd3 	b.w	8009cc0 <_raise_r>
 8009d1a:	bf00      	nop
 8009d1c:	20000028 	.word	0x20000028

08009d20 <_kill_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	2300      	movs	r3, #0
 8009d24:	4d06      	ldr	r5, [pc, #24]	@ (8009d40 <_kill_r+0x20>)
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	602b      	str	r3, [r5, #0]
 8009d2e:	f7f8 f9c8 	bl	80020c2 <_kill>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	d102      	bne.n	8009d3c <_kill_r+0x1c>
 8009d36:	682b      	ldr	r3, [r5, #0]
 8009d38:	b103      	cbz	r3, 8009d3c <_kill_r+0x1c>
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	bd38      	pop	{r3, r4, r5, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000944 	.word	0x20000944

08009d44 <_getpid_r>:
 8009d44:	f7f8 b9b6 	b.w	80020b4 <_getpid>

08009d48 <__swhatbuf_r>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	4615      	mov	r5, r2
 8009d52:	2900      	cmp	r1, #0
 8009d54:	461e      	mov	r6, r3
 8009d56:	b096      	sub	sp, #88	@ 0x58
 8009d58:	da0c      	bge.n	8009d74 <__swhatbuf_r+0x2c>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d62:	bf14      	ite	ne
 8009d64:	2340      	movne	r3, #64	@ 0x40
 8009d66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	6031      	str	r1, [r6, #0]
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	b016      	add	sp, #88	@ 0x58
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	466a      	mov	r2, sp
 8009d76:	f000 f849 	bl	8009e0c <_fstat_r>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	dbed      	blt.n	8009d5a <__swhatbuf_r+0x12>
 8009d7e:	9901      	ldr	r1, [sp, #4]
 8009d80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d88:	4259      	negs	r1, r3
 8009d8a:	4159      	adcs	r1, r3
 8009d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d90:	e7eb      	b.n	8009d6a <__swhatbuf_r+0x22>

08009d92 <__smakebuf_r>:
 8009d92:	898b      	ldrh	r3, [r1, #12]
 8009d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d96:	079d      	lsls	r5, r3, #30
 8009d98:	4606      	mov	r6, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	d507      	bpl.n	8009dae <__smakebuf_r+0x1c>
 8009d9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	2301      	movs	r3, #1
 8009da8:	6163      	str	r3, [r4, #20]
 8009daa:	b003      	add	sp, #12
 8009dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dae:	466a      	mov	r2, sp
 8009db0:	ab01      	add	r3, sp, #4
 8009db2:	f7ff ffc9 	bl	8009d48 <__swhatbuf_r>
 8009db6:	9f00      	ldr	r7, [sp, #0]
 8009db8:	4605      	mov	r5, r0
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7fe fecd 	bl	8008b5c <_malloc_r>
 8009dc2:	b948      	cbnz	r0, 8009dd8 <__smakebuf_r+0x46>
 8009dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc8:	059a      	lsls	r2, r3, #22
 8009dca:	d4ee      	bmi.n	8009daa <__smakebuf_r+0x18>
 8009dcc:	f023 0303 	bic.w	r3, r3, #3
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	e7e2      	b.n	8009d9e <__smakebuf_r+0xc>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	9b01      	ldr	r3, [sp, #4]
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	b15b      	cbz	r3, 8009e02 <__smakebuf_r+0x70>
 8009dea:	4630      	mov	r0, r6
 8009dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df0:	f000 f81e 	bl	8009e30 <_isatty_r>
 8009df4:	b128      	cbz	r0, 8009e02 <__smakebuf_r+0x70>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f023 0303 	bic.w	r3, r3, #3
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	431d      	orrs	r5, r3
 8009e06:	81a5      	strh	r5, [r4, #12]
 8009e08:	e7cf      	b.n	8009daa <__smakebuf_r+0x18>
	...

08009e0c <_fstat_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4d06      	ldr	r5, [pc, #24]	@ (8009e2c <_fstat_r+0x20>)
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	f7f8 f9b1 	bl	8002180 <_fstat>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	d102      	bne.n	8009e28 <_fstat_r+0x1c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	b103      	cbz	r3, 8009e28 <_fstat_r+0x1c>
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000944 	.word	0x20000944

08009e30 <_isatty_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	2300      	movs	r3, #0
 8009e34:	4d05      	ldr	r5, [pc, #20]	@ (8009e4c <_isatty_r+0x1c>)
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f8 f9af 	bl	800219e <_isatty>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_isatty_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_isatty_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000944 	.word	0x20000944

08009e50 <_init>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	bf00      	nop
 8009e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e56:	bc08      	pop	{r3}
 8009e58:	469e      	mov	lr, r3
 8009e5a:	4770      	bx	lr

08009e5c <_fini>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr
