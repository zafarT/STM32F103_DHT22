
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009990  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001114  08009aa0  08009aa0  0000aaa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb4  0800abb4  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abb4  0800abb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abbc  0800abbc  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abbc  0800abbc  0000bbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abc0  0800abc0  0000bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800abc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  200001e0  0800ada0  0000c1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000095c  0800ada0  0000c95c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efaa  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8e  00000000  00000000  0001b1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001dd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf7  00000000  00000000  0001edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019739  00000000  00000000  0001faef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001397d  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d773  00000000  00000000  0004cba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  000da35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000dfa7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a88 	.word	0x08009a88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009a88 	.word	0x08009a88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DHT22_Read>:




DHT22_Data DHT22_Read(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	latestData.ready = 0;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <DHT22_Read+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	725a      	strb	r2, [r3, #9]

	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <DHT22_Read+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)captureBuffer, DHT_CAPTURE_COUNT);
 8000f5a:	232b      	movs	r3, #43	@ 0x2b
 8000f5c:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <DHT22_Read+0xa0>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	481f      	ldr	r0, [pc, #124]	@ (8000fe0 <DHT22_Read+0x9c>)
 8000f62:	f004 ffa1 	bl	8005ea8 <HAL_TIM_IC_Start_DMA>

    DHT22_SetPinOutput();
 8000f66:	f000 f841 	bl	8000fec <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f70:	481d      	ldr	r0, [pc, #116]	@ (8000fe8 <DHT22_Read+0xa4>)
 8000f72:	f001 ffdd 	bl	8002f30 <HAL_GPIO_WritePin>



    delay_us(DHT_START_LOW_US );
 8000f76:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000f7a:	f000 f86f 	bl	800105c <delay_us>


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f84:	4818      	ldr	r0, [pc, #96]	@ (8000fe8 <DHT22_Read+0xa4>)
 8000f86:	f001 ffd3 	bl	8002f30 <HAL_GPIO_WritePin>
    delay_us(DHT_START_HIGH_US);
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f000 f866 	bl	800105c <delay_us>
    DHT22_SetPinInput();
 8000f90:	f000 f848 	bl	8001024 <DHT22_SetPinInput>

    uint32_t timeout = HAL_GetTick() + 10;  // Wait max 10 ms
 8000f94:	f001 f91c 	bl	80021d0 <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	330a      	adds	r3, #10
 8000f9c:	60fb      	str	r3, [r7, #12]
    while (!latestData.ready && HAL_GetTick() < timeout)
 8000f9e:	bf00      	nop
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <DHT22_Read+0x98>)
 8000fa2:	7a5b      	ldrb	r3, [r3, #9]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10f      	bne.n	8000fc8 <DHT22_Read+0x84>
 8000fa8:	e008      	b.n	8000fbc <DHT22_Read+0x78>
    {
		latestData.ready = 0;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <DHT22_Read+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	725a      	strb	r2, [r3, #9]
    	return latestData;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <DHT22_Read+0x98>)
 8000fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fba:	e00a      	b.n	8000fd2 <DHT22_Read+0x8e>
    while (!latestData.ready && HAL_GetTick() < timeout)
 8000fbc:	f001 f908 	bl	80021d0 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d8f0      	bhi.n	8000faa <DHT22_Read+0x66>
    }



    return latestData;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <DHT22_Read+0x98>)
 8000fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002a8 	.word	0x200002a8
 8000fe0:	20000308 	.word	0x20000308
 8000fe4:	200001fc 	.word	0x200001fc
 8000fe8:	40010800 	.word	0x40010800

08000fec <DHT22_SetPinOutput>:


void DHT22_SetPinOutput(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001002:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2302      	movs	r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <DHT22_SetPinOutput+0x34>)
 8001012:	f001 fe09 	bl	8002c28 <HAL_GPIO_Init>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40010800 	.word	0x40010800

08001024 <DHT22_SetPinInput>:

void DHT22_SetPinInput(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <DHT22_SetPinInput+0x34>)
 800104a:	f001 fded 	bl	8002c28 <HAL_GPIO_Init>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40010800 	.word	0x40010800

0800105c <delay_us>:


void delay_us(uint16_t delay)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <delay_us+0x2c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800106e:	bf00      	nop
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <delay_us+0x2c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3f9      	bcc.n	8001070 <delay_us+0x14>
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000308 	.word	0x20000308

0800108c <DHT22_Decode>:


DHT22_Data DHT22_Decode(void)
{
 800108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001090:	b09d      	sub	sp, #116	@ 0x74
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	466b      	mov	r3, sp
 8001098:	461e      	mov	r6, r3
	//DHT22_Data latestData = {0};
    // Step 1: Extract non-zero timestamps
    int edgeCount = DHT_EDGE_COUNT;
 800109a:	2329      	movs	r3, #41	@ 0x29
 800109c:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint16_t timestamps[edgeCount];
 800109e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80010a0:	1e4b      	subs	r3, r1, #1
 80010a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80010a4:	460a      	mov	r2, r1
 80010a6:	2300      	movs	r3, #0
 80010a8:	603a      	str	r2, [r7, #0]
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	0103      	lsls	r3, r0, #4
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	0102      	lsls	r2, r0, #4
 80010c2:	460a      	mov	r2, r1
 80010c4:	2300      	movs	r3, #0
 80010c6:	4692      	mov	sl, r2
 80010c8:	469b      	mov	fp, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80010d6:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80010da:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80010de:	460b      	mov	r3, r1
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	3307      	adds	r3, #7
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	ebad 0d03 	sub.w	sp, sp, r3
 80010ec:	466b      	mov	r3, sp
 80010ee:	3301      	adds	r3, #1
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	653b      	str	r3, [r7, #80]	@ 0x50
    int idx = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i += 1) // to skip handshake of dht22
 80010fa:	2302      	movs	r3, #2
 80010fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80010fe:	e00d      	b.n	800111c <DHT22_Decode+0x90>
    {
        timestamps[idx++] = captureBuffer[i];
 8001100:	4a8b      	ldr	r2, [pc, #556]	@ (8001330 <DHT22_Decode+0x2a4>)
 8001102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001104:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800110e:	b289      	uxth	r1, r1
 8001110:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001112:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i += 1) // to skip handshake of dht22
 8001116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001118:	3301      	adds	r3, #1
 800111a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800111c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800111e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001120:	ddee      	ble.n	8001100 <DHT22_Decode+0x74>
    }

    // Step 2: Calculate pulse widths
    uint16_t pulseWidths[edgeCount - 1];
 8001122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001124:	1e59      	subs	r1, r3, #1
 8001126:	1e4b      	subs	r3, r1, #1
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800112a:	460a      	mov	r2, r1
 800112c:	2300      	movs	r3, #0
 800112e:	4690      	mov	r8, r2
 8001130:	4699      	mov	r9, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800113e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001142:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001146:	460a      	mov	r2, r1
 8001148:	2300      	movs	r3, #0
 800114a:	4614      	mov	r4, r2
 800114c:	461d      	mov	r5, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	012b      	lsls	r3, r5, #4
 8001158:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800115c:	0122      	lsls	r2, r4, #4
 800115e:	460b      	mov	r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	3307      	adds	r3, #7
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	ebad 0d03 	sub.w	sp, sp, r3
 800116c:	466b      	mov	r3, sp
 800116e:	3301      	adds	r3, #1
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int i = 0; i < edgeCount - 1; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	667b      	str	r3, [r7, #100]	@ 0x64
 800117a:	e011      	b.n	80011a0 <DHT22_Decode+0x114>
        pulseWidths[i] = timestamps[i + 1] - timestamps[i];
 800117c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001182:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001188:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800118a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b299      	uxth	r1, r3
 8001192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001194:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001196:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < edgeCount - 1; i++) {
 800119a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800119c:	3301      	adds	r3, #1
 800119e:	667b      	str	r3, [r7, #100]	@ 0x64
 80011a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbe8      	blt.n	800117c <DHT22_Decode+0xf0>
    }

    // Step 3:
    int start = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t bits[TOTAL_BITS];
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80011b2:	e014      	b.n	80011de <DHT22_Decode+0x152>
        bits[i] = (pulseWidths[start + i] >= THRESHOLD_US) ? 1 : 0;
 80011b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011b8:	441a      	add	r2, r3
 80011ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011c0:	2b63      	cmp	r3, #99	@ 0x63
 80011c2:	bf8c      	ite	hi
 80011c4:	2301      	movhi	r3, #1
 80011c6:	2300      	movls	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	f107 0218 	add.w	r2, r7, #24
 80011d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011d2:	4413      	add	r3, r2
 80011d4:	460a      	mov	r2, r1
 80011d6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011da:	3301      	adds	r3, #1
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80011de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011e0:	2b27      	cmp	r3, #39	@ 0x27
 80011e2:	dde7      	ble.n	80011b4 <DHT22_Decode+0x128>
    }

    // Step 4: Convert bits to bytes
    uint8_t data[5] = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011f2:	e02f      	b.n	8001254 <DHT22_Decode+0x1c8>
        data[i / 8] <<= 1;
 80011f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da00      	bge.n	80011fc <DHT22_Decode+0x170>
 80011fa:	3307      	adds	r3, #7
 80011fc:	10db      	asrs	r3, r3, #3
 80011fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001202:	f107 0108 	add.w	r1, r7, #8
 8001206:	440a      	add	r2, r1
 8001208:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 800120c:	0052      	lsls	r2, r2, #1
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	3368      	adds	r3, #104	@ 0x68
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	440b      	add	r3, r1
 8001218:	f803 2c60 	strb.w	r2, [r3, #-96]
        data[i / 8] |= bits[i];
 800121c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800121e:	2b00      	cmp	r3, #0
 8001220:	da00      	bge.n	8001224 <DHT22_Decode+0x198>
 8001222:	3307      	adds	r3, #7
 8001224:	10db      	asrs	r3, r3, #3
 8001226:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800122a:	f107 0108 	add.w	r1, r7, #8
 800122e:	440a      	add	r2, r1
 8001230:	f812 1c60 	ldrb.w	r1, [r2, #-96]
 8001234:	f107 0018 	add.w	r0, r7, #24
 8001238:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800123a:	4402      	add	r2, r0
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	3368      	adds	r3, #104	@ 0x68
 8001244:	f107 0108 	add.w	r1, r7, #8
 8001248:	440b      	add	r3, r1
 800124a:	f803 2c60 	strb.w	r2, [r3, #-96]
    for (int i = 0; i < TOTAL_BITS; i++) {
 800124e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001250:	3301      	adds	r3, #1
 8001252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001256:	2b27      	cmp	r3, #39	@ 0x27
 8001258:	ddcc      	ble.n	80011f4 <DHT22_Decode+0x168>
    }

    // Step 5: Verify checksum
    uint8_t checksum = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
 800125a:	7c3a      	ldrb	r2, [r7, #16]
 800125c:	7c7b      	ldrb	r3, [r7, #17]
 800125e:	4413      	add	r3, r2
 8001260:	b2da      	uxtb	r2, r3
 8001262:	7cbb      	ldrb	r3, [r7, #18]
 8001264:	4413      	add	r3, r2
 8001266:	b2da      	uxtb	r2, r3
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	4413      	add	r3, r2
 800126c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    latestData.status = 1;
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <DHT22_Decode+0x2a8>)
 8001272:	2201      	movs	r2, #1
 8001274:	721a      	strb	r2, [r3, #8]
    latestData.humidity = (float)((data[0] << 8) | data[1])/10;
 8001276:	7c3b      	ldrb	r3, [r7, #16]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	7c7a      	ldrb	r2, [r7, #17]
 800127c:	4313      	orrs	r3, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fcbc 	bl	8000bfc <__aeabi_i2f>
 8001284:	4603      	mov	r3, r0
 8001286:	492c      	ldr	r1, [pc, #176]	@ (8001338 <DHT22_Decode+0x2ac>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fdbf 	bl	8000e0c <__aeabi_fdiv>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <DHT22_Decode+0x2a8>)
 8001294:	605a      	str	r2, [r3, #4]

    if(checksum == data[4])
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800129c:	429a      	cmp	r2, r3
 800129e:	d13b      	bne.n	8001318 <DHT22_Decode+0x28c>
    {
    	latestData.humidity = (float)((data[0] << 8) | data[1])/10;
 80012a0:	7c3b      	ldrb	r3, [r7, #16]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	7c7a      	ldrb	r2, [r7, #17]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fca7 	bl	8000bfc <__aeabi_i2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4921      	ldr	r1, [pc, #132]	@ (8001338 <DHT22_Decode+0x2ac>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdaa 	bl	8000e0c <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <DHT22_Decode+0x2a8>)
 80012be:	605a      	str	r2, [r3, #4]
    	if (data[2]&0x80) // If negative temperature
 80012c0:	7cbb      	ldrb	r3, [r7, #18]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da14      	bge.n	80012f2 <DHT22_Decode+0x266>
    	{
    		latestData.temperature = -(float)(((data[2] & 0x7F) << 8) | data[3])/10;
 80012c8:	7cbb      	ldrb	r3, [r7, #18]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fc91 	bl	8000bfc <__aeabi_i2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012e0:	4915      	ldr	r1, [pc, #84]	@ (8001338 <DHT22_Decode+0x2ac>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd92 	bl	8000e0c <__aeabi_fdiv>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <DHT22_Decode+0x2a8>)
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e00f      	b.n	8001312 <DHT22_Decode+0x286>
    	}
    	else
    	{
    		latestData.temperature = (float)((data[2] << 8) | data[3])/10;
 80012f2:	7cbb      	ldrb	r3, [r7, #18]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	7cfa      	ldrb	r2, [r7, #19]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fc7e 	bl	8000bfc <__aeabi_i2f>
 8001300:	4603      	mov	r3, r0
 8001302:	490d      	ldr	r1, [pc, #52]	@ (8001338 <DHT22_Decode+0x2ac>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fd81 	bl	8000e0c <__aeabi_fdiv>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <DHT22_Decode+0x2a8>)
 8001310:	601a      	str	r2, [r3, #0]
    	}

    	latestData.status = 0;
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <DHT22_Decode+0x2a8>)
 8001314:	2200      	movs	r2, #0
 8001316:	721a      	strb	r2, [r3, #8]
    }

    return  latestData;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <DHT22_Decode+0x2a8>)
 800131c:	ca07      	ldmia	r2, {r0, r1, r2}
 800131e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001322:	46b5      	mov	sp, r6

}
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	3774      	adds	r7, #116	@ 0x74
 8001328:	46bd      	mov	sp, r7
 800132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800132e:	bf00      	nop
 8001330:	200001fc 	.word	0x200001fc
 8001334:	200002a8 	.word	0x200002a8
 8001338:	41200000 	.word	0x41200000

0800133c <DHT22_ProcessCapture>:

void DHT22_ProcessCapture(void)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
    latestData = DHT22_Decode();  // Decode captured data
 8001342:	4c0c      	ldr	r4, [pc, #48]	@ (8001374 <DHT22_ProcessCapture+0x38>)
 8001344:	463b      	mov	r3, r7
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fea0 	bl	800108c <DHT22_Decode>
 800134c:	463b      	mov	r3, r7
 800134e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    latestData.ready = 1;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <DHT22_ProcessCapture+0x38>)
 8001358:	2201      	movs	r2, #1
 800135a:	725a      	strb	r2, [r3, #9]
    HAL_TIM_Base_Stop(&htim1);
 800135c:	4806      	ldr	r0, [pc, #24]	@ (8001378 <DHT22_ProcessCapture+0x3c>)
 800135e:	f004 fc71 	bl	8005c44 <HAL_TIM_Base_Stop>
    HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <DHT22_ProcessCapture+0x3c>)
 8001366:	f004 fd3d 	bl	8005de4 <HAL_TIM_IC_Stop>
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bd90      	pop	{r4, r7, pc}
 8001372:	bf00      	nop
 8001374:	200002a8 	.word	0x200002a8
 8001378:	20000308 	.word	0x20000308

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f000 fece 	bl	8002120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f81a 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f000 f984 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 800138c:	f000 f964 	bl	8001658 <MX_DMA_Init>
  MX_I2C1_Init();
 8001390:	f000 f85a 	bl	8001448 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001394:	f000 f886 	bl	80014a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001398:	f000 f910 	bl	80015bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim1);
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <main+0x38>)
 800139e:	f004 fc77 	bl	8005c90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <main+0x3c>)
 80013a4:	f004 fc74 	bl	8005c90 <HAL_TIM_Base_Start_IT>
  HAL_Delay (100);
 80013a8:	2064      	movs	r0, #100	@ 0x64
 80013aa:	f000 ff1b 	bl	80021e4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ae:	bf00      	nop
 80013b0:	e7fd      	b.n	80013ae <main+0x32>
 80013b2:	bf00      	nop
 80013b4:	20000308 	.word	0x20000308
 80013b8:	20000350 	.word	0x20000350

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b090      	sub	sp, #64	@ 0x40
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	2228      	movs	r2, #40	@ 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fa83 	bl	80078d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013de:	2301      	movs	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	4618      	mov	r0, r3
 8001406:	f003 ff87 	bl	8005318 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001410:	f000 f9ae 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f004 f9f4 	bl	800581c <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800143a:	f000 f999 	bl	8001770 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3740      	adds	r7, #64	@ 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <MX_I2C1_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	@ (800149c <MX_I2C1_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_I2C1_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <MX_I2C1_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <MX_I2C1_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_I2C1_Init+0x50>)
 8001486:	f001 fd85 	bl	8002f94 <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 f96e 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002b4 	.word	0x200002b4
 800149c:	40005400 	.word	0x40005400
 80014a0:	00061a80 	.word	0x00061a80

080014a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 80014aa:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <MX_TIM1_Init+0x108>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a3f      	ldr	r2, [pc, #252]	@ (80015ac <MX_TIM1_Init+0x108>)
 80014b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <MX_TIM1_Init+0x108>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e8:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 80014ea:	4a32      	ldr	r2, [pc, #200]	@ (80015b4 <MX_TIM1_Init+0x110>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014ee:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 80014f0:	2247      	movs	r2, #71	@ 0x47
 80014f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b2e      	ldr	r3, [pc, #184]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014fa:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 80014fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001500:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001514:	4826      	ldr	r0, [pc, #152]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001516:	f004 fafb 	bl	8005b10 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001520:	f000 f926 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001528:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4619      	mov	r1, r3
 8001530:	481f      	ldr	r0, [pc, #124]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001532:	f004 ffd3 	bl	80064dc <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800153c:	f000 f918 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001540:	481b      	ldr	r0, [pc, #108]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001542:	f004 fbf7 	bl	8005d34 <HAL_TIM_IC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800154c:	f000 f910 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4619      	mov	r1, r3
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001560:	f005 fbc8 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800156a:	f000 f901 	bl	8001770 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800156e:	2302      	movs	r3, #2
 8001570:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  sConfigIC.ICFilter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	480a      	ldr	r0, [pc, #40]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001588:	f004 ff0c 	bl	80063a4 <HAL_TIM_IC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001592:	f000 f8ed 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_CC1], hdma_tim1_ch1);
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <MX_TIM1_Init+0x114>)
 800159a:	625a      	str	r2, [r3, #36]	@ 0x24
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_TIM1_Init+0x114>)
 800159e:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <MX_TIM1_Init+0x10c>)
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	@ 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	20000308 	.word	0x20000308
 80015b4:	40012c00 	.word	0x40012c00
 80015b8:	20000398 	.word	0x20000398

080015bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <MX_TIM2_Init+0x98>)
 80015da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_TIM2_Init+0x98>)
 80015e2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_TIM2_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_TIM2_Init+0x98>)
 80015f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_TIM2_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_TIM2_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001602:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_TIM2_Init+0x98>)
 8001604:	f004 fa84 	bl	8005b10 <HAL_TIM_Base_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800160e:	f000 f8af 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_TIM2_Init+0x98>)
 8001620:	f004 ff5c 	bl	80064dc <HAL_TIM_ConfigClockSource>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800162a:	f000 f8a1 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	@ (8001654 <MX_TIM2_Init+0x98>)
 800163c:	f005 fb5a 	bl	8006cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001646:	f000 f893 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000350 	.word	0x20000350

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_DMA_Init+0x38>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <MX_DMA_Init+0x38>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6153      	str	r3, [r2, #20]
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_DMA_Init+0x38>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200c      	movs	r0, #12
 800167c:	f000 fead 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001680:	200c      	movs	r0, #12
 8001682:	f000 fec6 	bl	8002412 <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c0:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_GPIO_Init+0xd0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170e:	4816      	ldr	r0, [pc, #88]	@ (8001768 <MX_GPIO_Init+0xd4>)
 8001710:	f001 fc0e 	bl	8002f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800171a:	4814      	ldr	r0, [pc, #80]	@ (800176c <MX_GPIO_Init+0xd8>)
 800171c:	f001 fc08 	bl	8002f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001720:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2302      	movs	r3, #2
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4619      	mov	r1, r3
 8001738:	480b      	ldr	r0, [pc, #44]	@ (8001768 <MX_GPIO_Init+0xd4>)
 800173a:	f001 fa75 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800173e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4619      	mov	r1, r3
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_GPIO_Init+0xd8>)
 8001758:	f001 fa66 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000
 8001768:	40011000 	.word	0x40011000
 800176c:	40010c00 	.word	0x40010c00

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e01d      	b.n	80017c4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	3b50      	subs	r3, #80	@ 0x50
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	@ 0x78
 8001794:	f000 f99e 	bl	8001ad4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	@ 0x78
 800179e:	f000 f999 	bl	8001ad4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80017a2:	2210      	movs	r2, #16
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	@ 0x78
 80017a8:	f000 f994 	bl	8001ad4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <SSD1306_UpdateScreen+0x58>)
 80017b2:	441a      	add	r2, r3
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	2140      	movs	r1, #64	@ 0x40
 80017b8:	2078      	movs	r0, #120	@ 0x78
 80017ba:	f000 f925 	bl	8001a08 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	3301      	adds	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b07      	cmp	r3, #7
 80017c8:	d9de      	bls.n	8001788 <SSD1306_UpdateScreen+0xc>
	}
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200003dc 	.word	0x200003dc

080017d8 <SSD1306_DrawPixel>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	460b      	mov	r3, r1
 80017e4:	80bb      	strh	r3, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	70fb      	strb	r3, [r7, #3]
	if (
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ee:	d848      	bhi.n	8001882 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017f0:	88bb      	ldrh	r3, [r7, #4]
 80017f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80017f4:	d845      	bhi.n	8001882 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017f6:	4b25      	ldr	r3, [pc, #148]	@ (800188c <SSD1306_DrawPixel+0xb4>)
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d11a      	bne.n	8001848 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	b298      	uxth	r0, r3
 800181a:	4603      	mov	r3, r0
 800181c:	01db      	lsls	r3, r3, #7
 800181e:	4413      	add	r3, r2
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <SSD1306_DrawPixel+0xb8>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	b25a      	sxtb	r2, r3
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	b25b      	sxtb	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b259      	sxtb	r1, r3
 8001838:	88fa      	ldrh	r2, [r7, #6]
 800183a:	4603      	mov	r3, r0
 800183c:	01db      	lsls	r3, r3, #7
 800183e:	4413      	add	r3, r2
 8001840:	b2c9      	uxtb	r1, r1
 8001842:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <SSD1306_DrawPixel+0xb8>)
 8001844:	54d1      	strb	r1, [r2, r3]
 8001846:	e01d      	b.n	8001884 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	b298      	uxth	r0, r3
 8001850:	4603      	mov	r3, r0
 8001852:	01db      	lsls	r3, r3, #7
 8001854:	4413      	add	r3, r2
 8001856:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <SSD1306_DrawPixel+0xb8>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	b25a      	sxtb	r2, r3
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	b25b      	sxtb	r3, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	b25b      	sxtb	r3, r3
 800186e:	4013      	ands	r3, r2
 8001870:	b259      	sxtb	r1, r3
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	4603      	mov	r3, r0
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	4413      	add	r3, r2
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <SSD1306_DrawPixel+0xb8>)
 800187e:	54d1      	strb	r1, [r2, r3]
 8001880:	e000      	b.n	8001884 <SSD1306_DrawPixel+0xac>
		return;
 8001882:	bf00      	nop
	}
}
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	200007dc 	.word	0x200007dc
 8001890:	200003dc 	.word	0x200003dc

08001894 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	460a      	mov	r2, r1
 800189e:	80fb      	strh	r3, [r7, #6]
 80018a0:	4613      	mov	r3, r2
 80018a2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018a4:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <SSD1306_GotoXY+0x28>)
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018aa:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <SSD1306_GotoXY+0x28>)
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	8053      	strh	r3, [r2, #2]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200007dc 	.word	0x200007dc

080018c0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018d0:	4b39      	ldr	r3, [pc, #228]	@ (80019b8 <SSD1306_Putc+0xf8>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
	if (
 80018dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80018de:	dc07      	bgt.n	80018f0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018e0:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <SSD1306_Putc+0xf8>)
 80018e2:	885b      	ldrh	r3, [r3, #2]
 80018e4:	461a      	mov	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80018ee:	dd01      	ble.n	80018f4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e05d      	b.n	80019b0 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e04b      	b.n	8001992 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	3b20      	subs	r3, #32
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	7849      	ldrb	r1, [r1, #1]
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4619      	mov	r1, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	440b      	add	r3, r1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e030      	b.n	8001980 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d010      	beq.n	8001950 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800192e:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <SSD1306_Putc+0xf8>)
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b298      	uxth	r0, r3
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <SSD1306_Putc+0xf8>)
 800193c:	885a      	ldrh	r2, [r3, #2]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4413      	add	r3, r2
 8001944:	b29b      	uxth	r3, r3
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff ff45 	bl	80017d8 <SSD1306_DrawPixel>
 800194e:	e014      	b.n	800197a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <SSD1306_Putc+0xf8>)
 8001952:	881a      	ldrh	r2, [r3, #0]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b298      	uxth	r0, r3
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <SSD1306_Putc+0xf8>)
 800195e:	885a      	ldrh	r2, [r3, #2]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4413      	add	r3, r2
 8001966:	b299      	uxth	r1, r3
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	f7ff ff2f 	bl	80017d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	3301      	adds	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4293      	cmp	r3, r2
 800198a:	d3c8      	bcc.n	800191e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	461a      	mov	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4293      	cmp	r3, r2
 800199c:	d3ad      	bcc.n	80018fa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SSD1306_Putc+0xf8>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <SSD1306_Putc+0xf8>)
 80019ac:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80019ae:	79fb      	ldrb	r3, [r7, #7]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200007dc 	.word	0x200007dc

080019bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019ca:	e012      	b.n	80019f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	79fa      	ldrb	r2, [r7, #7]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff73 	bl	80018c0 <SSD1306_Putc>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d002      	beq.n	80019ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	e008      	b.n	80019fe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e8      	bne.n	80019cc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b0c7      	sub	sp, #284	@ 0x11c
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4604      	mov	r4, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001a16:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001a1a:	600a      	str	r2, [r1, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a22:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a26:	4622      	mov	r2, r4
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a2e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a32:	4602      	mov	r2, r0
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a3e:	460a      	mov	r2, r1
 8001a40:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a4a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a4e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a5c:	e015      	b.n	8001a8a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a5e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a62:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a66:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a72:	3301      	adds	r3, #1
 8001a74:	7811      	ldrb	r1, [r2, #0]
 8001a76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a7a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001a7e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a80:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a84:	3301      	adds	r3, #1
 8001a86:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a94:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a98:	8812      	ldrh	r2, [r2, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d8df      	bhi.n	8001a5e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001aa2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001aae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	200a      	movs	r0, #10
 8001abe:	9000      	str	r0, [sp, #0]
 8001ac0:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001ac2:	f001 fbbf 	bl	8003244 <HAL_I2C_Master_Transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	200002b4 	.word	0x200002b4

08001ad4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	71bb      	strb	r3, [r7, #6]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	230a      	movs	r3, #10
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2302      	movs	r3, #2
 8001afc:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <ssd1306_I2C_Write+0x38>)
 8001afe:	f001 fba1 	bl	8003244 <HAL_I2C_Master_Transmit>
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002b4 	.word	0x200002b4

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <HAL_MspInit+0x8c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a20      	ldr	r2, [pc, #128]	@ (8001b9c <HAL_MspInit+0x8c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <HAL_MspInit+0x8c>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_MspInit+0x8c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a1a      	ldr	r2, [pc, #104]	@ (8001b9c <HAL_MspInit+0x8c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_MspInit+0x8c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 fc45 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 fc5e 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2004      	movs	r0, #4
 8001b5c:	f000 fc3d 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001b60:	2004      	movs	r0, #4
 8001b62:	f000 fc56 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f000 fc35 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b70:	2005      	movs	r0, #5
 8001b72:	f000 fc4e 	bl	8002412 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_MspInit+0x90>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_MspInit+0x90>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010000 	.word	0x40010000

08001ba4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_I2C_MspInit+0x90>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d133      	bne.n	8001c2c <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_I2C_MspInit+0x94>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c38 <HAL_I2C_MspInit+0x94>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_I2C_MspInit+0x94>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bdc:	23c0      	movs	r3, #192	@ 0xc0
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be0:	2312      	movs	r3, #18
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4813      	ldr	r0, [pc, #76]	@ (8001c3c <HAL_I2C_MspInit+0x98>)
 8001bf0:	f001 f81a 	bl	8002c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_I2C_MspInit+0x94>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c38 <HAL_I2C_MspInit+0x94>)
 8001bfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	61d3      	str	r3, [r2, #28]
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_I2C_MspInit+0x94>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201f      	movs	r0, #31
 8001c12:	f000 fbe2 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c16:	201f      	movs	r0, #31
 8001c18:	f000 fbfb 	bl	8002412 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2020      	movs	r0, #32
 8001c22:	f000 fbda 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c26:	2020      	movs	r0, #32
 8001c28:	f000 fbf3 	bl	8002412 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010c00 	.word	0x40010c00

08001c40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_TIM_Base_MspInit+0x108>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d156      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0xce>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c60:	4b3a      	ldr	r3, [pc, #232]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a39      	ldr	r2, [pc, #228]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001c66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a33      	ldr	r2, [pc, #204]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b31      	ldr	r3, [pc, #196]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482a      	ldr	r0, [pc, #168]	@ (8001d50 <HAL_TIM_Base_MspInit+0x110>)
 8001ca6:	f000 ffbf 	bl	8002c28 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cac:	4a2a      	ldr	r2, [pc, #168]	@ (8001d58 <HAL_TIM_Base_MspInit+0x118>)
 8001cae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cbe:	2280      	movs	r2, #128	@ 0x80
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cca:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001ccc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cd0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001cd2:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cda:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ce0:	481c      	ldr	r0, [pc, #112]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001ce2:	f000 fbb1 	bl	8002448 <HAL_DMA_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8001cec:	f7ff fd40 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cf6:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <HAL_TIM_Base_MspInit+0x114>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	201b      	movs	r0, #27
 8001d02:	f000 fb6a 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d06:	201b      	movs	r0, #27
 8001d08:	f000 fb83 	bl	8002412 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d0c:	e018      	b.n	8001d40 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d16:	d113      	bne.n	8001d40 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	61d3      	str	r3, [r2, #28]
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	201c      	movs	r0, #28
 8001d36:	f000 fb50 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d3a:	201c      	movs	r0, #28
 8001d3c:	f000 fb69 	bl	8002412 <HAL_NVIC_EnableIRQ>
}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	@ 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010800 	.word	0x40010800
 8001d54:	20000398 	.word	0x20000398
 8001d58:	4002001c 	.word	0x4002001c

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <NMI_Handler+0x4>

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <MemManage_Handler+0x4>

08001d74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dac:	f000 f9fe 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001db8:	f003 fa96 	bl	80052e8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001dc4:	f000 fdb2 	bl	800292c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <DMA1_Channel2_IRQHandler+0x10>)
 8001dde:	f000 fc65 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */


  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000398 	.word	0x20000398

08001dec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <TIM1_CC_IRQHandler+0x10>)
 8001df2:	f004 f9e7 	bl	80061c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000308 	.word	0x20000308

08001e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <TIM2_IRQHandler+0x10>)
 8001e06:	f004 f9dd 	bl	80061c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000350 	.word	0x20000350

08001e14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <I2C1_EV_IRQHandler+0x10>)
 8001e1a:	f001 fb11 	bl	8003440 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200002b4 	.word	0x200002b4

08001e28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <I2C1_ER_IRQHandler+0x10>)
 8001e2e:	f001 fc78 	bl	8003722 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200002b4 	.word	0x200002b4

08001e3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4c:	d154      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0xbc>
	{
		HAL_TIM_Base_Start(&htim1);
 8001e4e:	482c      	ldr	r0, [pc, #176]	@ (8001f00 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e50:	f003 feae 	bl	8005bb0 <HAL_TIM_Base_Start>
		DHT22_Data data = DHT22_Read();
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f873 	bl	8000f44 <DHT22_Read>

		if(!data.status && !data.ready)
 8001e5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d148      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001e66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d144      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0xbc>
		{
			char tempStr[8];
			char humStr[8];

			SSD1306_GotoXY (0,0);
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fd0f 	bl	8001894 <SSD1306_GotoXY>
			SSD1306_Puts ("Temp: ", &Font_11x18, 1);
 8001e76:	2201      	movs	r2, #1
 8001e78:	4922      	ldr	r1, [pc, #136]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e7a:	4823      	ldr	r0, [pc, #140]	@ (8001f08 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001e7c:	f7ff fd9e 	bl	80019bc <SSD1306_Puts>
			sprintf(tempStr,  "%.1f", data.temperature);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fad0 	bl	8000428 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	f107 0014 	add.w	r0, r7, #20
 8001e90:	491e      	ldr	r1, [pc, #120]	@ (8001f0c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e92:	f005 fcbb 	bl	800780c <siprintf>
			SSD1306_GotoXY (60,0);
 8001e96:	2100      	movs	r1, #0
 8001e98:	203c      	movs	r0, #60	@ 0x3c
 8001e9a:	f7ff fcfb 	bl	8001894 <SSD1306_GotoXY>
			SSD1306_Puts (tempStr, &Font_11x18, 1);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4917      	ldr	r1, [pc, #92]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fd88 	bl	80019bc <SSD1306_Puts>
			SSD1306_GotoXY (0, 30);
 8001eac:	211e      	movs	r1, #30
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fcf0 	bl	8001894 <SSD1306_GotoXY>
			SSD1306_Puts ("Hum: ", &Font_11x18, 1);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4913      	ldr	r1, [pc, #76]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001eb8:	4815      	ldr	r0, [pc, #84]	@ (8001f10 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001eba:	f7ff fd7f 	bl	80019bc <SSD1306_Puts>
			SSD1306_GotoXY (50, 30);
 8001ebe:	211e      	movs	r1, #30
 8001ec0:	2032      	movs	r0, #50	@ 0x32
 8001ec2:	f7ff fce7 	bl	8001894 <SSD1306_GotoXY>
			sprintf(humStr, "%.1f", data.humidity);
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe faad 	bl	8000428 <__aeabi_f2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	f107 000c 	add.w	r0, r7, #12
 8001ed6:	490d      	ldr	r1, [pc, #52]	@ (8001f0c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001ed8:	f005 fc98 	bl	800780c <siprintf>
			SSD1306_Puts (humStr, &Font_11x18, 1);
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4908      	ldr	r1, [pc, #32]	@ (8001f04 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fd69 	bl	80019bc <SSD1306_Puts>

			SSD1306_UpdateScreen();
 8001eea:	f7ff fc47 	bl	800177c <SSD1306_UpdateScreen>

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001eee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ef2:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ef4:	f001 f834 	bl	8002f60 <HAL_GPIO_TogglePin>



	}

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	@ 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000308 	.word	0x20000308
 8001f04:	20000000 	.word	0x20000000
 8001f08:	08009aa0 	.word	0x08009aa0
 8001f0c:	08009aa8 	.word	0x08009aa8
 8001f10:	08009ab0 	.word	0x08009ab0
 8001f14:	40011000 	.word	0x40011000

08001f18 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d105      	bne.n	8001f36 <HAL_TIM_IC_CaptureCallback+0x1e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7f1b      	ldrb	r3, [r3, #28]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		DHT22_ProcessCapture();
 8001f32:	f7ff fa03 	bl	800133c <DHT22_ProcessCapture>
	}
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40012c00 	.word	0x40012c00

08001f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <_kill>:

int _kill(int pid, int sig)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5c:	f005 fd0e 	bl	800797c <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2216      	movs	r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
  return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_exit>:

void _exit (int status)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffe7 	bl	8001f52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <_exit+0x12>

08001f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e00a      	b.n	8001fb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9a:	f3af 8000 	nop.w
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf0      	blt.n	8001f9a <_read+0x12>
  }

  return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e009      	b.n	8001fe8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf1      	blt.n	8001fd4 <_write+0x12>
  }
  return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_close>:

int _close(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002020:	605a      	str	r2, [r3, #4]
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_isatty>:

int _isatty(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	@ (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f005 fc76 	bl	800797c <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20005000 	.word	0x20005000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	200007e4 	.word	0x200007e4
 80020c4:	20000960 	.word	0x20000960

080020c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d4:	f7ff fff8 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480b      	ldr	r0, [pc, #44]	@ (8002108 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020da:	490c      	ldr	r1, [pc, #48]	@ (800210c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020f0:	4c09      	ldr	r4, [pc, #36]	@ (8002118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fe:	f005 fc43 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002102:	f7ff f93b 	bl	800137c <main>
  bx lr
 8002106:	4770      	bx	lr
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002110:	0800abc4 	.word	0x0800abc4
  ldr r2, =_sbss
 8002114:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002118:	2000095c 	.word	0x2000095c

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_Init+0x28>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <HAL_Init+0x28>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 f947 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	200f      	movs	r0, #15
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fce8 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f95f 	bl	800242e <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f000 f927 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	@ (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000010 	.word	0x20000010
 80021a8:	2000000c 	.word	0x2000000c

080021ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_IncTick+0x1c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_IncTick+0x20>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <HAL_IncTick+0x20>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	20000010 	.word	0x20000010
 80021cc:	200007e8 	.word	0x200007e8

080021d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b02      	ldr	r3, [pc, #8]	@ (80021e0 <HAL_GetTick+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	200007e8 	.word	0x200007e8

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffe0 	bl	80021d0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000010 	.word	0x20000010

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4906      	ldr	r1, [pc, #24]	@ (80022c4 <__NVIC_EnableIRQ+0x34>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	@ (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	@ (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	@ 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	@ 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff90 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff2d 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff42 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff90 	bl	800231c <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5f 	bl	80022c8 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff35 	bl	8002290 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e043      	b.n	80024e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	4b22      	ldr	r3, [pc, #136]	@ (80024f0 <HAL_DMA_Init+0xa8>)
 8002466:	4413      	add	r3, r2
 8002468:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_DMA_Init+0xac>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	009a      	lsls	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_DMA_Init+0xb0>)
 800247a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002492:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002496:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	bffdfff8 	.word	0xbffdfff8
 80024f4:	cccccccd 	.word	0xcccccccd
 80024f8:	40020000 	.word	0x40020000

080024fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_DMA_Start_IT+0x20>
 8002518:	2302      	movs	r3, #2
 800251a:	e04b      	b.n	80025b4 <HAL_DMA_Start_IT+0xb8>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d13a      	bne.n	80025a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9bc 	bl	80028d2 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 020e 	orr.w	r2, r2, #14
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00f      	b.n	8002594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 020a 	orr.w	r2, r2, #10
 8002592:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e005      	b.n	80025b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025ae:	2302      	movs	r3, #2
 80025b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d005      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e051      	b.n	8002684 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 020e 	bic.w	r2, r2, #14
 80025ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <HAL_DMA_Abort_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d029      	beq.n	800265e <HAL_DMA_Abort_IT+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	@ (8002694 <HAL_DMA_Abort_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort_IT+0x9e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_DMA_Abort_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01a      	beq.n	8002654 <HAL_DMA_Abort_IT+0x98>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	@ (800269c <HAL_DMA_Abort_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d012      	beq.n	800264e <HAL_DMA_Abort_IT+0x92>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1c      	ldr	r2, [pc, #112]	@ (80026a0 <HAL_DMA_Abort_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00a      	beq.n	8002648 <HAL_DMA_Abort_IT+0x8c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <HAL_DMA_Abort_IT+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_DMA_Abort_IT+0x86>
 800263c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002640:	e00e      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002642:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002646:	e00b      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800264c:	e008      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800264e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002652:	e005      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002658:	e002      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265a:	2310      	movs	r3, #16
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265e:	2301      	movs	r3, #1
 8002660:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <HAL_DMA_Abort_IT+0xec>)
 8002662:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    } 
  }
  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020008 	.word	0x40020008
 8002694:	4002001c 	.word	0x4002001c
 8002698:	40020030 	.word	0x40020030
 800269c:	40020044 	.word	0x40020044
 80026a0:	40020058 	.word	0x40020058
 80026a4:	4002006c 	.word	0x4002006c
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	2204      	movs	r2, #4
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d04f      	beq.n	8002774 <HAL_DMA_IRQHandler+0xc8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04a      	beq.n	8002774 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a66      	ldr	r2, [pc, #408]	@ (800289c <HAL_DMA_IRQHandler+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d029      	beq.n	800275a <HAL_DMA_IRQHandler+0xae>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a65      	ldr	r2, [pc, #404]	@ (80028a0 <HAL_DMA_IRQHandler+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0xaa>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a63      	ldr	r2, [pc, #396]	@ (80028a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01a      	beq.n	8002750 <HAL_DMA_IRQHandler+0xa4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a62      	ldr	r2, [pc, #392]	@ (80028a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d012      	beq.n	800274a <HAL_DMA_IRQHandler+0x9e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a60      	ldr	r2, [pc, #384]	@ (80028ac <HAL_DMA_IRQHandler+0x200>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x98>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5f      	ldr	r2, [pc, #380]	@ (80028b0 <HAL_DMA_IRQHandler+0x204>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <HAL_DMA_IRQHandler+0x92>
 8002738:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800273c:	e00e      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800273e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002742:	e00b      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002744:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002748:	e008      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800274a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800274e:	e005      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002754:	e002      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002756:	2340      	movs	r3, #64	@ 0x40
 8002758:	e000      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800275a:	2304      	movs	r3, #4
 800275c:	4a55      	ldr	r2, [pc, #340]	@ (80028b4 <HAL_DMA_IRQHandler+0x208>)
 800275e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8094 	beq.w	8002892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002772:	e08e      	b.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	2202      	movs	r2, #2
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d056      	beq.n	8002832 <HAL_DMA_IRQHandler+0x186>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d051      	beq.n	8002832 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020a 	bic.w	r2, r2, #10
 80027aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a38      	ldr	r2, [pc, #224]	@ (800289c <HAL_DMA_IRQHandler+0x1f0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d029      	beq.n	8002812 <HAL_DMA_IRQHandler+0x166>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a37      	ldr	r2, [pc, #220]	@ (80028a0 <HAL_DMA_IRQHandler+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0x162>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a35      	ldr	r2, [pc, #212]	@ (80028a4 <HAL_DMA_IRQHandler+0x1f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x15c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a34      	ldr	r2, [pc, #208]	@ (80028a8 <HAL_DMA_IRQHandler+0x1fc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d012      	beq.n	8002802 <HAL_DMA_IRQHandler+0x156>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a32      	ldr	r2, [pc, #200]	@ (80028ac <HAL_DMA_IRQHandler+0x200>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x150>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a31      	ldr	r2, [pc, #196]	@ (80028b0 <HAL_DMA_IRQHandler+0x204>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d102      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x14a>
 80027f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027f4:	e00e      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 80027f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027fa:	e00b      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 80027fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002800:	e008      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002806:	e005      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800280c:	e002      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 800280e:	2320      	movs	r3, #32
 8002810:	e000      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002812:	2302      	movs	r3, #2
 8002814:	4a27      	ldr	r2, [pc, #156]	@ (80028b4 <HAL_DMA_IRQHandler+0x208>)
 8002816:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d034      	beq.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002830:	e02f      	b.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
    }
  }
  return;
 8002892:	bf00      	nop
 8002894:	bf00      	nop
}
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020008 	.word	0x40020008
 80028a0:	4002001c 	.word	0x4002001c
 80028a4:	40020030 	.word	0x40020030
 80028a8:	40020044 	.word	0x40020044
 80028ac:	40020058 	.word	0x40020058
 80028b0:	4002006c 	.word	0x4002006c
 80028b4:	40020000 	.word	0x40020000

080028b8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028c6:	b2db      	uxtb	r3, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f202 	lsl.w	r2, r1, r2
 80028ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d108      	bne.n	8002912 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002910:	e007      	b.n	8002922 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	60da      	str	r2, [r3, #12]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002936:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_FLASH_IRQHandler+0x22>
 8002942:	4b68      	ldr	r3, [pc, #416]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00e      	beq.n	800296c <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800294e:	4b66      	ldr	r3, [pc, #408]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002954:	4b64      	ldr	r3, [pc, #400]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002956:	f04f 32ff 	mov.w	r2, #4294967295
 800295a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800295c:	f000 f8f4 	bl	8002b48 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8cc 	bl	8002afe <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002966:	4b60      	ldr	r3, [pc, #384]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800296c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a0 	beq.w	8002aba <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800297a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 800297c:	2220      	movs	r2, #32
 800297e:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8097 	beq.w	8002aba <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800298c:	4b56      	ldr	r3, [pc, #344]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d12d      	bne.n	80029f2 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002996:	4b54      	ldr	r3, [pc, #336]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	4a52      	ldr	r2, [pc, #328]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 800299e:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80029a0:	4b51      	ldr	r3, [pc, #324]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80029a8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f89c 	bl	8002aec <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80029b4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029bc:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80029be:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80029c4:	4b47      	ldr	r3, [pc, #284]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	4a46      	ldr	r2, [pc, #280]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f909 	bl	8002be8 <FLASH_PageErase>
 80029d6:	e070      	b.n	8002aba <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80029e4:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f87e 	bl	8002aec <HAL_FLASH_EndOfOperationCallback>
 80029f0:	e063      	b.n	8002aba <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80029f2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d10c      	bne.n	8002a16 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80029fc:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	4a38      	ldr	r2, [pc, #224]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f000 f86f 	bl	8002aec <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002a0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e051      	b.n	8002aba <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002a16:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	4a32      	ldr	r2, [pc, #200]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a1e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002a20:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d024      	beq.n	8002a72 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002a28:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a30:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002a32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002a38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a3a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	0c02      	lsrs	r2, r0, #16
 8002a48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a4c:	0c0b      	lsrs	r3, r1, #16
 8002a4e:	4926      	ldr	r1, [pc, #152]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a50:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002a54:	4b23      	ldr	r3, [pc, #140]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002a60:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a66:	b293      	uxth	r3, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f850 	bl	8002b10 <FLASH_Program_HalfWord>
 8002a70:	e023      	b.n	8002aba <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002a72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d105      	bne.n	8002a88 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f833 	bl	8002aec <HAL_FLASH_EndOfOperationCallback>
 8002a86:	e011      	b.n	8002aac <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d106      	bne.n	8002aa0 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002a92:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	3b02      	subs	r3, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f827 	bl	8002aec <HAL_FLASH_EndOfOperationCallback>
 8002a9e:	e005      	b.n	8002aac <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	3b06      	subs	r3, #6
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f820 	bl	8002aec <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002aac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_FLASH_IRQHandler+0x1bc>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002aca:	f023 0307 	bic.w	r3, r3, #7
 8002ace:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	4a03      	ldr	r2, [pc, #12]	@ (8002ae4 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ad6:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002ada:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	200007f0 	.word	0x200007f0

08002aec <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <FLASH_Program_HalfWord+0x30>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <FLASH_Program_HalfWord+0x34>)
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <FLASH_Program_HalfWord+0x34>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	887a      	ldrh	r2, [r7, #2]
 8002b32:	801a      	strh	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	200007f0 	.word	0x200007f0
 8002b44:	40022000 	.word	0x40022000

08002b48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002b52:	4b23      	ldr	r3, [pc, #140]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b5e:	4b21      	ldr	r3, [pc, #132]	@ (8002be4 <FLASH_SetErrorCode+0x9c>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	4a1f      	ldr	r2, [pc, #124]	@ (8002be4 <FLASH_SetErrorCode+0x9c>)
 8002b68:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f043 0310 	orr.w	r3, r3, #16
 8002b70:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <FLASH_SetErrorCode+0x9c>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <FLASH_SetErrorCode+0x9c>)
 8002b88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002b92:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <FLASH_SetErrorCode+0x9c>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8002be4 <FLASH_SetErrorCode+0x9c>)
 8002ba8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a0c      	ldr	r2, [pc, #48]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f240 1201 	movw	r2, #257	@ 0x101
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d106      	bne.n	8002bce <FLASH_SetErrorCode+0x86>
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	61d3      	str	r3, [r2, #28]
}  
 8002bcc:	e002      	b.n	8002bd4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002bce:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <FLASH_SetErrorCode+0x98>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60d3      	str	r3, [r2, #12]
}  
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40022000 	.word	0x40022000
 8002be4:	200007f0 	.word	0x200007f0

08002be8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <FLASH_PageErase+0x38>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <FLASH_PageErase+0x3c>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <FLASH_PageErase+0x3c>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <FLASH_PageErase+0x3c>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <FLASH_PageErase+0x3c>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4a05      	ldr	r2, [pc, #20]	@ (8002c24 <FLASH_PageErase+0x3c>)
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c12:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	200007f0 	.word	0x200007f0
 8002c24:	40022000 	.word	0x40022000

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b08b      	sub	sp, #44	@ 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	e169      	b.n	8002f10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8158 	bne.w	8002f0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ec8 <HAL_GPIO_Init+0x2a0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d05e      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c64:	4a98      	ldr	r2, [pc, #608]	@ (8002ec8 <HAL_GPIO_Init+0x2a0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d875      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c6a:	4a98      	ldr	r2, [pc, #608]	@ (8002ecc <HAL_GPIO_Init+0x2a4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d058      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c70:	4a96      	ldr	r2, [pc, #600]	@ (8002ecc <HAL_GPIO_Init+0x2a4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d86f      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c76:	4a96      	ldr	r2, [pc, #600]	@ (8002ed0 <HAL_GPIO_Init+0x2a8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d052      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c7c:	4a94      	ldr	r2, [pc, #592]	@ (8002ed0 <HAL_GPIO_Init+0x2a8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d869      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c82:	4a94      	ldr	r2, [pc, #592]	@ (8002ed4 <HAL_GPIO_Init+0x2ac>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04c      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c88:	4a92      	ldr	r2, [pc, #584]	@ (8002ed4 <HAL_GPIO_Init+0x2ac>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d863      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c8e:	4a92      	ldr	r2, [pc, #584]	@ (8002ed8 <HAL_GPIO_Init+0x2b0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d046      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c94:	4a90      	ldr	r2, [pc, #576]	@ (8002ed8 <HAL_GPIO_Init+0x2b0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d85d      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c9a:	2b12      	cmp	r3, #18
 8002c9c:	d82a      	bhi.n	8002cf4 <HAL_GPIO_Init+0xcc>
 8002c9e:	2b12      	cmp	r3, #18
 8002ca0:	d859      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca8 <HAL_GPIO_Init+0x80>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002d23 	.word	0x08002d23
 8002cac:	08002cfd 	.word	0x08002cfd
 8002cb0:	08002d0f 	.word	0x08002d0f
 8002cb4:	08002d51 	.word	0x08002d51
 8002cb8:	08002d57 	.word	0x08002d57
 8002cbc:	08002d57 	.word	0x08002d57
 8002cc0:	08002d57 	.word	0x08002d57
 8002cc4:	08002d57 	.word	0x08002d57
 8002cc8:	08002d57 	.word	0x08002d57
 8002ccc:	08002d57 	.word	0x08002d57
 8002cd0:	08002d57 	.word	0x08002d57
 8002cd4:	08002d57 	.word	0x08002d57
 8002cd8:	08002d57 	.word	0x08002d57
 8002cdc:	08002d57 	.word	0x08002d57
 8002ce0:	08002d57 	.word	0x08002d57
 8002ce4:	08002d57 	.word	0x08002d57
 8002ce8:	08002d57 	.word	0x08002d57
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	4a79      	ldr	r2, [pc, #484]	@ (8002edc <HAL_GPIO_Init+0x2b4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cfa:	e02c      	b.n	8002d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	623b      	str	r3, [r7, #32]
          break;
 8002d02:	e029      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	623b      	str	r3, [r7, #32]
          break;
 8002d0c:	e024      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	3308      	adds	r3, #8
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e01f      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e01a      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e013      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d38:	2308      	movs	r3, #8
 8002d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	611a      	str	r2, [r3, #16]
          break;
 8002d42:	e009      	b.n	8002d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d44:	2308      	movs	r3, #8
 8002d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	615a      	str	r2, [r3, #20]
          break;
 8002d4e:	e003      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
          break;
 8002d54:	e000      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          break;
 8002d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2bff      	cmp	r3, #255	@ 0xff
 8002d5c:	d801      	bhi.n	8002d62 <HAL_GPIO_Init+0x13a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_Init+0x13e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2bff      	cmp	r3, #255	@ 0xff
 8002d6c:	d802      	bhi.n	8002d74 <HAL_GPIO_Init+0x14c>
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_GPIO_Init+0x152>
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	3b08      	subs	r3, #8
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	210f      	movs	r1, #15
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	431a      	orrs	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80b1 	beq.w	8002f0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002da8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dc0:	4a48      	ldr	r2, [pc, #288]	@ (8002ee4 <HAL_GPIO_Init+0x2bc>)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a40      	ldr	r2, [pc, #256]	@ (8002ee8 <HAL_GPIO_Init+0x2c0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3f      	ldr	r2, [pc, #252]	@ (8002eec <HAL_GPIO_Init+0x2c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00d      	beq.n	8002e10 <HAL_GPIO_Init+0x1e8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef0 <HAL_GPIO_Init+0x2c8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d007      	beq.n	8002e0c <HAL_GPIO_Init+0x1e4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef4 <HAL_GPIO_Init+0x2cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_GPIO_Init+0x1e0>
 8002e04:	2303      	movs	r3, #3
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e004      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e002      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e14:	2300      	movs	r3, #0
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	f002 0203 	and.w	r2, r2, #3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4093      	lsls	r3, r2
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e26:	492f      	ldr	r1, [pc, #188]	@ (8002ee4 <HAL_GPIO_Init+0x2bc>)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	492c      	ldr	r1, [pc, #176]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4928      	ldr	r1, [pc, #160]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4922      	ldr	r1, [pc, #136]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60cb      	str	r3, [r1, #12]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	491e      	ldr	r1, [pc, #120]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4918      	ldr	r1, [pc, #96]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4914      	ldr	r1, [pc, #80]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d021      	beq.n	8002efc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	490e      	ldr	r1, [pc, #56]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e021      	b.n	8002f0a <HAL_GPIO_Init+0x2e2>
 8002ec6:	bf00      	nop
 8002ec8:	10320000 	.word	0x10320000
 8002ecc:	10310000 	.word	0x10310000
 8002ed0:	10220000 	.word	0x10220000
 8002ed4:	10210000 	.word	0x10210000
 8002ed8:	10120000 	.word	0x10120000
 8002edc:	10110000 	.word	0x10110000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40010800 	.word	0x40010800
 8002eec:	40010c00 	.word	0x40010c00
 8002ef0:	40011000 	.word	0x40011000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_GPIO_Init+0x304>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <HAL_GPIO_Init+0x304>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f47f ae8e 	bne.w	8002c3c <HAL_GPIO_Init+0x14>
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	372c      	adds	r7, #44	@ 0x2c
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40010400 	.word	0x40010400

08002f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f40:	787b      	ldrb	r3, [r7, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f4c:	e003      	b.n	8002f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	041a      	lsls	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4013      	ands	r3, r2
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43d9      	mvns	r1, r3
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	400b      	ands	r3, r1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e12b      	b.n	80031fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe fdf2 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2224      	movs	r2, #36	@ 0x24
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f002 fd58 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8002ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a81      	ldr	r2, [pc, #516]	@ (8003208 <HAL_I2C_Init+0x274>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d807      	bhi.n	8003018 <HAL_I2C_Init+0x84>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a80      	ldr	r2, [pc, #512]	@ (800320c <HAL_I2C_Init+0x278>)
 800300c:	4293      	cmp	r3, r2
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e006      	b.n	8003026 <HAL_I2C_Init+0x92>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a7d      	ldr	r2, [pc, #500]	@ (8003210 <HAL_I2C_Init+0x27c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0e7      	b.n	80031fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a78      	ldr	r2, [pc, #480]	@ (8003214 <HAL_I2C_Init+0x280>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0c9b      	lsrs	r3, r3, #18
 8003038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a6a      	ldr	r2, [pc, #424]	@ (8003208 <HAL_I2C_Init+0x274>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d802      	bhi.n	8003068 <HAL_I2C_Init+0xd4>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	e009      	b.n	800307c <HAL_I2C_Init+0xe8>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	4a69      	ldr	r2, [pc, #420]	@ (8003218 <HAL_I2C_Init+0x284>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	3301      	adds	r3, #1
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800308e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	495c      	ldr	r1, [pc, #368]	@ (8003208 <HAL_I2C_Init+0x274>)
 8003098:	428b      	cmp	r3, r1
 800309a:	d819      	bhi.n	80030d0 <HAL_I2C_Init+0x13c>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e59      	subs	r1, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b0:	400b      	ands	r3, r1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_I2C_Init+0x138>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e59      	subs	r1, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	e051      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e04f      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <HAL_I2C_Init+0x168>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e58      	subs	r0, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e012      	b.n	8003122 <HAL_I2C_Init+0x18e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	0099      	lsls	r1, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Init+0x196>
 8003126:	2301      	movs	r3, #1
 8003128:	e022      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10e      	bne.n	8003150 <HAL_I2C_Init+0x1bc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1e58      	subs	r0, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	440b      	add	r3, r1
 8003140:	fbb0 f3f3 	udiv	r3, r0, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314e:	e00f      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0099      	lsls	r1, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	6809      	ldr	r1, [r1, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800319e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6911      	ldr	r1, [r2, #16]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	000186a0 	.word	0x000186a0
 800320c:	001e847f 	.word	0x001e847f
 8003210:	003d08ff 	.word	0x003d08ff
 8003214:	431bde83 	.word	0x431bde83
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d103      	bne.n	800323a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
 8003254:	4613      	mov	r3, r2
 8003256:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003258:	f7fe ffba 	bl	80021d0 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	f040 80e0 	bne.w	800342c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2319      	movs	r3, #25
 8003272:	2201      	movs	r2, #1
 8003274:	4970      	ldr	r1, [pc, #448]	@ (8003438 <HAL_I2C_Master_Transmit+0x1f4>)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f001 fe12 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
 8003284:	e0d3      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2C_Master_Transmit+0x50>
 8003290:	2302      	movs	r3, #2
 8003292:	e0cc      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ea>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d007      	beq.n	80032ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2221      	movs	r2, #33	@ 0x21
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2210      	movs	r2, #16
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	893a      	ldrh	r2, [r7, #8]
 80032ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4a50      	ldr	r2, [pc, #320]	@ (800343c <HAL_I2C_Master_Transmit+0x1f8>)
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032fc:	8979      	ldrh	r1, [r7, #10]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f001 fca2 	bl	8004c4c <I2C_MasterRequestWrite>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e08d      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003328:	e066      	b.n	80033f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	6a39      	ldr	r1, [r7, #32]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f001 fed0 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2b04      	cmp	r3, #4
 8003340:	d107      	bne.n	8003352 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06b      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d11b      	bne.n	80033cc <HAL_I2C_Master_Transmit+0x188>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d017      	beq.n	80033cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	6a39      	ldr	r1, [r7, #32]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f001 fec7 	bl	8005164 <I2C_WaitOnBTFFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d107      	bne.n	80033f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e01a      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d194      	bne.n	800332a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	00100002 	.word	0x00100002
 800343c:	ffff0000 	.word	0xffff0000

08003440 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003460:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b10      	cmp	r3, #16
 800346e:	d003      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0x38>
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b40      	cmp	r3, #64	@ 0x40
 8003474:	f040 80c1 	bne.w	80035fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <HAL_I2C_EV_IRQHandler+0x6e>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003498:	d003      	beq.n	80034a2 <HAL_I2C_EV_IRQHandler+0x62>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80034a0:	d101      	bne.n	80034a6 <HAL_I2C_EV_IRQHandler+0x66>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_I2C_EV_IRQHandler+0x68>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f000 8132 	beq.w	8003712 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00c      	beq.n	80034d2 <HAL_I2C_EV_IRQHandler+0x92>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	0a5b      	lsrs	r3, r3, #9
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f001 fef5 	bl	80052b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fd99 	bl	8004002 <I2C_Master_SB>
 80034d0:	e092      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	0a5b      	lsrs	r3, r3, #9
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fe0e 	bl	800410c <I2C_Master_ADD10>
 80034f0:	e082      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0xd2>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fe27 	bl	800415e <I2C_Master_ADDR>
 8003510:	e072      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03b      	beq.n	8003596 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352c:	f000 80f3 	beq.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	09db      	lsrs	r3, r3, #7
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00f      	beq.n	800355c <HAL_I2C_EV_IRQHandler+0x11c>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_I2C_EV_IRQHandler+0x11c>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9f1 	bl	800393c <I2C_MasterTransmit_TXE>
 800355a:	e04d      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80d6 	beq.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0a5b      	lsrs	r3, r3, #9
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80cf 	beq.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003578:	7bbb      	ldrb	r3, [r7, #14]
 800357a:	2b21      	cmp	r3, #33	@ 0x21
 800357c:	d103      	bne.n	8003586 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa78 	bl	8003a74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003584:	e0c7      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b40      	cmp	r3, #64	@ 0x40
 800358a:	f040 80c4 	bne.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fae6 	bl	8003b60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003594:	e0bf      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a4:	f000 80b7 	beq.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00f      	beq.n	80035d4 <HAL_I2C_EV_IRQHandler+0x194>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_I2C_EV_IRQHandler+0x194>
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d103      	bne.n	80035d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb5f 	bl	8003c90 <I2C_MasterReceive_RXNE>
 80035d2:	e011      	b.n	80035f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 809a 	beq.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	0a5b      	lsrs	r3, r3, #9
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8093 	beq.w	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fc15 	bl	8003e20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f6:	e08e      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
 80035f8:	e08d      	b.n	8003716 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	e007      	b.n	800361c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <HAL_I2C_EV_IRQHandler+0x20e>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	0a5b      	lsrs	r3, r3, #9
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 ffe0 	bl	800460c <I2C_Slave_ADDR>
 800364c:	e066      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x22e>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	0a5b      	lsrs	r3, r3, #9
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 f81a 	bl	80046a0 <I2C_Slave_STOPF>
 800366c:	e056      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800366e:	7bbb      	ldrb	r3, [r7, #14]
 8003670:	2b21      	cmp	r3, #33	@ 0x21
 8003672:	d002      	beq.n	800367a <HAL_I2C_EV_IRQHandler+0x23a>
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	2b29      	cmp	r3, #41	@ 0x29
 8003678:	d125      	bne.n	80036c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	09db      	lsrs	r3, r3, #7
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00f      	beq.n	80036a6 <HAL_I2C_EV_IRQHandler+0x266>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	0a9b      	lsrs	r3, r3, #10
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_I2C_EV_IRQHandler+0x266>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fef8 	bl	8004494 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036a4:	e039      	b.n	800371a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d033      	beq.n	800371a <HAL_I2C_EV_IRQHandler+0x2da>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	0a5b      	lsrs	r3, r3, #9
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02d      	beq.n	800371a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 ff25 	bl	800450e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c4:	e029      	b.n	800371a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00f      	beq.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	0a9b      	lsrs	r3, r3, #10
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 ff2f 	bl	800454e <I2C_SlaveReceive_RXNE>
 80036f0:	e014      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00e      	beq.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	0a5b      	lsrs	r3, r3, #9
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 ff5d 	bl	80045ca <I2C_SlaveReceive_BTF>
 8003710:	e004      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800371a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b08a      	sub	sp, #40	@ 0x28
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003744:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d016      	beq.n	8003780 <HAL_I2C_ER_IRQHandler+0x5e>
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d010      	beq.n	8003780 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800376e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	0a5b      	lsrs	r3, r3, #9
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <HAL_I2C_ER_IRQHandler+0x88>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80037a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	0a9b      	lsrs	r3, r3, #10
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d03f      	beq.n	8003836 <HAL_I2C_ER_IRQHandler+0x114>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d039      	beq.n	8003836 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80037c2:	7efb      	ldrb	r3, [r7, #27]
 80037c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037dc:	7ebb      	ldrb	r3, [r7, #26]
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d112      	bne.n	8003808 <HAL_I2C_ER_IRQHandler+0xe6>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10f      	bne.n	8003808 <HAL_I2C_ER_IRQHandler+0xe6>
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	2b21      	cmp	r3, #33	@ 0x21
 80037ec:	d008      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b29      	cmp	r3, #41	@ 0x29
 80037f2:	d005      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0xde>
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	2b28      	cmp	r3, #40	@ 0x28
 80037f8:	d106      	bne.n	8003808 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b21      	cmp	r3, #33	@ 0x21
 80037fe:	d103      	bne.n	8003808 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f001 f87d 	bl	8004900 <I2C_Slave_AF>
 8003806:	e016      	b.n	8003836 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003810:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800381a:	7efb      	ldrb	r3, [r7, #27]
 800381c:	2b10      	cmp	r3, #16
 800381e:	d002      	beq.n	8003826 <HAL_I2C_ER_IRQHandler+0x104>
 8003820:	7efb      	ldrb	r3, [r7, #27]
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d107      	bne.n	8003836 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003834:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	0adb      	lsrs	r3, r3, #11
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00e      	beq.n	8003860 <HAL_I2C_ER_IRQHandler+0x13e>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800385e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f001 f8b8 	bl	80049e8 <I2C_ITError>
  }
}
 8003878:	bf00      	nop
 800387a:	3728      	adds	r7, #40	@ 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
 80038d4:	4613      	mov	r3, r2
 80038d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003952:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d150      	bne.n	8003a04 <I2C_MasterTransmit_TXE+0xc8>
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b21      	cmp	r3, #33	@ 0x21
 8003966:	d14d      	bne.n	8003a04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d01d      	beq.n	80039aa <I2C_MasterTransmit_TXE+0x6e>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b20      	cmp	r3, #32
 8003972:	d01a      	beq.n	80039aa <I2C_MasterTransmit_TXE+0x6e>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800397a:	d016      	beq.n	80039aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800398a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2211      	movs	r2, #17
 8003990:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff6c 	bl	8003880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039a8:	e060      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d107      	bne.n	80039f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff81 	bl	80038f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039f2:	e03b      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff3f 	bl	8003880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a02:	e033      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b21      	cmp	r3, #33	@ 0x21
 8003a08:	d005      	beq.n	8003a16 <I2C_MasterTransmit_TXE+0xda>
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d12d      	bne.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b22      	cmp	r3, #34	@ 0x22
 8003a14:	d12a      	bne.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a30:	e01c      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d103      	bne.n	8003a46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f88e 	bl	8003b60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a44:	e012      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a6a:	e7ff      	b.n	8003a6c <I2C_MasterTransmit_TXE+0x130>
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b21      	cmp	r3, #33	@ 0x21
 8003a8c:	d164      	bne.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003abc:	e04c      	b.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d01d      	beq.n	8003b00 <I2C_MasterTransmit_BTF+0x8c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d01a      	beq.n	8003b00 <I2C_MasterTransmit_BTF+0x8c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ad0:	d016      	beq.n	8003b00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ae0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2211      	movs	r2, #17
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fec1 	bl	8003880 <HAL_I2C_MasterTxCpltCallback>
}
 8003afe:	e02b      	b.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b40      	cmp	r3, #64	@ 0x40
 8003b38:	d107      	bne.n	8003b4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fed6 	bl	80038f4 <HAL_I2C_MemTxCpltCallback>
}
 8003b48:	e006      	b.n	8003b58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fe94 	bl	8003880 <HAL_I2C_MasterTxCpltCallback>
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11d      	bne.n	8003bb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10b      	bne.n	8003b98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003b96:	e077      	b.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	121b      	asrs	r3, r3, #8
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bb2:	e069      	b.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10b      	bne.n	8003bd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bd2:	e059      	b.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d152      	bne.n	8003c82 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b22      	cmp	r3, #34	@ 0x22
 8003be0:	d10d      	bne.n	8003bfe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bfc:	e044      	b.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b21      	cmp	r3, #33	@ 0x21
 8003c0c:	d112      	bne.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c32:	e029      	b.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d124      	bne.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b21      	cmp	r3, #33	@ 0x21
 8003c42:	d121      	bne.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c52:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fe3a 	bl	80038f4 <HAL_I2C_MemTxCpltCallback>
}
 8003c80:	e002      	b.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff faca 	bl	800321c <I2C_Flush_DR>
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b22      	cmp	r3, #34	@ 0x22
 8003ca2:	f040 80b9 	bne.w	8003e18 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d921      	bls.n	8003cfe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	f040 8096 	bne.w	8003e18 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003cfc:	e08c      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d07f      	beq.n	8003e06 <I2C_MasterReceive_RXNE+0x176>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d002      	beq.n	8003d12 <I2C_MasterReceive_RXNE+0x82>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d179      	bne.n	8003e06 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f001 fa6e 	bl	80051f4 <I2C_WaitOnSTOPRequestThroughIT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d14c      	bne.n	8003db8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d10a      	bne.n	8003d8e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fdbd 	bl	8003906 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d8c:	e044      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d002      	beq.n	8003da2 <I2C_MasterReceive_RXNE+0x112>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d103      	bne.n	8003daa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003da8:	e002      	b.n	8003db0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2212      	movs	r2, #18
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fd6e 	bl	8003892 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003db6:	e02f      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fd8a 	bl	8003918 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e04:	e008      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e14:	605a      	str	r2, [r3, #4]
}
 8003e16:	e7ff      	b.n	8003e18 <I2C_MasterReceive_RXNE+0x188>
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e6e:	e0c4      	b.n	8003ffa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d129      	bne.n	8003ece <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d00a      	beq.n	8003ea6 <I2C_MasterReceive_BTF+0x86>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d007      	beq.n	8003ea6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ecc:	e095      	b.n	8003ffa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d17d      	bne.n	8003fd4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d002      	beq.n	8003ee4 <I2C_MasterReceive_BTF+0xc4>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d108      	bne.n	8003ef6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e016      	b.n	8003f24 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d002      	beq.n	8003f02 <I2C_MasterReceive_BTF+0xe2>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d108      	bne.n	8003f14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e007      	b.n	8003f24 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d10a      	bne.n	8003faa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fcaf 	bl	8003906 <HAL_I2C_MemRxCpltCallback>
}
 8003fa8:	e027      	b.n	8003ffa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d002      	beq.n	8003fbe <I2C_MasterReceive_BTF+0x19e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d103      	bne.n	8003fc6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fc4:	e002      	b.n	8003fcc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2212      	movs	r2, #18
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fc60 	bl	8003892 <HAL_I2C_MasterRxCpltCallback>
}
 8003fd2:	e012      	b.n	8003ffa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b40      	cmp	r3, #64	@ 0x40
 8004014:	d117      	bne.n	8004046 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800402e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004030:	e067      	b.n	8004102 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]
}
 8004044:	e05d      	b.n	8004102 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800404e:	d133      	bne.n	80040b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b21      	cmp	r3, #33	@ 0x21
 800405a:	d109      	bne.n	8004070 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800406c:	611a      	str	r2, [r3, #16]
 800406e:	e008      	b.n	8004082 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	b2da      	uxtb	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <I2C_Master_SB+0x92>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d032      	beq.n	8004102 <I2C_Master_SB+0x100>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02d      	beq.n	8004102 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b4:	605a      	str	r2, [r3, #4]
}
 80040b6:	e024      	b.n	8004102 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10e      	bne.n	80040de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	11db      	asrs	r3, r3, #7
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 0306 	and.w	r3, r3, #6
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f063 030f 	orn	r3, r3, #15
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
}
 80040dc:	e011      	b.n	8004102 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10d      	bne.n	8004102 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	11db      	asrs	r3, r3, #7
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 0306 	and.w	r3, r3, #6
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f063 030e 	orn	r3, r3, #14
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	b2da      	uxtb	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <I2C_Master_ADD10+0x26>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d108      	bne.n	8004144 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <I2C_Master_ADD10+0x48>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004152:	605a      	str	r2, [r3, #4]
  }
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800415e:	b480      	push	{r7}
 8004160:	b091      	sub	sp, #68	@ 0x44
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800416c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b22      	cmp	r3, #34	@ 0x22
 8004186:	f040 8174 	bne.w	8004472 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <I2C_Master_ADDR+0x54>
 8004192:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004196:	2b40      	cmp	r3, #64	@ 0x40
 8004198:	d10b      	bne.n	80041b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	633b      	str	r3, [r7, #48]	@ 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	e16b      	b.n	800448a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d11d      	bne.n	80041f6 <I2C_Master_ADDR+0x98>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041c2:	d118      	bne.n	80041f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80041f4:	e149      	b.n	800448a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d113      	bne.n	8004228 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e120      	b.n	800446a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	f040 808a 	bne.w	8004348 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800423a:	d137      	bne.n	80042ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800424a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800425a:	d113      	bne.n	8004284 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	e0f2      	b.n	800446a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e0de      	b.n	800446a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d02e      	beq.n	8004310 <I2C_Master_ADDR+0x1b2>
 80042b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d02b      	beq.n	8004310 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ba:	2b12      	cmp	r3, #18
 80042bc:	d102      	bne.n	80042c4 <I2C_Master_ADDR+0x166>
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d125      	bne.n	8004310 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d00e      	beq.n	80042e8 <I2C_Master_ADDR+0x18a>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d00b      	beq.n	80042e8 <I2C_Master_ADDR+0x18a>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d008      	beq.n	80042e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e007      	b.n	80042f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	e0ac      	b.n	800446a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e090      	b.n	800446a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d158      	bne.n	8004404 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004354:	2b04      	cmp	r3, #4
 8004356:	d021      	beq.n	800439c <I2C_Master_ADDR+0x23e>
 8004358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435a:	2b02      	cmp	r3, #2
 800435c:	d01e      	beq.n	800439c <I2C_Master_ADDR+0x23e>
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	2b10      	cmp	r3, #16
 8004362:	d01b      	beq.n	800439c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004372:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e012      	b.n	80043c2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d0:	d14b      	bne.n	800446a <I2C_Master_ADDR+0x30c>
 80043d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043d8:	d00b      	beq.n	80043f2 <I2C_Master_ADDR+0x294>
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d008      	beq.n	80043f2 <I2C_Master_ADDR+0x294>
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d005      	beq.n	80043f2 <I2C_Master_ADDR+0x294>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d002      	beq.n	80043f2 <I2C_Master_ADDR+0x294>
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d13b      	bne.n	800446a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	e032      	b.n	800446a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004412:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004422:	d117      	bne.n	8004454 <I2C_Master_ADDR+0x2f6>
 8004424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004426:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800442a:	d00b      	beq.n	8004444 <I2C_Master_ADDR+0x2e6>
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	2b01      	cmp	r3, #1
 8004430:	d008      	beq.n	8004444 <I2C_Master_ADDR+0x2e6>
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	2b08      	cmp	r3, #8
 8004436:	d005      	beq.n	8004444 <I2C_Master_ADDR+0x2e6>
 8004438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443a:	2b10      	cmp	r3, #16
 800443c:	d002      	beq.n	8004444 <I2C_Master_ADDR+0x2e6>
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	2b20      	cmp	r3, #32
 8004442:	d107      	bne.n	8004454 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004452:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004470:	e00b      	b.n	800448a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
}
 8004488:	e7ff      	b.n	800448a <I2C_Master_ADDR+0x32c>
 800448a:	bf00      	nop
 800448c:	3744      	adds	r7, #68	@ 0x44
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02b      	beq.n	8004506 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d114      	bne.n	8004506 <I2C_SlaveTransmit_TXE+0x72>
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b29      	cmp	r3, #41	@ 0x29
 80044e0:	d111      	bne.n	8004506 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2221      	movs	r2, #33	@ 0x21
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2228      	movs	r2, #40	@ 0x28
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff f9cf 	bl	80038a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d011      	beq.n	8004544 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02c      	beq.n	80045c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d114      	bne.n	80045c2 <I2C_SlaveReceive_RXNE+0x74>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b2a      	cmp	r3, #42	@ 0x2a
 800459c:	d111      	bne.n	80045c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2222      	movs	r2, #34	@ 0x22
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2228      	movs	r2, #40	@ 0x28
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff f97a 	bl	80038b6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d012      	beq.n	8004602 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004626:	2b28      	cmp	r3, #40	@ 0x28
 8004628:	d127      	bne.n	800467a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004638:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	09db      	lsrs	r3, r3, #7
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	81bb      	strh	r3, [r7, #12]
 800465c:	e002      	b.n	8004664 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800466c:	89ba      	ldrh	r2, [r7, #12]
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff f928 	bl	80038c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004678:	e00e      	b.n	8004698 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046fc:	d172      	bne.n	80047e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b22      	cmp	r3, #34	@ 0x22
 8004702:	d002      	beq.n	800470a <I2C_Slave_STOPF+0x6a>
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b2a      	cmp	r3, #42	@ 0x2a
 8004708:	d135      	bne.n	8004776 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800473c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe f8b8 	bl	80028b8 <HAL_DMA_GetState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d049      	beq.n	80047e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	4a69      	ldr	r2, [pc, #420]	@ (80048f8 <I2C_Slave_STOPF+0x258>)
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd ff2e 	bl	80025bc <HAL_DMA_Abort_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03d      	beq.n	80047e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004774:	e035      	b.n	80047e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe f882 	bl	80028b8 <HAL_DMA_GetState>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d014      	beq.n	80047e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047be:	4a4e      	ldr	r2, [pc, #312]	@ (80048f8 <I2C_Slave_STOPF+0x258>)
 80047c0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd fef8 	bl	80025bc <HAL_DMA_Abort_IT>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047dc:	4610      	mov	r0, r2
 80047de:	4798      	blx	r3
 80047e0:	e000      	b.n	80047e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d03e      	beq.n	800486c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d112      	bne.n	8004822 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b40      	cmp	r3, #64	@ 0x40
 800482e:	d112      	bne.n	8004856 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	f043 0204 	orr.w	r2, r3, #4
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8b7 	bl	80049e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800487a:	e039      	b.n	80048f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004880:	d109      	bne.n	8004896 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2228      	movs	r2, #40	@ 0x28
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff f810 	bl	80038b6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b28      	cmp	r3, #40	@ 0x28
 80048a0:	d111      	bne.n	80048c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <I2C_Slave_STOPF+0x25c>)
 80048a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff f80f 	bl	80038e2 <HAL_I2C_ListenCpltCallback>
}
 80048c4:	e014      	b.n	80048f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	2b22      	cmp	r3, #34	@ 0x22
 80048cc:	d002      	beq.n	80048d4 <I2C_Slave_STOPF+0x234>
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b22      	cmp	r3, #34	@ 0x22
 80048d2:	d10d      	bne.n	80048f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fe ffe3 	bl	80038b6 <HAL_I2C_SlaveRxCpltCallback>
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08004d51 	.word	0x08004d51
 80048fc:	ffff0000 	.word	0xffff0000

08004900 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d002      	beq.n	8004922 <I2C_Slave_AF+0x22>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b20      	cmp	r3, #32
 8004920:	d129      	bne.n	8004976 <I2C_Slave_AF+0x76>
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b28      	cmp	r3, #40	@ 0x28
 8004926:	d126      	bne.n	8004976 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a2e      	ldr	r2, [pc, #184]	@ (80049e4 <I2C_Slave_AF+0xe4>)
 800492c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800493c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004946:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004956:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fe ffb7 	bl	80038e2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004974:	e031      	b.n	80049da <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b21      	cmp	r3, #33	@ 0x21
 800497a:	d129      	bne.n	80049d0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a19      	ldr	r2, [pc, #100]	@ (80049e4 <I2C_Slave_AF+0xe4>)
 8004980:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2221      	movs	r2, #33	@ 0x21
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fe fc2a 	bl	800321c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fe ff6b 	bl	80038a4 <HAL_I2C_SlaveTxCpltCallback>
}
 80049ce:	e004      	b.n	80049da <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	ffff0000 	.word	0xffff0000

080049e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a00:	7bbb      	ldrb	r3, [r7, #14]
 8004a02:	2b10      	cmp	r3, #16
 8004a04:	d002      	beq.n	8004a0c <I2C_ITError+0x24>
 8004a06:	7bbb      	ldrb	r3, [r7, #14]
 8004a08:	2b40      	cmp	r3, #64	@ 0x40
 8004a0a:	d10a      	bne.n	8004a22 <I2C_ITError+0x3a>
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b22      	cmp	r3, #34	@ 0x22
 8004a10:	d107      	bne.n	8004a22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a28:	2b28      	cmp	r3, #40	@ 0x28
 8004a2a:	d107      	bne.n	8004a3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2228      	movs	r2, #40	@ 0x28
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a3a:	e015      	b.n	8004a68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a4a:	d00a      	beq.n	8004a62 <I2C_ITError+0x7a>
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b60      	cmp	r3, #96	@ 0x60
 8004a50:	d007      	beq.n	8004a62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a76:	d162      	bne.n	8004b3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d020      	beq.n	8004ad8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004c44 <I2C_ITError+0x25c>)
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fd8a 	bl	80025bc <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8089 	beq.w	8004bc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4798      	blx	r3
 8004ad6:	e074      	b.n	8004bc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	4a59      	ldr	r2, [pc, #356]	@ (8004c44 <I2C_ITError+0x25c>)
 8004ade:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd fd69 	bl	80025bc <HAL_DMA_Abort_IT>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d068      	beq.n	8004bc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d10b      	bne.n	8004b16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4798      	blx	r3
 8004b3c:	e041      	b.n	8004bc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b60      	cmp	r3, #96	@ 0x60
 8004b48:	d125      	bne.n	8004b96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b62:	2b40      	cmp	r3, #64	@ 0x40
 8004b64:	d10b      	bne.n	8004b7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fe fecb 	bl	800392a <HAL_I2C_AbortCpltCallback>
 8004b94:	e015      	b.n	8004bc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b40      	cmp	r3, #64	@ 0x40
 8004ba2:	d10b      	bne.n	8004bbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fe feab 	bl	8003918 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bfe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d113      	bne.n	8004c3c <I2C_ITError+0x254>
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b28      	cmp	r3, #40	@ 0x28
 8004c18:	d110      	bne.n	8004c3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c48 <I2C_ITError+0x260>)
 8004c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe fe53 	bl	80038e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	08004d51 	.word	0x08004d51
 8004c48:	ffff0000 	.word	0xffff0000

08004c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d006      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d003      	beq.n	8004c76 <I2C_MasterRequestWrite+0x2a>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e00b      	b.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d107      	bne.n	8004ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f8f7 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc6:	d103      	bne.n	8004cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e035      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cdc:	d108      	bne.n	8004cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	e01b      	b.n	8004d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cf0:	897b      	ldrh	r3, [r7, #10]
 8004cf2:	11db      	asrs	r3, r3, #7
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f063 030f 	orn	r3, r3, #15
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	490e      	ldr	r1, [pc, #56]	@ (8004d48 <I2C_MasterRequestWrite+0xfc>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f940 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e010      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4907      	ldr	r1, [pc, #28]	@ (8004d4c <I2C_MasterRequestWrite+0x100>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f930 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	00010008 	.word	0x00010008
 8004d4c:	00010002 	.word	0x00010002

08004d50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e98 <I2C_DMAAbort+0x148>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	08db      	lsrs	r3, r3, #3
 8004d70:	4a4a      	ldr	r2, [pc, #296]	@ (8004e9c <I2C_DMAAbort+0x14c>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0a1a      	lsrs	r2, r3, #8
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	00da      	lsls	r2, r3, #3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004d96:	e00a      	b.n	8004dae <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dac:	d0ea      	beq.n	8004d84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	2200      	movs	r2, #0
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	2200      	movs	r2, #0
 8004dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ddc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df0:	2200      	movs	r2, #0
 8004df2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	2200      	movs	r2, #0
 8004e02:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b60      	cmp	r3, #96	@ 0x60
 8004e1e:	d10e      	bne.n	8004e3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f7fe fd77 	bl	800392a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e3c:	e027      	b.n	8004e8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e44:	2b28      	cmp	r3, #40	@ 0x28
 8004e46:	d117      	bne.n	8004e78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2228      	movs	r2, #40	@ 0x28
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e76:	e007      	b.n	8004e88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e88:	6978      	ldr	r0, [r7, #20]
 8004e8a:	f7fe fd45 	bl	8003918 <HAL_I2C_ErrorCallback>
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000008 	.word	0x20000008
 8004e9c:	14f8b589 	.word	0x14f8b589

08004ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb0:	e048      	b.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d044      	beq.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fd f989 	bl	80021d0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d139      	bne.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10d      	bne.n	8004ef6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	e00c      	b.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	43da      	mvns	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d116      	bne.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e023      	b.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10d      	bne.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	43da      	mvns	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	e00c      	b.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	43da      	mvns	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d093      	beq.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa2:	e071      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb2:	d123      	bne.n	8004ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e067      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d041      	beq.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fd f8e4 	bl	80021d0 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d136      	bne.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10c      	bne.n	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	43da      	mvns	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4013      	ands	r3, r2
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e00b      	b.n	8005056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	43da      	mvns	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e021      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10c      	bne.n	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	43da      	mvns	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e00b      	b.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f af6d 	bne.w	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e0:	e034      	b.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8b8 	bl	8005258 <I2C_IsAcknowledgeFailed>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e034      	b.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d028      	beq.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fd f869 	bl	80021d0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11d      	bne.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b80      	cmp	r3, #128	@ 0x80
 800511c:	d016      	beq.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b80      	cmp	r3, #128	@ 0x80
 8005158:	d1c3      	bne.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005170:	e034      	b.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f870 	bl	8005258 <I2C_IsAcknowledgeFailed>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e034      	b.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d028      	beq.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fd f821 	bl	80021d0 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11d      	bne.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d016      	beq.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e007      	b.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d1c3      	bne.n	8005172 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005200:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0a1a      	lsrs	r2, r3, #8
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b01      	subs	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e008      	b.n	8005244 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800523c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005240:	d0e9      	beq.n	8005216 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000008 	.word	0x20000008
 8005254:	14f8b589 	.word	0x14f8b589

08005258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d11b      	bne.n	80052a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	f043 0204 	orr.w	r2, r3, #4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80052c4:	d103      	bne.n	80052ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052cc:	e007      	b.n	80052de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80052d6:	d102      	bne.n	80052de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2208      	movs	r2, #8
 80052dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80052ec:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <HAL_PWR_PVD_IRQHandler+0x20>)
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80052f8:	f000 f808 	bl	800530c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80052fc:	4b02      	ldr	r3, [pc, #8]	@ (8005308 <HAL_PWR_PVD_IRQHandler+0x20>)
 80052fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005302:	615a      	str	r2, [r3, #20]
  }
}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40010400 	.word	0x40010400

0800530c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e272      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8087 	beq.w	8005446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005338:	4b92      	ldr	r3, [pc, #584]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b04      	cmp	r3, #4
 8005342:	d00c      	beq.n	800535e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005344:	4b8f      	ldr	r3, [pc, #572]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d112      	bne.n	8005376 <HAL_RCC_OscConfig+0x5e>
 8005350:	4b8c      	ldr	r3, [pc, #560]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535c:	d10b      	bne.n	8005376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535e:	4b89      	ldr	r3, [pc, #548]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d06c      	beq.n	8005444 <HAL_RCC_OscConfig+0x12c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d168      	bne.n	8005444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e24c      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537e:	d106      	bne.n	800538e <HAL_RCC_OscConfig+0x76>
 8005380:	4b80      	ldr	r3, [pc, #512]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a7f      	ldr	r2, [pc, #508]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e02e      	b.n	80053ec <HAL_RCC_OscConfig+0xd4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x98>
 8005396:	4b7b      	ldr	r3, [pc, #492]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7a      	ldr	r2, [pc, #488]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 800539c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4b78      	ldr	r3, [pc, #480]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a77      	ldr	r2, [pc, #476]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	e01d      	b.n	80053ec <HAL_RCC_OscConfig+0xd4>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0xbc>
 80053ba:	4b72      	ldr	r3, [pc, #456]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a71      	ldr	r2, [pc, #452]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0xd4>
 80053d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b68      	ldr	r3, [pc, #416]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a67      	ldr	r2, [pc, #412]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80053e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d013      	beq.n	800541c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fc feec 	bl	80021d0 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053fc:	f7fc fee8 	bl	80021d0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	@ 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e200      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	4b5d      	ldr	r3, [pc, #372]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0xe4>
 800541a:	e014      	b.n	8005446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fc fed8 	bl	80021d0 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005424:	f7fc fed4 	bl	80021d0 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	@ 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e1ec      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005436:	4b53      	ldr	r3, [pc, #332]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x10c>
 8005442:	e000      	b.n	8005446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d063      	beq.n	800551a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005452:	4b4c      	ldr	r3, [pc, #304]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800545e:	4b49      	ldr	r3, [pc, #292]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 030c 	and.w	r3, r3, #12
 8005466:	2b08      	cmp	r3, #8
 8005468:	d11c      	bne.n	80054a4 <HAL_RCC_OscConfig+0x18c>
 800546a:	4b46      	ldr	r3, [pc, #280]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d116      	bne.n	80054a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005476:	4b43      	ldr	r3, [pc, #268]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_RCC_OscConfig+0x176>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d001      	beq.n	800548e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e1c0      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548e:	4b3d      	ldr	r3, [pc, #244]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4939      	ldr	r1, [pc, #228]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a2:	e03a      	b.n	800551a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ac:	4b36      	ldr	r3, [pc, #216]	@ (8005588 <HAL_RCC_OscConfig+0x270>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fc fe8d 	bl	80021d0 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ba:	f7fc fe89 	bl	80021d0 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e1a1      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4927      	ldr	r1, [pc, #156]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
 80054ec:	e015      	b.n	800551a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <HAL_RCC_OscConfig+0x270>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fc fe6c 	bl	80021d0 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fc:	f7fc fe68 	bl	80021d0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e180      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550e:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d03a      	beq.n	800559c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d019      	beq.n	8005562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552e:	4b17      	ldr	r3, [pc, #92]	@ (800558c <HAL_RCC_OscConfig+0x274>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005534:	f7fc fe4c 	bl	80021d0 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800553c:	f7fc fe48 	bl	80021d0 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e160      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554e:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <HAL_RCC_OscConfig+0x26c>)
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800555a:	2001      	movs	r0, #1
 800555c:	f000 faba 	bl	8005ad4 <RCC_Delay>
 8005560:	e01c      	b.n	800559c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005562:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCC_OscConfig+0x274>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005568:	f7fc fe32 	bl	80021d0 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556e:	e00f      	b.n	8005590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005570:	f7fc fe2e 	bl	80021d0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d908      	bls.n	8005590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e146      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	42420000 	.word	0x42420000
 800558c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005590:	4b92      	ldr	r3, [pc, #584]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e9      	bne.n	8005570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a6 	beq.w	80056f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ae:	4b8b      	ldr	r3, [pc, #556]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	4b88      	ldr	r3, [pc, #544]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	4a87      	ldr	r2, [pc, #540]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	61d3      	str	r3, [r2, #28]
 80055c6:	4b85      	ldr	r3, [pc, #532]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d2:	2301      	movs	r3, #1
 80055d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d6:	4b82      	ldr	r3, [pc, #520]	@ (80057e0 <HAL_RCC_OscConfig+0x4c8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d118      	bne.n	8005614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e2:	4b7f      	ldr	r3, [pc, #508]	@ (80057e0 <HAL_RCC_OscConfig+0x4c8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7e      	ldr	r2, [pc, #504]	@ (80057e0 <HAL_RCC_OscConfig+0x4c8>)
 80055e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ee:	f7fc fdef 	bl	80021d0 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f6:	f7fc fdeb 	bl	80021d0 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b64      	cmp	r3, #100	@ 0x64
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e103      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	4b75      	ldr	r3, [pc, #468]	@ (80057e0 <HAL_RCC_OscConfig+0x4c8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d106      	bne.n	800562a <HAL_RCC_OscConfig+0x312>
 800561c:	4b6f      	ldr	r3, [pc, #444]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	4a6e      	ldr	r2, [pc, #440]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	6213      	str	r3, [r2, #32]
 8005628:	e02d      	b.n	8005686 <HAL_RCC_OscConfig+0x36e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0x334>
 8005632:	4b6a      	ldr	r3, [pc, #424]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	4a69      	ldr	r2, [pc, #420]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	6213      	str	r3, [r2, #32]
 800563e:	4b67      	ldr	r3, [pc, #412]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	4a66      	ldr	r2, [pc, #408]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	6213      	str	r3, [r2, #32]
 800564a:	e01c      	b.n	8005686 <HAL_RCC_OscConfig+0x36e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b05      	cmp	r3, #5
 8005652:	d10c      	bne.n	800566e <HAL_RCC_OscConfig+0x356>
 8005654:	4b61      	ldr	r3, [pc, #388]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4a60      	ldr	r2, [pc, #384]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 800565a:	f043 0304 	orr.w	r3, r3, #4
 800565e:	6213      	str	r3, [r2, #32]
 8005660:	4b5e      	ldr	r3, [pc, #376]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4a5d      	ldr	r2, [pc, #372]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	6213      	str	r3, [r2, #32]
 800566c:	e00b      	b.n	8005686 <HAL_RCC_OscConfig+0x36e>
 800566e:	4b5b      	ldr	r3, [pc, #364]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4a5a      	ldr	r2, [pc, #360]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	6213      	str	r3, [r2, #32]
 800567a:	4b58      	ldr	r3, [pc, #352]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4a57      	ldr	r2, [pc, #348]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005680:	f023 0304 	bic.w	r3, r3, #4
 8005684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d015      	beq.n	80056ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568e:	f7fc fd9f 	bl	80021d0 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005694:	e00a      	b.n	80056ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fc fd9b 	bl	80021d0 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e0b1      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ac:	4b4b      	ldr	r3, [pc, #300]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0ee      	beq.n	8005696 <HAL_RCC_OscConfig+0x37e>
 80056b8:	e014      	b.n	80056e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ba:	f7fc fd89 	bl	80021d0 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c2:	f7fc fd85 	bl	80021d0 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e09b      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d8:	4b40      	ldr	r3, [pc, #256]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ee      	bne.n	80056c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ea:	4b3c      	ldr	r3, [pc, #240]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	4a3b      	ldr	r2, [pc, #236]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8087 	beq.w	800580e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005700:	4b36      	ldr	r3, [pc, #216]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 030c 	and.w	r3, r3, #12
 8005708:	2b08      	cmp	r3, #8
 800570a:	d061      	beq.n	80057d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d146      	bne.n	80057a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005714:	4b33      	ldr	r3, [pc, #204]	@ (80057e4 <HAL_RCC_OscConfig+0x4cc>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571a:	f7fc fd59 	bl	80021d0 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005722:	f7fc fd55 	bl	80021d0 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e06d      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005734:	4b29      	ldr	r3, [pc, #164]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f0      	bne.n	8005722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005748:	d108      	bne.n	800575c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	4921      	ldr	r1, [pc, #132]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575c:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a19      	ldr	r1, [r3, #32]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	430b      	orrs	r3, r1
 800576e:	491b      	ldr	r1, [pc, #108]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005774:	4b1b      	ldr	r3, [pc, #108]	@ (80057e4 <HAL_RCC_OscConfig+0x4cc>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fc fd29 	bl	80021d0 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005782:	f7fc fd25 	bl	80021d0 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e03d      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005794:	4b11      	ldr	r3, [pc, #68]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x46a>
 80057a0:	e035      	b.n	800580e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <HAL_RCC_OscConfig+0x4cc>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fc fd12 	bl	80021d0 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fd0e 	bl	80021d0 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e026      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_RCC_OscConfig+0x4c4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x498>
 80057ce:	e01e      	b.n	800580e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e019      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40007000 	.word	0x40007000
 80057e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <HAL_RCC_OscConfig+0x500>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d001      	beq.n	800580e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000

0800581c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0d0      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005830:	4b6a      	ldr	r3, [pc, #424]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d910      	bls.n	8005860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b67      	ldr	r3, [pc, #412]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 0207 	bic.w	r2, r3, #7
 8005846:	4965      	ldr	r1, [pc, #404]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b63      	ldr	r3, [pc, #396]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0b8      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d020      	beq.n	80058ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005878:	4b59      	ldr	r3, [pc, #356]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a58      	ldr	r2, [pc, #352]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 800587e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005890:	4b53      	ldr	r3, [pc, #332]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a52      	ldr	r2, [pc, #328]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800589a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800589c:	4b50      	ldr	r3, [pc, #320]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	494d      	ldr	r1, [pc, #308]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d040      	beq.n	800593c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d107      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c2:	4b47      	ldr	r3, [pc, #284]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d115      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e07f      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058da:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e073      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ea:	4b3d      	ldr	r3, [pc, #244]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e06b      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fa:	4b39      	ldr	r3, [pc, #228]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4936      	ldr	r1, [pc, #216]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800590c:	f7fc fc60 	bl	80021d0 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	e00a      	b.n	800592a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005914:	f7fc fc5c 	bl	80021d0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e053      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	4b2d      	ldr	r3, [pc, #180]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 020c 	and.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	429a      	cmp	r2, r3
 800593a:	d1eb      	bne.n	8005914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800593c:	4b27      	ldr	r3, [pc, #156]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d210      	bcs.n	800596c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 0207 	bic.w	r2, r3, #7
 8005952:	4922      	ldr	r1, [pc, #136]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595a:	4b20      	ldr	r3, [pc, #128]	@ (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e032      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005978:	4b19      	ldr	r3, [pc, #100]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4916      	ldr	r1, [pc, #88]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005996:	4b12      	ldr	r3, [pc, #72]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	490e      	ldr	r1, [pc, #56]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059aa:	f000 f821 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	490a      	ldr	r1, [pc, #40]	@ (80059e4 <HAL_RCC_ClockConfig+0x1c8>)
 80059bc:	5ccb      	ldrb	r3, [r1, r3]
 80059be:	fa22 f303 	lsr.w	r3, r2, r3
 80059c2:	4a09      	ldr	r2, [pc, #36]	@ (80059e8 <HAL_RCC_ClockConfig+0x1cc>)
 80059c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <HAL_RCC_ClockConfig+0x1d0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fc fbbe 	bl	800214c <HAL_InitTick>

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40022000 	.word	0x40022000
 80059e0:	40021000 	.word	0x40021000
 80059e4:	0800a814 	.word	0x0800a814
 80059e8:	20000008 	.word	0x20000008
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d002      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x30>
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x36>
 8005a1e:	e027      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a20:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a22:	613b      	str	r3, [r7, #16]
      break;
 8005a24:	e027      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	0c9b      	lsrs	r3, r3, #18
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	4a17      	ldr	r2, [pc, #92]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a30:	5cd3      	ldrb	r3, [r2, r3]
 8005a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a3e:	4b11      	ldr	r3, [pc, #68]	@ (8005a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	0c5b      	lsrs	r3, r3, #17
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	4a11      	ldr	r2, [pc, #68]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a0d      	ldr	r2, [pc, #52]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a52:	fb03 f202 	mul.w	r2, r3, r2
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e004      	b.n	8005a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0c      	ldr	r2, [pc, #48]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	613b      	str	r3, [r7, #16]
      break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b05      	ldr	r3, [pc, #20]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a72:	613b      	str	r3, [r7, #16]
      break;
 8005a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a76:	693b      	ldr	r3, [r7, #16]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	007a1200 	.word	0x007a1200
 8005a8c:	0800a82c 	.word	0x0800a82c
 8005a90:	0800a83c 	.word	0x0800a83c
 8005a94:	003d0900 	.word	0x003d0900

08005a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a9c:	4b02      	ldr	r3, [pc, #8]	@ (8005aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	20000008 	.word	0x20000008

08005aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ab0:	f7ff fff2 	bl	8005a98 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4903      	ldr	r1, [pc, #12]	@ (8005ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	0800a824 	.word	0x0800a824

08005ad4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005adc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <RCC_Delay+0x34>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8005b0c <RCC_Delay+0x38>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	0a5b      	lsrs	r3, r3, #9
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005af0:	bf00      	nop
  }
  while (Delay --);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1e5a      	subs	r2, r3, #1
 8005af6:	60fa      	str	r2, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f9      	bne.n	8005af0 <RCC_Delay+0x1c>
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	20000008 	.word	0x20000008
 8005b0c:	10624dd3 	.word	0x10624dd3

08005b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e041      	b.n	8005ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc f882 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f000 fe9a 	bl	8006888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d001      	beq.n	8005bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e032      	b.n	8005c2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	@ (8005c38 <HAL_TIM_Base_Start+0x88>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x48>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be2:	d009      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x48>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a14      	ldr	r2, [pc, #80]	@ (8005c3c <HAL_TIM_Base_Start+0x8c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_Base_Start+0x48>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	@ (8005c40 <HAL_TIM_Base_Start+0x90>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d111      	bne.n	8005c1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d010      	beq.n	8005c2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	e007      	b.n	8005c2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800

08005c44 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6a1a      	ldr	r2, [r3, #32]
 8005c52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10f      	bne.n	8005c7c <HAL_TIM_Base_Stop+0x38>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <HAL_TIM_Base_Stop+0x38>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d001      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e03a      	b.n	8005d1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <HAL_TIM_Base_Start_IT+0x98>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00e      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x58>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd2:	d009      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x58>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <HAL_TIM_Base_Start_IT+0x9c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x58>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a13      	ldr	r2, [pc, #76]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d111      	bne.n	8005d0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b06      	cmp	r3, #6
 8005cf8:	d010      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	e007      	b.n	8005d1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800

08005d34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e041      	b.n	8005dca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f839 	bl	8005dd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 fd88 	bl	8006888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 ff57 	bl	8006caa <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6a1a      	ldr	r2, [r3, #32]
 8005e02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10f      	bne.n	8005e2c <HAL_TIM_IC_Stop+0x48>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_IC_Stop+0x48>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d104      	bne.n	8005e3c <HAL_TIM_IC_Stop+0x58>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e3a:	e013      	b.n	8005e64 <HAL_TIM_IC_Stop+0x80>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d104      	bne.n	8005e4c <HAL_TIM_IC_Stop+0x68>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e4a:	e00b      	b.n	8005e64 <HAL_TIM_IC_Stop+0x80>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d104      	bne.n	8005e5c <HAL_TIM_IC_Stop+0x78>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e5a:	e003      	b.n	8005e64 <HAL_TIM_IC_Stop+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <HAL_TIM_IC_Stop+0x90>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e72:	e013      	b.n	8005e9c <HAL_TIM_IC_Stop+0xb8>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d104      	bne.n	8005e84 <HAL_TIM_IC_Stop+0xa0>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e82:	e00b      	b.n	8005e9c <HAL_TIM_IC_Stop+0xb8>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d104      	bne.n	8005e94 <HAL_TIM_IC_Stop+0xb0>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e92:	e003      	b.n	8005e9c <HAL_TIM_IC_Stop+0xb8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_IC_Start_DMA+0x22>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	e013      	b.n	8005ef2 <HAL_TIM_IC_Start_DMA+0x4a>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_IC_Start_DMA+0x32>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e00b      	b.n	8005ef2 <HAL_TIM_IC_Start_DMA+0x4a>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_IC_Start_DMA+0x42>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e003      	b.n	8005ef2 <HAL_TIM_IC_Start_DMA+0x4a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <HAL_TIM_IC_Start_DMA+0x5c>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	e013      	b.n	8005f2c <HAL_TIM_IC_Start_DMA+0x84>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d104      	bne.n	8005f14 <HAL_TIM_IC_Start_DMA+0x6c>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e00b      	b.n	8005f2c <HAL_TIM_IC_Start_DMA+0x84>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d104      	bne.n	8005f24 <HAL_TIM_IC_Start_DMA+0x7c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	e003      	b.n	8005f2c <HAL_TIM_IC_Start_DMA+0x84>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f2e:	7dbb      	ldrb	r3, [r7, #22]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d002      	beq.n	8005f3a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005f34:	7d7b      	ldrb	r3, [r7, #21]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e132      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005f3e:	7dbb      	ldrb	r3, [r7, #22]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d143      	bne.n	8005fcc <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005f44:	7d7b      	ldrb	r3, [r7, #21]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d140      	bne.n	8005fcc <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_TIM_IC_Start_DMA+0xae>
 8005f50:	887b      	ldrh	r3, [r7, #2]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e124      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_IC_Start_DMA+0xc2>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f68:	e013      	b.n	8005f92 <HAL_TIM_IC_Start_DMA+0xea>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_IC_Start_DMA+0xd2>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f78:	e00b      	b.n	8005f92 <HAL_TIM_IC_Start_DMA+0xea>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_IC_Start_DMA+0xe2>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f88:	e003      	b.n	8005f92 <HAL_TIM_IC_Start_DMA+0xea>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_IC_Start_DMA+0xfa>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8005fa0:	e016      	b.n	8005fd0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_IC_Start_DMA+0x10a>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8005fb0:	e00e      	b.n	8005fd0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_IC_Start_DMA+0x11a>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8005fc0:	e006      	b.n	8005fd0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8005fca:	e001      	b.n	8005fd0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0e9      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fe66 	bl	8006caa <TIM_CCxChannelCmd>

  switch (Channel)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	f200 80ad 	bhi.w	8006140 <HAL_TIM_IC_Start_DMA+0x298>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <HAL_TIM_IC_Start_DMA+0x144>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006021 	.word	0x08006021
 8005ff0:	08006141 	.word	0x08006141
 8005ff4:	08006141 	.word	0x08006141
 8005ff8:	08006141 	.word	0x08006141
 8005ffc:	08006069 	.word	0x08006069
 8006000:	08006141 	.word	0x08006141
 8006004:	08006141 	.word	0x08006141
 8006008:	08006141 	.word	0x08006141
 800600c:	080060b1 	.word	0x080060b1
 8006010:	08006141 	.word	0x08006141
 8006014:	08006141 	.word	0x08006141
 8006018:	08006141 	.word	0x08006141
 800601c:	080060f9 	.word	0x080060f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	4a61      	ldr	r2, [pc, #388]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x304>)
 8006026:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	4a60      	ldr	r2, [pc, #384]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x308>)
 800602e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	4a5f      	ldr	r2, [pc, #380]	@ (80061b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 8006036:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3334      	adds	r3, #52	@ 0x34
 8006042:	4619      	mov	r1, r3
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	f7fc fa58 	bl	80024fc <HAL_DMA_Start_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e0a6      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006064:	60da      	str	r2, [r3, #12]
      break;
 8006066:	e06e      	b.n	8006146 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606c:	4a4f      	ldr	r2, [pc, #316]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x304>)
 800606e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006074:	4a4e      	ldr	r2, [pc, #312]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x308>)
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	4a4d      	ldr	r2, [pc, #308]	@ (80061b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3338      	adds	r3, #56	@ 0x38
 800608a:	4619      	mov	r1, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	f7fc fa34 	bl	80024fc <HAL_DMA_Start_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e082      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060ac:	60da      	str	r2, [r3, #12]
      break;
 80060ae:	e04a      	b.n	8006146 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b4:	4a3d      	ldr	r2, [pc, #244]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x304>)
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a3c      	ldr	r2, [pc, #240]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x308>)
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	4a3b      	ldr	r2, [pc, #236]	@ (80061b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 80060c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	333c      	adds	r3, #60	@ 0x3c
 80060d2:	4619      	mov	r1, r3
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	f7fc fa10 	bl	80024fc <HAL_DMA_Start_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e05e      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f4:	60da      	str	r2, [r3, #12]
      break;
 80060f6:	e026      	b.n	8006146 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fc:	4a2b      	ldr	r2, [pc, #172]	@ (80061ac <HAL_TIM_IC_Start_DMA+0x304>)
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006104:	4a2a      	ldr	r2, [pc, #168]	@ (80061b0 <HAL_TIM_IC_Start_DMA+0x308>)
 8006106:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610c:	4a29      	ldr	r2, [pc, #164]	@ (80061b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 800610e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3340      	adds	r3, #64	@ 0x40
 800611a:	4619      	mov	r1, r3
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	887b      	ldrh	r3, [r7, #2]
 8006120:	f7fc f9ec 	bl	80024fc <HAL_DMA_Start_IT>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e03a      	b.n	80061a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800613c:	60da      	str	r2, [r3, #12]
      break;
 800613e:	e002      	b.n	8006146 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	75fb      	strb	r3, [r7, #23]
      break;
 8006144:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <HAL_TIM_IC_Start_DMA+0x310>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIM_IC_Start_DMA+0x2c6>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006158:	d009      	beq.n	800616e <HAL_TIM_IC_Start_DMA+0x2c6>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <HAL_TIM_IC_Start_DMA+0x314>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIM_IC_Start_DMA+0x2c6>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <HAL_TIM_IC_Start_DMA+0x318>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b06      	cmp	r3, #6
 800617e:	d010      	beq.n	80061a2 <HAL_TIM_IC_Start_DMA+0x2fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006190:	e007      	b.n	80061a2 <HAL_TIM_IC_Start_DMA+0x2fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	08006757 	.word	0x08006757
 80061b0:	0800681f 	.word	0x0800681f
 80061b4:	080066c5 	.word	0x080066c5
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800

080061c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d020      	beq.n	8006228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01b      	beq.n	8006228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0202 	mvn.w	r2, #2
 80061f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fe82 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa27 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fa36 	bl	800668e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d020      	beq.n	8006274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0204 	mvn.w	r2, #4
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fb fe5c 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa01 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa10 	bl	800668e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d020      	beq.n	80062c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0208 	mvn.w	r2, #8
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fb fe36 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f9db 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9ea 	bl	800668e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 0310 	and.w	r3, r3, #16
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d020      	beq.n	800630c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0210 	mvn.w	r2, #16
 80062dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2208      	movs	r2, #8
 80062e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fe10 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f9b5 	bl	800666a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f9c4 	bl	800668e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0201 	mvn.w	r2, #1
 8006328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fb fd86 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fd37 	bl	8006dc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f994 	bl	80066a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0220 	mvn.w	r2, #32
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fd0a 	bl	8006db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80063be:	2302      	movs	r3, #2
 80063c0:	e088      	b.n	80064d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063e0:	f000 fac0 	bl	8006964 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 020c 	bic.w	r2, r2, #12
 80063f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6999      	ldr	r1, [r3, #24]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	619a      	str	r2, [r3, #24]
 8006406:	e060      	b.n	80064ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d11c      	bne.n	8006448 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800641e:	f000 fb29 	bl	8006a74 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006430:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6999      	ldr	r1, [r3, #24]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	619a      	str	r2, [r3, #24]
 8006446:	e040      	b.n	80064ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b08      	cmp	r3, #8
 800644c:	d11b      	bne.n	8006486 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800645e:	f000 fb74 	bl	8006b4a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 020c 	bic.w	r2, r2, #12
 8006470:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69d9      	ldr	r1, [r3, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	61da      	str	r2, [r3, #28]
 8006484:	e021      	b.n	80064ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d11c      	bne.n	80064c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800649c:	f000 fb90 	bl	8006bc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80064ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69d9      	ldr	r1, [r3, #28]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	61da      	str	r2, [r3, #28]
 80064c4:	e001      	b.n	80064ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_TIM_ConfigClockSource+0x1c>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e0b4      	b.n	8006662 <HAL_TIM_ConfigClockSource+0x186>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800651e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006530:	d03e      	beq.n	80065b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006536:	f200 8087 	bhi.w	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	f000 8086 	beq.w	800664e <HAL_TIM_ConfigClockSource+0x172>
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006546:	d87f      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b70      	cmp	r3, #112	@ 0x70
 800654a:	d01a      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0xa6>
 800654c:	2b70      	cmp	r3, #112	@ 0x70
 800654e:	d87b      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b60      	cmp	r3, #96	@ 0x60
 8006552:	d050      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006554:	2b60      	cmp	r3, #96	@ 0x60
 8006556:	d877      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006558:	2b50      	cmp	r3, #80	@ 0x50
 800655a:	d03c      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0xfa>
 800655c:	2b50      	cmp	r3, #80	@ 0x50
 800655e:	d873      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006560:	2b40      	cmp	r3, #64	@ 0x40
 8006562:	d058      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0x13a>
 8006564:	2b40      	cmp	r3, #64	@ 0x40
 8006566:	d86f      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b30      	cmp	r3, #48	@ 0x30
 800656a:	d064      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x15a>
 800656c:	2b30      	cmp	r3, #48	@ 0x30
 800656e:	d86b      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b20      	cmp	r3, #32
 8006572:	d060      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x15a>
 8006574:	2b20      	cmp	r3, #32
 8006576:	d867      	bhi.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d05c      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x15a>
 800657c:	2b10      	cmp	r3, #16
 800657e:	d05a      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x15a>
 8006580:	e062      	b.n	8006648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006592:	f000 fb6b 	bl	8006c6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	609a      	str	r2, [r3, #8]
      break;
 80065ae:	e04f      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065c0:	f000 fb54 	bl	8006c6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065d2:	609a      	str	r2, [r3, #8]
      break;
 80065d4:	e03c      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e2:	461a      	mov	r2, r3
 80065e4:	f000 fa18 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2150      	movs	r1, #80	@ 0x50
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fb22 	bl	8006c38 <TIM_ITRx_SetConfig>
      break;
 80065f4:	e02c      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006602:	461a      	mov	r2, r3
 8006604:	f000 fa72 	bl	8006aec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2160      	movs	r1, #96	@ 0x60
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fb12 	bl	8006c38 <TIM_ITRx_SetConfig>
      break;
 8006614:	e01c      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006622:	461a      	mov	r2, r3
 8006624:	f000 f9f8 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2140      	movs	r1, #64	@ 0x40
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fb02 	bl	8006c38 <TIM_ITRx_SetConfig>
      break;
 8006634:	e00c      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f000 faf9 	bl	8006c38 <TIM_ITRx_SetConfig>
      break;
 8006646:	e003      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	e000      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800664e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d107      	bne.n	80066ec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066ea:	e02a      	b.n	8006742 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d107      	bne.n	8006706 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2202      	movs	r2, #2
 80066fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006704:	e01d      	b.n	8006742 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d107      	bne.n	8006720 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2204      	movs	r2, #4
 8006714:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800671e:	e010      	b.n	8006742 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	429a      	cmp	r2, r3
 8006728:	d107      	bne.n	800673a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2208      	movs	r2, #8
 800672e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006738:	e003      	b.n	8006742 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ffb5 	bl	80066b2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	771a      	strb	r2, [r3, #28]
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d10f      	bne.n	800678e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d146      	bne.n	800680a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800678c:	e03d      	b.n	800680a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d10f      	bne.n	80067b8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2202      	movs	r2, #2
 800679c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d131      	bne.n	800680a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067b6:	e028      	b.n	800680a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d10f      	bne.n	80067e2 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2204      	movs	r2, #4
 80067c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d11c      	bne.n	800680a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067e0:	e013      	b.n	800680a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d10e      	bne.n	800680a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2208      	movs	r2, #8
 80067f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7fb fb84 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	771a      	strb	r2, [r3, #28]
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	429a      	cmp	r2, r3
 8006834:	d103      	bne.n	800683e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	771a      	strb	r2, [r3, #28]
 800683c:	e019      	b.n	8006872 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d103      	bne.n	8006850 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2202      	movs	r2, #2
 800684c:	771a      	strb	r2, [r3, #28]
 800684e:	e010      	b.n	8006872 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d103      	bne.n	8006862 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2204      	movs	r2, #4
 800685e:	771a      	strb	r2, [r3, #28]
 8006860:	e007      	b.n	8006872 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	429a      	cmp	r2, r3
 800686a:	d102      	bne.n	8006872 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2208      	movs	r2, #8
 8006870:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff ff02 	bl	800667c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	771a      	strb	r2, [r3, #28]
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2f      	ldr	r2, [pc, #188]	@ (8006958 <TIM_Base_SetConfig+0xd0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_Base_SetConfig+0x30>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a6:	d007      	beq.n	80068b8 <TIM_Base_SetConfig+0x30>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <TIM_Base_SetConfig+0xd4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x30>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <TIM_Base_SetConfig+0xd8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d108      	bne.n	80068ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a22      	ldr	r2, [pc, #136]	@ (8006958 <TIM_Base_SetConfig+0xd0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_Base_SetConfig+0x62>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d8:	d007      	beq.n	80068ea <TIM_Base_SetConfig+0x62>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1f      	ldr	r2, [pc, #124]	@ (800695c <TIM_Base_SetConfig+0xd4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_Base_SetConfig+0x62>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006960 <TIM_Base_SetConfig+0xd8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d108      	bne.n	80068fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a0d      	ldr	r2, [pc, #52]	@ (8006958 <TIM_Base_SetConfig+0xd0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d103      	bne.n	8006930 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	611a      	str	r2, [r3, #16]
  }
}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40000400 	.word	0x40000400
 8006960:	40000800 	.word	0x40000800

08006964 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 0201 	bic.w	r2, r3, #1
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a0c <TIM_TI1_SetConfig+0xa8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00b      	beq.n	80069aa <TIM_TI1_SetConfig+0x46>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006998:	d007      	beq.n	80069aa <TIM_TI1_SetConfig+0x46>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a10 <TIM_TI1_SetConfig+0xac>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_TI1_SetConfig+0x46>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a14 <TIM_TI1_SetConfig+0xb0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <TIM_TI1_SetConfig+0x4a>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <TIM_TI1_SetConfig+0x4c>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e003      	b.n	80069ce <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f043 0301 	orr.w	r3, r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f023 030a 	bic.w	r3, r3, #10
 80069e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 030a 	and.w	r3, r3, #10
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	621a      	str	r2, [r3, #32]
}
 8006a02:	bf00      	nop
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800

08006a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 030a 	bic.w	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f023 0210 	bic.w	r2, r3, #16
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	031b      	lsls	r3, r3, #12
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0210 	bic.w	r2, r3, #16
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	031b      	lsls	r3, r3, #12
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	621a      	str	r2, [r3, #32]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr

08006b4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b087      	sub	sp, #28
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	031b      	lsls	r3, r3, #12
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	031b      	lsls	r3, r3, #12
 8006c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f043 0307 	orr.w	r3, r3, #7
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	609a      	str	r2, [r3, #8]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b087      	sub	sp, #28
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	401a      	ands	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	621a      	str	r2, [r3, #32]
}
 8006ce8:	bf00      	nop
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e046      	b.n	8006d9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a16      	ldr	r2, [pc, #88]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d58:	d009      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a12      	ldr	r2, [pc, #72]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a10      	ldr	r2, [pc, #64]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10c      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800

08006db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <__cvt>:
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dda:	461d      	mov	r5, r3
 8006ddc:	bfbb      	ittet	lt
 8006dde:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006de2:	461d      	movlt	r5, r3
 8006de4:	2300      	movge	r3, #0
 8006de6:	232d      	movlt	r3, #45	@ 0x2d
 8006de8:	b088      	sub	sp, #32
 8006dea:	4614      	mov	r4, r2
 8006dec:	bfb8      	it	lt
 8006dee:	4614      	movlt	r4, r2
 8006df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006df2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006df4:	7013      	strb	r3, [r2, #0]
 8006df6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006df8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006dfc:	f023 0820 	bic.w	r8, r3, #32
 8006e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e04:	d005      	beq.n	8006e12 <__cvt+0x3e>
 8006e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e0a:	d100      	bne.n	8006e0e <__cvt+0x3a>
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e000      	b.n	8006e14 <__cvt+0x40>
 8006e12:	2303      	movs	r3, #3
 8006e14:	aa07      	add	r2, sp, #28
 8006e16:	9204      	str	r2, [sp, #16]
 8006e18:	aa06      	add	r2, sp, #24
 8006e1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e1e:	e9cd 3600 	strd	r3, r6, [sp]
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	f000 fe6f 	bl	8007b08 <_dtoa_r>
 8006e2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e2e:	4607      	mov	r7, r0
 8006e30:	d119      	bne.n	8006e66 <__cvt+0x92>
 8006e32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e34:	07db      	lsls	r3, r3, #31
 8006e36:	d50e      	bpl.n	8006e56 <__cvt+0x82>
 8006e38:	eb00 0906 	add.w	r9, r0, r6
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8006e48:	b108      	cbz	r0, 8006e4e <__cvt+0x7a>
 8006e4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e4e:	2230      	movs	r2, #48	@ 0x30
 8006e50:	9b07      	ldr	r3, [sp, #28]
 8006e52:	454b      	cmp	r3, r9
 8006e54:	d31e      	bcc.n	8006e94 <__cvt+0xc0>
 8006e56:	4638      	mov	r0, r7
 8006e58:	9b07      	ldr	r3, [sp, #28]
 8006e5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e5c:	1bdb      	subs	r3, r3, r7
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	b008      	add	sp, #32
 8006e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e6a:	eb00 0906 	add.w	r9, r0, r6
 8006e6e:	d1e5      	bne.n	8006e3c <__cvt+0x68>
 8006e70:	7803      	ldrb	r3, [r0, #0]
 8006e72:	2b30      	cmp	r3, #48	@ 0x30
 8006e74:	d10a      	bne.n	8006e8c <__cvt+0xb8>
 8006e76:	2200      	movs	r2, #0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f7f9 fd93 	bl	80009a8 <__aeabi_dcmpeq>
 8006e82:	b918      	cbnz	r0, 8006e8c <__cvt+0xb8>
 8006e84:	f1c6 0601 	rsb	r6, r6, #1
 8006e88:	f8ca 6000 	str.w	r6, [sl]
 8006e8c:	f8da 3000 	ldr.w	r3, [sl]
 8006e90:	4499      	add	r9, r3
 8006e92:	e7d3      	b.n	8006e3c <__cvt+0x68>
 8006e94:	1c59      	adds	r1, r3, #1
 8006e96:	9107      	str	r1, [sp, #28]
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	e7d9      	b.n	8006e50 <__cvt+0x7c>

08006e9c <__exponent>:
 8006e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9e:	2900      	cmp	r1, #0
 8006ea0:	bfb6      	itet	lt
 8006ea2:	232d      	movlt	r3, #45	@ 0x2d
 8006ea4:	232b      	movge	r3, #43	@ 0x2b
 8006ea6:	4249      	neglt	r1, r1
 8006ea8:	2909      	cmp	r1, #9
 8006eaa:	7002      	strb	r2, [r0, #0]
 8006eac:	7043      	strb	r3, [r0, #1]
 8006eae:	dd29      	ble.n	8006f04 <__exponent+0x68>
 8006eb0:	f10d 0307 	add.w	r3, sp, #7
 8006eb4:	461d      	mov	r5, r3
 8006eb6:	270a      	movs	r7, #10
 8006eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	fb07 1416 	mls	r4, r7, r6, r1
 8006ec2:	3430      	adds	r4, #48	@ 0x30
 8006ec4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ec8:	460c      	mov	r4, r1
 8006eca:	2c63      	cmp	r4, #99	@ 0x63
 8006ecc:	4631      	mov	r1, r6
 8006ece:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ed2:	dcf1      	bgt.n	8006eb8 <__exponent+0x1c>
 8006ed4:	3130      	adds	r1, #48	@ 0x30
 8006ed6:	1e94      	subs	r4, r2, #2
 8006ed8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006edc:	4623      	mov	r3, r4
 8006ede:	1c41      	adds	r1, r0, #1
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	d30a      	bcc.n	8006efa <__exponent+0x5e>
 8006ee4:	f10d 0309 	add.w	r3, sp, #9
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	42ac      	cmp	r4, r5
 8006eec:	bf88      	it	hi
 8006eee:	2300      	movhi	r3, #0
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	4403      	add	r3, r0
 8006ef4:	1a18      	subs	r0, r3, r0
 8006ef6:	b003      	add	sp, #12
 8006ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006efe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f02:	e7ed      	b.n	8006ee0 <__exponent+0x44>
 8006f04:	2330      	movs	r3, #48	@ 0x30
 8006f06:	3130      	adds	r1, #48	@ 0x30
 8006f08:	7083      	strb	r3, [r0, #2]
 8006f0a:	70c1      	strb	r1, [r0, #3]
 8006f0c:	1d03      	adds	r3, r0, #4
 8006f0e:	e7f1      	b.n	8006ef4 <__exponent+0x58>

08006f10 <_printf_float>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	b091      	sub	sp, #68	@ 0x44
 8006f16:	460c      	mov	r4, r1
 8006f18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	461f      	mov	r7, r3
 8006f20:	4605      	mov	r5, r0
 8006f22:	f000 fce1 	bl	80078e8 <_localeconv_r>
 8006f26:	6803      	ldr	r3, [r0, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	9308      	str	r3, [sp, #32]
 8006f2c:	f7f9 f910 	bl	8000150 <strlen>
 8006f30:	2300      	movs	r3, #0
 8006f32:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f34:	f8d8 3000 	ldr.w	r3, [r8]
 8006f38:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	f103 0208 	add.w	r2, r3, #8
 8006f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f48:	f8d4 b000 	ldr.w	fp, [r4]
 8006f4c:	f8c8 2000 	str.w	r2, [r8]
 8006f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80071dc <_printf_float+0x2cc>)
 8006f6c:	f7f9 fd4e 	bl	8000a0c <__aeabi_dcmpun>
 8006f70:	bb70      	cbnz	r0, 8006fd0 <_printf_float+0xc0>
 8006f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7a:	4b98      	ldr	r3, [pc, #608]	@ (80071dc <_printf_float+0x2cc>)
 8006f7c:	f7f9 fd28 	bl	80009d0 <__aeabi_dcmple>
 8006f80:	bb30      	cbnz	r0, 8006fd0 <_printf_float+0xc0>
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	4640      	mov	r0, r8
 8006f88:	4649      	mov	r1, r9
 8006f8a:	f7f9 fd17 	bl	80009bc <__aeabi_dcmplt>
 8006f8e:	b110      	cbz	r0, 8006f96 <_printf_float+0x86>
 8006f90:	232d      	movs	r3, #45	@ 0x2d
 8006f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f96:	4a92      	ldr	r2, [pc, #584]	@ (80071e0 <_printf_float+0x2d0>)
 8006f98:	4b92      	ldr	r3, [pc, #584]	@ (80071e4 <_printf_float+0x2d4>)
 8006f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f9e:	bf8c      	ite	hi
 8006fa0:	4690      	movhi	r8, r2
 8006fa2:	4698      	movls	r8, r3
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	f04f 0900 	mov.w	r9, #0
 8006faa:	6123      	str	r3, [r4, #16]
 8006fac:	f02b 0304 	bic.w	r3, fp, #4
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	4633      	mov	r3, r6
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	9700      	str	r7, [sp, #0]
 8006fba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006fbc:	f000 f9d4 	bl	8007368 <_printf_common>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f040 8090 	bne.w	80070e6 <_printf_float+0x1d6>
 8006fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fca:	b011      	add	sp, #68	@ 0x44
 8006fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 fd18 	bl	8000a0c <__aeabi_dcmpun>
 8006fdc:	b148      	cbz	r0, 8006ff2 <_printf_float+0xe2>
 8006fde:	464b      	mov	r3, r9
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfb8      	it	lt
 8006fe4:	232d      	movlt	r3, #45	@ 0x2d
 8006fe6:	4a80      	ldr	r2, [pc, #512]	@ (80071e8 <_printf_float+0x2d8>)
 8006fe8:	bfb8      	it	lt
 8006fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fee:	4b7f      	ldr	r3, [pc, #508]	@ (80071ec <_printf_float+0x2dc>)
 8006ff0:	e7d3      	b.n	8006f9a <_printf_float+0x8a>
 8006ff2:	6863      	ldr	r3, [r4, #4]
 8006ff4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	d13f      	bne.n	800707c <_printf_float+0x16c>
 8006ffc:	2306      	movs	r3, #6
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	9206      	str	r2, [sp, #24]
 800700a:	aa0e      	add	r2, sp, #56	@ 0x38
 800700c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007010:	aa0d      	add	r2, sp, #52	@ 0x34
 8007012:	9203      	str	r2, [sp, #12]
 8007014:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007018:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800701c:	6863      	ldr	r3, [r4, #4]
 800701e:	4642      	mov	r2, r8
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4628      	mov	r0, r5
 8007024:	464b      	mov	r3, r9
 8007026:	910a      	str	r1, [sp, #40]	@ 0x28
 8007028:	f7ff fed4 	bl	8006dd4 <__cvt>
 800702c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800702e:	4680      	mov	r8, r0
 8007030:	2947      	cmp	r1, #71	@ 0x47
 8007032:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007034:	d128      	bne.n	8007088 <_printf_float+0x178>
 8007036:	1cc8      	adds	r0, r1, #3
 8007038:	db02      	blt.n	8007040 <_printf_float+0x130>
 800703a:	6863      	ldr	r3, [r4, #4]
 800703c:	4299      	cmp	r1, r3
 800703e:	dd40      	ble.n	80070c2 <_printf_float+0x1b2>
 8007040:	f1aa 0a02 	sub.w	sl, sl, #2
 8007044:	fa5f fa8a 	uxtb.w	sl, sl
 8007048:	4652      	mov	r2, sl
 800704a:	3901      	subs	r1, #1
 800704c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007050:	910d      	str	r1, [sp, #52]	@ 0x34
 8007052:	f7ff ff23 	bl	8006e9c <__exponent>
 8007056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007058:	4681      	mov	r9, r0
 800705a:	1813      	adds	r3, r2, r0
 800705c:	2a01      	cmp	r2, #1
 800705e:	6123      	str	r3, [r4, #16]
 8007060:	dc02      	bgt.n	8007068 <_printf_float+0x158>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	07d2      	lsls	r2, r2, #31
 8007066:	d501      	bpl.n	800706c <_printf_float+0x15c>
 8007068:	3301      	adds	r3, #1
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007070:	2b00      	cmp	r3, #0
 8007072:	d09e      	beq.n	8006fb2 <_printf_float+0xa2>
 8007074:	232d      	movs	r3, #45	@ 0x2d
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800707a:	e79a      	b.n	8006fb2 <_printf_float+0xa2>
 800707c:	2947      	cmp	r1, #71	@ 0x47
 800707e:	d1bf      	bne.n	8007000 <_printf_float+0xf0>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1bd      	bne.n	8007000 <_printf_float+0xf0>
 8007084:	2301      	movs	r3, #1
 8007086:	e7ba      	b.n	8006ffe <_printf_float+0xee>
 8007088:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800708c:	d9dc      	bls.n	8007048 <_printf_float+0x138>
 800708e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007092:	d118      	bne.n	80070c6 <_printf_float+0x1b6>
 8007094:	2900      	cmp	r1, #0
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	dd0b      	ble.n	80070b2 <_printf_float+0x1a2>
 800709a:	6121      	str	r1, [r4, #16]
 800709c:	b913      	cbnz	r3, 80070a4 <_printf_float+0x194>
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	07d0      	lsls	r0, r2, #31
 80070a2:	d502      	bpl.n	80070aa <_printf_float+0x19a>
 80070a4:	3301      	adds	r3, #1
 80070a6:	440b      	add	r3, r1
 80070a8:	6123      	str	r3, [r4, #16]
 80070aa:	f04f 0900 	mov.w	r9, #0
 80070ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070b0:	e7dc      	b.n	800706c <_printf_float+0x15c>
 80070b2:	b913      	cbnz	r3, 80070ba <_printf_float+0x1aa>
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	07d2      	lsls	r2, r2, #31
 80070b8:	d501      	bpl.n	80070be <_printf_float+0x1ae>
 80070ba:	3302      	adds	r3, #2
 80070bc:	e7f4      	b.n	80070a8 <_printf_float+0x198>
 80070be:	2301      	movs	r3, #1
 80070c0:	e7f2      	b.n	80070a8 <_printf_float+0x198>
 80070c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c8:	4299      	cmp	r1, r3
 80070ca:	db05      	blt.n	80070d8 <_printf_float+0x1c8>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	6121      	str	r1, [r4, #16]
 80070d0:	07d8      	lsls	r0, r3, #31
 80070d2:	d5ea      	bpl.n	80070aa <_printf_float+0x19a>
 80070d4:	1c4b      	adds	r3, r1, #1
 80070d6:	e7e7      	b.n	80070a8 <_printf_float+0x198>
 80070d8:	2900      	cmp	r1, #0
 80070da:	bfcc      	ite	gt
 80070dc:	2201      	movgt	r2, #1
 80070de:	f1c1 0202 	rsble	r2, r1, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	e7e0      	b.n	80070a8 <_printf_float+0x198>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	055a      	lsls	r2, r3, #21
 80070ea:	d407      	bmi.n	80070fc <_printf_float+0x1ec>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	4642      	mov	r2, r8
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	d12b      	bne.n	8007152 <_printf_float+0x242>
 80070fa:	e764      	b.n	8006fc6 <_printf_float+0xb6>
 80070fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007100:	f240 80dc 	bls.w	80072bc <_printf_float+0x3ac>
 8007104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007108:	2200      	movs	r2, #0
 800710a:	2300      	movs	r3, #0
 800710c:	f7f9 fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8007110:	2800      	cmp	r0, #0
 8007112:	d033      	beq.n	800717c <_printf_float+0x26c>
 8007114:	2301      	movs	r3, #1
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	4a35      	ldr	r2, [pc, #212]	@ (80071f0 <_printf_float+0x2e0>)
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af51 	beq.w	8006fc6 <_printf_float+0xb6>
 8007124:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007128:	4543      	cmp	r3, r8
 800712a:	db02      	blt.n	8007132 <_printf_float+0x222>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	07d8      	lsls	r0, r3, #31
 8007130:	d50f      	bpl.n	8007152 <_printf_float+0x242>
 8007132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f af42 	beq.w	8006fc6 <_printf_float+0xb6>
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	f108 38ff 	add.w	r8, r8, #4294967295
 800714a:	f104 0a1a 	add.w	sl, r4, #26
 800714e:	45c8      	cmp	r8, r9
 8007150:	dc09      	bgt.n	8007166 <_printf_float+0x256>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	079b      	lsls	r3, r3, #30
 8007156:	f100 8102 	bmi.w	800735e <_printf_float+0x44e>
 800715a:	68e0      	ldr	r0, [r4, #12]
 800715c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800715e:	4298      	cmp	r0, r3
 8007160:	bfb8      	it	lt
 8007162:	4618      	movlt	r0, r3
 8007164:	e731      	b.n	8006fca <_printf_float+0xba>
 8007166:	2301      	movs	r3, #1
 8007168:	4652      	mov	r2, sl
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	f43f af28 	beq.w	8006fc6 <_printf_float+0xb6>
 8007176:	f109 0901 	add.w	r9, r9, #1
 800717a:	e7e8      	b.n	800714e <_printf_float+0x23e>
 800717c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800717e:	2b00      	cmp	r3, #0
 8007180:	dc38      	bgt.n	80071f4 <_printf_float+0x2e4>
 8007182:	2301      	movs	r3, #1
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	4a19      	ldr	r2, [pc, #100]	@ (80071f0 <_printf_float+0x2e0>)
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	f43f af1a 	beq.w	8006fc6 <_printf_float+0xb6>
 8007192:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007196:	ea59 0303 	orrs.w	r3, r9, r3
 800719a:	d102      	bne.n	80071a2 <_printf_float+0x292>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	d5d7      	bpl.n	8007152 <_printf_float+0x242>
 80071a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f af0a 	beq.w	8006fc6 <_printf_float+0xb6>
 80071b2:	f04f 0a00 	mov.w	sl, #0
 80071b6:	f104 0b1a 	add.w	fp, r4, #26
 80071ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071bc:	425b      	negs	r3, r3
 80071be:	4553      	cmp	r3, sl
 80071c0:	dc01      	bgt.n	80071c6 <_printf_float+0x2b6>
 80071c2:	464b      	mov	r3, r9
 80071c4:	e793      	b.n	80070ee <_printf_float+0x1de>
 80071c6:	2301      	movs	r3, #1
 80071c8:	465a      	mov	r2, fp
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	f43f aef8 	beq.w	8006fc6 <_printf_float+0xb6>
 80071d6:	f10a 0a01 	add.w	sl, sl, #1
 80071da:	e7ee      	b.n	80071ba <_printf_float+0x2aa>
 80071dc:	7fefffff 	.word	0x7fefffff
 80071e0:	0800a842 	.word	0x0800a842
 80071e4:	0800a83e 	.word	0x0800a83e
 80071e8:	0800a84a 	.word	0x0800a84a
 80071ec:	0800a846 	.word	0x0800a846
 80071f0:	0800a84e 	.word	0x0800a84e
 80071f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80071fa:	4553      	cmp	r3, sl
 80071fc:	bfa8      	it	ge
 80071fe:	4653      	movge	r3, sl
 8007200:	2b00      	cmp	r3, #0
 8007202:	4699      	mov	r9, r3
 8007204:	dc36      	bgt.n	8007274 <_printf_float+0x364>
 8007206:	f04f 0b00 	mov.w	fp, #0
 800720a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720e:	f104 021a 	add.w	r2, r4, #26
 8007212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007214:	930a      	str	r3, [sp, #40]	@ 0x28
 8007216:	eba3 0309 	sub.w	r3, r3, r9
 800721a:	455b      	cmp	r3, fp
 800721c:	dc31      	bgt.n	8007282 <_printf_float+0x372>
 800721e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007220:	459a      	cmp	sl, r3
 8007222:	dc3a      	bgt.n	800729a <_printf_float+0x38a>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	07da      	lsls	r2, r3, #31
 8007228:	d437      	bmi.n	800729a <_printf_float+0x38a>
 800722a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800722c:	ebaa 0903 	sub.w	r9, sl, r3
 8007230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007232:	ebaa 0303 	sub.w	r3, sl, r3
 8007236:	4599      	cmp	r9, r3
 8007238:	bfa8      	it	ge
 800723a:	4699      	movge	r9, r3
 800723c:	f1b9 0f00 	cmp.w	r9, #0
 8007240:	dc33      	bgt.n	80072aa <_printf_float+0x39a>
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800724a:	f104 0b1a 	add.w	fp, r4, #26
 800724e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007250:	ebaa 0303 	sub.w	r3, sl, r3
 8007254:	eba3 0309 	sub.w	r3, r3, r9
 8007258:	4543      	cmp	r3, r8
 800725a:	f77f af7a 	ble.w	8007152 <_printf_float+0x242>
 800725e:	2301      	movs	r3, #1
 8007260:	465a      	mov	r2, fp
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f aeac 	beq.w	8006fc6 <_printf_float+0xb6>
 800726e:	f108 0801 	add.w	r8, r8, #1
 8007272:	e7ec      	b.n	800724e <_printf_float+0x33e>
 8007274:	4642      	mov	r2, r8
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	d1c2      	bne.n	8007206 <_printf_float+0x2f6>
 8007280:	e6a1      	b.n	8006fc6 <_printf_float+0xb6>
 8007282:	2301      	movs	r3, #1
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	920a      	str	r2, [sp, #40]	@ 0x28
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f ae9a 	beq.w	8006fc6 <_printf_float+0xb6>
 8007292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007294:	f10b 0b01 	add.w	fp, fp, #1
 8007298:	e7bb      	b.n	8007212 <_printf_float+0x302>
 800729a:	4631      	mov	r1, r6
 800729c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1c0      	bne.n	800722a <_printf_float+0x31a>
 80072a8:	e68d      	b.n	8006fc6 <_printf_float+0xb6>
 80072aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072ac:	464b      	mov	r3, r9
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	4442      	add	r2, r8
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	d1c3      	bne.n	8007242 <_printf_float+0x332>
 80072ba:	e684      	b.n	8006fc6 <_printf_float+0xb6>
 80072bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80072c0:	f1ba 0f01 	cmp.w	sl, #1
 80072c4:	dc01      	bgt.n	80072ca <_printf_float+0x3ba>
 80072c6:	07db      	lsls	r3, r3, #31
 80072c8:	d536      	bpl.n	8007338 <_printf_float+0x428>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4642      	mov	r2, r8
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	f43f ae76 	beq.w	8006fc6 <_printf_float+0xb6>
 80072da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae6e 	beq.w	8006fc6 <_printf_float+0xb6>
 80072ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ee:	2200      	movs	r2, #0
 80072f0:	2300      	movs	r3, #0
 80072f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072f6:	f7f9 fb57 	bl	80009a8 <__aeabi_dcmpeq>
 80072fa:	b9c0      	cbnz	r0, 800732e <_printf_float+0x41e>
 80072fc:	4653      	mov	r3, sl
 80072fe:	f108 0201 	add.w	r2, r8, #1
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	d10c      	bne.n	8007326 <_printf_float+0x416>
 800730c:	e65b      	b.n	8006fc6 <_printf_float+0xb6>
 800730e:	2301      	movs	r3, #1
 8007310:	465a      	mov	r2, fp
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae54 	beq.w	8006fc6 <_printf_float+0xb6>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	45d0      	cmp	r8, sl
 8007324:	dbf3      	blt.n	800730e <_printf_float+0x3fe>
 8007326:	464b      	mov	r3, r9
 8007328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800732c:	e6e0      	b.n	80070f0 <_printf_float+0x1e0>
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	f104 0b1a 	add.w	fp, r4, #26
 8007336:	e7f4      	b.n	8007322 <_printf_float+0x412>
 8007338:	2301      	movs	r3, #1
 800733a:	4642      	mov	r2, r8
 800733c:	e7e1      	b.n	8007302 <_printf_float+0x3f2>
 800733e:	2301      	movs	r3, #1
 8007340:	464a      	mov	r2, r9
 8007342:	4631      	mov	r1, r6
 8007344:	4628      	mov	r0, r5
 8007346:	47b8      	blx	r7
 8007348:	3001      	adds	r0, #1
 800734a:	f43f ae3c 	beq.w	8006fc6 <_printf_float+0xb6>
 800734e:	f108 0801 	add.w	r8, r8, #1
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007356:	1a5b      	subs	r3, r3, r1
 8007358:	4543      	cmp	r3, r8
 800735a:	dcf0      	bgt.n	800733e <_printf_float+0x42e>
 800735c:	e6fd      	b.n	800715a <_printf_float+0x24a>
 800735e:	f04f 0800 	mov.w	r8, #0
 8007362:	f104 0919 	add.w	r9, r4, #25
 8007366:	e7f4      	b.n	8007352 <_printf_float+0x442>

08007368 <_printf_common>:
 8007368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800736c:	4616      	mov	r6, r2
 800736e:	4698      	mov	r8, r3
 8007370:	688a      	ldr	r2, [r1, #8]
 8007372:	690b      	ldr	r3, [r1, #16]
 8007374:	4607      	mov	r7, r0
 8007376:	4293      	cmp	r3, r2
 8007378:	bfb8      	it	lt
 800737a:	4613      	movlt	r3, r2
 800737c:	6033      	str	r3, [r6, #0]
 800737e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007382:	460c      	mov	r4, r1
 8007384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007388:	b10a      	cbz	r2, 800738e <_printf_common+0x26>
 800738a:	3301      	adds	r3, #1
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	0699      	lsls	r1, r3, #26
 8007392:	bf42      	ittt	mi
 8007394:	6833      	ldrmi	r3, [r6, #0]
 8007396:	3302      	addmi	r3, #2
 8007398:	6033      	strmi	r3, [r6, #0]
 800739a:	6825      	ldr	r5, [r4, #0]
 800739c:	f015 0506 	ands.w	r5, r5, #6
 80073a0:	d106      	bne.n	80073b0 <_printf_common+0x48>
 80073a2:	f104 0a19 	add.w	sl, r4, #25
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	6832      	ldr	r2, [r6, #0]
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	42ab      	cmp	r3, r5
 80073ae:	dc2b      	bgt.n	8007408 <_printf_common+0xa0>
 80073b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	3b00      	subs	r3, #0
 80073b8:	bf18      	it	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	0692      	lsls	r2, r2, #26
 80073be:	d430      	bmi.n	8007422 <_printf_common+0xba>
 80073c0:	4641      	mov	r1, r8
 80073c2:	4638      	mov	r0, r7
 80073c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073c8:	47c8      	blx	r9
 80073ca:	3001      	adds	r0, #1
 80073cc:	d023      	beq.n	8007416 <_printf_common+0xae>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	6922      	ldr	r2, [r4, #16]
 80073d2:	f003 0306 	and.w	r3, r3, #6
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	bf14      	ite	ne
 80073da:	2500      	movne	r5, #0
 80073dc:	6833      	ldreq	r3, [r6, #0]
 80073de:	f04f 0600 	mov.w	r6, #0
 80073e2:	bf08      	it	eq
 80073e4:	68e5      	ldreq	r5, [r4, #12]
 80073e6:	f104 041a 	add.w	r4, r4, #26
 80073ea:	bf08      	it	eq
 80073ec:	1aed      	subeq	r5, r5, r3
 80073ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073f2:	bf08      	it	eq
 80073f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfc4      	itt	gt
 80073fc:	1a9b      	subgt	r3, r3, r2
 80073fe:	18ed      	addgt	r5, r5, r3
 8007400:	42b5      	cmp	r5, r6
 8007402:	d11a      	bne.n	800743a <_printf_common+0xd2>
 8007404:	2000      	movs	r0, #0
 8007406:	e008      	b.n	800741a <_printf_common+0xb2>
 8007408:	2301      	movs	r3, #1
 800740a:	4652      	mov	r2, sl
 800740c:	4641      	mov	r1, r8
 800740e:	4638      	mov	r0, r7
 8007410:	47c8      	blx	r9
 8007412:	3001      	adds	r0, #1
 8007414:	d103      	bne.n	800741e <_printf_common+0xb6>
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741e:	3501      	adds	r5, #1
 8007420:	e7c1      	b.n	80073a6 <_printf_common+0x3e>
 8007422:	2030      	movs	r0, #48	@ 0x30
 8007424:	18e1      	adds	r1, r4, r3
 8007426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007430:	4422      	add	r2, r4
 8007432:	3302      	adds	r3, #2
 8007434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007438:	e7c2      	b.n	80073c0 <_printf_common+0x58>
 800743a:	2301      	movs	r3, #1
 800743c:	4622      	mov	r2, r4
 800743e:	4641      	mov	r1, r8
 8007440:	4638      	mov	r0, r7
 8007442:	47c8      	blx	r9
 8007444:	3001      	adds	r0, #1
 8007446:	d0e6      	beq.n	8007416 <_printf_common+0xae>
 8007448:	3601      	adds	r6, #1
 800744a:	e7d9      	b.n	8007400 <_printf_common+0x98>

0800744c <_printf_i>:
 800744c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	7e0f      	ldrb	r7, [r1, #24]
 8007452:	4691      	mov	r9, r2
 8007454:	2f78      	cmp	r7, #120	@ 0x78
 8007456:	4680      	mov	r8, r0
 8007458:	460c      	mov	r4, r1
 800745a:	469a      	mov	sl, r3
 800745c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800745e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007462:	d807      	bhi.n	8007474 <_printf_i+0x28>
 8007464:	2f62      	cmp	r7, #98	@ 0x62
 8007466:	d80a      	bhi.n	800747e <_printf_i+0x32>
 8007468:	2f00      	cmp	r7, #0
 800746a:	f000 80d1 	beq.w	8007610 <_printf_i+0x1c4>
 800746e:	2f58      	cmp	r7, #88	@ 0x58
 8007470:	f000 80b8 	beq.w	80075e4 <_printf_i+0x198>
 8007474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800747c:	e03a      	b.n	80074f4 <_printf_i+0xa8>
 800747e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007482:	2b15      	cmp	r3, #21
 8007484:	d8f6      	bhi.n	8007474 <_printf_i+0x28>
 8007486:	a101      	add	r1, pc, #4	@ (adr r1, 800748c <_printf_i+0x40>)
 8007488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800748c:	080074e5 	.word	0x080074e5
 8007490:	080074f9 	.word	0x080074f9
 8007494:	08007475 	.word	0x08007475
 8007498:	08007475 	.word	0x08007475
 800749c:	08007475 	.word	0x08007475
 80074a0:	08007475 	.word	0x08007475
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	08007475 	.word	0x08007475
 80074ac:	08007475 	.word	0x08007475
 80074b0:	08007475 	.word	0x08007475
 80074b4:	08007475 	.word	0x08007475
 80074b8:	080075f7 	.word	0x080075f7
 80074bc:	08007523 	.word	0x08007523
 80074c0:	080075b1 	.word	0x080075b1
 80074c4:	08007475 	.word	0x08007475
 80074c8:	08007475 	.word	0x08007475
 80074cc:	08007619 	.word	0x08007619
 80074d0:	08007475 	.word	0x08007475
 80074d4:	08007523 	.word	0x08007523
 80074d8:	08007475 	.word	0x08007475
 80074dc:	08007475 	.word	0x08007475
 80074e0:	080075b9 	.word	0x080075b9
 80074e4:	6833      	ldr	r3, [r6, #0]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6032      	str	r2, [r6, #0]
 80074ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074f4:	2301      	movs	r3, #1
 80074f6:	e09c      	b.n	8007632 <_printf_i+0x1e6>
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	6820      	ldr	r0, [r4, #0]
 80074fc:	1d19      	adds	r1, r3, #4
 80074fe:	6031      	str	r1, [r6, #0]
 8007500:	0606      	lsls	r6, r0, #24
 8007502:	d501      	bpl.n	8007508 <_printf_i+0xbc>
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	e003      	b.n	8007510 <_printf_i+0xc4>
 8007508:	0645      	lsls	r5, r0, #25
 800750a:	d5fb      	bpl.n	8007504 <_printf_i+0xb8>
 800750c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007510:	2d00      	cmp	r5, #0
 8007512:	da03      	bge.n	800751c <_printf_i+0xd0>
 8007514:	232d      	movs	r3, #45	@ 0x2d
 8007516:	426d      	negs	r5, r5
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800751c:	230a      	movs	r3, #10
 800751e:	4858      	ldr	r0, [pc, #352]	@ (8007680 <_printf_i+0x234>)
 8007520:	e011      	b.n	8007546 <_printf_i+0xfa>
 8007522:	6821      	ldr	r1, [r4, #0]
 8007524:	6833      	ldr	r3, [r6, #0]
 8007526:	0608      	lsls	r0, r1, #24
 8007528:	f853 5b04 	ldr.w	r5, [r3], #4
 800752c:	d402      	bmi.n	8007534 <_printf_i+0xe8>
 800752e:	0649      	lsls	r1, r1, #25
 8007530:	bf48      	it	mi
 8007532:	b2ad      	uxthmi	r5, r5
 8007534:	2f6f      	cmp	r7, #111	@ 0x6f
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	bf14      	ite	ne
 800753a:	230a      	movne	r3, #10
 800753c:	2308      	moveq	r3, #8
 800753e:	4850      	ldr	r0, [pc, #320]	@ (8007680 <_printf_i+0x234>)
 8007540:	2100      	movs	r1, #0
 8007542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007546:	6866      	ldr	r6, [r4, #4]
 8007548:	2e00      	cmp	r6, #0
 800754a:	60a6      	str	r6, [r4, #8]
 800754c:	db05      	blt.n	800755a <_printf_i+0x10e>
 800754e:	6821      	ldr	r1, [r4, #0]
 8007550:	432e      	orrs	r6, r5
 8007552:	f021 0104 	bic.w	r1, r1, #4
 8007556:	6021      	str	r1, [r4, #0]
 8007558:	d04b      	beq.n	80075f2 <_printf_i+0x1a6>
 800755a:	4616      	mov	r6, r2
 800755c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007560:	fb03 5711 	mls	r7, r3, r1, r5
 8007564:	5dc7      	ldrb	r7, [r0, r7]
 8007566:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800756a:	462f      	mov	r7, r5
 800756c:	42bb      	cmp	r3, r7
 800756e:	460d      	mov	r5, r1
 8007570:	d9f4      	bls.n	800755c <_printf_i+0x110>
 8007572:	2b08      	cmp	r3, #8
 8007574:	d10b      	bne.n	800758e <_printf_i+0x142>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	07df      	lsls	r7, r3, #31
 800757a:	d508      	bpl.n	800758e <_printf_i+0x142>
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	6861      	ldr	r1, [r4, #4]
 8007580:	4299      	cmp	r1, r3
 8007582:	bfde      	ittt	le
 8007584:	2330      	movle	r3, #48	@ 0x30
 8007586:	f806 3c01 	strble.w	r3, [r6, #-1]
 800758a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800758e:	1b92      	subs	r2, r2, r6
 8007590:	6122      	str	r2, [r4, #16]
 8007592:	464b      	mov	r3, r9
 8007594:	4621      	mov	r1, r4
 8007596:	4640      	mov	r0, r8
 8007598:	f8cd a000 	str.w	sl, [sp]
 800759c:	aa03      	add	r2, sp, #12
 800759e:	f7ff fee3 	bl	8007368 <_printf_common>
 80075a2:	3001      	adds	r0, #1
 80075a4:	d14a      	bne.n	800763c <_printf_i+0x1f0>
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	b004      	add	sp, #16
 80075ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f043 0320 	orr.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2778      	movs	r7, #120	@ 0x78
 80075ba:	4832      	ldr	r0, [pc, #200]	@ (8007684 <_printf_i+0x238>)
 80075bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6831      	ldr	r1, [r6, #0]
 80075c4:	061f      	lsls	r7, r3, #24
 80075c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80075ca:	d402      	bmi.n	80075d2 <_printf_i+0x186>
 80075cc:	065f      	lsls	r7, r3, #25
 80075ce:	bf48      	it	mi
 80075d0:	b2ad      	uxthmi	r5, r5
 80075d2:	6031      	str	r1, [r6, #0]
 80075d4:	07d9      	lsls	r1, r3, #31
 80075d6:	bf44      	itt	mi
 80075d8:	f043 0320 	orrmi.w	r3, r3, #32
 80075dc:	6023      	strmi	r3, [r4, #0]
 80075de:	b11d      	cbz	r5, 80075e8 <_printf_i+0x19c>
 80075e0:	2310      	movs	r3, #16
 80075e2:	e7ad      	b.n	8007540 <_printf_i+0xf4>
 80075e4:	4826      	ldr	r0, [pc, #152]	@ (8007680 <_printf_i+0x234>)
 80075e6:	e7e9      	b.n	80075bc <_printf_i+0x170>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	f023 0320 	bic.w	r3, r3, #32
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	e7f6      	b.n	80075e0 <_printf_i+0x194>
 80075f2:	4616      	mov	r6, r2
 80075f4:	e7bd      	b.n	8007572 <_printf_i+0x126>
 80075f6:	6833      	ldr	r3, [r6, #0]
 80075f8:	6825      	ldr	r5, [r4, #0]
 80075fa:	1d18      	adds	r0, r3, #4
 80075fc:	6961      	ldr	r1, [r4, #20]
 80075fe:	6030      	str	r0, [r6, #0]
 8007600:	062e      	lsls	r6, r5, #24
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	d501      	bpl.n	800760a <_printf_i+0x1be>
 8007606:	6019      	str	r1, [r3, #0]
 8007608:	e002      	b.n	8007610 <_printf_i+0x1c4>
 800760a:	0668      	lsls	r0, r5, #25
 800760c:	d5fb      	bpl.n	8007606 <_printf_i+0x1ba>
 800760e:	8019      	strh	r1, [r3, #0]
 8007610:	2300      	movs	r3, #0
 8007612:	4616      	mov	r6, r2
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	e7bc      	b.n	8007592 <_printf_i+0x146>
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	2100      	movs	r1, #0
 800761c:	1d1a      	adds	r2, r3, #4
 800761e:	6032      	str	r2, [r6, #0]
 8007620:	681e      	ldr	r6, [r3, #0]
 8007622:	6862      	ldr	r2, [r4, #4]
 8007624:	4630      	mov	r0, r6
 8007626:	f000 f9d6 	bl	80079d6 <memchr>
 800762a:	b108      	cbz	r0, 8007630 <_printf_i+0x1e4>
 800762c:	1b80      	subs	r0, r0, r6
 800762e:	6060      	str	r0, [r4, #4]
 8007630:	6863      	ldr	r3, [r4, #4]
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	2300      	movs	r3, #0
 8007636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763a:	e7aa      	b.n	8007592 <_printf_i+0x146>
 800763c:	4632      	mov	r2, r6
 800763e:	4649      	mov	r1, r9
 8007640:	4640      	mov	r0, r8
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	47d0      	blx	sl
 8007646:	3001      	adds	r0, #1
 8007648:	d0ad      	beq.n	80075a6 <_printf_i+0x15a>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	079b      	lsls	r3, r3, #30
 800764e:	d413      	bmi.n	8007678 <_printf_i+0x22c>
 8007650:	68e0      	ldr	r0, [r4, #12]
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	4298      	cmp	r0, r3
 8007656:	bfb8      	it	lt
 8007658:	4618      	movlt	r0, r3
 800765a:	e7a6      	b.n	80075aa <_printf_i+0x15e>
 800765c:	2301      	movs	r3, #1
 800765e:	4632      	mov	r2, r6
 8007660:	4649      	mov	r1, r9
 8007662:	4640      	mov	r0, r8
 8007664:	47d0      	blx	sl
 8007666:	3001      	adds	r0, #1
 8007668:	d09d      	beq.n	80075a6 <_printf_i+0x15a>
 800766a:	3501      	adds	r5, #1
 800766c:	68e3      	ldr	r3, [r4, #12]
 800766e:	9903      	ldr	r1, [sp, #12]
 8007670:	1a5b      	subs	r3, r3, r1
 8007672:	42ab      	cmp	r3, r5
 8007674:	dcf2      	bgt.n	800765c <_printf_i+0x210>
 8007676:	e7eb      	b.n	8007650 <_printf_i+0x204>
 8007678:	2500      	movs	r5, #0
 800767a:	f104 0619 	add.w	r6, r4, #25
 800767e:	e7f5      	b.n	800766c <_printf_i+0x220>
 8007680:	0800a850 	.word	0x0800a850
 8007684:	0800a861 	.word	0x0800a861

08007688 <std>:
 8007688:	2300      	movs	r3, #0
 800768a:	b510      	push	{r4, lr}
 800768c:	4604      	mov	r4, r0
 800768e:	e9c0 3300 	strd	r3, r3, [r0]
 8007692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007696:	6083      	str	r3, [r0, #8]
 8007698:	8181      	strh	r1, [r0, #12]
 800769a:	6643      	str	r3, [r0, #100]	@ 0x64
 800769c:	81c2      	strh	r2, [r0, #14]
 800769e:	6183      	str	r3, [r0, #24]
 80076a0:	4619      	mov	r1, r3
 80076a2:	2208      	movs	r2, #8
 80076a4:	305c      	adds	r0, #92	@ 0x5c
 80076a6:	f000 f916 	bl	80078d6 <memset>
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <std+0x58>)
 80076ac:	6224      	str	r4, [r4, #32]
 80076ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80076b0:	4b0c      	ldr	r3, [pc, #48]	@ (80076e4 <std+0x5c>)
 80076b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076b4:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <std+0x60>)
 80076b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076b8:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <std+0x64>)
 80076ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <std+0x68>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	d006      	beq.n	80076d0 <std+0x48>
 80076c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076c6:	4294      	cmp	r4, r2
 80076c8:	d002      	beq.n	80076d0 <std+0x48>
 80076ca:	33d0      	adds	r3, #208	@ 0xd0
 80076cc:	429c      	cmp	r4, r3
 80076ce:	d105      	bne.n	80076dc <std+0x54>
 80076d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d8:	f000 b97a 	b.w	80079d0 <__retarget_lock_init_recursive>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	bf00      	nop
 80076e0:	08007851 	.word	0x08007851
 80076e4:	08007873 	.word	0x08007873
 80076e8:	080078ab 	.word	0x080078ab
 80076ec:	080078cf 	.word	0x080078cf
 80076f0:	20000810 	.word	0x20000810

080076f4 <stdio_exit_handler>:
 80076f4:	4a02      	ldr	r2, [pc, #8]	@ (8007700 <stdio_exit_handler+0xc>)
 80076f6:	4903      	ldr	r1, [pc, #12]	@ (8007704 <stdio_exit_handler+0x10>)
 80076f8:	4803      	ldr	r0, [pc, #12]	@ (8007708 <stdio_exit_handler+0x14>)
 80076fa:	f000 b869 	b.w	80077d0 <_fwalk_sglue>
 80076fe:	bf00      	nop
 8007700:	20000014 	.word	0x20000014
 8007704:	08009351 	.word	0x08009351
 8007708:	20000024 	.word	0x20000024

0800770c <cleanup_stdio>:
 800770c:	6841      	ldr	r1, [r0, #4]
 800770e:	4b0c      	ldr	r3, [pc, #48]	@ (8007740 <cleanup_stdio+0x34>)
 8007710:	b510      	push	{r4, lr}
 8007712:	4299      	cmp	r1, r3
 8007714:	4604      	mov	r4, r0
 8007716:	d001      	beq.n	800771c <cleanup_stdio+0x10>
 8007718:	f001 fe1a 	bl	8009350 <_fflush_r>
 800771c:	68a1      	ldr	r1, [r4, #8]
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <cleanup_stdio+0x38>)
 8007720:	4299      	cmp	r1, r3
 8007722:	d002      	beq.n	800772a <cleanup_stdio+0x1e>
 8007724:	4620      	mov	r0, r4
 8007726:	f001 fe13 	bl	8009350 <_fflush_r>
 800772a:	68e1      	ldr	r1, [r4, #12]
 800772c:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <cleanup_stdio+0x3c>)
 800772e:	4299      	cmp	r1, r3
 8007730:	d004      	beq.n	800773c <cleanup_stdio+0x30>
 8007732:	4620      	mov	r0, r4
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f001 be0a 	b.w	8009350 <_fflush_r>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	bf00      	nop
 8007740:	20000810 	.word	0x20000810
 8007744:	20000878 	.word	0x20000878
 8007748:	200008e0 	.word	0x200008e0

0800774c <global_stdio_init.part.0>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4b0b      	ldr	r3, [pc, #44]	@ (800777c <global_stdio_init.part.0+0x30>)
 8007750:	4c0b      	ldr	r4, [pc, #44]	@ (8007780 <global_stdio_init.part.0+0x34>)
 8007752:	4a0c      	ldr	r2, [pc, #48]	@ (8007784 <global_stdio_init.part.0+0x38>)
 8007754:	4620      	mov	r0, r4
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	2104      	movs	r1, #4
 800775a:	2200      	movs	r2, #0
 800775c:	f7ff ff94 	bl	8007688 <std>
 8007760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007764:	2201      	movs	r2, #1
 8007766:	2109      	movs	r1, #9
 8007768:	f7ff ff8e 	bl	8007688 <std>
 800776c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007770:	2202      	movs	r2, #2
 8007772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007776:	2112      	movs	r1, #18
 8007778:	f7ff bf86 	b.w	8007688 <std>
 800777c:	20000948 	.word	0x20000948
 8007780:	20000810 	.word	0x20000810
 8007784:	080076f5 	.word	0x080076f5

08007788 <__sfp_lock_acquire>:
 8007788:	4801      	ldr	r0, [pc, #4]	@ (8007790 <__sfp_lock_acquire+0x8>)
 800778a:	f000 b922 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 800778e:	bf00      	nop
 8007790:	20000951 	.word	0x20000951

08007794 <__sfp_lock_release>:
 8007794:	4801      	ldr	r0, [pc, #4]	@ (800779c <__sfp_lock_release+0x8>)
 8007796:	f000 b91d 	b.w	80079d4 <__retarget_lock_release_recursive>
 800779a:	bf00      	nop
 800779c:	20000951 	.word	0x20000951

080077a0 <__sinit>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4604      	mov	r4, r0
 80077a4:	f7ff fff0 	bl	8007788 <__sfp_lock_acquire>
 80077a8:	6a23      	ldr	r3, [r4, #32]
 80077aa:	b11b      	cbz	r3, 80077b4 <__sinit+0x14>
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f7ff bff0 	b.w	8007794 <__sfp_lock_release>
 80077b4:	4b04      	ldr	r3, [pc, #16]	@ (80077c8 <__sinit+0x28>)
 80077b6:	6223      	str	r3, [r4, #32]
 80077b8:	4b04      	ldr	r3, [pc, #16]	@ (80077cc <__sinit+0x2c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1f5      	bne.n	80077ac <__sinit+0xc>
 80077c0:	f7ff ffc4 	bl	800774c <global_stdio_init.part.0>
 80077c4:	e7f2      	b.n	80077ac <__sinit+0xc>
 80077c6:	bf00      	nop
 80077c8:	0800770d 	.word	0x0800770d
 80077cc:	20000948 	.word	0x20000948

080077d0 <_fwalk_sglue>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	4607      	mov	r7, r0
 80077d6:	4688      	mov	r8, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	2600      	movs	r6, #0
 80077dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e0:	f1b9 0901 	subs.w	r9, r9, #1
 80077e4:	d505      	bpl.n	80077f2 <_fwalk_sglue+0x22>
 80077e6:	6824      	ldr	r4, [r4, #0]
 80077e8:	2c00      	cmp	r4, #0
 80077ea:	d1f7      	bne.n	80077dc <_fwalk_sglue+0xc>
 80077ec:	4630      	mov	r0, r6
 80077ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d907      	bls.n	8007808 <_fwalk_sglue+0x38>
 80077f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077fc:	3301      	adds	r3, #1
 80077fe:	d003      	beq.n	8007808 <_fwalk_sglue+0x38>
 8007800:	4629      	mov	r1, r5
 8007802:	4638      	mov	r0, r7
 8007804:	47c0      	blx	r8
 8007806:	4306      	orrs	r6, r0
 8007808:	3568      	adds	r5, #104	@ 0x68
 800780a:	e7e9      	b.n	80077e0 <_fwalk_sglue+0x10>

0800780c <siprintf>:
 800780c:	b40e      	push	{r1, r2, r3}
 800780e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007812:	b510      	push	{r4, lr}
 8007814:	2400      	movs	r4, #0
 8007816:	b09d      	sub	sp, #116	@ 0x74
 8007818:	ab1f      	add	r3, sp, #124	@ 0x7c
 800781a:	9002      	str	r0, [sp, #8]
 800781c:	9006      	str	r0, [sp, #24]
 800781e:	9107      	str	r1, [sp, #28]
 8007820:	9104      	str	r1, [sp, #16]
 8007822:	4809      	ldr	r0, [pc, #36]	@ (8007848 <siprintf+0x3c>)
 8007824:	4909      	ldr	r1, [pc, #36]	@ (800784c <siprintf+0x40>)
 8007826:	f853 2b04 	ldr.w	r2, [r3], #4
 800782a:	9105      	str	r1, [sp, #20]
 800782c:	6800      	ldr	r0, [r0, #0]
 800782e:	a902      	add	r1, sp, #8
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007834:	f001 fc10 	bl	8009058 <_svfiprintf_r>
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	701c      	strb	r4, [r3, #0]
 800783c:	b01d      	add	sp, #116	@ 0x74
 800783e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007842:	b003      	add	sp, #12
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000020 	.word	0x20000020
 800784c:	ffff0208 	.word	0xffff0208

08007850 <__sread>:
 8007850:	b510      	push	{r4, lr}
 8007852:	460c      	mov	r4, r1
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	f000 f86c 	bl	8007934 <_read_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	bfab      	itete	ge
 8007860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007862:	89a3      	ldrhlt	r3, [r4, #12]
 8007864:	181b      	addge	r3, r3, r0
 8007866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800786a:	bfac      	ite	ge
 800786c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800786e:	81a3      	strhlt	r3, [r4, #12]
 8007870:	bd10      	pop	{r4, pc}

08007872 <__swrite>:
 8007872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	461f      	mov	r7, r3
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	4605      	mov	r5, r0
 800787c:	05db      	lsls	r3, r3, #23
 800787e:	460c      	mov	r4, r1
 8007880:	4616      	mov	r6, r2
 8007882:	d505      	bpl.n	8007890 <__swrite+0x1e>
 8007884:	2302      	movs	r3, #2
 8007886:	2200      	movs	r2, #0
 8007888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788c:	f000 f840 	bl	8007910 <_lseek_r>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	4632      	mov	r2, r6
 8007894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	4628      	mov	r0, r5
 800789c:	463b      	mov	r3, r7
 800789e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a6:	f000 b857 	b.w	8007958 <_write_r>

080078aa <__sseek>:
 80078aa:	b510      	push	{r4, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b2:	f000 f82d 	bl	8007910 <_lseek_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	bf15      	itete	ne
 80078bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078c6:	81a3      	strheq	r3, [r4, #12]
 80078c8:	bf18      	it	ne
 80078ca:	81a3      	strhne	r3, [r4, #12]
 80078cc:	bd10      	pop	{r4, pc}

080078ce <__sclose>:
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 b80d 	b.w	80078f0 <_close_r>

080078d6 <memset>:
 80078d6:	4603      	mov	r3, r0
 80078d8:	4402      	add	r2, r0
 80078da:	4293      	cmp	r3, r2
 80078dc:	d100      	bne.n	80078e0 <memset+0xa>
 80078de:	4770      	bx	lr
 80078e0:	f803 1b01 	strb.w	r1, [r3], #1
 80078e4:	e7f9      	b.n	80078da <memset+0x4>
	...

080078e8 <_localeconv_r>:
 80078e8:	4800      	ldr	r0, [pc, #0]	@ (80078ec <_localeconv_r+0x4>)
 80078ea:	4770      	bx	lr
 80078ec:	20000160 	.word	0x20000160

080078f0 <_close_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	2300      	movs	r3, #0
 80078f4:	4d05      	ldr	r5, [pc, #20]	@ (800790c <_close_r+0x1c>)
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7fa fb7d 	bl	8001ffa <_close>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_close_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_close_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	2000094c 	.word	0x2000094c

08007910 <_lseek_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	2200      	movs	r2, #0
 800791a:	4d05      	ldr	r5, [pc, #20]	@ (8007930 <_lseek_r+0x20>)
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7fa fb8f 	bl	8002042 <_lseek>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_lseek_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_lseek_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	2000094c 	.word	0x2000094c

08007934 <_read_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	4611      	mov	r1, r2
 800793c:	2200      	movs	r2, #0
 800793e:	4d05      	ldr	r5, [pc, #20]	@ (8007954 <_read_r+0x20>)
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fa fb20 	bl	8001f88 <_read>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_read_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_read_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	2000094c 	.word	0x2000094c

08007958 <_write_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	4611      	mov	r1, r2
 8007960:	2200      	movs	r2, #0
 8007962:	4d05      	ldr	r5, [pc, #20]	@ (8007978 <_write_r+0x20>)
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7fa fb2b 	bl	8001fc2 <_write>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_write_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_write_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	2000094c 	.word	0x2000094c

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	@ (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000020 	.word	0x20000020

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	2600      	movs	r6, #0
 800798c:	4d0c      	ldr	r5, [pc, #48]	@ (80079c0 <__libc_init_array+0x38>)
 800798e:	4c0d      	ldr	r4, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	f002 f876 	bl	8009a88 <_init>
 800799c:	2600      	movs	r6, #0
 800799e:	4d0a      	ldr	r5, [pc, #40]	@ (80079c8 <__libc_init_array+0x40>)
 80079a0:	4c0a      	ldr	r4, [pc, #40]	@ (80079cc <__libc_init_array+0x44>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	0800abbc 	.word	0x0800abbc
 80079c4:	0800abbc 	.word	0x0800abbc
 80079c8:	0800abbc 	.word	0x0800abbc
 80079cc:	0800abc0 	.word	0x0800abc0

080079d0 <__retarget_lock_init_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_acquire_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <__retarget_lock_release_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <memchr>:
 80079d6:	4603      	mov	r3, r0
 80079d8:	b510      	push	{r4, lr}
 80079da:	b2c9      	uxtb	r1, r1
 80079dc:	4402      	add	r2, r0
 80079de:	4293      	cmp	r3, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	d101      	bne.n	80079e8 <memchr+0x12>
 80079e4:	2000      	movs	r0, #0
 80079e6:	e003      	b.n	80079f0 <memchr+0x1a>
 80079e8:	7804      	ldrb	r4, [r0, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	428c      	cmp	r4, r1
 80079ee:	d1f6      	bne.n	80079de <memchr+0x8>
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <quorem>:
 80079f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f6:	6903      	ldr	r3, [r0, #16]
 80079f8:	690c      	ldr	r4, [r1, #16]
 80079fa:	4607      	mov	r7, r0
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	db7e      	blt.n	8007afe <quorem+0x10c>
 8007a00:	3c01      	subs	r4, #1
 8007a02:	00a3      	lsls	r3, r4, #2
 8007a04:	f100 0514 	add.w	r5, r0, #20
 8007a08:	f101 0814 	add.w	r8, r1, #20
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a28:	d32e      	bcc.n	8007a88 <quorem+0x96>
 8007a2a:	f04f 0a00 	mov.w	sl, #0
 8007a2e:	46c4      	mov	ip, r8
 8007a30:	46ae      	mov	lr, r5
 8007a32:	46d3      	mov	fp, sl
 8007a34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a38:	b298      	uxth	r0, r3
 8007a3a:	fb06 a000 	mla	r0, r6, r0, sl
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	0c02      	lsrs	r2, r0, #16
 8007a42:	fb06 2303 	mla	r3, r6, r3, r2
 8007a46:	f8de 2000 	ldr.w	r2, [lr]
 8007a4a:	b280      	uxth	r0, r0
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	1a12      	subs	r2, r2, r0
 8007a50:	445a      	add	r2, fp
 8007a52:	f8de 0000 	ldr.w	r0, [lr]
 8007a56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a64:	b292      	uxth	r2, r2
 8007a66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a6a:	45e1      	cmp	r9, ip
 8007a6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a70:	f84e 2b04 	str.w	r2, [lr], #4
 8007a74:	d2de      	bcs.n	8007a34 <quorem+0x42>
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	58eb      	ldr	r3, [r5, r3]
 8007a7a:	b92b      	cbnz	r3, 8007a88 <quorem+0x96>
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	3b04      	subs	r3, #4
 8007a80:	429d      	cmp	r5, r3
 8007a82:	461a      	mov	r2, r3
 8007a84:	d32f      	bcc.n	8007ae6 <quorem+0xf4>
 8007a86:	613c      	str	r4, [r7, #16]
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f001 f981 	bl	8008d90 <__mcmp>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	db25      	blt.n	8007ade <quorem+0xec>
 8007a92:	4629      	mov	r1, r5
 8007a94:	2000      	movs	r0, #0
 8007a96:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a9a:	f8d1 c000 	ldr.w	ip, [r1]
 8007a9e:	fa1f fe82 	uxth.w	lr, r2
 8007aa2:	fa1f f38c 	uxth.w	r3, ip
 8007aa6:	eba3 030e 	sub.w	r3, r3, lr
 8007aaa:	4403      	add	r3, r0
 8007aac:	0c12      	lsrs	r2, r2, #16
 8007aae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ab2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007abc:	45c1      	cmp	r9, r8
 8007abe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ac2:	f841 3b04 	str.w	r3, [r1], #4
 8007ac6:	d2e6      	bcs.n	8007a96 <quorem+0xa4>
 8007ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007acc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ad0:	b922      	cbnz	r2, 8007adc <quorem+0xea>
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	429d      	cmp	r5, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	d30b      	bcc.n	8007af2 <quorem+0x100>
 8007ada:	613c      	str	r4, [r7, #16]
 8007adc:	3601      	adds	r6, #1
 8007ade:	4630      	mov	r0, r6
 8007ae0:	b003      	add	sp, #12
 8007ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	d1cb      	bne.n	8007a86 <quorem+0x94>
 8007aee:	3c01      	subs	r4, #1
 8007af0:	e7c6      	b.n	8007a80 <quorem+0x8e>
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	d1ef      	bne.n	8007ada <quorem+0xe8>
 8007afa:	3c01      	subs	r4, #1
 8007afc:	e7ea      	b.n	8007ad4 <quorem+0xe2>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e7ee      	b.n	8007ae0 <quorem+0xee>
 8007b02:	0000      	movs	r0, r0
 8007b04:	0000      	movs	r0, r0
	...

08007b08 <_dtoa_r>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	461d      	mov	r5, r3
 8007b10:	69c7      	ldr	r7, [r0, #28]
 8007b12:	b097      	sub	sp, #92	@ 0x5c
 8007b14:	4681      	mov	r9, r0
 8007b16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007b1c:	b97f      	cbnz	r7, 8007b3e <_dtoa_r+0x36>
 8007b1e:	2010      	movs	r0, #16
 8007b20:	f000 fe0e 	bl	8008740 <malloc>
 8007b24:	4602      	mov	r2, r0
 8007b26:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b2a:	b920      	cbnz	r0, 8007b36 <_dtoa_r+0x2e>
 8007b2c:	21ef      	movs	r1, #239	@ 0xef
 8007b2e:	4bac      	ldr	r3, [pc, #688]	@ (8007de0 <_dtoa_r+0x2d8>)
 8007b30:	48ac      	ldr	r0, [pc, #688]	@ (8007de4 <_dtoa_r+0x2dc>)
 8007b32:	f001 fc6d 	bl	8009410 <__assert_func>
 8007b36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b3a:	6007      	str	r7, [r0, #0]
 8007b3c:	60c7      	str	r7, [r0, #12]
 8007b3e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	b159      	cbz	r1, 8007b5e <_dtoa_r+0x56>
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4093      	lsls	r3, r2
 8007b4c:	604a      	str	r2, [r1, #4]
 8007b4e:	608b      	str	r3, [r1, #8]
 8007b50:	4648      	mov	r0, r9
 8007b52:	f000 feeb 	bl	800892c <_Bfree>
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	1e2b      	subs	r3, r5, #0
 8007b60:	bfaf      	iteee	ge
 8007b62:	2300      	movge	r3, #0
 8007b64:	2201      	movlt	r2, #1
 8007b66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b6a:	9307      	strlt	r3, [sp, #28]
 8007b6c:	bfa8      	it	ge
 8007b6e:	6033      	strge	r3, [r6, #0]
 8007b70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007b74:	4b9c      	ldr	r3, [pc, #624]	@ (8007de8 <_dtoa_r+0x2e0>)
 8007b76:	bfb8      	it	lt
 8007b78:	6032      	strlt	r2, [r6, #0]
 8007b7a:	ea33 0308 	bics.w	r3, r3, r8
 8007b7e:	d112      	bne.n	8007ba6 <_dtoa_r+0x9e>
 8007b80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b8c:	4323      	orrs	r3, r4
 8007b8e:	f000 855e 	beq.w	800864e <_dtoa_r+0xb46>
 8007b92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007dec <_dtoa_r+0x2e4>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8560 	beq.w	800865e <_dtoa_r+0xb56>
 8007b9e:	f10a 0303 	add.w	r3, sl, #3
 8007ba2:	f000 bd5a 	b.w	800865a <_dtoa_r+0xb52>
 8007ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007baa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f7f8 fef7 	bl	80009a8 <__aeabi_dcmpeq>
 8007bba:	4607      	mov	r7, r0
 8007bbc:	b158      	cbz	r0, 8007bd6 <_dtoa_r+0xce>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bc6:	b113      	cbz	r3, 8007bce <_dtoa_r+0xc6>
 8007bc8:	4b89      	ldr	r3, [pc, #548]	@ (8007df0 <_dtoa_r+0x2e8>)
 8007bca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007df4 <_dtoa_r+0x2ec>
 8007bd2:	f000 bd44 	b.w	800865e <_dtoa_r+0xb56>
 8007bd6:	ab14      	add	r3, sp, #80	@ 0x50
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	ab15      	add	r3, sp, #84	@ 0x54
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4648      	mov	r0, r9
 8007be0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007be4:	f001 f984 	bl	8008ef0 <__d2b>
 8007be8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007bec:	9003      	str	r0, [sp, #12]
 8007bee:	2e00      	cmp	r6, #0
 8007bf0:	d078      	beq.n	8007ce4 <_dtoa_r+0x1dc>
 8007bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bf8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c08:	9712      	str	r7, [sp, #72]	@ 0x48
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8007df8 <_dtoa_r+0x2f0>)
 8007c10:	f7f8 faaa 	bl	8000168 <__aeabi_dsub>
 8007c14:	a36c      	add	r3, pc, #432	@ (adr r3, 8007dc8 <_dtoa_r+0x2c0>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f7f8 fc5d 	bl	80004d8 <__aeabi_dmul>
 8007c1e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007dd0 <_dtoa_r+0x2c8>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 faa2 	bl	800016c <__adddf3>
 8007c28:	4604      	mov	r4, r0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	f7f8 fbe9 	bl	8000404 <__aeabi_i2d>
 8007c32:	a369      	add	r3, pc, #420	@ (adr r3, 8007dd8 <_dtoa_r+0x2d0>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fc4e 	bl	80004d8 <__aeabi_dmul>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4620      	mov	r0, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	f7f8 fa92 	bl	800016c <__adddf3>
 8007c48:	4604      	mov	r4, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	f7f8 fef4 	bl	8000a38 <__aeabi_d2iz>
 8007c50:	2200      	movs	r2, #0
 8007c52:	4607      	mov	r7, r0
 8007c54:	2300      	movs	r3, #0
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 feaf 	bl	80009bc <__aeabi_dcmplt>
 8007c5e:	b140      	cbz	r0, 8007c72 <_dtoa_r+0x16a>
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7f8 fbcf 	bl	8000404 <__aeabi_i2d>
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	f7f8 fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8007c6e:	b900      	cbnz	r0, 8007c72 <_dtoa_r+0x16a>
 8007c70:	3f01      	subs	r7, #1
 8007c72:	2f16      	cmp	r7, #22
 8007c74:	d854      	bhi.n	8007d20 <_dtoa_r+0x218>
 8007c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c7a:	4b60      	ldr	r3, [pc, #384]	@ (8007dfc <_dtoa_r+0x2f4>)
 8007c7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 fe9a 	bl	80009bc <__aeabi_dcmplt>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d04b      	beq.n	8007d24 <_dtoa_r+0x21c>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	3f01      	subs	r7, #1
 8007c90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c94:	1b9b      	subs	r3, r3, r6
 8007c96:	1e5a      	subs	r2, r3, #1
 8007c98:	bf49      	itett	mi
 8007c9a:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c9e:	2300      	movpl	r3, #0
 8007ca0:	9304      	strmi	r3, [sp, #16]
 8007ca2:	2300      	movmi	r3, #0
 8007ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ca6:	bf54      	ite	pl
 8007ca8:	9304      	strpl	r3, [sp, #16]
 8007caa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007cac:	2f00      	cmp	r7, #0
 8007cae:	db3b      	blt.n	8007d28 <_dtoa_r+0x220>
 8007cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb2:	970e      	str	r7, [sp, #56]	@ 0x38
 8007cb4:	443b      	add	r3, r7
 8007cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb8:	2300      	movs	r3, #0
 8007cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cbe:	2b09      	cmp	r3, #9
 8007cc0:	d865      	bhi.n	8007d8e <_dtoa_r+0x286>
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	bfc4      	itt	gt
 8007cc6:	3b04      	subgt	r3, #4
 8007cc8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007cca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ccc:	bfc8      	it	gt
 8007cce:	2400      	movgt	r4, #0
 8007cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8007cd4:	bfd8      	it	le
 8007cd6:	2401      	movle	r4, #1
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d864      	bhi.n	8007da6 <_dtoa_r+0x29e>
 8007cdc:	e8df f003 	tbb	[pc, r3]
 8007ce0:	2c385553 	.word	0x2c385553
 8007ce4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ce8:	441e      	add	r6, r3
 8007cea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	bfc1      	itttt	gt
 8007cf2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cf6:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d02:	bfd6      	itet	le
 8007d04:	f1c3 0320 	rsble	r3, r3, #32
 8007d08:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d0c:	fa04 f003 	lslle.w	r0, r4, r3
 8007d10:	f7f8 fb68 	bl	80003e4 <__aeabi_ui2d>
 8007d14:	2201      	movs	r2, #1
 8007d16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d1a:	3e01      	subs	r6, #1
 8007d1c:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d1e:	e774      	b.n	8007c0a <_dtoa_r+0x102>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e7b5      	b.n	8007c90 <_dtoa_r+0x188>
 8007d24:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d26:	e7b4      	b.n	8007c92 <_dtoa_r+0x18a>
 8007d28:	9b04      	ldr	r3, [sp, #16]
 8007d2a:	1bdb      	subs	r3, r3, r7
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	427b      	negs	r3, r7
 8007d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d32:	2300      	movs	r3, #0
 8007d34:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d36:	e7c1      	b.n	8007cbc <_dtoa_r+0x1b4>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d3e:	eb07 0b03 	add.w	fp, r7, r3
 8007d42:	f10b 0301 	add.w	r3, fp, #1
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	9308      	str	r3, [sp, #32]
 8007d4a:	bfb8      	it	lt
 8007d4c:	2301      	movlt	r3, #1
 8007d4e:	e006      	b.n	8007d5e <_dtoa_r+0x256>
 8007d50:	2301      	movs	r3, #1
 8007d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd28      	ble.n	8007dac <_dtoa_r+0x2a4>
 8007d5a:	469b      	mov	fp, r3
 8007d5c:	9308      	str	r3, [sp, #32]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	2204      	movs	r2, #4
 8007d62:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007d66:	f102 0514 	add.w	r5, r2, #20
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	d926      	bls.n	8007dbc <_dtoa_r+0x2b4>
 8007d6e:	6041      	str	r1, [r0, #4]
 8007d70:	4648      	mov	r0, r9
 8007d72:	f000 fd9b 	bl	80088ac <_Balloc>
 8007d76:	4682      	mov	sl, r0
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d143      	bne.n	8007e04 <_dtoa_r+0x2fc>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d82:	4b1f      	ldr	r3, [pc, #124]	@ (8007e00 <_dtoa_r+0x2f8>)
 8007d84:	e6d4      	b.n	8007b30 <_dtoa_r+0x28>
 8007d86:	2300      	movs	r3, #0
 8007d88:	e7e3      	b.n	8007d52 <_dtoa_r+0x24a>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e7d5      	b.n	8007d3a <_dtoa_r+0x232>
 8007d8e:	2401      	movs	r4, #1
 8007d90:	2300      	movs	r3, #0
 8007d92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d94:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d96:	f04f 3bff 	mov.w	fp, #4294967295
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2312      	movs	r3, #18
 8007d9e:	f8cd b020 	str.w	fp, [sp, #32]
 8007da2:	9221      	str	r2, [sp, #132]	@ 0x84
 8007da4:	e7db      	b.n	8007d5e <_dtoa_r+0x256>
 8007da6:	2301      	movs	r3, #1
 8007da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007daa:	e7f4      	b.n	8007d96 <_dtoa_r+0x28e>
 8007dac:	f04f 0b01 	mov.w	fp, #1
 8007db0:	465b      	mov	r3, fp
 8007db2:	f8cd b020 	str.w	fp, [sp, #32]
 8007db6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007dba:	e7d0      	b.n	8007d5e <_dtoa_r+0x256>
 8007dbc:	3101      	adds	r1, #1
 8007dbe:	0052      	lsls	r2, r2, #1
 8007dc0:	e7d1      	b.n	8007d66 <_dtoa_r+0x25e>
 8007dc2:	bf00      	nop
 8007dc4:	f3af 8000 	nop.w
 8007dc8:	636f4361 	.word	0x636f4361
 8007dcc:	3fd287a7 	.word	0x3fd287a7
 8007dd0:	8b60c8b3 	.word	0x8b60c8b3
 8007dd4:	3fc68a28 	.word	0x3fc68a28
 8007dd8:	509f79fb 	.word	0x509f79fb
 8007ddc:	3fd34413 	.word	0x3fd34413
 8007de0:	0800a87f 	.word	0x0800a87f
 8007de4:	0800a896 	.word	0x0800a896
 8007de8:	7ff00000 	.word	0x7ff00000
 8007dec:	0800a87b 	.word	0x0800a87b
 8007df0:	0800a84f 	.word	0x0800a84f
 8007df4:	0800a84e 	.word	0x0800a84e
 8007df8:	3ff80000 	.word	0x3ff80000
 8007dfc:	0800a9e8 	.word	0x0800a9e8
 8007e00:	0800a8ee 	.word	0x0800a8ee
 8007e04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e08:	6018      	str	r0, [r3, #0]
 8007e0a:	9b08      	ldr	r3, [sp, #32]
 8007e0c:	2b0e      	cmp	r3, #14
 8007e0e:	f200 80a1 	bhi.w	8007f54 <_dtoa_r+0x44c>
 8007e12:	2c00      	cmp	r4, #0
 8007e14:	f000 809e 	beq.w	8007f54 <_dtoa_r+0x44c>
 8007e18:	2f00      	cmp	r7, #0
 8007e1a:	dd33      	ble.n	8007e84 <_dtoa_r+0x37c>
 8007e1c:	4b9c      	ldr	r3, [pc, #624]	@ (8008090 <_dtoa_r+0x588>)
 8007e1e:	f007 020f 	and.w	r2, r7, #15
 8007e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e26:	05f8      	lsls	r0, r7, #23
 8007e28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007e30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e34:	d516      	bpl.n	8007e64 <_dtoa_r+0x35c>
 8007e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e3a:	4b96      	ldr	r3, [pc, #600]	@ (8008094 <_dtoa_r+0x58c>)
 8007e3c:	2603      	movs	r6, #3
 8007e3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e42:	f7f8 fc73 	bl	800072c <__aeabi_ddiv>
 8007e46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e4a:	f004 040f 	and.w	r4, r4, #15
 8007e4e:	4d91      	ldr	r5, [pc, #580]	@ (8008094 <_dtoa_r+0x58c>)
 8007e50:	b954      	cbnz	r4, 8007e68 <_dtoa_r+0x360>
 8007e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e5a:	f7f8 fc67 	bl	800072c <__aeabi_ddiv>
 8007e5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e62:	e028      	b.n	8007eb6 <_dtoa_r+0x3ae>
 8007e64:	2602      	movs	r6, #2
 8007e66:	e7f2      	b.n	8007e4e <_dtoa_r+0x346>
 8007e68:	07e1      	lsls	r1, r4, #31
 8007e6a:	d508      	bpl.n	8007e7e <_dtoa_r+0x376>
 8007e6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e74:	f7f8 fb30 	bl	80004d8 <__aeabi_dmul>
 8007e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e7c:	3601      	adds	r6, #1
 8007e7e:	1064      	asrs	r4, r4, #1
 8007e80:	3508      	adds	r5, #8
 8007e82:	e7e5      	b.n	8007e50 <_dtoa_r+0x348>
 8007e84:	f000 80af 	beq.w	8007fe6 <_dtoa_r+0x4de>
 8007e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e8c:	427c      	negs	r4, r7
 8007e8e:	4b80      	ldr	r3, [pc, #512]	@ (8008090 <_dtoa_r+0x588>)
 8007e90:	f004 020f 	and.w	r2, r4, #15
 8007e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 fb1c 	bl	80004d8 <__aeabi_dmul>
 8007ea0:	2602      	movs	r6, #2
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ea8:	4d7a      	ldr	r5, [pc, #488]	@ (8008094 <_dtoa_r+0x58c>)
 8007eaa:	1124      	asrs	r4, r4, #4
 8007eac:	2c00      	cmp	r4, #0
 8007eae:	f040 808f 	bne.w	8007fd0 <_dtoa_r+0x4c8>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1d3      	bne.n	8007e5e <_dtoa_r+0x356>
 8007eb6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007eba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8094 	beq.w	8007fea <_dtoa_r+0x4e2>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4b73      	ldr	r3, [pc, #460]	@ (8008098 <_dtoa_r+0x590>)
 8007eca:	f7f8 fd77 	bl	80009bc <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f000 808b 	beq.w	8007fea <_dtoa_r+0x4e2>
 8007ed4:	9b08      	ldr	r3, [sp, #32]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8087 	beq.w	8007fea <_dtoa_r+0x4e2>
 8007edc:	f1bb 0f00 	cmp.w	fp, #0
 8007ee0:	dd34      	ble.n	8007f4c <_dtoa_r+0x444>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800809c <_dtoa_r+0x594>)
 8007eea:	f7f8 faf5 	bl	80004d8 <__aeabi_dmul>
 8007eee:	465c      	mov	r4, fp
 8007ef0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ef4:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ef8:	3601      	adds	r6, #1
 8007efa:	4630      	mov	r0, r6
 8007efc:	f7f8 fa82 	bl	8000404 <__aeabi_i2d>
 8007f00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f04:	f7f8 fae8 	bl	80004d8 <__aeabi_dmul>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4b65      	ldr	r3, [pc, #404]	@ (80080a0 <_dtoa_r+0x598>)
 8007f0c:	f7f8 f92e 	bl	800016c <__adddf3>
 8007f10:	4605      	mov	r5, r0
 8007f12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	d16a      	bne.n	8007ff0 <_dtoa_r+0x4e8>
 8007f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4b60      	ldr	r3, [pc, #384]	@ (80080a4 <_dtoa_r+0x59c>)
 8007f22:	f7f8 f921 	bl	8000168 <__aeabi_dsub>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4633      	mov	r3, r6
 8007f32:	f7f8 fd61 	bl	80009f8 <__aeabi_dcmpgt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f040 8298 	bne.w	800846c <_dtoa_r+0x964>
 8007f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f40:	462a      	mov	r2, r5
 8007f42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f46:	f7f8 fd39 	bl	80009bc <__aeabi_dcmplt>
 8007f4a:	bb38      	cbnz	r0, 8007f9c <_dtoa_r+0x494>
 8007f4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f2c0 8157 	blt.w	800820a <_dtoa_r+0x702>
 8007f5c:	2f0e      	cmp	r7, #14
 8007f5e:	f300 8154 	bgt.w	800820a <_dtoa_r+0x702>
 8007f62:	4b4b      	ldr	r3, [pc, #300]	@ (8008090 <_dtoa_r+0x588>)
 8007f64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f280 80e5 	bge.w	8008142 <_dtoa_r+0x63a>
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f300 80e1 	bgt.w	8008142 <_dtoa_r+0x63a>
 8007f80:	d10c      	bne.n	8007f9c <_dtoa_r+0x494>
 8007f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f86:	2200      	movs	r2, #0
 8007f88:	4b46      	ldr	r3, [pc, #280]	@ (80080a4 <_dtoa_r+0x59c>)
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f92:	f7f8 fd27 	bl	80009e4 <__aeabi_dcmpge>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f000 8266 	beq.w	8008468 <_dtoa_r+0x960>
 8007f9c:	2400      	movs	r4, #0
 8007f9e:	4625      	mov	r5, r4
 8007fa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fa2:	4656      	mov	r6, sl
 8007fa4:	ea6f 0803 	mvn.w	r8, r3
 8007fa8:	2700      	movs	r7, #0
 8007faa:	4621      	mov	r1, r4
 8007fac:	4648      	mov	r0, r9
 8007fae:	f000 fcbd 	bl	800892c <_Bfree>
 8007fb2:	2d00      	cmp	r5, #0
 8007fb4:	f000 80bd 	beq.w	8008132 <_dtoa_r+0x62a>
 8007fb8:	b12f      	cbz	r7, 8007fc6 <_dtoa_r+0x4be>
 8007fba:	42af      	cmp	r7, r5
 8007fbc:	d003      	beq.n	8007fc6 <_dtoa_r+0x4be>
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	f000 fcb3 	bl	800892c <_Bfree>
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	4648      	mov	r0, r9
 8007fca:	f000 fcaf 	bl	800892c <_Bfree>
 8007fce:	e0b0      	b.n	8008132 <_dtoa_r+0x62a>
 8007fd0:	07e2      	lsls	r2, r4, #31
 8007fd2:	d505      	bpl.n	8007fe0 <_dtoa_r+0x4d8>
 8007fd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fd8:	f7f8 fa7e 	bl	80004d8 <__aeabi_dmul>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	3601      	adds	r6, #1
 8007fe0:	1064      	asrs	r4, r4, #1
 8007fe2:	3508      	adds	r5, #8
 8007fe4:	e762      	b.n	8007eac <_dtoa_r+0x3a4>
 8007fe6:	2602      	movs	r6, #2
 8007fe8:	e765      	b.n	8007eb6 <_dtoa_r+0x3ae>
 8007fea:	46b8      	mov	r8, r7
 8007fec:	9c08      	ldr	r4, [sp, #32]
 8007fee:	e784      	b.n	8007efa <_dtoa_r+0x3f2>
 8007ff0:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <_dtoa_r+0x588>)
 8007ff2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ff4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ffc:	4454      	add	r4, sl
 8007ffe:	2900      	cmp	r1, #0
 8008000:	d054      	beq.n	80080ac <_dtoa_r+0x5a4>
 8008002:	2000      	movs	r0, #0
 8008004:	4928      	ldr	r1, [pc, #160]	@ (80080a8 <_dtoa_r+0x5a0>)
 8008006:	f7f8 fb91 	bl	800072c <__aeabi_ddiv>
 800800a:	4633      	mov	r3, r6
 800800c:	462a      	mov	r2, r5
 800800e:	f7f8 f8ab 	bl	8000168 <__aeabi_dsub>
 8008012:	4656      	mov	r6, sl
 8008014:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800801c:	f7f8 fd0c 	bl	8000a38 <__aeabi_d2iz>
 8008020:	4605      	mov	r5, r0
 8008022:	f7f8 f9ef 	bl	8000404 <__aeabi_i2d>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802e:	f7f8 f89b 	bl	8000168 <__aeabi_dsub>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	3530      	adds	r5, #48	@ 0x30
 8008038:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800803c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008040:	f806 5b01 	strb.w	r5, [r6], #1
 8008044:	f7f8 fcba 	bl	80009bc <__aeabi_dcmplt>
 8008048:	2800      	cmp	r0, #0
 800804a:	d172      	bne.n	8008132 <_dtoa_r+0x62a>
 800804c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008050:	2000      	movs	r0, #0
 8008052:	4911      	ldr	r1, [pc, #68]	@ (8008098 <_dtoa_r+0x590>)
 8008054:	f7f8 f888 	bl	8000168 <__aeabi_dsub>
 8008058:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800805c:	f7f8 fcae 	bl	80009bc <__aeabi_dcmplt>
 8008060:	2800      	cmp	r0, #0
 8008062:	f040 80b4 	bne.w	80081ce <_dtoa_r+0x6c6>
 8008066:	42a6      	cmp	r6, r4
 8008068:	f43f af70 	beq.w	8007f4c <_dtoa_r+0x444>
 800806c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008070:	2200      	movs	r2, #0
 8008072:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <_dtoa_r+0x594>)
 8008074:	f7f8 fa30 	bl	80004d8 <__aeabi_dmul>
 8008078:	2200      	movs	r2, #0
 800807a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800807e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008082:	4b06      	ldr	r3, [pc, #24]	@ (800809c <_dtoa_r+0x594>)
 8008084:	f7f8 fa28 	bl	80004d8 <__aeabi_dmul>
 8008088:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800808c:	e7c4      	b.n	8008018 <_dtoa_r+0x510>
 800808e:	bf00      	nop
 8008090:	0800a9e8 	.word	0x0800a9e8
 8008094:	0800a9c0 	.word	0x0800a9c0
 8008098:	3ff00000 	.word	0x3ff00000
 800809c:	40240000 	.word	0x40240000
 80080a0:	401c0000 	.word	0x401c0000
 80080a4:	40140000 	.word	0x40140000
 80080a8:	3fe00000 	.word	0x3fe00000
 80080ac:	4631      	mov	r1, r6
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7f8 fa12 	bl	80004d8 <__aeabi_dmul>
 80080b4:	4656      	mov	r6, sl
 80080b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80080bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080c0:	f7f8 fcba 	bl	8000a38 <__aeabi_d2iz>
 80080c4:	4605      	mov	r5, r0
 80080c6:	f7f8 f99d 	bl	8000404 <__aeabi_i2d>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d2:	f7f8 f849 	bl	8000168 <__aeabi_dsub>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	3530      	adds	r5, #48	@ 0x30
 80080dc:	f806 5b01 	strb.w	r5, [r6], #1
 80080e0:	42a6      	cmp	r6, r4
 80080e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	d124      	bne.n	8008136 <_dtoa_r+0x62e>
 80080ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080f0:	4bae      	ldr	r3, [pc, #696]	@ (80083ac <_dtoa_r+0x8a4>)
 80080f2:	f7f8 f83b 	bl	800016c <__adddf3>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080fe:	f7f8 fc7b 	bl	80009f8 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	d163      	bne.n	80081ce <_dtoa_r+0x6c6>
 8008106:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800810a:	2000      	movs	r0, #0
 800810c:	49a7      	ldr	r1, [pc, #668]	@ (80083ac <_dtoa_r+0x8a4>)
 800810e:	f7f8 f82b 	bl	8000168 <__aeabi_dsub>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800811a:	f7f8 fc4f 	bl	80009bc <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f af14 	beq.w	8007f4c <_dtoa_r+0x444>
 8008124:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008126:	1e73      	subs	r3, r6, #1
 8008128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800812a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800812e:	2b30      	cmp	r3, #48	@ 0x30
 8008130:	d0f8      	beq.n	8008124 <_dtoa_r+0x61c>
 8008132:	4647      	mov	r7, r8
 8008134:	e03b      	b.n	80081ae <_dtoa_r+0x6a6>
 8008136:	4b9e      	ldr	r3, [pc, #632]	@ (80083b0 <_dtoa_r+0x8a8>)
 8008138:	f7f8 f9ce 	bl	80004d8 <__aeabi_dmul>
 800813c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008140:	e7bc      	b.n	80080bc <_dtoa_r+0x5b4>
 8008142:	4656      	mov	r6, sl
 8008144:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800814c:	4620      	mov	r0, r4
 800814e:	4629      	mov	r1, r5
 8008150:	f7f8 faec 	bl	800072c <__aeabi_ddiv>
 8008154:	f7f8 fc70 	bl	8000a38 <__aeabi_d2iz>
 8008158:	4680      	mov	r8, r0
 800815a:	f7f8 f953 	bl	8000404 <__aeabi_i2d>
 800815e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008162:	f7f8 f9b9 	bl	80004d8 <__aeabi_dmul>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f7 fffb 	bl	8000168 <__aeabi_dsub>
 8008172:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008176:	9d08      	ldr	r5, [sp, #32]
 8008178:	f806 4b01 	strb.w	r4, [r6], #1
 800817c:	eba6 040a 	sub.w	r4, r6, sl
 8008180:	42a5      	cmp	r5, r4
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	d133      	bne.n	80081f0 <_dtoa_r+0x6e8>
 8008188:	f7f7 fff0 	bl	800016c <__adddf3>
 800818c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	f7f8 fc30 	bl	80009f8 <__aeabi_dcmpgt>
 8008198:	b9c0      	cbnz	r0, 80081cc <_dtoa_r+0x6c4>
 800819a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800819e:	4620      	mov	r0, r4
 80081a0:	4629      	mov	r1, r5
 80081a2:	f7f8 fc01 	bl	80009a8 <__aeabi_dcmpeq>
 80081a6:	b110      	cbz	r0, 80081ae <_dtoa_r+0x6a6>
 80081a8:	f018 0f01 	tst.w	r8, #1
 80081ac:	d10e      	bne.n	80081cc <_dtoa_r+0x6c4>
 80081ae:	4648      	mov	r0, r9
 80081b0:	9903      	ldr	r1, [sp, #12]
 80081b2:	f000 fbbb 	bl	800892c <_Bfree>
 80081b6:	2300      	movs	r3, #0
 80081b8:	7033      	strb	r3, [r6, #0]
 80081ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80081bc:	3701      	adds	r7, #1
 80081be:	601f      	str	r7, [r3, #0]
 80081c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 824b 	beq.w	800865e <_dtoa_r+0xb56>
 80081c8:	601e      	str	r6, [r3, #0]
 80081ca:	e248      	b.n	800865e <_dtoa_r+0xb56>
 80081cc:	46b8      	mov	r8, r7
 80081ce:	4633      	mov	r3, r6
 80081d0:	461e      	mov	r6, r3
 80081d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081d6:	2a39      	cmp	r2, #57	@ 0x39
 80081d8:	d106      	bne.n	80081e8 <_dtoa_r+0x6e0>
 80081da:	459a      	cmp	sl, r3
 80081dc:	d1f8      	bne.n	80081d0 <_dtoa_r+0x6c8>
 80081de:	2230      	movs	r2, #48	@ 0x30
 80081e0:	f108 0801 	add.w	r8, r8, #1
 80081e4:	f88a 2000 	strb.w	r2, [sl]
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	3201      	adds	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e7a0      	b.n	8008132 <_dtoa_r+0x62a>
 80081f0:	2200      	movs	r2, #0
 80081f2:	4b6f      	ldr	r3, [pc, #444]	@ (80083b0 <_dtoa_r+0x8a8>)
 80081f4:	f7f8 f970 	bl	80004d8 <__aeabi_dmul>
 80081f8:	2200      	movs	r2, #0
 80081fa:	2300      	movs	r3, #0
 80081fc:	4604      	mov	r4, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	f7f8 fbd2 	bl	80009a8 <__aeabi_dcmpeq>
 8008204:	2800      	cmp	r0, #0
 8008206:	d09f      	beq.n	8008148 <_dtoa_r+0x640>
 8008208:	e7d1      	b.n	80081ae <_dtoa_r+0x6a6>
 800820a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800820c:	2a00      	cmp	r2, #0
 800820e:	f000 80ea 	beq.w	80083e6 <_dtoa_r+0x8de>
 8008212:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008214:	2a01      	cmp	r2, #1
 8008216:	f300 80cd 	bgt.w	80083b4 <_dtoa_r+0x8ac>
 800821a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800821c:	2a00      	cmp	r2, #0
 800821e:	f000 80c1 	beq.w	80083a4 <_dtoa_r+0x89c>
 8008222:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008226:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008228:	9e04      	ldr	r6, [sp, #16]
 800822a:	9a04      	ldr	r2, [sp, #16]
 800822c:	2101      	movs	r1, #1
 800822e:	441a      	add	r2, r3
 8008230:	9204      	str	r2, [sp, #16]
 8008232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008234:	4648      	mov	r0, r9
 8008236:	441a      	add	r2, r3
 8008238:	9209      	str	r2, [sp, #36]	@ 0x24
 800823a:	f000 fc2b 	bl	8008a94 <__i2b>
 800823e:	4605      	mov	r5, r0
 8008240:	b166      	cbz	r6, 800825c <_dtoa_r+0x754>
 8008242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd09      	ble.n	800825c <_dtoa_r+0x754>
 8008248:	42b3      	cmp	r3, r6
 800824a:	bfa8      	it	ge
 800824c:	4633      	movge	r3, r6
 800824e:	9a04      	ldr	r2, [sp, #16]
 8008250:	1af6      	subs	r6, r6, r3
 8008252:	1ad2      	subs	r2, r2, r3
 8008254:	9204      	str	r2, [sp, #16]
 8008256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	9309      	str	r3, [sp, #36]	@ 0x24
 800825c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825e:	b30b      	cbz	r3, 80082a4 <_dtoa_r+0x79c>
 8008260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 80c6 	beq.w	80083f4 <_dtoa_r+0x8ec>
 8008268:	2c00      	cmp	r4, #0
 800826a:	f000 80c0 	beq.w	80083ee <_dtoa_r+0x8e6>
 800826e:	4629      	mov	r1, r5
 8008270:	4622      	mov	r2, r4
 8008272:	4648      	mov	r0, r9
 8008274:	f000 fcc6 	bl	8008c04 <__pow5mult>
 8008278:	9a03      	ldr	r2, [sp, #12]
 800827a:	4601      	mov	r1, r0
 800827c:	4605      	mov	r5, r0
 800827e:	4648      	mov	r0, r9
 8008280:	f000 fc1e 	bl	8008ac0 <__multiply>
 8008284:	9903      	ldr	r1, [sp, #12]
 8008286:	4680      	mov	r8, r0
 8008288:	4648      	mov	r0, r9
 800828a:	f000 fb4f 	bl	800892c <_Bfree>
 800828e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008290:	1b1b      	subs	r3, r3, r4
 8008292:	930a      	str	r3, [sp, #40]	@ 0x28
 8008294:	f000 80b1 	beq.w	80083fa <_dtoa_r+0x8f2>
 8008298:	4641      	mov	r1, r8
 800829a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800829c:	4648      	mov	r0, r9
 800829e:	f000 fcb1 	bl	8008c04 <__pow5mult>
 80082a2:	9003      	str	r0, [sp, #12]
 80082a4:	2101      	movs	r1, #1
 80082a6:	4648      	mov	r0, r9
 80082a8:	f000 fbf4 	bl	8008a94 <__i2b>
 80082ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ae:	4604      	mov	r4, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 81d8 	beq.w	8008666 <_dtoa_r+0xb5e>
 80082b6:	461a      	mov	r2, r3
 80082b8:	4601      	mov	r1, r0
 80082ba:	4648      	mov	r0, r9
 80082bc:	f000 fca2 	bl	8008c04 <__pow5mult>
 80082c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082c2:	4604      	mov	r4, r0
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	f300 809f 	bgt.w	8008408 <_dtoa_r+0x900>
 80082ca:	9b06      	ldr	r3, [sp, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8097 	bne.w	8008400 <_dtoa_r+0x8f8>
 80082d2:	9b07      	ldr	r3, [sp, #28]
 80082d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 8093 	bne.w	8008404 <_dtoa_r+0x8fc>
 80082de:	9b07      	ldr	r3, [sp, #28]
 80082e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082e4:	0d1b      	lsrs	r3, r3, #20
 80082e6:	051b      	lsls	r3, r3, #20
 80082e8:	b133      	cbz	r3, 80082f8 <_dtoa_r+0x7f0>
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	3301      	adds	r3, #1
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f2:	3301      	adds	r3, #1
 80082f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f6:	2301      	movs	r3, #1
 80082f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 81b8 	beq.w	8008672 <_dtoa_r+0xb6a>
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008308:	6918      	ldr	r0, [r3, #16]
 800830a:	f000 fb77 	bl	80089fc <__hi0bits>
 800830e:	f1c0 0020 	rsb	r0, r0, #32
 8008312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008314:	4418      	add	r0, r3
 8008316:	f010 001f 	ands.w	r0, r0, #31
 800831a:	f000 8082 	beq.w	8008422 <_dtoa_r+0x91a>
 800831e:	f1c0 0320 	rsb	r3, r0, #32
 8008322:	2b04      	cmp	r3, #4
 8008324:	dd73      	ble.n	800840e <_dtoa_r+0x906>
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	f1c0 001c 	rsb	r0, r0, #28
 800832c:	4403      	add	r3, r0
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008332:	4406      	add	r6, r0
 8008334:	4403      	add	r3, r0
 8008336:	9309      	str	r3, [sp, #36]	@ 0x24
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd05      	ble.n	800834a <_dtoa_r+0x842>
 800833e:	461a      	mov	r2, r3
 8008340:	4648      	mov	r0, r9
 8008342:	9903      	ldr	r1, [sp, #12]
 8008344:	f000 fcb8 	bl	8008cb8 <__lshift>
 8008348:	9003      	str	r0, [sp, #12]
 800834a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	dd05      	ble.n	800835c <_dtoa_r+0x854>
 8008350:	4621      	mov	r1, r4
 8008352:	461a      	mov	r2, r3
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fcaf 	bl	8008cb8 <__lshift>
 800835a:	4604      	mov	r4, r0
 800835c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d061      	beq.n	8008426 <_dtoa_r+0x91e>
 8008362:	4621      	mov	r1, r4
 8008364:	9803      	ldr	r0, [sp, #12]
 8008366:	f000 fd13 	bl	8008d90 <__mcmp>
 800836a:	2800      	cmp	r0, #0
 800836c:	da5b      	bge.n	8008426 <_dtoa_r+0x91e>
 800836e:	2300      	movs	r3, #0
 8008370:	220a      	movs	r2, #10
 8008372:	4648      	mov	r0, r9
 8008374:	9903      	ldr	r1, [sp, #12]
 8008376:	f000 fafb 	bl	8008970 <__multadd>
 800837a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800837c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008380:	9003      	str	r0, [sp, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 8177 	beq.w	8008676 <_dtoa_r+0xb6e>
 8008388:	4629      	mov	r1, r5
 800838a:	2300      	movs	r3, #0
 800838c:	220a      	movs	r2, #10
 800838e:	4648      	mov	r0, r9
 8008390:	f000 faee 	bl	8008970 <__multadd>
 8008394:	f1bb 0f00 	cmp.w	fp, #0
 8008398:	4605      	mov	r5, r0
 800839a:	dc6f      	bgt.n	800847c <_dtoa_r+0x974>
 800839c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800839e:	2b02      	cmp	r3, #2
 80083a0:	dc49      	bgt.n	8008436 <_dtoa_r+0x92e>
 80083a2:	e06b      	b.n	800847c <_dtoa_r+0x974>
 80083a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083aa:	e73c      	b.n	8008226 <_dtoa_r+0x71e>
 80083ac:	3fe00000 	.word	0x3fe00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	1e5c      	subs	r4, r3, #1
 80083b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	db09      	blt.n	80083d2 <_dtoa_r+0x8ca>
 80083be:	1b1c      	subs	r4, r3, r4
 80083c0:	9b08      	ldr	r3, [sp, #32]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f6bf af30 	bge.w	8008228 <_dtoa_r+0x720>
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	9a08      	ldr	r2, [sp, #32]
 80083cc:	1a9e      	subs	r6, r3, r2
 80083ce:	2300      	movs	r3, #0
 80083d0:	e72b      	b.n	800822a <_dtoa_r+0x722>
 80083d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083d6:	1ae3      	subs	r3, r4, r3
 80083d8:	441a      	add	r2, r3
 80083da:	940a      	str	r4, [sp, #40]	@ 0x28
 80083dc:	9e04      	ldr	r6, [sp, #16]
 80083de:	2400      	movs	r4, #0
 80083e0:	9b08      	ldr	r3, [sp, #32]
 80083e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80083e4:	e721      	b.n	800822a <_dtoa_r+0x722>
 80083e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083e8:	9e04      	ldr	r6, [sp, #16]
 80083ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083ec:	e728      	b.n	8008240 <_dtoa_r+0x738>
 80083ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083f2:	e751      	b.n	8008298 <_dtoa_r+0x790>
 80083f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083f6:	9903      	ldr	r1, [sp, #12]
 80083f8:	e750      	b.n	800829c <_dtoa_r+0x794>
 80083fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fe:	e751      	b.n	80082a4 <_dtoa_r+0x79c>
 8008400:	2300      	movs	r3, #0
 8008402:	e779      	b.n	80082f8 <_dtoa_r+0x7f0>
 8008404:	9b06      	ldr	r3, [sp, #24]
 8008406:	e777      	b.n	80082f8 <_dtoa_r+0x7f0>
 8008408:	2300      	movs	r3, #0
 800840a:	930a      	str	r3, [sp, #40]	@ 0x28
 800840c:	e779      	b.n	8008302 <_dtoa_r+0x7fa>
 800840e:	d093      	beq.n	8008338 <_dtoa_r+0x830>
 8008410:	9a04      	ldr	r2, [sp, #16]
 8008412:	331c      	adds	r3, #28
 8008414:	441a      	add	r2, r3
 8008416:	9204      	str	r2, [sp, #16]
 8008418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800841a:	441e      	add	r6, r3
 800841c:	441a      	add	r2, r3
 800841e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008420:	e78a      	b.n	8008338 <_dtoa_r+0x830>
 8008422:	4603      	mov	r3, r0
 8008424:	e7f4      	b.n	8008410 <_dtoa_r+0x908>
 8008426:	9b08      	ldr	r3, [sp, #32]
 8008428:	46b8      	mov	r8, r7
 800842a:	2b00      	cmp	r3, #0
 800842c:	dc20      	bgt.n	8008470 <_dtoa_r+0x968>
 800842e:	469b      	mov	fp, r3
 8008430:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008432:	2b02      	cmp	r3, #2
 8008434:	dd1e      	ble.n	8008474 <_dtoa_r+0x96c>
 8008436:	f1bb 0f00 	cmp.w	fp, #0
 800843a:	f47f adb1 	bne.w	8007fa0 <_dtoa_r+0x498>
 800843e:	4621      	mov	r1, r4
 8008440:	465b      	mov	r3, fp
 8008442:	2205      	movs	r2, #5
 8008444:	4648      	mov	r0, r9
 8008446:	f000 fa93 	bl	8008970 <__multadd>
 800844a:	4601      	mov	r1, r0
 800844c:	4604      	mov	r4, r0
 800844e:	9803      	ldr	r0, [sp, #12]
 8008450:	f000 fc9e 	bl	8008d90 <__mcmp>
 8008454:	2800      	cmp	r0, #0
 8008456:	f77f ada3 	ble.w	8007fa0 <_dtoa_r+0x498>
 800845a:	4656      	mov	r6, sl
 800845c:	2331      	movs	r3, #49	@ 0x31
 800845e:	f108 0801 	add.w	r8, r8, #1
 8008462:	f806 3b01 	strb.w	r3, [r6], #1
 8008466:	e59f      	b.n	8007fa8 <_dtoa_r+0x4a0>
 8008468:	46b8      	mov	r8, r7
 800846a:	9c08      	ldr	r4, [sp, #32]
 800846c:	4625      	mov	r5, r4
 800846e:	e7f4      	b.n	800845a <_dtoa_r+0x952>
 8008470:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 8101 	beq.w	800867e <_dtoa_r+0xb76>
 800847c:	2e00      	cmp	r6, #0
 800847e:	dd05      	ble.n	800848c <_dtoa_r+0x984>
 8008480:	4629      	mov	r1, r5
 8008482:	4632      	mov	r2, r6
 8008484:	4648      	mov	r0, r9
 8008486:	f000 fc17 	bl	8008cb8 <__lshift>
 800848a:	4605      	mov	r5, r0
 800848c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d05c      	beq.n	800854c <_dtoa_r+0xa44>
 8008492:	4648      	mov	r0, r9
 8008494:	6869      	ldr	r1, [r5, #4]
 8008496:	f000 fa09 	bl	80088ac <_Balloc>
 800849a:	4606      	mov	r6, r0
 800849c:	b928      	cbnz	r0, 80084aa <_dtoa_r+0x9a2>
 800849e:	4602      	mov	r2, r0
 80084a0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80084a4:	4b80      	ldr	r3, [pc, #512]	@ (80086a8 <_dtoa_r+0xba0>)
 80084a6:	f7ff bb43 	b.w	8007b30 <_dtoa_r+0x28>
 80084aa:	692a      	ldr	r2, [r5, #16]
 80084ac:	f105 010c 	add.w	r1, r5, #12
 80084b0:	3202      	adds	r2, #2
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	300c      	adds	r0, #12
 80084b6:	f000 ff9d 	bl	80093f4 <memcpy>
 80084ba:	2201      	movs	r2, #1
 80084bc:	4631      	mov	r1, r6
 80084be:	4648      	mov	r0, r9
 80084c0:	f000 fbfa 	bl	8008cb8 <__lshift>
 80084c4:	462f      	mov	r7, r5
 80084c6:	4605      	mov	r5, r0
 80084c8:	f10a 0301 	add.w	r3, sl, #1
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	eb0a 030b 	add.w	r3, sl, fp
 80084d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d4:	9b06      	ldr	r3, [sp, #24]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	9309      	str	r3, [sp, #36]	@ 0x24
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	4621      	mov	r1, r4
 80084e0:	9803      	ldr	r0, [sp, #12]
 80084e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80084e6:	f7ff fa84 	bl	80079f2 <quorem>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4639      	mov	r1, r7
 80084ee:	3330      	adds	r3, #48	@ 0x30
 80084f0:	9006      	str	r0, [sp, #24]
 80084f2:	9803      	ldr	r0, [sp, #12]
 80084f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084f6:	f000 fc4b 	bl	8008d90 <__mcmp>
 80084fa:	462a      	mov	r2, r5
 80084fc:	9008      	str	r0, [sp, #32]
 80084fe:	4621      	mov	r1, r4
 8008500:	4648      	mov	r0, r9
 8008502:	f000 fc61 	bl	8008dc8 <__mdiff>
 8008506:	68c2      	ldr	r2, [r0, #12]
 8008508:	4606      	mov	r6, r0
 800850a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800850c:	bb02      	cbnz	r2, 8008550 <_dtoa_r+0xa48>
 800850e:	4601      	mov	r1, r0
 8008510:	9803      	ldr	r0, [sp, #12]
 8008512:	f000 fc3d 	bl	8008d90 <__mcmp>
 8008516:	4602      	mov	r2, r0
 8008518:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800851a:	4631      	mov	r1, r6
 800851c:	4648      	mov	r0, r9
 800851e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008522:	f000 fa03 	bl	800892c <_Bfree>
 8008526:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008528:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800852a:	9e04      	ldr	r6, [sp, #16]
 800852c:	ea42 0103 	orr.w	r1, r2, r3
 8008530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008532:	4319      	orrs	r1, r3
 8008534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008536:	d10d      	bne.n	8008554 <_dtoa_r+0xa4c>
 8008538:	2b39      	cmp	r3, #57	@ 0x39
 800853a:	d027      	beq.n	800858c <_dtoa_r+0xa84>
 800853c:	9a08      	ldr	r2, [sp, #32]
 800853e:	2a00      	cmp	r2, #0
 8008540:	dd01      	ble.n	8008546 <_dtoa_r+0xa3e>
 8008542:	9b06      	ldr	r3, [sp, #24]
 8008544:	3331      	adds	r3, #49	@ 0x31
 8008546:	f88b 3000 	strb.w	r3, [fp]
 800854a:	e52e      	b.n	8007faa <_dtoa_r+0x4a2>
 800854c:	4628      	mov	r0, r5
 800854e:	e7b9      	b.n	80084c4 <_dtoa_r+0x9bc>
 8008550:	2201      	movs	r2, #1
 8008552:	e7e2      	b.n	800851a <_dtoa_r+0xa12>
 8008554:	9908      	ldr	r1, [sp, #32]
 8008556:	2900      	cmp	r1, #0
 8008558:	db04      	blt.n	8008564 <_dtoa_r+0xa5c>
 800855a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800855c:	4301      	orrs	r1, r0
 800855e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008560:	4301      	orrs	r1, r0
 8008562:	d120      	bne.n	80085a6 <_dtoa_r+0xa9e>
 8008564:	2a00      	cmp	r2, #0
 8008566:	ddee      	ble.n	8008546 <_dtoa_r+0xa3e>
 8008568:	2201      	movs	r2, #1
 800856a:	9903      	ldr	r1, [sp, #12]
 800856c:	4648      	mov	r0, r9
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	f000 fba2 	bl	8008cb8 <__lshift>
 8008574:	4621      	mov	r1, r4
 8008576:	9003      	str	r0, [sp, #12]
 8008578:	f000 fc0a 	bl	8008d90 <__mcmp>
 800857c:	2800      	cmp	r0, #0
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	dc02      	bgt.n	8008588 <_dtoa_r+0xa80>
 8008582:	d1e0      	bne.n	8008546 <_dtoa_r+0xa3e>
 8008584:	07da      	lsls	r2, r3, #31
 8008586:	d5de      	bpl.n	8008546 <_dtoa_r+0xa3e>
 8008588:	2b39      	cmp	r3, #57	@ 0x39
 800858a:	d1da      	bne.n	8008542 <_dtoa_r+0xa3a>
 800858c:	2339      	movs	r3, #57	@ 0x39
 800858e:	f88b 3000 	strb.w	r3, [fp]
 8008592:	4633      	mov	r3, r6
 8008594:	461e      	mov	r6, r3
 8008596:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800859a:	3b01      	subs	r3, #1
 800859c:	2a39      	cmp	r2, #57	@ 0x39
 800859e:	d04e      	beq.n	800863e <_dtoa_r+0xb36>
 80085a0:	3201      	adds	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e501      	b.n	8007faa <_dtoa_r+0x4a2>
 80085a6:	2a00      	cmp	r2, #0
 80085a8:	dd03      	ble.n	80085b2 <_dtoa_r+0xaaa>
 80085aa:	2b39      	cmp	r3, #57	@ 0x39
 80085ac:	d0ee      	beq.n	800858c <_dtoa_r+0xa84>
 80085ae:	3301      	adds	r3, #1
 80085b0:	e7c9      	b.n	8008546 <_dtoa_r+0xa3e>
 80085b2:	9a04      	ldr	r2, [sp, #16]
 80085b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085ba:	428a      	cmp	r2, r1
 80085bc:	d028      	beq.n	8008610 <_dtoa_r+0xb08>
 80085be:	2300      	movs	r3, #0
 80085c0:	220a      	movs	r2, #10
 80085c2:	9903      	ldr	r1, [sp, #12]
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 f9d3 	bl	8008970 <__multadd>
 80085ca:	42af      	cmp	r7, r5
 80085cc:	9003      	str	r0, [sp, #12]
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	f04f 020a 	mov.w	r2, #10
 80085d6:	4639      	mov	r1, r7
 80085d8:	4648      	mov	r0, r9
 80085da:	d107      	bne.n	80085ec <_dtoa_r+0xae4>
 80085dc:	f000 f9c8 	bl	8008970 <__multadd>
 80085e0:	4607      	mov	r7, r0
 80085e2:	4605      	mov	r5, r0
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	3301      	adds	r3, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	e777      	b.n	80084dc <_dtoa_r+0x9d4>
 80085ec:	f000 f9c0 	bl	8008970 <__multadd>
 80085f0:	4629      	mov	r1, r5
 80085f2:	4607      	mov	r7, r0
 80085f4:	2300      	movs	r3, #0
 80085f6:	220a      	movs	r2, #10
 80085f8:	4648      	mov	r0, r9
 80085fa:	f000 f9b9 	bl	8008970 <__multadd>
 80085fe:	4605      	mov	r5, r0
 8008600:	e7f0      	b.n	80085e4 <_dtoa_r+0xadc>
 8008602:	f1bb 0f00 	cmp.w	fp, #0
 8008606:	bfcc      	ite	gt
 8008608:	465e      	movgt	r6, fp
 800860a:	2601      	movle	r6, #1
 800860c:	2700      	movs	r7, #0
 800860e:	4456      	add	r6, sl
 8008610:	2201      	movs	r2, #1
 8008612:	9903      	ldr	r1, [sp, #12]
 8008614:	4648      	mov	r0, r9
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	f000 fb4e 	bl	8008cb8 <__lshift>
 800861c:	4621      	mov	r1, r4
 800861e:	9003      	str	r0, [sp, #12]
 8008620:	f000 fbb6 	bl	8008d90 <__mcmp>
 8008624:	2800      	cmp	r0, #0
 8008626:	dcb4      	bgt.n	8008592 <_dtoa_r+0xa8a>
 8008628:	d102      	bne.n	8008630 <_dtoa_r+0xb28>
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	07db      	lsls	r3, r3, #31
 800862e:	d4b0      	bmi.n	8008592 <_dtoa_r+0xa8a>
 8008630:	4633      	mov	r3, r6
 8008632:	461e      	mov	r6, r3
 8008634:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008638:	2a30      	cmp	r2, #48	@ 0x30
 800863a:	d0fa      	beq.n	8008632 <_dtoa_r+0xb2a>
 800863c:	e4b5      	b.n	8007faa <_dtoa_r+0x4a2>
 800863e:	459a      	cmp	sl, r3
 8008640:	d1a8      	bne.n	8008594 <_dtoa_r+0xa8c>
 8008642:	2331      	movs	r3, #49	@ 0x31
 8008644:	f108 0801 	add.w	r8, r8, #1
 8008648:	f88a 3000 	strb.w	r3, [sl]
 800864c:	e4ad      	b.n	8007faa <_dtoa_r+0x4a2>
 800864e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008650:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80086ac <_dtoa_r+0xba4>
 8008654:	b11b      	cbz	r3, 800865e <_dtoa_r+0xb56>
 8008656:	f10a 0308 	add.w	r3, sl, #8
 800865a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	4650      	mov	r0, sl
 8008660:	b017      	add	sp, #92	@ 0x5c
 8008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008666:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008668:	2b01      	cmp	r3, #1
 800866a:	f77f ae2e 	ble.w	80082ca <_dtoa_r+0x7c2>
 800866e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008670:	930a      	str	r3, [sp, #40]	@ 0x28
 8008672:	2001      	movs	r0, #1
 8008674:	e64d      	b.n	8008312 <_dtoa_r+0x80a>
 8008676:	f1bb 0f00 	cmp.w	fp, #0
 800867a:	f77f aed9 	ble.w	8008430 <_dtoa_r+0x928>
 800867e:	4656      	mov	r6, sl
 8008680:	4621      	mov	r1, r4
 8008682:	9803      	ldr	r0, [sp, #12]
 8008684:	f7ff f9b5 	bl	80079f2 <quorem>
 8008688:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800868c:	f806 3b01 	strb.w	r3, [r6], #1
 8008690:	eba6 020a 	sub.w	r2, r6, sl
 8008694:	4593      	cmp	fp, r2
 8008696:	ddb4      	ble.n	8008602 <_dtoa_r+0xafa>
 8008698:	2300      	movs	r3, #0
 800869a:	220a      	movs	r2, #10
 800869c:	4648      	mov	r0, r9
 800869e:	9903      	ldr	r1, [sp, #12]
 80086a0:	f000 f966 	bl	8008970 <__multadd>
 80086a4:	9003      	str	r0, [sp, #12]
 80086a6:	e7eb      	b.n	8008680 <_dtoa_r+0xb78>
 80086a8:	0800a8ee 	.word	0x0800a8ee
 80086ac:	0800a872 	.word	0x0800a872

080086b0 <_free_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4605      	mov	r5, r0
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d040      	beq.n	800873a <_free_r+0x8a>
 80086b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086bc:	1f0c      	subs	r4, r1, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bfb8      	it	lt
 80086c2:	18e4      	addlt	r4, r4, r3
 80086c4:	f000 f8e6 	bl	8008894 <__malloc_lock>
 80086c8:	4a1c      	ldr	r2, [pc, #112]	@ (800873c <_free_r+0x8c>)
 80086ca:	6813      	ldr	r3, [r2, #0]
 80086cc:	b933      	cbnz	r3, 80086dc <_free_r+0x2c>
 80086ce:	6063      	str	r3, [r4, #4]
 80086d0:	6014      	str	r4, [r2, #0]
 80086d2:	4628      	mov	r0, r5
 80086d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d8:	f000 b8e2 	b.w	80088a0 <__malloc_unlock>
 80086dc:	42a3      	cmp	r3, r4
 80086de:	d908      	bls.n	80086f2 <_free_r+0x42>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	1821      	adds	r1, r4, r0
 80086e4:	428b      	cmp	r3, r1
 80086e6:	bf01      	itttt	eq
 80086e8:	6819      	ldreq	r1, [r3, #0]
 80086ea:	685b      	ldreq	r3, [r3, #4]
 80086ec:	1809      	addeq	r1, r1, r0
 80086ee:	6021      	streq	r1, [r4, #0]
 80086f0:	e7ed      	b.n	80086ce <_free_r+0x1e>
 80086f2:	461a      	mov	r2, r3
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	b10b      	cbz	r3, 80086fc <_free_r+0x4c>
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d9fa      	bls.n	80086f2 <_free_r+0x42>
 80086fc:	6811      	ldr	r1, [r2, #0]
 80086fe:	1850      	adds	r0, r2, r1
 8008700:	42a0      	cmp	r0, r4
 8008702:	d10b      	bne.n	800871c <_free_r+0x6c>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	4401      	add	r1, r0
 8008708:	1850      	adds	r0, r2, r1
 800870a:	4283      	cmp	r3, r0
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	d1e0      	bne.n	80086d2 <_free_r+0x22>
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4408      	add	r0, r1
 8008716:	6010      	str	r0, [r2, #0]
 8008718:	6053      	str	r3, [r2, #4]
 800871a:	e7da      	b.n	80086d2 <_free_r+0x22>
 800871c:	d902      	bls.n	8008724 <_free_r+0x74>
 800871e:	230c      	movs	r3, #12
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	e7d6      	b.n	80086d2 <_free_r+0x22>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	1821      	adds	r1, r4, r0
 8008728:	428b      	cmp	r3, r1
 800872a:	bf01      	itttt	eq
 800872c:	6819      	ldreq	r1, [r3, #0]
 800872e:	685b      	ldreq	r3, [r3, #4]
 8008730:	1809      	addeq	r1, r1, r0
 8008732:	6021      	streq	r1, [r4, #0]
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	6054      	str	r4, [r2, #4]
 8008738:	e7cb      	b.n	80086d2 <_free_r+0x22>
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000958 	.word	0x20000958

08008740 <malloc>:
 8008740:	4b02      	ldr	r3, [pc, #8]	@ (800874c <malloc+0xc>)
 8008742:	4601      	mov	r1, r0
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f000 b825 	b.w	8008794 <_malloc_r>
 800874a:	bf00      	nop
 800874c:	20000020 	.word	0x20000020

08008750 <sbrk_aligned>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4e0f      	ldr	r6, [pc, #60]	@ (8008790 <sbrk_aligned+0x40>)
 8008754:	460c      	mov	r4, r1
 8008756:	6831      	ldr	r1, [r6, #0]
 8008758:	4605      	mov	r5, r0
 800875a:	b911      	cbnz	r1, 8008762 <sbrk_aligned+0x12>
 800875c:	f000 fe3a 	bl	80093d4 <_sbrk_r>
 8008760:	6030      	str	r0, [r6, #0]
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 fe35 	bl	80093d4 <_sbrk_r>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d103      	bne.n	8008776 <sbrk_aligned+0x26>
 800876e:	f04f 34ff 	mov.w	r4, #4294967295
 8008772:	4620      	mov	r0, r4
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	1cc4      	adds	r4, r0, #3
 8008778:	f024 0403 	bic.w	r4, r4, #3
 800877c:	42a0      	cmp	r0, r4
 800877e:	d0f8      	beq.n	8008772 <sbrk_aligned+0x22>
 8008780:	1a21      	subs	r1, r4, r0
 8008782:	4628      	mov	r0, r5
 8008784:	f000 fe26 	bl	80093d4 <_sbrk_r>
 8008788:	3001      	adds	r0, #1
 800878a:	d1f2      	bne.n	8008772 <sbrk_aligned+0x22>
 800878c:	e7ef      	b.n	800876e <sbrk_aligned+0x1e>
 800878e:	bf00      	nop
 8008790:	20000954 	.word	0x20000954

08008794 <_malloc_r>:
 8008794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008798:	1ccd      	adds	r5, r1, #3
 800879a:	f025 0503 	bic.w	r5, r5, #3
 800879e:	3508      	adds	r5, #8
 80087a0:	2d0c      	cmp	r5, #12
 80087a2:	bf38      	it	cc
 80087a4:	250c      	movcc	r5, #12
 80087a6:	2d00      	cmp	r5, #0
 80087a8:	4606      	mov	r6, r0
 80087aa:	db01      	blt.n	80087b0 <_malloc_r+0x1c>
 80087ac:	42a9      	cmp	r1, r5
 80087ae:	d904      	bls.n	80087ba <_malloc_r+0x26>
 80087b0:	230c      	movs	r3, #12
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	2000      	movs	r0, #0
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008890 <_malloc_r+0xfc>
 80087be:	f000 f869 	bl	8008894 <__malloc_lock>
 80087c2:	f8d8 3000 	ldr.w	r3, [r8]
 80087c6:	461c      	mov	r4, r3
 80087c8:	bb44      	cbnz	r4, 800881c <_malloc_r+0x88>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7ff ffbf 	bl	8008750 <sbrk_aligned>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	4604      	mov	r4, r0
 80087d6:	d158      	bne.n	800888a <_malloc_r+0xf6>
 80087d8:	f8d8 4000 	ldr.w	r4, [r8]
 80087dc:	4627      	mov	r7, r4
 80087de:	2f00      	cmp	r7, #0
 80087e0:	d143      	bne.n	800886a <_malloc_r+0xd6>
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	d04b      	beq.n	800887e <_malloc_r+0xea>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	4639      	mov	r1, r7
 80087ea:	4630      	mov	r0, r6
 80087ec:	eb04 0903 	add.w	r9, r4, r3
 80087f0:	f000 fdf0 	bl	80093d4 <_sbrk_r>
 80087f4:	4581      	cmp	r9, r0
 80087f6:	d142      	bne.n	800887e <_malloc_r+0xea>
 80087f8:	6821      	ldr	r1, [r4, #0]
 80087fa:	4630      	mov	r0, r6
 80087fc:	1a6d      	subs	r5, r5, r1
 80087fe:	4629      	mov	r1, r5
 8008800:	f7ff ffa6 	bl	8008750 <sbrk_aligned>
 8008804:	3001      	adds	r0, #1
 8008806:	d03a      	beq.n	800887e <_malloc_r+0xea>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	442b      	add	r3, r5
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	f8d8 3000 	ldr.w	r3, [r8]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	bb62      	cbnz	r2, 8008870 <_malloc_r+0xdc>
 8008816:	f8c8 7000 	str.w	r7, [r8]
 800881a:	e00f      	b.n	800883c <_malloc_r+0xa8>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	1b52      	subs	r2, r2, r5
 8008820:	d420      	bmi.n	8008864 <_malloc_r+0xd0>
 8008822:	2a0b      	cmp	r2, #11
 8008824:	d917      	bls.n	8008856 <_malloc_r+0xc2>
 8008826:	1961      	adds	r1, r4, r5
 8008828:	42a3      	cmp	r3, r4
 800882a:	6025      	str	r5, [r4, #0]
 800882c:	bf18      	it	ne
 800882e:	6059      	strne	r1, [r3, #4]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	bf08      	it	eq
 8008834:	f8c8 1000 	streq.w	r1, [r8]
 8008838:	5162      	str	r2, [r4, r5]
 800883a:	604b      	str	r3, [r1, #4]
 800883c:	4630      	mov	r0, r6
 800883e:	f000 f82f 	bl	80088a0 <__malloc_unlock>
 8008842:	f104 000b 	add.w	r0, r4, #11
 8008846:	1d23      	adds	r3, r4, #4
 8008848:	f020 0007 	bic.w	r0, r0, #7
 800884c:	1ac2      	subs	r2, r0, r3
 800884e:	bf1c      	itt	ne
 8008850:	1a1b      	subne	r3, r3, r0
 8008852:	50a3      	strne	r3, [r4, r2]
 8008854:	e7af      	b.n	80087b6 <_malloc_r+0x22>
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	42a3      	cmp	r3, r4
 800885a:	bf0c      	ite	eq
 800885c:	f8c8 2000 	streq.w	r2, [r8]
 8008860:	605a      	strne	r2, [r3, #4]
 8008862:	e7eb      	b.n	800883c <_malloc_r+0xa8>
 8008864:	4623      	mov	r3, r4
 8008866:	6864      	ldr	r4, [r4, #4]
 8008868:	e7ae      	b.n	80087c8 <_malloc_r+0x34>
 800886a:	463c      	mov	r4, r7
 800886c:	687f      	ldr	r7, [r7, #4]
 800886e:	e7b6      	b.n	80087de <_malloc_r+0x4a>
 8008870:	461a      	mov	r2, r3
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	42a3      	cmp	r3, r4
 8008876:	d1fb      	bne.n	8008870 <_malloc_r+0xdc>
 8008878:	2300      	movs	r3, #0
 800887a:	6053      	str	r3, [r2, #4]
 800887c:	e7de      	b.n	800883c <_malloc_r+0xa8>
 800887e:	230c      	movs	r3, #12
 8008880:	4630      	mov	r0, r6
 8008882:	6033      	str	r3, [r6, #0]
 8008884:	f000 f80c 	bl	80088a0 <__malloc_unlock>
 8008888:	e794      	b.n	80087b4 <_malloc_r+0x20>
 800888a:	6005      	str	r5, [r0, #0]
 800888c:	e7d6      	b.n	800883c <_malloc_r+0xa8>
 800888e:	bf00      	nop
 8008890:	20000958 	.word	0x20000958

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	@ (800889c <__malloc_lock+0x8>)
 8008896:	f7ff b89c 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000950 	.word	0x20000950

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	@ (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f7ff b897 	b.w	80079d4 <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000950 	.word	0x20000950

080088ac <_Balloc>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	69c6      	ldr	r6, [r0, #28]
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	b976      	cbnz	r6, 80088d4 <_Balloc+0x28>
 80088b6:	2010      	movs	r0, #16
 80088b8:	f7ff ff42 	bl	8008740 <malloc>
 80088bc:	4602      	mov	r2, r0
 80088be:	61e0      	str	r0, [r4, #28]
 80088c0:	b920      	cbnz	r0, 80088cc <_Balloc+0x20>
 80088c2:	216b      	movs	r1, #107	@ 0x6b
 80088c4:	4b17      	ldr	r3, [pc, #92]	@ (8008924 <_Balloc+0x78>)
 80088c6:	4818      	ldr	r0, [pc, #96]	@ (8008928 <_Balloc+0x7c>)
 80088c8:	f000 fda2 	bl	8009410 <__assert_func>
 80088cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d0:	6006      	str	r6, [r0, #0]
 80088d2:	60c6      	str	r6, [r0, #12]
 80088d4:	69e6      	ldr	r6, [r4, #28]
 80088d6:	68f3      	ldr	r3, [r6, #12]
 80088d8:	b183      	cbz	r3, 80088fc <_Balloc+0x50>
 80088da:	69e3      	ldr	r3, [r4, #28]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088e2:	b9b8      	cbnz	r0, 8008914 <_Balloc+0x68>
 80088e4:	2101      	movs	r1, #1
 80088e6:	fa01 f605 	lsl.w	r6, r1, r5
 80088ea:	1d72      	adds	r2, r6, #5
 80088ec:	4620      	mov	r0, r4
 80088ee:	0092      	lsls	r2, r2, #2
 80088f0:	f000 fdac 	bl	800944c <_calloc_r>
 80088f4:	b160      	cbz	r0, 8008910 <_Balloc+0x64>
 80088f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088fa:	e00e      	b.n	800891a <_Balloc+0x6e>
 80088fc:	2221      	movs	r2, #33	@ 0x21
 80088fe:	2104      	movs	r1, #4
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fda3 	bl	800944c <_calloc_r>
 8008906:	69e3      	ldr	r3, [r4, #28]
 8008908:	60f0      	str	r0, [r6, #12]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e4      	bne.n	80088da <_Balloc+0x2e>
 8008910:	2000      	movs	r0, #0
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	6802      	ldr	r2, [r0, #0]
 8008916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800891a:	2300      	movs	r3, #0
 800891c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008920:	e7f7      	b.n	8008912 <_Balloc+0x66>
 8008922:	bf00      	nop
 8008924:	0800a87f 	.word	0x0800a87f
 8008928:	0800a8ff 	.word	0x0800a8ff

0800892c <_Bfree>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	69c6      	ldr	r6, [r0, #28]
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	b976      	cbnz	r6, 8008954 <_Bfree+0x28>
 8008936:	2010      	movs	r0, #16
 8008938:	f7ff ff02 	bl	8008740 <malloc>
 800893c:	4602      	mov	r2, r0
 800893e:	61e8      	str	r0, [r5, #28]
 8008940:	b920      	cbnz	r0, 800894c <_Bfree+0x20>
 8008942:	218f      	movs	r1, #143	@ 0x8f
 8008944:	4b08      	ldr	r3, [pc, #32]	@ (8008968 <_Bfree+0x3c>)
 8008946:	4809      	ldr	r0, [pc, #36]	@ (800896c <_Bfree+0x40>)
 8008948:	f000 fd62 	bl	8009410 <__assert_func>
 800894c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008950:	6006      	str	r6, [r0, #0]
 8008952:	60c6      	str	r6, [r0, #12]
 8008954:	b13c      	cbz	r4, 8008966 <_Bfree+0x3a>
 8008956:	69eb      	ldr	r3, [r5, #28]
 8008958:	6862      	ldr	r2, [r4, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008960:	6021      	str	r1, [r4, #0]
 8008962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	0800a87f 	.word	0x0800a87f
 800896c:	0800a8ff 	.word	0x0800a8ff

08008970 <__multadd>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	4607      	mov	r7, r0
 8008976:	460c      	mov	r4, r1
 8008978:	461e      	mov	r6, r3
 800897a:	2000      	movs	r0, #0
 800897c:	690d      	ldr	r5, [r1, #16]
 800897e:	f101 0c14 	add.w	ip, r1, #20
 8008982:	f8dc 3000 	ldr.w	r3, [ip]
 8008986:	3001      	adds	r0, #1
 8008988:	b299      	uxth	r1, r3
 800898a:	fb02 6101 	mla	r1, r2, r1, r6
 800898e:	0c1e      	lsrs	r6, r3, #16
 8008990:	0c0b      	lsrs	r3, r1, #16
 8008992:	fb02 3306 	mla	r3, r2, r6, r3
 8008996:	b289      	uxth	r1, r1
 8008998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800899c:	4285      	cmp	r5, r0
 800899e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a2:	f84c 1b04 	str.w	r1, [ip], #4
 80089a6:	dcec      	bgt.n	8008982 <__multadd+0x12>
 80089a8:	b30e      	cbz	r6, 80089ee <__multadd+0x7e>
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dc19      	bgt.n	80089e4 <__multadd+0x74>
 80089b0:	6861      	ldr	r1, [r4, #4]
 80089b2:	4638      	mov	r0, r7
 80089b4:	3101      	adds	r1, #1
 80089b6:	f7ff ff79 	bl	80088ac <_Balloc>
 80089ba:	4680      	mov	r8, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__multadd+0x5a>
 80089be:	4602      	mov	r2, r0
 80089c0:	21ba      	movs	r1, #186	@ 0xba
 80089c2:	4b0c      	ldr	r3, [pc, #48]	@ (80089f4 <__multadd+0x84>)
 80089c4:	480c      	ldr	r0, [pc, #48]	@ (80089f8 <__multadd+0x88>)
 80089c6:	f000 fd23 	bl	8009410 <__assert_func>
 80089ca:	6922      	ldr	r2, [r4, #16]
 80089cc:	f104 010c 	add.w	r1, r4, #12
 80089d0:	3202      	adds	r2, #2
 80089d2:	0092      	lsls	r2, r2, #2
 80089d4:	300c      	adds	r0, #12
 80089d6:	f000 fd0d 	bl	80093f4 <memcpy>
 80089da:	4621      	mov	r1, r4
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ffa5 	bl	800892c <_Bfree>
 80089e2:	4644      	mov	r4, r8
 80089e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e8:	3501      	adds	r5, #1
 80089ea:	615e      	str	r6, [r3, #20]
 80089ec:	6125      	str	r5, [r4, #16]
 80089ee:	4620      	mov	r0, r4
 80089f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f4:	0800a8ee 	.word	0x0800a8ee
 80089f8:	0800a8ff 	.word	0x0800a8ff

080089fc <__hi0bits>:
 80089fc:	4603      	mov	r3, r0
 80089fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a02:	bf3a      	itte	cc
 8008a04:	0403      	lslcc	r3, r0, #16
 8008a06:	2010      	movcc	r0, #16
 8008a08:	2000      	movcs	r0, #0
 8008a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a0e:	bf3c      	itt	cc
 8008a10:	021b      	lslcc	r3, r3, #8
 8008a12:	3008      	addcc	r0, #8
 8008a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a18:	bf3c      	itt	cc
 8008a1a:	011b      	lslcc	r3, r3, #4
 8008a1c:	3004      	addcc	r0, #4
 8008a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a22:	bf3c      	itt	cc
 8008a24:	009b      	lslcc	r3, r3, #2
 8008a26:	3002      	addcc	r0, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	db05      	blt.n	8008a38 <__hi0bits+0x3c>
 8008a2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a30:	f100 0001 	add.w	r0, r0, #1
 8008a34:	bf08      	it	eq
 8008a36:	2020      	moveq	r0, #32
 8008a38:	4770      	bx	lr

08008a3a <__lo0bits>:
 8008a3a:	6803      	ldr	r3, [r0, #0]
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	f013 0007 	ands.w	r0, r3, #7
 8008a42:	d00b      	beq.n	8008a5c <__lo0bits+0x22>
 8008a44:	07d9      	lsls	r1, r3, #31
 8008a46:	d421      	bmi.n	8008a8c <__lo0bits+0x52>
 8008a48:	0798      	lsls	r0, r3, #30
 8008a4a:	bf49      	itett	mi
 8008a4c:	085b      	lsrmi	r3, r3, #1
 8008a4e:	089b      	lsrpl	r3, r3, #2
 8008a50:	2001      	movmi	r0, #1
 8008a52:	6013      	strmi	r3, [r2, #0]
 8008a54:	bf5c      	itt	pl
 8008a56:	2002      	movpl	r0, #2
 8008a58:	6013      	strpl	r3, [r2, #0]
 8008a5a:	4770      	bx	lr
 8008a5c:	b299      	uxth	r1, r3
 8008a5e:	b909      	cbnz	r1, 8008a64 <__lo0bits+0x2a>
 8008a60:	2010      	movs	r0, #16
 8008a62:	0c1b      	lsrs	r3, r3, #16
 8008a64:	b2d9      	uxtb	r1, r3
 8008a66:	b909      	cbnz	r1, 8008a6c <__lo0bits+0x32>
 8008a68:	3008      	adds	r0, #8
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	0719      	lsls	r1, r3, #28
 8008a6e:	bf04      	itt	eq
 8008a70:	091b      	lsreq	r3, r3, #4
 8008a72:	3004      	addeq	r0, #4
 8008a74:	0799      	lsls	r1, r3, #30
 8008a76:	bf04      	itt	eq
 8008a78:	089b      	lsreq	r3, r3, #2
 8008a7a:	3002      	addeq	r0, #2
 8008a7c:	07d9      	lsls	r1, r3, #31
 8008a7e:	d403      	bmi.n	8008a88 <__lo0bits+0x4e>
 8008a80:	085b      	lsrs	r3, r3, #1
 8008a82:	f100 0001 	add.w	r0, r0, #1
 8008a86:	d003      	beq.n	8008a90 <__lo0bits+0x56>
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	4770      	bx	lr
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	4770      	bx	lr
 8008a90:	2020      	movs	r0, #32
 8008a92:	4770      	bx	lr

08008a94 <__i2b>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	2101      	movs	r1, #1
 8008a9a:	f7ff ff07 	bl	80088ac <_Balloc>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <__i2b+0x1a>
 8008aa2:	f240 1145 	movw	r1, #325	@ 0x145
 8008aa6:	4b04      	ldr	r3, [pc, #16]	@ (8008ab8 <__i2b+0x24>)
 8008aa8:	4804      	ldr	r0, [pc, #16]	@ (8008abc <__i2b+0x28>)
 8008aaa:	f000 fcb1 	bl	8009410 <__assert_func>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6144      	str	r4, [r0, #20]
 8008ab2:	6103      	str	r3, [r0, #16]
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	0800a8ee 	.word	0x0800a8ee
 8008abc:	0800a8ff 	.word	0x0800a8ff

08008ac0 <__multiply>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4617      	mov	r7, r2
 8008ac6:	690a      	ldr	r2, [r1, #16]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	4689      	mov	r9, r1
 8008acc:	429a      	cmp	r2, r3
 8008ace:	bfa2      	ittt	ge
 8008ad0:	463b      	movge	r3, r7
 8008ad2:	460f      	movge	r7, r1
 8008ad4:	4699      	movge	r9, r3
 8008ad6:	693d      	ldr	r5, [r7, #16]
 8008ad8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	eb05 060a 	add.w	r6, r5, sl
 8008ae4:	42b3      	cmp	r3, r6
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	bfb8      	it	lt
 8008aea:	3101      	addlt	r1, #1
 8008aec:	f7ff fede 	bl	80088ac <_Balloc>
 8008af0:	b930      	cbnz	r0, 8008b00 <__multiply+0x40>
 8008af2:	4602      	mov	r2, r0
 8008af4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008af8:	4b40      	ldr	r3, [pc, #256]	@ (8008bfc <__multiply+0x13c>)
 8008afa:	4841      	ldr	r0, [pc, #260]	@ (8008c00 <__multiply+0x140>)
 8008afc:	f000 fc88 	bl	8009410 <__assert_func>
 8008b00:	f100 0414 	add.w	r4, r0, #20
 8008b04:	4623      	mov	r3, r4
 8008b06:	2200      	movs	r2, #0
 8008b08:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b0c:	4573      	cmp	r3, lr
 8008b0e:	d320      	bcc.n	8008b52 <__multiply+0x92>
 8008b10:	f107 0814 	add.w	r8, r7, #20
 8008b14:	f109 0114 	add.w	r1, r9, #20
 8008b18:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b1c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	1beb      	subs	r3, r5, r7
 8008b24:	3b15      	subs	r3, #21
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	3715      	adds	r7, #21
 8008b2e:	42bd      	cmp	r5, r7
 8008b30:	bf38      	it	cc
 8008b32:	2304      	movcc	r3, #4
 8008b34:	9301      	str	r3, [sp, #4]
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	9103      	str	r1, [sp, #12]
 8008b3a:	428b      	cmp	r3, r1
 8008b3c:	d80c      	bhi.n	8008b58 <__multiply+0x98>
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	dd03      	ble.n	8008b4a <__multiply+0x8a>
 8008b42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d055      	beq.n	8008bf6 <__multiply+0x136>
 8008b4a:	6106      	str	r6, [r0, #16]
 8008b4c:	b005      	add	sp, #20
 8008b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b52:	f843 2b04 	str.w	r2, [r3], #4
 8008b56:	e7d9      	b.n	8008b0c <__multiply+0x4c>
 8008b58:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b5c:	f1ba 0f00 	cmp.w	sl, #0
 8008b60:	d01f      	beq.n	8008ba2 <__multiply+0xe2>
 8008b62:	46c4      	mov	ip, r8
 8008b64:	46a1      	mov	r9, r4
 8008b66:	2700      	movs	r7, #0
 8008b68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b6c:	f8d9 3000 	ldr.w	r3, [r9]
 8008b70:	fa1f fb82 	uxth.w	fp, r2
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b7a:	443b      	add	r3, r7
 8008b7c:	f8d9 7000 	ldr.w	r7, [r9]
 8008b80:	0c12      	lsrs	r2, r2, #16
 8008b82:	0c3f      	lsrs	r7, r7, #16
 8008b84:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b88:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b92:	4565      	cmp	r5, ip
 8008b94:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b98:	f849 3b04 	str.w	r3, [r9], #4
 8008b9c:	d8e4      	bhi.n	8008b68 <__multiply+0xa8>
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	50e7      	str	r7, [r4, r3]
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	3104      	adds	r1, #4
 8008ba6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008baa:	f1b9 0f00 	cmp.w	r9, #0
 8008bae:	d020      	beq.n	8008bf2 <__multiply+0x132>
 8008bb0:	4647      	mov	r7, r8
 8008bb2:	46a4      	mov	ip, r4
 8008bb4:	f04f 0a00 	mov.w	sl, #0
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	f8b7 b000 	ldrh.w	fp, [r7]
 8008bbe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	fb09 220b 	mla	r2, r9, fp, r2
 8008bc8:	4452      	add	r2, sl
 8008bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bce:	f84c 3b04 	str.w	r3, [ip], #4
 8008bd2:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bda:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bde:	42bd      	cmp	r5, r7
 8008be0:	fb09 330a 	mla	r3, r9, sl, r3
 8008be4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008be8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bec:	d8e5      	bhi.n	8008bba <__multiply+0xfa>
 8008bee:	9a01      	ldr	r2, [sp, #4]
 8008bf0:	50a3      	str	r3, [r4, r2]
 8008bf2:	3404      	adds	r4, #4
 8008bf4:	e79f      	b.n	8008b36 <__multiply+0x76>
 8008bf6:	3e01      	subs	r6, #1
 8008bf8:	e7a1      	b.n	8008b3e <__multiply+0x7e>
 8008bfa:	bf00      	nop
 8008bfc:	0800a8ee 	.word	0x0800a8ee
 8008c00:	0800a8ff 	.word	0x0800a8ff

08008c04 <__pow5mult>:
 8008c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c08:	4615      	mov	r5, r2
 8008c0a:	f012 0203 	ands.w	r2, r2, #3
 8008c0e:	4607      	mov	r7, r0
 8008c10:	460e      	mov	r6, r1
 8008c12:	d007      	beq.n	8008c24 <__pow5mult+0x20>
 8008c14:	4c25      	ldr	r4, [pc, #148]	@ (8008cac <__pow5mult+0xa8>)
 8008c16:	3a01      	subs	r2, #1
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c1e:	f7ff fea7 	bl	8008970 <__multadd>
 8008c22:	4606      	mov	r6, r0
 8008c24:	10ad      	asrs	r5, r5, #2
 8008c26:	d03d      	beq.n	8008ca4 <__pow5mult+0xa0>
 8008c28:	69fc      	ldr	r4, [r7, #28]
 8008c2a:	b97c      	cbnz	r4, 8008c4c <__pow5mult+0x48>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f7ff fd87 	bl	8008740 <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	61f8      	str	r0, [r7, #28]
 8008c36:	b928      	cbnz	r0, 8008c44 <__pow5mult+0x40>
 8008c38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb0 <__pow5mult+0xac>)
 8008c3e:	481d      	ldr	r0, [pc, #116]	@ (8008cb4 <__pow5mult+0xb0>)
 8008c40:	f000 fbe6 	bl	8009410 <__assert_func>
 8008c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c48:	6004      	str	r4, [r0, #0]
 8008c4a:	60c4      	str	r4, [r0, #12]
 8008c4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c54:	b94c      	cbnz	r4, 8008c6a <__pow5mult+0x66>
 8008c56:	f240 2171 	movw	r1, #625	@ 0x271
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f7ff ff1a 	bl	8008a94 <__i2b>
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	f04f 0900 	mov.w	r9, #0
 8008c6e:	07eb      	lsls	r3, r5, #31
 8008c70:	d50a      	bpl.n	8008c88 <__pow5mult+0x84>
 8008c72:	4631      	mov	r1, r6
 8008c74:	4622      	mov	r2, r4
 8008c76:	4638      	mov	r0, r7
 8008c78:	f7ff ff22 	bl	8008ac0 <__multiply>
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff fe53 	bl	800892c <_Bfree>
 8008c86:	4646      	mov	r6, r8
 8008c88:	106d      	asrs	r5, r5, #1
 8008c8a:	d00b      	beq.n	8008ca4 <__pow5mult+0xa0>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	b938      	cbnz	r0, 8008ca0 <__pow5mult+0x9c>
 8008c90:	4622      	mov	r2, r4
 8008c92:	4621      	mov	r1, r4
 8008c94:	4638      	mov	r0, r7
 8008c96:	f7ff ff13 	bl	8008ac0 <__multiply>
 8008c9a:	6020      	str	r0, [r4, #0]
 8008c9c:	f8c0 9000 	str.w	r9, [r0]
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	e7e4      	b.n	8008c6e <__pow5mult+0x6a>
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008caa:	bf00      	nop
 8008cac:	0800a9b0 	.word	0x0800a9b0
 8008cb0:	0800a87f 	.word	0x0800a87f
 8008cb4:	0800a8ff 	.word	0x0800a8ff

08008cb8 <__lshift>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	4691      	mov	r9, r2
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	6849      	ldr	r1, [r1, #4]
 8008cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cd0:	f108 0601 	add.w	r6, r8, #1
 8008cd4:	42b3      	cmp	r3, r6
 8008cd6:	db0b      	blt.n	8008cf0 <__lshift+0x38>
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff fde7 	bl	80088ac <_Balloc>
 8008cde:	4605      	mov	r5, r0
 8008ce0:	b948      	cbnz	r0, 8008cf6 <__lshift+0x3e>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ce8:	4b27      	ldr	r3, [pc, #156]	@ (8008d88 <__lshift+0xd0>)
 8008cea:	4828      	ldr	r0, [pc, #160]	@ (8008d8c <__lshift+0xd4>)
 8008cec:	f000 fb90 	bl	8009410 <__assert_func>
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	e7ee      	b.n	8008cd4 <__lshift+0x1c>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f100 0114 	add.w	r1, r0, #20
 8008cfc:	f100 0210 	add.w	r2, r0, #16
 8008d00:	4618      	mov	r0, r3
 8008d02:	4553      	cmp	r3, sl
 8008d04:	db33      	blt.n	8008d6e <__lshift+0xb6>
 8008d06:	6920      	ldr	r0, [r4, #16]
 8008d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d0c:	f104 0314 	add.w	r3, r4, #20
 8008d10:	f019 091f 	ands.w	r9, r9, #31
 8008d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d1c:	d02b      	beq.n	8008d76 <__lshift+0xbe>
 8008d1e:	468a      	mov	sl, r1
 8008d20:	2200      	movs	r2, #0
 8008d22:	f1c9 0e20 	rsb	lr, r9, #32
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	fa00 f009 	lsl.w	r0, r0, r9
 8008d2c:	4310      	orrs	r0, r2
 8008d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	459c      	cmp	ip, r3
 8008d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d3c:	d8f3      	bhi.n	8008d26 <__lshift+0x6e>
 8008d3e:	ebac 0304 	sub.w	r3, ip, r4
 8008d42:	3b15      	subs	r3, #21
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	3304      	adds	r3, #4
 8008d4a:	f104 0015 	add.w	r0, r4, #21
 8008d4e:	4560      	cmp	r0, ip
 8008d50:	bf88      	it	hi
 8008d52:	2304      	movhi	r3, #4
 8008d54:	50ca      	str	r2, [r1, r3]
 8008d56:	b10a      	cbz	r2, 8008d5c <__lshift+0xa4>
 8008d58:	f108 0602 	add.w	r6, r8, #2
 8008d5c:	3e01      	subs	r6, #1
 8008d5e:	4638      	mov	r0, r7
 8008d60:	4621      	mov	r1, r4
 8008d62:	612e      	str	r6, [r5, #16]
 8008d64:	f7ff fde2 	bl	800892c <_Bfree>
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d72:	3301      	adds	r3, #1
 8008d74:	e7c5      	b.n	8008d02 <__lshift+0x4a>
 8008d76:	3904      	subs	r1, #4
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	459c      	cmp	ip, r3
 8008d7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d82:	d8f9      	bhi.n	8008d78 <__lshift+0xc0>
 8008d84:	e7ea      	b.n	8008d5c <__lshift+0xa4>
 8008d86:	bf00      	nop
 8008d88:	0800a8ee 	.word	0x0800a8ee
 8008d8c:	0800a8ff 	.word	0x0800a8ff

08008d90 <__mcmp>:
 8008d90:	4603      	mov	r3, r0
 8008d92:	690a      	ldr	r2, [r1, #16]
 8008d94:	6900      	ldr	r0, [r0, #16]
 8008d96:	b530      	push	{r4, r5, lr}
 8008d98:	1a80      	subs	r0, r0, r2
 8008d9a:	d10e      	bne.n	8008dba <__mcmp+0x2a>
 8008d9c:	3314      	adds	r3, #20
 8008d9e:	3114      	adds	r1, #20
 8008da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008db0:	4295      	cmp	r5, r2
 8008db2:	d003      	beq.n	8008dbc <__mcmp+0x2c>
 8008db4:	d205      	bcs.n	8008dc2 <__mcmp+0x32>
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	bd30      	pop	{r4, r5, pc}
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	d3f3      	bcc.n	8008da8 <__mcmp+0x18>
 8008dc0:	e7fb      	b.n	8008dba <__mcmp+0x2a>
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7f9      	b.n	8008dba <__mcmp+0x2a>
	...

08008dc8 <__mdiff>:
 8008dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	4689      	mov	r9, r1
 8008dce:	4606      	mov	r6, r0
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4648      	mov	r0, r9
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	f7ff ffdb 	bl	8008d90 <__mcmp>
 8008dda:	1e05      	subs	r5, r0, #0
 8008ddc:	d112      	bne.n	8008e04 <__mdiff+0x3c>
 8008dde:	4629      	mov	r1, r5
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7ff fd63 	bl	80088ac <_Balloc>
 8008de6:	4602      	mov	r2, r0
 8008de8:	b928      	cbnz	r0, 8008df6 <__mdiff+0x2e>
 8008dea:	f240 2137 	movw	r1, #567	@ 0x237
 8008dee:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee8 <__mdiff+0x120>)
 8008df0:	483e      	ldr	r0, [pc, #248]	@ (8008eec <__mdiff+0x124>)
 8008df2:	f000 fb0d 	bl	8009410 <__assert_func>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	b003      	add	sp, #12
 8008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	bfbc      	itt	lt
 8008e06:	464b      	movlt	r3, r9
 8008e08:	46a1      	movlt	r9, r4
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e10:	bfba      	itte	lt
 8008e12:	461c      	movlt	r4, r3
 8008e14:	2501      	movlt	r5, #1
 8008e16:	2500      	movge	r5, #0
 8008e18:	f7ff fd48 	bl	80088ac <_Balloc>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	b918      	cbnz	r0, 8008e28 <__mdiff+0x60>
 8008e20:	f240 2145 	movw	r1, #581	@ 0x245
 8008e24:	4b30      	ldr	r3, [pc, #192]	@ (8008ee8 <__mdiff+0x120>)
 8008e26:	e7e3      	b.n	8008df0 <__mdiff+0x28>
 8008e28:	f100 0b14 	add.w	fp, r0, #20
 8008e2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e30:	f109 0310 	add.w	r3, r9, #16
 8008e34:	60c5      	str	r5, [r0, #12]
 8008e36:	f04f 0c00 	mov.w	ip, #0
 8008e3a:	f109 0514 	add.w	r5, r9, #20
 8008e3e:	46d9      	mov	r9, fp
 8008e40:	6926      	ldr	r6, [r4, #16]
 8008e42:	f104 0e14 	add.w	lr, r4, #20
 8008e46:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e4a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e5a:	b281      	uxth	r1, r0
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	fa1f f38a 	uxth.w	r3, sl
 8008e62:	1a5b      	subs	r3, r3, r1
 8008e64:	0c00      	lsrs	r0, r0, #16
 8008e66:	4463      	add	r3, ip
 8008e68:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e6c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e76:	4576      	cmp	r6, lr
 8008e78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e7c:	f849 3b04 	str.w	r3, [r9], #4
 8008e80:	d8e6      	bhi.n	8008e50 <__mdiff+0x88>
 8008e82:	1b33      	subs	r3, r6, r4
 8008e84:	3b15      	subs	r3, #21
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	3415      	adds	r4, #21
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	bf38      	it	cc
 8008e92:	2304      	movcc	r3, #4
 8008e94:	441d      	add	r5, r3
 8008e96:	445b      	add	r3, fp
 8008e98:	461e      	mov	r6, r3
 8008e9a:	462c      	mov	r4, r5
 8008e9c:	4544      	cmp	r4, r8
 8008e9e:	d30e      	bcc.n	8008ebe <__mdiff+0xf6>
 8008ea0:	f108 0103 	add.w	r1, r8, #3
 8008ea4:	1b49      	subs	r1, r1, r5
 8008ea6:	f021 0103 	bic.w	r1, r1, #3
 8008eaa:	3d03      	subs	r5, #3
 8008eac:	45a8      	cmp	r8, r5
 8008eae:	bf38      	it	cc
 8008eb0:	2100      	movcc	r1, #0
 8008eb2:	440b      	add	r3, r1
 8008eb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eb8:	b199      	cbz	r1, 8008ee2 <__mdiff+0x11a>
 8008eba:	6117      	str	r7, [r2, #16]
 8008ebc:	e79e      	b.n	8008dfc <__mdiff+0x34>
 8008ebe:	46e6      	mov	lr, ip
 8008ec0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ec4:	fa1f fc81 	uxth.w	ip, r1
 8008ec8:	44f4      	add	ip, lr
 8008eca:	0c08      	lsrs	r0, r1, #16
 8008ecc:	4471      	add	r1, lr
 8008ece:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ed2:	b289      	uxth	r1, r1
 8008ed4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008edc:	f846 1b04 	str.w	r1, [r6], #4
 8008ee0:	e7dc      	b.n	8008e9c <__mdiff+0xd4>
 8008ee2:	3f01      	subs	r7, #1
 8008ee4:	e7e6      	b.n	8008eb4 <__mdiff+0xec>
 8008ee6:	bf00      	nop
 8008ee8:	0800a8ee 	.word	0x0800a8ee
 8008eec:	0800a8ff 	.word	0x0800a8ff

08008ef0 <__d2b>:
 8008ef0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	4690      	mov	r8, r2
 8008ef8:	4699      	mov	r9, r3
 8008efa:	9e08      	ldr	r6, [sp, #32]
 8008efc:	f7ff fcd6 	bl	80088ac <_Balloc>
 8008f00:	4604      	mov	r4, r0
 8008f02:	b930      	cbnz	r0, 8008f12 <__d2b+0x22>
 8008f04:	4602      	mov	r2, r0
 8008f06:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f0a:	4b23      	ldr	r3, [pc, #140]	@ (8008f98 <__d2b+0xa8>)
 8008f0c:	4823      	ldr	r0, [pc, #140]	@ (8008f9c <__d2b+0xac>)
 8008f0e:	f000 fa7f 	bl	8009410 <__assert_func>
 8008f12:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f1a:	b10d      	cbz	r5, 8008f20 <__d2b+0x30>
 8008f1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	f1b8 0300 	subs.w	r3, r8, #0
 8008f26:	d024      	beq.n	8008f72 <__d2b+0x82>
 8008f28:	4668      	mov	r0, sp
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	f7ff fd85 	bl	8008a3a <__lo0bits>
 8008f30:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f34:	b1d8      	cbz	r0, 8008f6e <__d2b+0x7e>
 8008f36:	f1c0 0320 	rsb	r3, r0, #32
 8008f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	40c2      	lsrs	r2, r0
 8008f42:	6163      	str	r3, [r4, #20]
 8008f44:	9201      	str	r2, [sp, #4]
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2201      	moveq	r2, #1
 8008f4e:	2202      	movne	r2, #2
 8008f50:	61a3      	str	r3, [r4, #24]
 8008f52:	6122      	str	r2, [r4, #16]
 8008f54:	b1ad      	cbz	r5, 8008f82 <__d2b+0x92>
 8008f56:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f5a:	4405      	add	r5, r0
 8008f5c:	6035      	str	r5, [r6, #0]
 8008f5e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f64:	6018      	str	r0, [r3, #0]
 8008f66:	4620      	mov	r0, r4
 8008f68:	b002      	add	sp, #8
 8008f6a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008f6e:	6161      	str	r1, [r4, #20]
 8008f70:	e7e9      	b.n	8008f46 <__d2b+0x56>
 8008f72:	a801      	add	r0, sp, #4
 8008f74:	f7ff fd61 	bl	8008a3a <__lo0bits>
 8008f78:	9b01      	ldr	r3, [sp, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	6163      	str	r3, [r4, #20]
 8008f7e:	3020      	adds	r0, #32
 8008f80:	e7e7      	b.n	8008f52 <__d2b+0x62>
 8008f82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f8a:	6030      	str	r0, [r6, #0]
 8008f8c:	6918      	ldr	r0, [r3, #16]
 8008f8e:	f7ff fd35 	bl	80089fc <__hi0bits>
 8008f92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f96:	e7e4      	b.n	8008f62 <__d2b+0x72>
 8008f98:	0800a8ee 	.word	0x0800a8ee
 8008f9c:	0800a8ff 	.word	0x0800a8ff

08008fa0 <__ssputs_r>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	461f      	mov	r7, r3
 8008fa6:	688e      	ldr	r6, [r1, #8]
 8008fa8:	4682      	mov	sl, r0
 8008faa:	42be      	cmp	r6, r7
 8008fac:	460c      	mov	r4, r1
 8008fae:	4690      	mov	r8, r2
 8008fb0:	680b      	ldr	r3, [r1, #0]
 8008fb2:	d82d      	bhi.n	8009010 <__ssputs_r+0x70>
 8008fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fbc:	d026      	beq.n	800900c <__ssputs_r+0x6c>
 8008fbe:	6965      	ldr	r5, [r4, #20]
 8008fc0:	6909      	ldr	r1, [r1, #16]
 8008fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc6:	eba3 0901 	sub.w	r9, r3, r1
 8008fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fce:	1c7b      	adds	r3, r7, #1
 8008fd0:	444b      	add	r3, r9
 8008fd2:	106d      	asrs	r5, r5, #1
 8008fd4:	429d      	cmp	r5, r3
 8008fd6:	bf38      	it	cc
 8008fd8:	461d      	movcc	r5, r3
 8008fda:	0553      	lsls	r3, r2, #21
 8008fdc:	d527      	bpl.n	800902e <__ssputs_r+0x8e>
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7ff fbd8 	bl	8008794 <_malloc_r>
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	b360      	cbz	r0, 8009042 <__ssputs_r+0xa2>
 8008fe8:	464a      	mov	r2, r9
 8008fea:	6921      	ldr	r1, [r4, #16]
 8008fec:	f000 fa02 	bl	80093f4 <memcpy>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	6126      	str	r6, [r4, #16]
 8008ffe:	444e      	add	r6, r9
 8009000:	6026      	str	r6, [r4, #0]
 8009002:	463e      	mov	r6, r7
 8009004:	6165      	str	r5, [r4, #20]
 8009006:	eba5 0509 	sub.w	r5, r5, r9
 800900a:	60a5      	str	r5, [r4, #8]
 800900c:	42be      	cmp	r6, r7
 800900e:	d900      	bls.n	8009012 <__ssputs_r+0x72>
 8009010:	463e      	mov	r6, r7
 8009012:	4632      	mov	r2, r6
 8009014:	4641      	mov	r1, r8
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	f000 f9c2 	bl	80093a0 <memmove>
 800901c:	2000      	movs	r0, #0
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	1b9b      	subs	r3, r3, r6
 8009022:	60a3      	str	r3, [r4, #8]
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	4433      	add	r3, r6
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902e:	462a      	mov	r2, r5
 8009030:	f000 fa32 	bl	8009498 <_realloc_r>
 8009034:	4606      	mov	r6, r0
 8009036:	2800      	cmp	r0, #0
 8009038:	d1e0      	bne.n	8008ffc <__ssputs_r+0x5c>
 800903a:	4650      	mov	r0, sl
 800903c:	6921      	ldr	r1, [r4, #16]
 800903e:	f7ff fb37 	bl	80086b0 <_free_r>
 8009042:	230c      	movs	r3, #12
 8009044:	f8ca 3000 	str.w	r3, [sl]
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f04f 30ff 	mov.w	r0, #4294967295
 800904e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	e7e9      	b.n	800902a <__ssputs_r+0x8a>
	...

08009058 <_svfiprintf_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	4698      	mov	r8, r3
 800905e:	898b      	ldrh	r3, [r1, #12]
 8009060:	4607      	mov	r7, r0
 8009062:	061b      	lsls	r3, r3, #24
 8009064:	460d      	mov	r5, r1
 8009066:	4614      	mov	r4, r2
 8009068:	b09d      	sub	sp, #116	@ 0x74
 800906a:	d510      	bpl.n	800908e <_svfiprintf_r+0x36>
 800906c:	690b      	ldr	r3, [r1, #16]
 800906e:	b973      	cbnz	r3, 800908e <_svfiprintf_r+0x36>
 8009070:	2140      	movs	r1, #64	@ 0x40
 8009072:	f7ff fb8f 	bl	8008794 <_malloc_r>
 8009076:	6028      	str	r0, [r5, #0]
 8009078:	6128      	str	r0, [r5, #16]
 800907a:	b930      	cbnz	r0, 800908a <_svfiprintf_r+0x32>
 800907c:	230c      	movs	r3, #12
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	b01d      	add	sp, #116	@ 0x74
 8009086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908a:	2340      	movs	r3, #64	@ 0x40
 800908c:	616b      	str	r3, [r5, #20]
 800908e:	2300      	movs	r3, #0
 8009090:	9309      	str	r3, [sp, #36]	@ 0x24
 8009092:	2320      	movs	r3, #32
 8009094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009098:	2330      	movs	r3, #48	@ 0x30
 800909a:	f04f 0901 	mov.w	r9, #1
 800909e:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800923c <_svfiprintf_r+0x1e4>
 80090a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090aa:	4623      	mov	r3, r4
 80090ac:	469a      	mov	sl, r3
 80090ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b2:	b10a      	cbz	r2, 80090b8 <_svfiprintf_r+0x60>
 80090b4:	2a25      	cmp	r2, #37	@ 0x25
 80090b6:	d1f9      	bne.n	80090ac <_svfiprintf_r+0x54>
 80090b8:	ebba 0b04 	subs.w	fp, sl, r4
 80090bc:	d00b      	beq.n	80090d6 <_svfiprintf_r+0x7e>
 80090be:	465b      	mov	r3, fp
 80090c0:	4622      	mov	r2, r4
 80090c2:	4629      	mov	r1, r5
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff ff6b 	bl	8008fa0 <__ssputs_r>
 80090ca:	3001      	adds	r0, #1
 80090cc:	f000 80a7 	beq.w	800921e <_svfiprintf_r+0x1c6>
 80090d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090d2:	445a      	add	r2, fp
 80090d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80090d6:	f89a 3000 	ldrb.w	r3, [sl]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 809f 	beq.w	800921e <_svfiprintf_r+0x1c6>
 80090e0:	2300      	movs	r3, #0
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ea:	f10a 0a01 	add.w	sl, sl, #1
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	9307      	str	r3, [sp, #28]
 80090f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80090f8:	4654      	mov	r4, sl
 80090fa:	2205      	movs	r2, #5
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	484e      	ldr	r0, [pc, #312]	@ (800923c <_svfiprintf_r+0x1e4>)
 8009102:	f7fe fc68 	bl	80079d6 <memchr>
 8009106:	9a04      	ldr	r2, [sp, #16]
 8009108:	b9d8      	cbnz	r0, 8009142 <_svfiprintf_r+0xea>
 800910a:	06d0      	lsls	r0, r2, #27
 800910c:	bf44      	itt	mi
 800910e:	2320      	movmi	r3, #32
 8009110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009114:	0711      	lsls	r1, r2, #28
 8009116:	bf44      	itt	mi
 8009118:	232b      	movmi	r3, #43	@ 0x2b
 800911a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800911e:	f89a 3000 	ldrb.w	r3, [sl]
 8009122:	2b2a      	cmp	r3, #42	@ 0x2a
 8009124:	d015      	beq.n	8009152 <_svfiprintf_r+0xfa>
 8009126:	4654      	mov	r4, sl
 8009128:	2000      	movs	r0, #0
 800912a:	f04f 0c0a 	mov.w	ip, #10
 800912e:	9a07      	ldr	r2, [sp, #28]
 8009130:	4621      	mov	r1, r4
 8009132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009136:	3b30      	subs	r3, #48	@ 0x30
 8009138:	2b09      	cmp	r3, #9
 800913a:	d94b      	bls.n	80091d4 <_svfiprintf_r+0x17c>
 800913c:	b1b0      	cbz	r0, 800916c <_svfiprintf_r+0x114>
 800913e:	9207      	str	r2, [sp, #28]
 8009140:	e014      	b.n	800916c <_svfiprintf_r+0x114>
 8009142:	eba0 0308 	sub.w	r3, r0, r8
 8009146:	fa09 f303 	lsl.w	r3, r9, r3
 800914a:	4313      	orrs	r3, r2
 800914c:	46a2      	mov	sl, r4
 800914e:	9304      	str	r3, [sp, #16]
 8009150:	e7d2      	b.n	80090f8 <_svfiprintf_r+0xa0>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	1d19      	adds	r1, r3, #4
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	9103      	str	r1, [sp, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	bfbb      	ittet	lt
 800915e:	425b      	neglt	r3, r3
 8009160:	f042 0202 	orrlt.w	r2, r2, #2
 8009164:	9307      	strge	r3, [sp, #28]
 8009166:	9307      	strlt	r3, [sp, #28]
 8009168:	bfb8      	it	lt
 800916a:	9204      	strlt	r2, [sp, #16]
 800916c:	7823      	ldrb	r3, [r4, #0]
 800916e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009170:	d10a      	bne.n	8009188 <_svfiprintf_r+0x130>
 8009172:	7863      	ldrb	r3, [r4, #1]
 8009174:	2b2a      	cmp	r3, #42	@ 0x2a
 8009176:	d132      	bne.n	80091de <_svfiprintf_r+0x186>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	3402      	adds	r4, #2
 800917c:	1d1a      	adds	r2, r3, #4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	9203      	str	r2, [sp, #12]
 8009182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009240 <_svfiprintf_r+0x1e8>
 800918c:	2203      	movs	r2, #3
 800918e:	4650      	mov	r0, sl
 8009190:	7821      	ldrb	r1, [r4, #0]
 8009192:	f7fe fc20 	bl	80079d6 <memchr>
 8009196:	b138      	cbz	r0, 80091a8 <_svfiprintf_r+0x150>
 8009198:	2240      	movs	r2, #64	@ 0x40
 800919a:	9b04      	ldr	r3, [sp, #16]
 800919c:	eba0 000a 	sub.w	r0, r0, sl
 80091a0:	4082      	lsls	r2, r0
 80091a2:	4313      	orrs	r3, r2
 80091a4:	3401      	adds	r4, #1
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ac:	2206      	movs	r2, #6
 80091ae:	4825      	ldr	r0, [pc, #148]	@ (8009244 <_svfiprintf_r+0x1ec>)
 80091b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091b4:	f7fe fc0f 	bl	80079d6 <memchr>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d036      	beq.n	800922a <_svfiprintf_r+0x1d2>
 80091bc:	4b22      	ldr	r3, [pc, #136]	@ (8009248 <_svfiprintf_r+0x1f0>)
 80091be:	bb1b      	cbnz	r3, 8009208 <_svfiprintf_r+0x1b0>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	3307      	adds	r3, #7
 80091c4:	f023 0307 	bic.w	r3, r3, #7
 80091c8:	3308      	adds	r3, #8
 80091ca:	9303      	str	r3, [sp, #12]
 80091cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ce:	4433      	add	r3, r6
 80091d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d2:	e76a      	b.n	80090aa <_svfiprintf_r+0x52>
 80091d4:	460c      	mov	r4, r1
 80091d6:	2001      	movs	r0, #1
 80091d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091dc:	e7a8      	b.n	8009130 <_svfiprintf_r+0xd8>
 80091de:	2300      	movs	r3, #0
 80091e0:	f04f 0c0a 	mov.w	ip, #10
 80091e4:	4619      	mov	r1, r3
 80091e6:	3401      	adds	r4, #1
 80091e8:	9305      	str	r3, [sp, #20]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f0:	3a30      	subs	r2, #48	@ 0x30
 80091f2:	2a09      	cmp	r2, #9
 80091f4:	d903      	bls.n	80091fe <_svfiprintf_r+0x1a6>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0c6      	beq.n	8009188 <_svfiprintf_r+0x130>
 80091fa:	9105      	str	r1, [sp, #20]
 80091fc:	e7c4      	b.n	8009188 <_svfiprintf_r+0x130>
 80091fe:	4604      	mov	r4, r0
 8009200:	2301      	movs	r3, #1
 8009202:	fb0c 2101 	mla	r1, ip, r1, r2
 8009206:	e7f0      	b.n	80091ea <_svfiprintf_r+0x192>
 8009208:	ab03      	add	r3, sp, #12
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	462a      	mov	r2, r5
 800920e:	4638      	mov	r0, r7
 8009210:	4b0e      	ldr	r3, [pc, #56]	@ (800924c <_svfiprintf_r+0x1f4>)
 8009212:	a904      	add	r1, sp, #16
 8009214:	f7fd fe7c 	bl	8006f10 <_printf_float>
 8009218:	1c42      	adds	r2, r0, #1
 800921a:	4606      	mov	r6, r0
 800921c:	d1d6      	bne.n	80091cc <_svfiprintf_r+0x174>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	065b      	lsls	r3, r3, #25
 8009222:	f53f af2d 	bmi.w	8009080 <_svfiprintf_r+0x28>
 8009226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009228:	e72c      	b.n	8009084 <_svfiprintf_r+0x2c>
 800922a:	ab03      	add	r3, sp, #12
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	462a      	mov	r2, r5
 8009230:	4638      	mov	r0, r7
 8009232:	4b06      	ldr	r3, [pc, #24]	@ (800924c <_svfiprintf_r+0x1f4>)
 8009234:	a904      	add	r1, sp, #16
 8009236:	f7fe f909 	bl	800744c <_printf_i>
 800923a:	e7ed      	b.n	8009218 <_svfiprintf_r+0x1c0>
 800923c:	0800a958 	.word	0x0800a958
 8009240:	0800a95e 	.word	0x0800a95e
 8009244:	0800a962 	.word	0x0800a962
 8009248:	08006f11 	.word	0x08006f11
 800924c:	08008fa1 	.word	0x08008fa1

08009250 <__sflush_r>:
 8009250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	0716      	lsls	r6, r2, #28
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
 800925c:	d454      	bmi.n	8009308 <__sflush_r+0xb8>
 800925e:	684b      	ldr	r3, [r1, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	dc02      	bgt.n	800926a <__sflush_r+0x1a>
 8009264:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd48      	ble.n	80092fc <__sflush_r+0xac>
 800926a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800926c:	2e00      	cmp	r6, #0
 800926e:	d045      	beq.n	80092fc <__sflush_r+0xac>
 8009270:	2300      	movs	r3, #0
 8009272:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009276:	682f      	ldr	r7, [r5, #0]
 8009278:	6a21      	ldr	r1, [r4, #32]
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	d030      	beq.n	80092e0 <__sflush_r+0x90>
 800927e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	0759      	lsls	r1, r3, #29
 8009284:	d505      	bpl.n	8009292 <__sflush_r+0x42>
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800928c:	b10b      	cbz	r3, 8009292 <__sflush_r+0x42>
 800928e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009290:	1ad2      	subs	r2, r2, r3
 8009292:	2300      	movs	r3, #0
 8009294:	4628      	mov	r0, r5
 8009296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009298:	6a21      	ldr	r1, [r4, #32]
 800929a:	47b0      	blx	r6
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	d106      	bne.n	80092b0 <__sflush_r+0x60>
 80092a2:	6829      	ldr	r1, [r5, #0]
 80092a4:	291d      	cmp	r1, #29
 80092a6:	d82b      	bhi.n	8009300 <__sflush_r+0xb0>
 80092a8:	4a28      	ldr	r2, [pc, #160]	@ (800934c <__sflush_r+0xfc>)
 80092aa:	40ca      	lsrs	r2, r1
 80092ac:	07d6      	lsls	r6, r2, #31
 80092ae:	d527      	bpl.n	8009300 <__sflush_r+0xb0>
 80092b0:	2200      	movs	r2, #0
 80092b2:	6062      	str	r2, [r4, #4]
 80092b4:	6922      	ldr	r2, [r4, #16]
 80092b6:	04d9      	lsls	r1, r3, #19
 80092b8:	6022      	str	r2, [r4, #0]
 80092ba:	d504      	bpl.n	80092c6 <__sflush_r+0x76>
 80092bc:	1c42      	adds	r2, r0, #1
 80092be:	d101      	bne.n	80092c4 <__sflush_r+0x74>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b903      	cbnz	r3, 80092c6 <__sflush_r+0x76>
 80092c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80092c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092c8:	602f      	str	r7, [r5, #0]
 80092ca:	b1b9      	cbz	r1, 80092fc <__sflush_r+0xac>
 80092cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092d0:	4299      	cmp	r1, r3
 80092d2:	d002      	beq.n	80092da <__sflush_r+0x8a>
 80092d4:	4628      	mov	r0, r5
 80092d6:	f7ff f9eb 	bl	80086b0 <_free_r>
 80092da:	2300      	movs	r3, #0
 80092dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80092de:	e00d      	b.n	80092fc <__sflush_r+0xac>
 80092e0:	2301      	movs	r3, #1
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b0      	blx	r6
 80092e6:	4602      	mov	r2, r0
 80092e8:	1c50      	adds	r0, r2, #1
 80092ea:	d1c9      	bne.n	8009280 <__sflush_r+0x30>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0c6      	beq.n	8009280 <__sflush_r+0x30>
 80092f2:	2b1d      	cmp	r3, #29
 80092f4:	d001      	beq.n	80092fa <__sflush_r+0xaa>
 80092f6:	2b16      	cmp	r3, #22
 80092f8:	d11d      	bne.n	8009336 <__sflush_r+0xe6>
 80092fa:	602f      	str	r7, [r5, #0]
 80092fc:	2000      	movs	r0, #0
 80092fe:	e021      	b.n	8009344 <__sflush_r+0xf4>
 8009300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009304:	b21b      	sxth	r3, r3
 8009306:	e01a      	b.n	800933e <__sflush_r+0xee>
 8009308:	690f      	ldr	r7, [r1, #16]
 800930a:	2f00      	cmp	r7, #0
 800930c:	d0f6      	beq.n	80092fc <__sflush_r+0xac>
 800930e:	0793      	lsls	r3, r2, #30
 8009310:	bf18      	it	ne
 8009312:	2300      	movne	r3, #0
 8009314:	680e      	ldr	r6, [r1, #0]
 8009316:	bf08      	it	eq
 8009318:	694b      	ldreq	r3, [r1, #20]
 800931a:	1bf6      	subs	r6, r6, r7
 800931c:	600f      	str	r7, [r1, #0]
 800931e:	608b      	str	r3, [r1, #8]
 8009320:	2e00      	cmp	r6, #0
 8009322:	ddeb      	ble.n	80092fc <__sflush_r+0xac>
 8009324:	4633      	mov	r3, r6
 8009326:	463a      	mov	r2, r7
 8009328:	4628      	mov	r0, r5
 800932a:	6a21      	ldr	r1, [r4, #32]
 800932c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009330:	47e0      	blx	ip
 8009332:	2800      	cmp	r0, #0
 8009334:	dc07      	bgt.n	8009346 <__sflush_r+0xf6>
 8009336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800933e:	f04f 30ff 	mov.w	r0, #4294967295
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009346:	4407      	add	r7, r0
 8009348:	1a36      	subs	r6, r6, r0
 800934a:	e7e9      	b.n	8009320 <__sflush_r+0xd0>
 800934c:	20400001 	.word	0x20400001

08009350 <_fflush_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	690b      	ldr	r3, [r1, #16]
 8009354:	4605      	mov	r5, r0
 8009356:	460c      	mov	r4, r1
 8009358:	b913      	cbnz	r3, 8009360 <_fflush_r+0x10>
 800935a:	2500      	movs	r5, #0
 800935c:	4628      	mov	r0, r5
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	b118      	cbz	r0, 800936a <_fflush_r+0x1a>
 8009362:	6a03      	ldr	r3, [r0, #32]
 8009364:	b90b      	cbnz	r3, 800936a <_fflush_r+0x1a>
 8009366:	f7fe fa1b 	bl	80077a0 <__sinit>
 800936a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f3      	beq.n	800935a <_fflush_r+0xa>
 8009372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009374:	07d0      	lsls	r0, r2, #31
 8009376:	d404      	bmi.n	8009382 <_fflush_r+0x32>
 8009378:	0599      	lsls	r1, r3, #22
 800937a:	d402      	bmi.n	8009382 <_fflush_r+0x32>
 800937c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800937e:	f7fe fb28 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8009382:	4628      	mov	r0, r5
 8009384:	4621      	mov	r1, r4
 8009386:	f7ff ff63 	bl	8009250 <__sflush_r>
 800938a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800938c:	4605      	mov	r5, r0
 800938e:	07da      	lsls	r2, r3, #31
 8009390:	d4e4      	bmi.n	800935c <_fflush_r+0xc>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	059b      	lsls	r3, r3, #22
 8009396:	d4e1      	bmi.n	800935c <_fflush_r+0xc>
 8009398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800939a:	f7fe fb1b 	bl	80079d4 <__retarget_lock_release_recursive>
 800939e:	e7dd      	b.n	800935c <_fflush_r+0xc>

080093a0 <memmove>:
 80093a0:	4288      	cmp	r0, r1
 80093a2:	b510      	push	{r4, lr}
 80093a4:	eb01 0402 	add.w	r4, r1, r2
 80093a8:	d902      	bls.n	80093b0 <memmove+0x10>
 80093aa:	4284      	cmp	r4, r0
 80093ac:	4623      	mov	r3, r4
 80093ae:	d807      	bhi.n	80093c0 <memmove+0x20>
 80093b0:	1e43      	subs	r3, r0, #1
 80093b2:	42a1      	cmp	r1, r4
 80093b4:	d008      	beq.n	80093c8 <memmove+0x28>
 80093b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093be:	e7f8      	b.n	80093b2 <memmove+0x12>
 80093c0:	4601      	mov	r1, r0
 80093c2:	4402      	add	r2, r0
 80093c4:	428a      	cmp	r2, r1
 80093c6:	d100      	bne.n	80093ca <memmove+0x2a>
 80093c8:	bd10      	pop	{r4, pc}
 80093ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093d2:	e7f7      	b.n	80093c4 <memmove+0x24>

080093d4 <_sbrk_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	2300      	movs	r3, #0
 80093d8:	4d05      	ldr	r5, [pc, #20]	@ (80093f0 <_sbrk_r+0x1c>)
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f8 fe3c 	bl	800205c <_sbrk>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_sbrk_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_sbrk_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	2000094c 	.word	0x2000094c

080093f4 <memcpy>:
 80093f4:	440a      	add	r2, r1
 80093f6:	4291      	cmp	r1, r2
 80093f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093fc:	d100      	bne.n	8009400 <memcpy+0xc>
 80093fe:	4770      	bx	lr
 8009400:	b510      	push	{r4, lr}
 8009402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009406:	4291      	cmp	r1, r2
 8009408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940c:	d1f9      	bne.n	8009402 <memcpy+0xe>
 800940e:	bd10      	pop	{r4, pc}

08009410 <__assert_func>:
 8009410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009412:	4614      	mov	r4, r2
 8009414:	461a      	mov	r2, r3
 8009416:	4b09      	ldr	r3, [pc, #36]	@ (800943c <__assert_func+0x2c>)
 8009418:	4605      	mov	r5, r0
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68d8      	ldr	r0, [r3, #12]
 800941e:	b14c      	cbz	r4, 8009434 <__assert_func+0x24>
 8009420:	4b07      	ldr	r3, [pc, #28]	@ (8009440 <__assert_func+0x30>)
 8009422:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009426:	9100      	str	r1, [sp, #0]
 8009428:	462b      	mov	r3, r5
 800942a:	4906      	ldr	r1, [pc, #24]	@ (8009444 <__assert_func+0x34>)
 800942c:	f000 f870 	bl	8009510 <fiprintf>
 8009430:	f000 f880 	bl	8009534 <abort>
 8009434:	4b04      	ldr	r3, [pc, #16]	@ (8009448 <__assert_func+0x38>)
 8009436:	461c      	mov	r4, r3
 8009438:	e7f3      	b.n	8009422 <__assert_func+0x12>
 800943a:	bf00      	nop
 800943c:	20000020 	.word	0x20000020
 8009440:	0800a973 	.word	0x0800a973
 8009444:	0800a980 	.word	0x0800a980
 8009448:	0800a9ae 	.word	0x0800a9ae

0800944c <_calloc_r>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	fba1 5402 	umull	r5, r4, r1, r2
 8009452:	b934      	cbnz	r4, 8009462 <_calloc_r+0x16>
 8009454:	4629      	mov	r1, r5
 8009456:	f7ff f99d 	bl	8008794 <_malloc_r>
 800945a:	4606      	mov	r6, r0
 800945c:	b928      	cbnz	r0, 800946a <_calloc_r+0x1e>
 800945e:	4630      	mov	r0, r6
 8009460:	bd70      	pop	{r4, r5, r6, pc}
 8009462:	220c      	movs	r2, #12
 8009464:	2600      	movs	r6, #0
 8009466:	6002      	str	r2, [r0, #0]
 8009468:	e7f9      	b.n	800945e <_calloc_r+0x12>
 800946a:	462a      	mov	r2, r5
 800946c:	4621      	mov	r1, r4
 800946e:	f7fe fa32 	bl	80078d6 <memset>
 8009472:	e7f4      	b.n	800945e <_calloc_r+0x12>

08009474 <__ascii_mbtowc>:
 8009474:	b082      	sub	sp, #8
 8009476:	b901      	cbnz	r1, 800947a <__ascii_mbtowc+0x6>
 8009478:	a901      	add	r1, sp, #4
 800947a:	b142      	cbz	r2, 800948e <__ascii_mbtowc+0x1a>
 800947c:	b14b      	cbz	r3, 8009492 <__ascii_mbtowc+0x1e>
 800947e:	7813      	ldrb	r3, [r2, #0]
 8009480:	600b      	str	r3, [r1, #0]
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	1e10      	subs	r0, r2, #0
 8009486:	bf18      	it	ne
 8009488:	2001      	movne	r0, #1
 800948a:	b002      	add	sp, #8
 800948c:	4770      	bx	lr
 800948e:	4610      	mov	r0, r2
 8009490:	e7fb      	b.n	800948a <__ascii_mbtowc+0x16>
 8009492:	f06f 0001 	mvn.w	r0, #1
 8009496:	e7f8      	b.n	800948a <__ascii_mbtowc+0x16>

08009498 <_realloc_r>:
 8009498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949c:	4607      	mov	r7, r0
 800949e:	4614      	mov	r4, r2
 80094a0:	460d      	mov	r5, r1
 80094a2:	b921      	cbnz	r1, 80094ae <_realloc_r+0x16>
 80094a4:	4611      	mov	r1, r2
 80094a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094aa:	f7ff b973 	b.w	8008794 <_malloc_r>
 80094ae:	b92a      	cbnz	r2, 80094bc <_realloc_r+0x24>
 80094b0:	f7ff f8fe 	bl	80086b0 <_free_r>
 80094b4:	4625      	mov	r5, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	f000 f841 	bl	8009542 <_malloc_usable_size_r>
 80094c0:	4284      	cmp	r4, r0
 80094c2:	4606      	mov	r6, r0
 80094c4:	d802      	bhi.n	80094cc <_realloc_r+0x34>
 80094c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ca:	d8f4      	bhi.n	80094b6 <_realloc_r+0x1e>
 80094cc:	4621      	mov	r1, r4
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff f960 	bl	8008794 <_malloc_r>
 80094d4:	4680      	mov	r8, r0
 80094d6:	b908      	cbnz	r0, 80094dc <_realloc_r+0x44>
 80094d8:	4645      	mov	r5, r8
 80094da:	e7ec      	b.n	80094b6 <_realloc_r+0x1e>
 80094dc:	42b4      	cmp	r4, r6
 80094de:	4622      	mov	r2, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	bf28      	it	cs
 80094e4:	4632      	movcs	r2, r6
 80094e6:	f7ff ff85 	bl	80093f4 <memcpy>
 80094ea:	4629      	mov	r1, r5
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7ff f8df 	bl	80086b0 <_free_r>
 80094f2:	e7f1      	b.n	80094d8 <_realloc_r+0x40>

080094f4 <__ascii_wctomb>:
 80094f4:	4603      	mov	r3, r0
 80094f6:	4608      	mov	r0, r1
 80094f8:	b141      	cbz	r1, 800950c <__ascii_wctomb+0x18>
 80094fa:	2aff      	cmp	r2, #255	@ 0xff
 80094fc:	d904      	bls.n	8009508 <__ascii_wctomb+0x14>
 80094fe:	228a      	movs	r2, #138	@ 0x8a
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	4770      	bx	lr
 8009508:	2001      	movs	r0, #1
 800950a:	700a      	strb	r2, [r1, #0]
 800950c:	4770      	bx	lr
	...

08009510 <fiprintf>:
 8009510:	b40e      	push	{r1, r2, r3}
 8009512:	b503      	push	{r0, r1, lr}
 8009514:	4601      	mov	r1, r0
 8009516:	ab03      	add	r3, sp, #12
 8009518:	4805      	ldr	r0, [pc, #20]	@ (8009530 <fiprintf+0x20>)
 800951a:	f853 2b04 	ldr.w	r2, [r3], #4
 800951e:	6800      	ldr	r0, [r0, #0]
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	f000 f83d 	bl	80095a0 <_vfiprintf_r>
 8009526:	b002      	add	sp, #8
 8009528:	f85d eb04 	ldr.w	lr, [sp], #4
 800952c:	b003      	add	sp, #12
 800952e:	4770      	bx	lr
 8009530:	20000020 	.word	0x20000020

08009534 <abort>:
 8009534:	2006      	movs	r0, #6
 8009536:	b508      	push	{r3, lr}
 8009538:	f000 fa06 	bl	8009948 <raise>
 800953c:	2001      	movs	r0, #1
 800953e:	f7f8 fd18 	bl	8001f72 <_exit>

08009542 <_malloc_usable_size_r>:
 8009542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009546:	1f18      	subs	r0, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfbc      	itt	lt
 800954c:	580b      	ldrlt	r3, [r1, r0]
 800954e:	18c0      	addlt	r0, r0, r3
 8009550:	4770      	bx	lr

08009552 <__sfputc_r>:
 8009552:	6893      	ldr	r3, [r2, #8]
 8009554:	b410      	push	{r4}
 8009556:	3b01      	subs	r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	6093      	str	r3, [r2, #8]
 800955c:	da07      	bge.n	800956e <__sfputc_r+0x1c>
 800955e:	6994      	ldr	r4, [r2, #24]
 8009560:	42a3      	cmp	r3, r4
 8009562:	db01      	blt.n	8009568 <__sfputc_r+0x16>
 8009564:	290a      	cmp	r1, #10
 8009566:	d102      	bne.n	800956e <__sfputc_r+0x1c>
 8009568:	bc10      	pop	{r4}
 800956a:	f000 b931 	b.w	80097d0 <__swbuf_r>
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	1c58      	adds	r0, r3, #1
 8009572:	6010      	str	r0, [r2, #0]
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	4608      	mov	r0, r1
 8009578:	bc10      	pop	{r4}
 800957a:	4770      	bx	lr

0800957c <__sfputs_r>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	4614      	mov	r4, r2
 8009584:	18d5      	adds	r5, r2, r3
 8009586:	42ac      	cmp	r4, r5
 8009588:	d101      	bne.n	800958e <__sfputs_r+0x12>
 800958a:	2000      	movs	r0, #0
 800958c:	e007      	b.n	800959e <__sfputs_r+0x22>
 800958e:	463a      	mov	r2, r7
 8009590:	4630      	mov	r0, r6
 8009592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009596:	f7ff ffdc 	bl	8009552 <__sfputc_r>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d1f3      	bne.n	8009586 <__sfputs_r+0xa>
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095a0 <_vfiprintf_r>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	460d      	mov	r5, r1
 80095a6:	4614      	mov	r4, r2
 80095a8:	4698      	mov	r8, r3
 80095aa:	4606      	mov	r6, r0
 80095ac:	b09d      	sub	sp, #116	@ 0x74
 80095ae:	b118      	cbz	r0, 80095b8 <_vfiprintf_r+0x18>
 80095b0:	6a03      	ldr	r3, [r0, #32]
 80095b2:	b90b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x18>
 80095b4:	f7fe f8f4 	bl	80077a0 <__sinit>
 80095b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095ba:	07d9      	lsls	r1, r3, #31
 80095bc:	d405      	bmi.n	80095ca <_vfiprintf_r+0x2a>
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	059a      	lsls	r2, r3, #22
 80095c2:	d402      	bmi.n	80095ca <_vfiprintf_r+0x2a>
 80095c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095c6:	f7fe fa04 	bl	80079d2 <__retarget_lock_acquire_recursive>
 80095ca:	89ab      	ldrh	r3, [r5, #12]
 80095cc:	071b      	lsls	r3, r3, #28
 80095ce:	d501      	bpl.n	80095d4 <_vfiprintf_r+0x34>
 80095d0:	692b      	ldr	r3, [r5, #16]
 80095d2:	b99b      	cbnz	r3, 80095fc <_vfiprintf_r+0x5c>
 80095d4:	4629      	mov	r1, r5
 80095d6:	4630      	mov	r0, r6
 80095d8:	f000 f938 	bl	800984c <__swsetup_r>
 80095dc:	b170      	cbz	r0, 80095fc <_vfiprintf_r+0x5c>
 80095de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095e0:	07dc      	lsls	r4, r3, #31
 80095e2:	d504      	bpl.n	80095ee <_vfiprintf_r+0x4e>
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	b01d      	add	sp, #116	@ 0x74
 80095ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ee:	89ab      	ldrh	r3, [r5, #12]
 80095f0:	0598      	lsls	r0, r3, #22
 80095f2:	d4f7      	bmi.n	80095e4 <_vfiprintf_r+0x44>
 80095f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095f6:	f7fe f9ed 	bl	80079d4 <__retarget_lock_release_recursive>
 80095fa:	e7f3      	b.n	80095e4 <_vfiprintf_r+0x44>
 80095fc:	2300      	movs	r3, #0
 80095fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009600:	2320      	movs	r3, #32
 8009602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009606:	2330      	movs	r3, #48	@ 0x30
 8009608:	f04f 0901 	mov.w	r9, #1
 800960c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009610:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80097bc <_vfiprintf_r+0x21c>
 8009614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009618:	4623      	mov	r3, r4
 800961a:	469a      	mov	sl, r3
 800961c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009620:	b10a      	cbz	r2, 8009626 <_vfiprintf_r+0x86>
 8009622:	2a25      	cmp	r2, #37	@ 0x25
 8009624:	d1f9      	bne.n	800961a <_vfiprintf_r+0x7a>
 8009626:	ebba 0b04 	subs.w	fp, sl, r4
 800962a:	d00b      	beq.n	8009644 <_vfiprintf_r+0xa4>
 800962c:	465b      	mov	r3, fp
 800962e:	4622      	mov	r2, r4
 8009630:	4629      	mov	r1, r5
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ffa2 	bl	800957c <__sfputs_r>
 8009638:	3001      	adds	r0, #1
 800963a:	f000 80a7 	beq.w	800978c <_vfiprintf_r+0x1ec>
 800963e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009640:	445a      	add	r2, fp
 8009642:	9209      	str	r2, [sp, #36]	@ 0x24
 8009644:	f89a 3000 	ldrb.w	r3, [sl]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 809f 	beq.w	800978c <_vfiprintf_r+0x1ec>
 800964e:	2300      	movs	r3, #0
 8009650:	f04f 32ff 	mov.w	r2, #4294967295
 8009654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009658:	f10a 0a01 	add.w	sl, sl, #1
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009664:	931a      	str	r3, [sp, #104]	@ 0x68
 8009666:	4654      	mov	r4, sl
 8009668:	2205      	movs	r2, #5
 800966a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966e:	4853      	ldr	r0, [pc, #332]	@ (80097bc <_vfiprintf_r+0x21c>)
 8009670:	f7fe f9b1 	bl	80079d6 <memchr>
 8009674:	9a04      	ldr	r2, [sp, #16]
 8009676:	b9d8      	cbnz	r0, 80096b0 <_vfiprintf_r+0x110>
 8009678:	06d1      	lsls	r1, r2, #27
 800967a:	bf44      	itt	mi
 800967c:	2320      	movmi	r3, #32
 800967e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009682:	0713      	lsls	r3, r2, #28
 8009684:	bf44      	itt	mi
 8009686:	232b      	movmi	r3, #43	@ 0x2b
 8009688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800968c:	f89a 3000 	ldrb.w	r3, [sl]
 8009690:	2b2a      	cmp	r3, #42	@ 0x2a
 8009692:	d015      	beq.n	80096c0 <_vfiprintf_r+0x120>
 8009694:	4654      	mov	r4, sl
 8009696:	2000      	movs	r0, #0
 8009698:	f04f 0c0a 	mov.w	ip, #10
 800969c:	9a07      	ldr	r2, [sp, #28]
 800969e:	4621      	mov	r1, r4
 80096a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a4:	3b30      	subs	r3, #48	@ 0x30
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	d94b      	bls.n	8009742 <_vfiprintf_r+0x1a2>
 80096aa:	b1b0      	cbz	r0, 80096da <_vfiprintf_r+0x13a>
 80096ac:	9207      	str	r2, [sp, #28]
 80096ae:	e014      	b.n	80096da <_vfiprintf_r+0x13a>
 80096b0:	eba0 0308 	sub.w	r3, r0, r8
 80096b4:	fa09 f303 	lsl.w	r3, r9, r3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	46a2      	mov	sl, r4
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	e7d2      	b.n	8009666 <_vfiprintf_r+0xc6>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	1d19      	adds	r1, r3, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	9103      	str	r1, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfbb      	ittet	lt
 80096cc:	425b      	neglt	r3, r3
 80096ce:	f042 0202 	orrlt.w	r2, r2, #2
 80096d2:	9307      	strge	r3, [sp, #28]
 80096d4:	9307      	strlt	r3, [sp, #28]
 80096d6:	bfb8      	it	lt
 80096d8:	9204      	strlt	r2, [sp, #16]
 80096da:	7823      	ldrb	r3, [r4, #0]
 80096dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80096de:	d10a      	bne.n	80096f6 <_vfiprintf_r+0x156>
 80096e0:	7863      	ldrb	r3, [r4, #1]
 80096e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e4:	d132      	bne.n	800974c <_vfiprintf_r+0x1ac>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	3402      	adds	r4, #2
 80096ea:	1d1a      	adds	r2, r3, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	9203      	str	r2, [sp, #12]
 80096f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096f4:	9305      	str	r3, [sp, #20]
 80096f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80097c0 <_vfiprintf_r+0x220>
 80096fa:	2203      	movs	r2, #3
 80096fc:	4650      	mov	r0, sl
 80096fe:	7821      	ldrb	r1, [r4, #0]
 8009700:	f7fe f969 	bl	80079d6 <memchr>
 8009704:	b138      	cbz	r0, 8009716 <_vfiprintf_r+0x176>
 8009706:	2240      	movs	r2, #64	@ 0x40
 8009708:	9b04      	ldr	r3, [sp, #16]
 800970a:	eba0 000a 	sub.w	r0, r0, sl
 800970e:	4082      	lsls	r2, r0
 8009710:	4313      	orrs	r3, r2
 8009712:	3401      	adds	r4, #1
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971a:	2206      	movs	r2, #6
 800971c:	4829      	ldr	r0, [pc, #164]	@ (80097c4 <_vfiprintf_r+0x224>)
 800971e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009722:	f7fe f958 	bl	80079d6 <memchr>
 8009726:	2800      	cmp	r0, #0
 8009728:	d03f      	beq.n	80097aa <_vfiprintf_r+0x20a>
 800972a:	4b27      	ldr	r3, [pc, #156]	@ (80097c8 <_vfiprintf_r+0x228>)
 800972c:	bb1b      	cbnz	r3, 8009776 <_vfiprintf_r+0x1d6>
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	3307      	adds	r3, #7
 8009732:	f023 0307 	bic.w	r3, r3, #7
 8009736:	3308      	adds	r3, #8
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973c:	443b      	add	r3, r7
 800973e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009740:	e76a      	b.n	8009618 <_vfiprintf_r+0x78>
 8009742:	460c      	mov	r4, r1
 8009744:	2001      	movs	r0, #1
 8009746:	fb0c 3202 	mla	r2, ip, r2, r3
 800974a:	e7a8      	b.n	800969e <_vfiprintf_r+0xfe>
 800974c:	2300      	movs	r3, #0
 800974e:	f04f 0c0a 	mov.w	ip, #10
 8009752:	4619      	mov	r1, r3
 8009754:	3401      	adds	r4, #1
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	4620      	mov	r0, r4
 800975a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800975e:	3a30      	subs	r2, #48	@ 0x30
 8009760:	2a09      	cmp	r2, #9
 8009762:	d903      	bls.n	800976c <_vfiprintf_r+0x1cc>
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0c6      	beq.n	80096f6 <_vfiprintf_r+0x156>
 8009768:	9105      	str	r1, [sp, #20]
 800976a:	e7c4      	b.n	80096f6 <_vfiprintf_r+0x156>
 800976c:	4604      	mov	r4, r0
 800976e:	2301      	movs	r3, #1
 8009770:	fb0c 2101 	mla	r1, ip, r1, r2
 8009774:	e7f0      	b.n	8009758 <_vfiprintf_r+0x1b8>
 8009776:	ab03      	add	r3, sp, #12
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	462a      	mov	r2, r5
 800977c:	4630      	mov	r0, r6
 800977e:	4b13      	ldr	r3, [pc, #76]	@ (80097cc <_vfiprintf_r+0x22c>)
 8009780:	a904      	add	r1, sp, #16
 8009782:	f7fd fbc5 	bl	8006f10 <_printf_float>
 8009786:	4607      	mov	r7, r0
 8009788:	1c78      	adds	r0, r7, #1
 800978a:	d1d6      	bne.n	800973a <_vfiprintf_r+0x19a>
 800978c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800978e:	07d9      	lsls	r1, r3, #31
 8009790:	d405      	bmi.n	800979e <_vfiprintf_r+0x1fe>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	059a      	lsls	r2, r3, #22
 8009796:	d402      	bmi.n	800979e <_vfiprintf_r+0x1fe>
 8009798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800979a:	f7fe f91b 	bl	80079d4 <__retarget_lock_release_recursive>
 800979e:	89ab      	ldrh	r3, [r5, #12]
 80097a0:	065b      	lsls	r3, r3, #25
 80097a2:	f53f af1f 	bmi.w	80095e4 <_vfiprintf_r+0x44>
 80097a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097a8:	e71e      	b.n	80095e8 <_vfiprintf_r+0x48>
 80097aa:	ab03      	add	r3, sp, #12
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	462a      	mov	r2, r5
 80097b0:	4630      	mov	r0, r6
 80097b2:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <_vfiprintf_r+0x22c>)
 80097b4:	a904      	add	r1, sp, #16
 80097b6:	f7fd fe49 	bl	800744c <_printf_i>
 80097ba:	e7e4      	b.n	8009786 <_vfiprintf_r+0x1e6>
 80097bc:	0800a958 	.word	0x0800a958
 80097c0:	0800a95e 	.word	0x0800a95e
 80097c4:	0800a962 	.word	0x0800a962
 80097c8:	08006f11 	.word	0x08006f11
 80097cc:	0800957d 	.word	0x0800957d

080097d0 <__swbuf_r>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	460e      	mov	r6, r1
 80097d4:	4614      	mov	r4, r2
 80097d6:	4605      	mov	r5, r0
 80097d8:	b118      	cbz	r0, 80097e2 <__swbuf_r+0x12>
 80097da:	6a03      	ldr	r3, [r0, #32]
 80097dc:	b90b      	cbnz	r3, 80097e2 <__swbuf_r+0x12>
 80097de:	f7fd ffdf 	bl	80077a0 <__sinit>
 80097e2:	69a3      	ldr	r3, [r4, #24]
 80097e4:	60a3      	str	r3, [r4, #8]
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	071a      	lsls	r2, r3, #28
 80097ea:	d501      	bpl.n	80097f0 <__swbuf_r+0x20>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	b943      	cbnz	r3, 8009802 <__swbuf_r+0x32>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f82a 	bl	800984c <__swsetup_r>
 80097f8:	b118      	cbz	r0, 8009802 <__swbuf_r+0x32>
 80097fa:	f04f 37ff 	mov.w	r7, #4294967295
 80097fe:	4638      	mov	r0, r7
 8009800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	6922      	ldr	r2, [r4, #16]
 8009806:	b2f6      	uxtb	r6, r6
 8009808:	1a98      	subs	r0, r3, r2
 800980a:	6963      	ldr	r3, [r4, #20]
 800980c:	4637      	mov	r7, r6
 800980e:	4283      	cmp	r3, r0
 8009810:	dc05      	bgt.n	800981e <__swbuf_r+0x4e>
 8009812:	4621      	mov	r1, r4
 8009814:	4628      	mov	r0, r5
 8009816:	f7ff fd9b 	bl	8009350 <_fflush_r>
 800981a:	2800      	cmp	r0, #0
 800981c:	d1ed      	bne.n	80097fa <__swbuf_r+0x2a>
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	3b01      	subs	r3, #1
 8009822:	60a3      	str	r3, [r4, #8]
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	6022      	str	r2, [r4, #0]
 800982a:	701e      	strb	r6, [r3, #0]
 800982c:	6962      	ldr	r2, [r4, #20]
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	429a      	cmp	r2, r3
 8009832:	d004      	beq.n	800983e <__swbuf_r+0x6e>
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	07db      	lsls	r3, r3, #31
 8009838:	d5e1      	bpl.n	80097fe <__swbuf_r+0x2e>
 800983a:	2e0a      	cmp	r6, #10
 800983c:	d1df      	bne.n	80097fe <__swbuf_r+0x2e>
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f7ff fd85 	bl	8009350 <_fflush_r>
 8009846:	2800      	cmp	r0, #0
 8009848:	d0d9      	beq.n	80097fe <__swbuf_r+0x2e>
 800984a:	e7d6      	b.n	80097fa <__swbuf_r+0x2a>

0800984c <__swsetup_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4b29      	ldr	r3, [pc, #164]	@ (80098f4 <__swsetup_r+0xa8>)
 8009850:	4605      	mov	r5, r0
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	460c      	mov	r4, r1
 8009856:	b118      	cbz	r0, 8009860 <__swsetup_r+0x14>
 8009858:	6a03      	ldr	r3, [r0, #32]
 800985a:	b90b      	cbnz	r3, 8009860 <__swsetup_r+0x14>
 800985c:	f7fd ffa0 	bl	80077a0 <__sinit>
 8009860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009864:	0719      	lsls	r1, r3, #28
 8009866:	d422      	bmi.n	80098ae <__swsetup_r+0x62>
 8009868:	06da      	lsls	r2, r3, #27
 800986a:	d407      	bmi.n	800987c <__swsetup_r+0x30>
 800986c:	2209      	movs	r2, #9
 800986e:	602a      	str	r2, [r5, #0]
 8009870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	e033      	b.n	80098e4 <__swsetup_r+0x98>
 800987c:	0758      	lsls	r0, r3, #29
 800987e:	d512      	bpl.n	80098a6 <__swsetup_r+0x5a>
 8009880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009882:	b141      	cbz	r1, 8009896 <__swsetup_r+0x4a>
 8009884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009888:	4299      	cmp	r1, r3
 800988a:	d002      	beq.n	8009892 <__swsetup_r+0x46>
 800988c:	4628      	mov	r0, r5
 800988e:	f7fe ff0f 	bl	80086b0 <_free_r>
 8009892:	2300      	movs	r3, #0
 8009894:	6363      	str	r3, [r4, #52]	@ 0x34
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	2300      	movs	r3, #0
 80098a0:	6063      	str	r3, [r4, #4]
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f043 0308 	orr.w	r3, r3, #8
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	b94b      	cbnz	r3, 80098c6 <__swsetup_r+0x7a>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098bc:	d003      	beq.n	80098c6 <__swsetup_r+0x7a>
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 f882 	bl	80099ca <__smakebuf_r>
 80098c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ca:	f013 0201 	ands.w	r2, r3, #1
 80098ce:	d00a      	beq.n	80098e6 <__swsetup_r+0x9a>
 80098d0:	2200      	movs	r2, #0
 80098d2:	60a2      	str	r2, [r4, #8]
 80098d4:	6962      	ldr	r2, [r4, #20]
 80098d6:	4252      	negs	r2, r2
 80098d8:	61a2      	str	r2, [r4, #24]
 80098da:	6922      	ldr	r2, [r4, #16]
 80098dc:	b942      	cbnz	r2, 80098f0 <__swsetup_r+0xa4>
 80098de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098e2:	d1c5      	bne.n	8009870 <__swsetup_r+0x24>
 80098e4:	bd38      	pop	{r3, r4, r5, pc}
 80098e6:	0799      	lsls	r1, r3, #30
 80098e8:	bf58      	it	pl
 80098ea:	6962      	ldrpl	r2, [r4, #20]
 80098ec:	60a2      	str	r2, [r4, #8]
 80098ee:	e7f4      	b.n	80098da <__swsetup_r+0x8e>
 80098f0:	2000      	movs	r0, #0
 80098f2:	e7f7      	b.n	80098e4 <__swsetup_r+0x98>
 80098f4:	20000020 	.word	0x20000020

080098f8 <_raise_r>:
 80098f8:	291f      	cmp	r1, #31
 80098fa:	b538      	push	{r3, r4, r5, lr}
 80098fc:	4605      	mov	r5, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	d904      	bls.n	800990c <_raise_r+0x14>
 8009902:	2316      	movs	r3, #22
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	f04f 30ff 	mov.w	r0, #4294967295
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800990e:	b112      	cbz	r2, 8009916 <_raise_r+0x1e>
 8009910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009914:	b94b      	cbnz	r3, 800992a <_raise_r+0x32>
 8009916:	4628      	mov	r0, r5
 8009918:	f000 f830 	bl	800997c <_getpid_r>
 800991c:	4622      	mov	r2, r4
 800991e:	4601      	mov	r1, r0
 8009920:	4628      	mov	r0, r5
 8009922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009926:	f000 b817 	b.w	8009958 <_kill_r>
 800992a:	2b01      	cmp	r3, #1
 800992c:	d00a      	beq.n	8009944 <_raise_r+0x4c>
 800992e:	1c59      	adds	r1, r3, #1
 8009930:	d103      	bne.n	800993a <_raise_r+0x42>
 8009932:	2316      	movs	r3, #22
 8009934:	6003      	str	r3, [r0, #0]
 8009936:	2001      	movs	r0, #1
 8009938:	e7e7      	b.n	800990a <_raise_r+0x12>
 800993a:	2100      	movs	r1, #0
 800993c:	4620      	mov	r0, r4
 800993e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009942:	4798      	blx	r3
 8009944:	2000      	movs	r0, #0
 8009946:	e7e0      	b.n	800990a <_raise_r+0x12>

08009948 <raise>:
 8009948:	4b02      	ldr	r3, [pc, #8]	@ (8009954 <raise+0xc>)
 800994a:	4601      	mov	r1, r0
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	f7ff bfd3 	b.w	80098f8 <_raise_r>
 8009952:	bf00      	nop
 8009954:	20000020 	.word	0x20000020

08009958 <_kill_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	2300      	movs	r3, #0
 800995c:	4d06      	ldr	r5, [pc, #24]	@ (8009978 <_kill_r+0x20>)
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	4611      	mov	r1, r2
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	f7f8 faf4 	bl	8001f52 <_kill>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	d102      	bne.n	8009974 <_kill_r+0x1c>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	b103      	cbz	r3, 8009974 <_kill_r+0x1c>
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	bd38      	pop	{r3, r4, r5, pc}
 8009976:	bf00      	nop
 8009978:	2000094c 	.word	0x2000094c

0800997c <_getpid_r>:
 800997c:	f7f8 bae2 	b.w	8001f44 <_getpid>

08009980 <__swhatbuf_r>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	460c      	mov	r4, r1
 8009984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009988:	4615      	mov	r5, r2
 800998a:	2900      	cmp	r1, #0
 800998c:	461e      	mov	r6, r3
 800998e:	b096      	sub	sp, #88	@ 0x58
 8009990:	da0c      	bge.n	80099ac <__swhatbuf_r+0x2c>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	2100      	movs	r1, #0
 8009996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800999a:	bf14      	ite	ne
 800999c:	2340      	movne	r3, #64	@ 0x40
 800999e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099a2:	2000      	movs	r0, #0
 80099a4:	6031      	str	r1, [r6, #0]
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	b016      	add	sp, #88	@ 0x58
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	466a      	mov	r2, sp
 80099ae:	f000 f849 	bl	8009a44 <_fstat_r>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	dbed      	blt.n	8009992 <__swhatbuf_r+0x12>
 80099b6:	9901      	ldr	r1, [sp, #4]
 80099b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099c0:	4259      	negs	r1, r3
 80099c2:	4159      	adcs	r1, r3
 80099c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099c8:	e7eb      	b.n	80099a2 <__swhatbuf_r+0x22>

080099ca <__smakebuf_r>:
 80099ca:	898b      	ldrh	r3, [r1, #12]
 80099cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ce:	079d      	lsls	r5, r3, #30
 80099d0:	4606      	mov	r6, r0
 80099d2:	460c      	mov	r4, r1
 80099d4:	d507      	bpl.n	80099e6 <__smakebuf_r+0x1c>
 80099d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	6123      	str	r3, [r4, #16]
 80099de:	2301      	movs	r3, #1
 80099e0:	6163      	str	r3, [r4, #20]
 80099e2:	b003      	add	sp, #12
 80099e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e6:	466a      	mov	r2, sp
 80099e8:	ab01      	add	r3, sp, #4
 80099ea:	f7ff ffc9 	bl	8009980 <__swhatbuf_r>
 80099ee:	9f00      	ldr	r7, [sp, #0]
 80099f0:	4605      	mov	r5, r0
 80099f2:	4639      	mov	r1, r7
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7fe fecd 	bl	8008794 <_malloc_r>
 80099fa:	b948      	cbnz	r0, 8009a10 <__smakebuf_r+0x46>
 80099fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a00:	059a      	lsls	r2, r3, #22
 8009a02:	d4ee      	bmi.n	80099e2 <__smakebuf_r+0x18>
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	e7e2      	b.n	80099d6 <__smakebuf_r+0xc>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	6020      	str	r0, [r4, #0]
 8009a20:	b15b      	cbz	r3, 8009a3a <__smakebuf_r+0x70>
 8009a22:	4630      	mov	r0, r6
 8009a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a28:	f000 f81e 	bl	8009a68 <_isatty_r>
 8009a2c:	b128      	cbz	r0, 8009a3a <__smakebuf_r+0x70>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	f043 0301 	orr.w	r3, r3, #1
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	431d      	orrs	r5, r3
 8009a3e:	81a5      	strh	r5, [r4, #12]
 8009a40:	e7cf      	b.n	80099e2 <__smakebuf_r+0x18>
	...

08009a44 <_fstat_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	2300      	movs	r3, #0
 8009a48:	4d06      	ldr	r5, [pc, #24]	@ (8009a64 <_fstat_r+0x20>)
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	4611      	mov	r1, r2
 8009a50:	602b      	str	r3, [r5, #0]
 8009a52:	f7f8 fadd 	bl	8002010 <_fstat>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d102      	bne.n	8009a60 <_fstat_r+0x1c>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	b103      	cbz	r3, 8009a60 <_fstat_r+0x1c>
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	bd38      	pop	{r3, r4, r5, pc}
 8009a62:	bf00      	nop
 8009a64:	2000094c 	.word	0x2000094c

08009a68 <_isatty_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4d05      	ldr	r5, [pc, #20]	@ (8009a84 <_isatty_r+0x1c>)
 8009a6e:	4604      	mov	r4, r0
 8009a70:	4608      	mov	r0, r1
 8009a72:	602b      	str	r3, [r5, #0]
 8009a74:	f7f8 fadb 	bl	800202e <_isatty>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	d102      	bne.n	8009a82 <_isatty_r+0x1a>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	b103      	cbz	r3, 8009a82 <_isatty_r+0x1a>
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	bd38      	pop	{r3, r4, r5, pc}
 8009a84:	2000094c 	.word	0x2000094c

08009a88 <_init>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	bf00      	nop
 8009a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8e:	bc08      	pop	{r3}
 8009a90:	469e      	mov	lr, r3
 8009a92:	4770      	bx	lr

08009a94 <_fini>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	bf00      	nop
 8009a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9a:	bc08      	pop	{r3}
 8009a9c:	469e      	mov	lr, r3
 8009a9e:	4770      	bx	lr
