
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d90  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000189c  08009ea0  08009ea0  0000aea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b73c  0800b73c  0000d1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b73c  0800b73c  0000c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b744  0800b744  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b744  0800b744  0000c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b748  0800b748  0000c748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b74c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e8  0800b930  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800b930  0000d954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f05e  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9b  00000000  00000000  0001c26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf1  00000000  00000000  0001feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019739  00000000  00000000  00020ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001391b  00000000  00000000  0003a2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d745  00000000  00000000  0004dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db342  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f8  00000000  00000000  000db388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e0a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e88 	.word	0x08009e88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009e88 	.word	0x08009e88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DHT22_Read>:
}




DHT22_Data DHT22_Read(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <DHT22_Read+0x54>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)captureBuffer, DHT_CAPTURE_COUNT);
 8000f54:	232b      	movs	r3, #43	@ 0x2b
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <DHT22_Read+0x58>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <DHT22_Read+0x54>)
 8000f5c:	f005 f9a4 	bl	80062a8 <HAL_TIM_IC_Start_DMA>

    DHT22_SetPinOutput();
 8000f60:	f000 f820 	bl	8000fa4 <DHT22_SetPinOutput>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <DHT22_Read+0x5c>)
 8000f6c:	f002 f8b2 	bl	80030d4 <HAL_GPIO_WritePin>



    delay_us(DHT_START_LOW_US );
 8000f70:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000f74:	f000 f84e 	bl	8001014 <delay_us>


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <DHT22_Read+0x5c>)
 8000f80:	f002 f8a8 	bl	80030d4 <HAL_GPIO_WritePin>
    delay_us(DHT_START_HIGH_US);
 8000f84:	2014      	movs	r0, #20
 8000f86:	f000 f845 	bl	8001014 <delay_us>
    DHT22_SetPinInput();
 8000f8a:	f000 f827 	bl	8000fdc <DHT22_SetPinInput>
//    {
//    	dataReady = 0;
//
//    	return DHT22_Decode();;
//    }
}
 8000f8e:	bf00      	nop
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000304 	.word	0x20000304
 8000f9c:	20000204 	.word	0x20000204
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <DHT22_SetPinOutput>:


void DHT22_SetPinOutput(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fba:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <DHT22_SetPinOutput+0x34>)
 8000fca:	f001 feff 	bl	8002dcc <HAL_GPIO_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010800 	.word	0x40010800

08000fdc <DHT22_SetPinInput>:

void DHT22_SetPinInput(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff2:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <DHT22_SetPinInput+0x34>)
 8001002:	f001 fee3 	bl	8002dcc <HAL_GPIO_Init>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40010800 	.word	0x40010800

08001014 <delay_us>:


void delay_us(uint16_t delay)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <delay_us+0x2c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001026:	bf00      	nop
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <delay_us+0x2c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3f9      	bcc.n	8001028 <delay_us+0x14>
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000304 	.word	0x20000304

08001044 <DHT22_Decode>:


DHT22_Data DHT22_Decode(void)
{
 8001044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001048:	b0a1      	sub	sp, #132	@ 0x84
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	466b      	mov	r3, sp
 8001050:	461e      	mov	r6, r3
	DHT22_Data result = {0};
 8001052:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
    // Step 1: Extract non-zero timestamps
    int edgeCount = DHT_EDGE_COUNT;
 800105e:	2329      	movs	r3, #41	@ 0x29
 8001060:	66bb      	str	r3, [r7, #104]	@ 0x68
    uint16_t timestamps[edgeCount];
 8001062:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001064:	1e4b      	subs	r3, r1, #1
 8001066:	667b      	str	r3, [r7, #100]	@ 0x64
 8001068:	460a      	mov	r2, r1
 800106a:	2300      	movs	r3, #0
 800106c:	603a      	str	r2, [r7, #0]
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	0103      	lsls	r3, r0, #4
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	0102      	lsls	r2, r0, #4
 8001086:	460a      	mov	r2, r1
 8001088:	2300      	movs	r3, #0
 800108a:	4692      	mov	sl, r2
 800108c:	469b      	mov	fp, r3
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800109a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800109e:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80010a2:	460b      	mov	r3, r1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3307      	adds	r3, #7
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	ebad 0d03 	sub.w	sp, sp, r3
 80010b0:	466b      	mov	r3, sp
 80010b2:	3301      	adds	r3, #1
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	663b      	str	r3, [r7, #96]	@ 0x60
    int idx = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i += 1) // to skip handshake of dht22
 80010be:	2302      	movs	r3, #2
 80010c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80010c2:	e00d      	b.n	80010e0 <DHT22_Decode+0x9c>
    {
        timestamps[idx++] = captureBuffer[i];
 80010c4:	4a80      	ldr	r2, [pc, #512]	@ (80012c8 <DHT22_Decode+0x284>)
 80010c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80010cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80010d2:	b289      	uxth	r1, r1
 80010d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = DHT_EDGE_SKIP; i < DHT_CAPTURE_COUNT; i += 1) // to skip handshake of dht22
 80010da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010dc:	3301      	adds	r3, #1
 80010de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80010e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010e4:	ddee      	ble.n	80010c4 <DHT22_Decode+0x80>
    }

    // Step 2: Calculate pulse widths
    uint16_t pulseWidths[edgeCount - 1];
 80010e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010e8:	1e59      	subs	r1, r3, #1
 80010ea:	1e4b      	subs	r3, r1, #1
 80010ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80010ee:	460a      	mov	r2, r1
 80010f0:	2300      	movs	r3, #0
 80010f2:	4690      	mov	r8, r2
 80010f4:	4699      	mov	r9, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001102:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001106:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800110a:	460a      	mov	r2, r1
 800110c:	2300      	movs	r3, #0
 800110e:	4614      	mov	r4, r2
 8001110:	461d      	mov	r5, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	012b      	lsls	r3, r5, #4
 800111c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001120:	0122      	lsls	r2, r4, #4
 8001122:	460b      	mov	r3, r1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	3307      	adds	r3, #7
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	ebad 0d03 	sub.w	sp, sp, r3
 8001130:	466b      	mov	r3, sp
 8001132:	3301      	adds	r3, #1
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	65bb      	str	r3, [r7, #88]	@ 0x58
    for (int i = 0; i < edgeCount - 1; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	677b      	str	r3, [r7, #116]	@ 0x74
 800113e:	e011      	b.n	8001164 <DHT22_Decode+0x120>
        pulseWidths[i] = timestamps[i + 1] - timestamps[i];
 8001140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001146:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800114a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800114c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800114e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b299      	uxth	r1, r3
 8001156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001158:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800115a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < edgeCount - 1; i++) {
 800115e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001160:	3301      	adds	r3, #1
 8001162:	677b      	str	r3, [r7, #116]	@ 0x74
 8001164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001166:	3b01      	subs	r3, #1
 8001168:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800116a:	429a      	cmp	r2, r3
 800116c:	dbe8      	blt.n	8001140 <DHT22_Decode+0xfc>
    }

    // Step 3:
    int start = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	657b      	str	r3, [r7, #84]	@ 0x54
    uint8_t bits[TOTAL_BITS];
    for (int i = 0; i < TOTAL_BITS; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	673b      	str	r3, [r7, #112]	@ 0x70
 8001176:	e014      	b.n	80011a2 <DHT22_Decode+0x15e>
        bits[i] = (pulseWidths[start + i] >= THRESHOLD_US) ? 1 : 0;
 8001178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800117a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800117c:	441a      	add	r2, r3
 800117e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001180:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001184:	2b63      	cmp	r3, #99	@ 0x63
 8001186:	bf8c      	ite	hi
 8001188:	2301      	movhi	r3, #1
 800118a:	2300      	movls	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	f107 021c 	add.w	r2, r7, #28
 8001194:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < TOTAL_BITS; i++) {
 800119c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800119e:	3301      	adds	r3, #1
 80011a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80011a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011a4:	2b27      	cmp	r3, #39	@ 0x27
 80011a6:	dde7      	ble.n	8001178 <DHT22_Decode+0x134>
    }

    // Step 4: Convert bits to bytes
    uint8_t data[5] = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < TOTAL_BITS; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011b6:	e02f      	b.n	8001218 <DHT22_Decode+0x1d4>
        data[i / 8] <<= 1;
 80011b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da00      	bge.n	80011c0 <DHT22_Decode+0x17c>
 80011be:	3307      	adds	r3, #7
 80011c0:	10db      	asrs	r3, r3, #3
 80011c2:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80011c6:	f107 0108 	add.w	r1, r7, #8
 80011ca:	440a      	add	r2, r1
 80011cc:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80011d0:	0052      	lsls	r2, r2, #1
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	3378      	adds	r3, #120	@ 0x78
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	440b      	add	r3, r1
 80011dc:	f803 2c6c 	strb.w	r2, [r3, #-108]
        data[i / 8] |= bits[i];
 80011e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da00      	bge.n	80011e8 <DHT22_Decode+0x1a4>
 80011e6:	3307      	adds	r3, #7
 80011e8:	10db      	asrs	r3, r3, #3
 80011ea:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80011ee:	f107 0108 	add.w	r1, r7, #8
 80011f2:	440a      	add	r2, r1
 80011f4:	f812 1c6c 	ldrb.w	r1, [r2, #-108]
 80011f8:	f107 001c 	add.w	r0, r7, #28
 80011fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011fe:	4402      	add	r2, r0
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	3378      	adds	r3, #120	@ 0x78
 8001208:	f107 0108 	add.w	r1, r7, #8
 800120c:	440b      	add	r3, r1
 800120e:	f803 2c6c 	strb.w	r2, [r3, #-108]
    for (int i = 0; i < TOTAL_BITS; i++) {
 8001212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001214:	3301      	adds	r3, #1
 8001216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800121a:	2b27      	cmp	r3, #39	@ 0x27
 800121c:	ddcc      	ble.n	80011b8 <DHT22_Decode+0x174>
    }

    // Step 5: Verify checksum
    uint8_t checksum = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
 800121e:	7d3a      	ldrb	r2, [r7, #20]
 8001220:	7d7b      	ldrb	r3, [r7, #21]
 8001222:	4413      	add	r3, r2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	4413      	add	r3, r2
 800122a:	b2da      	uxtb	r2, r3
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	4413      	add	r3, r2
 8001230:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

    HAL_TIM_Base_Stop(&htim1);
 8001234:	4825      	ldr	r0, [pc, #148]	@ (80012cc <DHT22_Decode+0x288>)
 8001236:	f004 ff05 	bl	8006044 <HAL_TIM_Base_Stop>
    HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_1);
 800123a:	2100      	movs	r1, #0
 800123c:	4823      	ldr	r0, [pc, #140]	@ (80012cc <DHT22_Decode+0x288>)
 800123e:	f004 ffd1 	bl	80061e4 <HAL_TIM_IC_Stop>

    result.status = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    result.humidity = (float)((data[0] << 8) | data[1])/10;
 8001248:	7d3b      	ldrb	r3, [r7, #20]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	7d7a      	ldrb	r2, [r7, #21]
 800124e:	4313      	orrs	r3, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fcd3 	bl	8000bfc <__aeabi_i2f>
 8001256:	4603      	mov	r3, r0
 8001258:	491d      	ldr	r1, [pc, #116]	@ (80012d0 <DHT22_Decode+0x28c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fdd6 	bl	8000e0c <__aeabi_fdiv>
 8001260:	4603      	mov	r3, r0
 8001262:	64bb      	str	r3, [r7, #72]	@ 0x48

    if(checksum == data[4])
 8001264:	7e3b      	ldrb	r3, [r7, #24]
 8001266:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800126a:	429a      	cmp	r2, r3
 800126c:	d11e      	bne.n	80012ac <DHT22_Decode+0x268>
    {
    	result.humidity = (float)((data[0] << 8) | data[1])/10;
 800126e:	7d3b      	ldrb	r3, [r7, #20]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	7d7a      	ldrb	r2, [r7, #21]
 8001274:	4313      	orrs	r3, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcc0 	bl	8000bfc <__aeabi_i2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4914      	ldr	r1, [pc, #80]	@ (80012d0 <DHT22_Decode+0x28c>)
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fdc3 	bl	8000e0c <__aeabi_fdiv>
 8001286:	4603      	mov	r3, r0
 8001288:	64bb      	str	r3, [r7, #72]	@ 0x48
//    	{
//    		result.temperature = (float)data[2]/10*(-1);
//    	}
//    	else
//    	{
    		result.temperature = (float)((data[2] << 8) | data[3])/10;
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	4313      	orrs	r3, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fcb2 	bl	8000bfc <__aeabi_i2f>
 8001298:	4603      	mov	r3, r0
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <DHT22_Decode+0x28c>)
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fdb5 	bl	8000e0c <__aeabi_fdiv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
//    	}

    	result.status = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    }

    return  result;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	461c      	mov	r4, r3
 80012b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012bc:	46b5      	mov	sp, r6


}
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	3784      	adds	r7, #132	@ 0x84
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c8:	20000204 	.word	0x20000204
 80012cc:	20000304 	.word	0x20000304
 80012d0:	41200000 	.word	0x41200000

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f000 fff4 	bl	80022c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f83c 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 f9a6 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e4:	f000 f986 	bl	80015f4 <MX_DMA_Init>
  MX_I2C1_Init();
 80012e8:	f000 f87c 	bl	80013e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012ec:	f000 f8a8 	bl	8001440 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012f0:	f000 f932 	bl	8001558 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */




  SSD1306_Init();
 80012f4:	f000 fa10 	bl	8001718 <SSD1306_Init>


  SSD1306_GotoXY (0,0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 fb74 	bl	80019e8 <SSD1306_GotoXY>
  SSD1306_Puts ("SSD1306", &Font_11x18, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	4910      	ldr	r1, [pc, #64]	@ (8001344 <main+0x70>)
 8001304:	4810      	ldr	r0, [pc, #64]	@ (8001348 <main+0x74>)
 8001306:	f000 fc03 	bl	8001b10 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 800130a:	211e      	movs	r1, #30
 800130c:	2000      	movs	r0, #0
 800130e:	f000 fb6b 	bl	80019e8 <SSD1306_GotoXY>
  SSD1306_Puts ("OLED DEMO", &Font_11x18, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	490b      	ldr	r1, [pc, #44]	@ (8001344 <main+0x70>)
 8001316:	480d      	ldr	r0, [pc, #52]	@ (800134c <main+0x78>)
 8001318:	f000 fbfa 	bl	8001b10 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800131c:	f000 fac0 	bl	80018a0 <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 8001320:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001324:	f001 f830 	bl	8002388 <HAL_Delay>
  SSD1306_Clear();
 8001328:	f000 fc17 	bl	8001b5a <SSD1306_Clear>
  SSD1306_Puts ("Hello", &Font_7x10, 1);
  SSD1306_UpdateScreen();
*/


  HAL_TIM_Base_Start_IT(&htim1);
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <main+0x7c>)
 800132e:	f004 feaf 	bl	8006090 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001332:	4808      	ldr	r0, [pc, #32]	@ (8001354 <main+0x80>)
 8001334:	f004 feac 	bl	8006090 <HAL_TIM_Base_Start_IT>
  HAL_Delay (100);
 8001338:	2064      	movs	r0, #100	@ 0x64
 800133a:	f001 f825 	bl	8002388 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133e:	bf00      	nop
 8001340:	e7fd      	b.n	800133e <main+0x6a>
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008
 8001348:	08009ea0 	.word	0x08009ea0
 800134c:	08009ea8 	.word	0x08009ea8
 8001350:	20000304 	.word	0x20000304
 8001354:	2000034c 	.word	0x2000034c

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	@ 0x40
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	@ 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fcb5 	bl	8007cd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001396:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f9b9 	bl	8005718 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013ac:	f000 f9ae 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fc26 	bl	8005c1c <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013d6:	f000 f999 	bl	800170c <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3740      	adds	r7, #64	@ 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013ea:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <MX_I2C1_Init+0x54>)
 80013ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_I2C1_Init+0x58>)
 80013f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001422:	f001 fe89 	bl	8003138 <HAL_I2C_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800142c:	f000 f96e 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200002b0 	.word	0x200002b0
 8001438:	40005400 	.word	0x40005400
 800143c:	00061a80 	.word	0x00061a80

08001440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	@ 0x30
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001446:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <MX_TIM1_Init+0x108>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a3f      	ldr	r2, [pc, #252]	@ (8001548 <MX_TIM1_Init+0x108>)
 800144c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b3d      	ldr	r3, [pc, #244]	@ (8001548 <MX_TIM1_Init+0x108>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001484:	4b31      	ldr	r3, [pc, #196]	@ (800154c <MX_TIM1_Init+0x10c>)
 8001486:	4a32      	ldr	r2, [pc, #200]	@ (8001550 <MX_TIM1_Init+0x110>)
 8001488:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <MX_TIM1_Init+0x10c>)
 800148c:	2247      	movs	r2, #71	@ 0x47
 800148e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <MX_TIM1_Init+0x10c>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <MX_TIM1_Init+0x10c>)
 8001498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b0:	4826      	ldr	r0, [pc, #152]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014b2:	f004 fd2d 	bl	8005f10 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80014bc:	f000 f926 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	4619      	mov	r1, r3
 80014cc:	481f      	ldr	r0, [pc, #124]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014ce:	f005 fa05 	bl	80068dc <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80014d8:	f000 f918 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80014dc:	481b      	ldr	r0, [pc, #108]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014de:	f004 fe29 	bl	8006134 <HAL_TIM_IC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80014e8:	f000 f910 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <MX_TIM1_Init+0x10c>)
 80014fc:	f005 fdfa 	bl	80070f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001506:	f000 f901 	bl	800170c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800150a:	2302      	movs	r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800150e:	2301      	movs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  sConfigIC.ICFilter = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	480a      	ldr	r0, [pc, #40]	@ (800154c <MX_TIM1_Init+0x10c>)
 8001524:	f005 f93e 	bl	80067a4 <HAL_TIM_IC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800152e:	f000 f8ed 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_CC1], hdma_tim1_ch1);
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_TIM1_Init+0x10c>)
 8001534:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <MX_TIM1_Init+0x114>)
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_TIM1_Init+0x114>)
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <MX_TIM1_Init+0x10c>)
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END TIM1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	@ 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	20000304 	.word	0x20000304
 8001550:	40012c00 	.word	0x40012c00
 8001554:	20000394 	.word	0x20000394

08001558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001574:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <MX_TIM2_Init+0x98>)
 8001576:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800157c:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_TIM2_Init+0x98>)
 800157e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <MX_TIM2_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <MX_TIM2_Init+0x98>)
 800158c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <MX_TIM2_Init+0x98>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_TIM2_Init+0x98>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159e:	4814      	ldr	r0, [pc, #80]	@ (80015f0 <MX_TIM2_Init+0x98>)
 80015a0:	f004 fcb6 	bl	8005f10 <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015aa:	f000 f8af 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MX_TIM2_Init+0x98>)
 80015bc:	f005 f98e 	bl	80068dc <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015c6:	f000 f8a1 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <MX_TIM2_Init+0x98>)
 80015d8:	f005 fd8c 	bl	80070f4 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015e2:	f000 f893 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000034c 	.word	0x2000034c

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_DMA_Init+0x38>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <MX_DMA_Init+0x38>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_DMA_Init+0x38>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200c      	movs	r0, #12
 8001618:	f000 ffb1 	bl	800257e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800161c:	200c      	movs	r0, #12
 800161e:	f000 ffca 	bl	80025b6 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <MX_GPIO_Init+0xd0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a2d      	ldr	r2, [pc, #180]	@ (8001700 <MX_GPIO_Init+0xd0>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <MX_GPIO_Init+0xd0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <MX_GPIO_Init+0xd0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a27      	ldr	r2, [pc, #156]	@ (8001700 <MX_GPIO_Init+0xd0>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <MX_GPIO_Init+0xd0>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <MX_GPIO_Init+0xd0>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <MX_GPIO_Init+0xd0>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <MX_GPIO_Init+0xd0>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <MX_GPIO_Init+0xd0>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a1b      	ldr	r2, [pc, #108]	@ (8001700 <MX_GPIO_Init+0xd0>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <MX_GPIO_Init+0xd0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016aa:	4816      	ldr	r0, [pc, #88]	@ (8001704 <MX_GPIO_Init+0xd4>)
 80016ac:	f001 fd12 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b6:	4814      	ldr	r0, [pc, #80]	@ (8001708 <MX_GPIO_Init+0xd8>)
 80016b8:	f001 fd0c 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <MX_GPIO_Init+0xd4>)
 80016d6:	f001 fb79 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_GPIO_Init+0xd8>)
 80016f4:	f001 fb6a 	bl	8002dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	40011000 	.word	0x40011000
 8001708:	40010c00 	.word	0x40010c00

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800171e:	f000 fa25 	bl	8001b6c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001722:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001726:	2201      	movs	r2, #1
 8001728:	2178      	movs	r1, #120	@ 0x78
 800172a:	485b      	ldr	r0, [pc, #364]	@ (8001898 <SSD1306_Init+0x180>)
 800172c:	f001 ff5a 	bl	80035e4 <HAL_I2C_IsDeviceReady>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001736:	2300      	movs	r3, #0
 8001738:	e0a9      	b.n	800188e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800173a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800173e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001740:	e002      	b.n	8001748 <SSD1306_Init+0x30>
		p--;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3b01      	subs	r3, #1
 8001746:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800174e:	22ae      	movs	r2, #174	@ 0xae
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	@ 0x78
 8001754:	f000 fa84 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001758:	2220      	movs	r2, #32
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	@ 0x78
 800175e:	f000 fa7f 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001762:	2210      	movs	r2, #16
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	@ 0x78
 8001768:	f000 fa7a 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800176c:	22b0      	movs	r2, #176	@ 0xb0
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	@ 0x78
 8001772:	f000 fa75 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001776:	22c8      	movs	r2, #200	@ 0xc8
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	@ 0x78
 800177c:	f000 fa70 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	@ 0x78
 8001786:	f000 fa6b 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800178a:	2210      	movs	r2, #16
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	@ 0x78
 8001790:	f000 fa66 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001794:	2240      	movs	r2, #64	@ 0x40
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	@ 0x78
 800179a:	f000 fa61 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800179e:	2281      	movs	r2, #129	@ 0x81
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	@ 0x78
 80017a4:	f000 fa5c 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017a8:	22ff      	movs	r2, #255	@ 0xff
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	@ 0x78
 80017ae:	f000 fa57 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017b2:	22a1      	movs	r2, #161	@ 0xa1
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	@ 0x78
 80017b8:	f000 fa52 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017bc:	22a6      	movs	r2, #166	@ 0xa6
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	@ 0x78
 80017c2:	f000 fa4d 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017c6:	22a8      	movs	r2, #168	@ 0xa8
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	@ 0x78
 80017cc:	f000 fa48 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017d0:	223f      	movs	r2, #63	@ 0x3f
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	@ 0x78
 80017d6:	f000 fa43 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017da:	22a4      	movs	r2, #164	@ 0xa4
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	@ 0x78
 80017e0:	f000 fa3e 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017e4:	22d3      	movs	r2, #211	@ 0xd3
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	@ 0x78
 80017ea:	f000 fa39 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	@ 0x78
 80017f4:	f000 fa34 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017f8:	22d5      	movs	r2, #213	@ 0xd5
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	@ 0x78
 80017fe:	f000 fa2f 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001802:	22f0      	movs	r2, #240	@ 0xf0
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	@ 0x78
 8001808:	f000 fa2a 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800180c:	22d9      	movs	r2, #217	@ 0xd9
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	@ 0x78
 8001812:	f000 fa25 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001816:	2222      	movs	r2, #34	@ 0x22
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	@ 0x78
 800181c:	f000 fa20 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001820:	22da      	movs	r2, #218	@ 0xda
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	@ 0x78
 8001826:	f000 fa1b 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800182a:	2212      	movs	r2, #18
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	@ 0x78
 8001830:	f000 fa16 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001834:	22db      	movs	r2, #219	@ 0xdb
 8001836:	2100      	movs	r1, #0
 8001838:	2078      	movs	r0, #120	@ 0x78
 800183a:	f000 fa11 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800183e:	2220      	movs	r2, #32
 8001840:	2100      	movs	r1, #0
 8001842:	2078      	movs	r0, #120	@ 0x78
 8001844:	f000 fa0c 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001848:	228d      	movs	r2, #141	@ 0x8d
 800184a:	2100      	movs	r1, #0
 800184c:	2078      	movs	r0, #120	@ 0x78
 800184e:	f000 fa07 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001852:	2214      	movs	r2, #20
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	@ 0x78
 8001858:	f000 fa02 	bl	8001c60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800185c:	22af      	movs	r2, #175	@ 0xaf
 800185e:	2100      	movs	r1, #0
 8001860:	2078      	movs	r0, #120	@ 0x78
 8001862:	f000 f9fd 	bl	8001c60 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001866:	222e      	movs	r2, #46	@ 0x2e
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	@ 0x78
 800186c:	f000 f9f8 	bl	8001c60 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001870:	2000      	movs	r0, #0
 8001872:	f000 f843 	bl	80018fc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001876:	f000 f813 	bl	80018a0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <SSD1306_Init+0x184>)
 800187c:	2200      	movs	r2, #0
 800187e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <SSD1306_Init+0x184>)
 8001882:	2200      	movs	r2, #0
 8001884:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <SSD1306_Init+0x184>)
 8001888:	2201      	movs	r2, #1
 800188a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002b0 	.word	0x200002b0
 800189c:	200007d8 	.word	0x200007d8

080018a0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	e01d      	b.n	80018e8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	3b50      	subs	r3, #80	@ 0x50
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	@ 0x78
 80018b8:	f000 f9d2 	bl	8001c60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	@ 0x78
 80018c2:	f000 f9cd 	bl	8001c60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018c6:	2210      	movs	r2, #16
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	@ 0x78
 80018cc:	f000 f9c8 	bl	8001c60 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	01db      	lsls	r3, r3, #7
 80018d4:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <SSD1306_UpdateScreen+0x58>)
 80018d6:	441a      	add	r2, r3
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	2140      	movs	r1, #64	@ 0x40
 80018dc:	2078      	movs	r0, #120	@ 0x78
 80018de:	f000 f959 	bl	8001b94 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	3301      	adds	r3, #1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b07      	cmp	r3, #7
 80018ec:	d9de      	bls.n	80018ac <SSD1306_UpdateScreen+0xc>
	}
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200003d8 	.word	0x200003d8

080018fc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <SSD1306_Fill+0x14>
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <SSD1306_Fill+0x16>
 8001910:	23ff      	movs	r3, #255	@ 0xff
 8001912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001916:	4619      	mov	r1, r3
 8001918:	4803      	ldr	r0, [pc, #12]	@ (8001928 <SSD1306_Fill+0x2c>)
 800191a:	f006 f9dc 	bl	8007cd6 <memset>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200003d8 	.word	0x200003d8

0800192c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	460b      	mov	r3, r1
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	70fb      	strb	r3, [r7, #3]
	if (
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	2b7f      	cmp	r3, #127	@ 0x7f
 8001942:	d848      	bhi.n	80019d6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	2b3f      	cmp	r3, #63	@ 0x3f
 8001948:	d845      	bhi.n	80019d6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800194a:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <SSD1306_DrawPixel+0xb4>)
 800194c:	791b      	ldrb	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d11a      	bne.n	800199c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001966:	88fa      	ldrh	r2, [r7, #6]
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	b298      	uxth	r0, r3
 800196e:	4603      	mov	r3, r0
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	4413      	add	r3, r2
 8001974:	4a1b      	ldr	r2, [pc, #108]	@ (80019e4 <SSD1306_DrawPixel+0xb8>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	b25a      	sxtb	r2, r3
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	b25b      	sxtb	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b259      	sxtb	r1, r3
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	4603      	mov	r3, r0
 8001990:	01db      	lsls	r3, r3, #7
 8001992:	4413      	add	r3, r2
 8001994:	b2c9      	uxtb	r1, r1
 8001996:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <SSD1306_DrawPixel+0xb8>)
 8001998:	54d1      	strb	r1, [r2, r3]
 800199a:	e01d      	b.n	80019d8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800199c:	88fa      	ldrh	r2, [r7, #6]
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	b298      	uxth	r0, r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	4413      	add	r3, r2
 80019aa:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <SSD1306_DrawPixel+0xb8>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	b25a      	sxtb	r2, r3
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4013      	ands	r3, r2
 80019c4:	b259      	sxtb	r1, r3
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	4603      	mov	r3, r0
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	4413      	add	r3, r2
 80019ce:	b2c9      	uxtb	r1, r1
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <SSD1306_DrawPixel+0xb8>)
 80019d2:	54d1      	strb	r1, [r2, r3]
 80019d4:	e000      	b.n	80019d8 <SSD1306_DrawPixel+0xac>
		return;
 80019d6:	bf00      	nop
	}
}
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	200007d8 	.word	0x200007d8
 80019e4:	200003d8 	.word	0x200003d8

080019e8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	460a      	mov	r2, r1
 80019f2:	80fb      	strh	r3, [r7, #6]
 80019f4:	4613      	mov	r3, r2
 80019f6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019f8:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SSD1306_GotoXY+0x28>)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <SSD1306_GotoXY+0x28>)
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	8053      	strh	r3, [r2, #2]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	200007d8 	.word	0x200007d8

08001a14 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4613      	mov	r3, r2
 8001a22:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a24:	4b39      	ldr	r3, [pc, #228]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
	if (
 8001a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a32:	dc07      	bgt.n	8001a44 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a34:	4b35      	ldr	r3, [pc, #212]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001a36:	885b      	ldrh	r3, [r3, #2]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a42:	dd01      	ble.n	8001a48 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e05d      	b.n	8001b04 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e04b      	b.n	8001ae6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	3b20      	subs	r3, #32
 8001a56:	6839      	ldr	r1, [r7, #0]
 8001a58:	7849      	ldrb	r1, [r1, #1]
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	440b      	add	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e030      	b.n	8001ad4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a82:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b298      	uxth	r0, r3
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001a90:	885a      	ldrh	r2, [r3, #2]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	79ba      	ldrb	r2, [r7, #6]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff ff45 	bl	800192c <SSD1306_DrawPixel>
 8001aa2:	e014      	b.n	8001ace <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b298      	uxth	r0, r3
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001ab2:	885a      	ldrh	r2, [r3, #2]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b299      	uxth	r1, r3
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f7ff ff2f 	bl	800192c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d3c8      	bcc.n	8001a72 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	461a      	mov	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d3ad      	bcc.n	8001a4e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <SSD1306_Putc+0xf8>)
 8001b00:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200007d8 	.word	0x200007d8

08001b10 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b1e:	e012      	b.n	8001b46 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff73 	bl	8001a14 <SSD1306_Putc>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d002      	beq.n	8001b40 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	e008      	b.n	8001b52 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e8      	bne.n	8001b20 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff fecc 	bl	80018fc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b64:	f7ff fe9c 	bl	80018a0 <SSD1306_UpdateScreen>
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <ssd1306_I2C_Init+0x24>)
 8001b74:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b76:	e002      	b.n	8001b7e <ssd1306_I2C_Init+0x12>
		p--;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	0003d090 	.word	0x0003d090

08001b94 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b0c7      	sub	sp, #284	@ 0x11c
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001ba2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001ba6:	600a      	str	r2, [r1, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bba:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bca:	460a      	mov	r2, r1
 8001bcc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bd6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bda:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001be8:	e015      	b.n	8001c16 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001bea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bf2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bfe:	3301      	adds	r3, #1
 8001c00:	7811      	ldrb	r1, [r2, #0]
 8001c02:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c06:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001c0a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c0c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c10:	3301      	adds	r3, #1
 8001c12:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c16:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c20:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d8df      	bhi.n	8001bea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c2e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b299      	uxth	r1, r3
 8001c36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f107 020c 	add.w	r2, r7, #12
 8001c48:	200a      	movs	r0, #10
 8001c4a:	9000      	str	r0, [sp, #0]
 8001c4c:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c4e:	f001 fbcb 	bl	80033e8 <HAL_I2C_Master_Transmit>
}
 8001c52:	bf00      	nop
 8001c54:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	200002b0 	.word	0x200002b0

08001c60 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c76:	797b      	ldrb	r3, [r7, #5]
 8001c78:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	230a      	movs	r3, #10
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2302      	movs	r3, #2
 8001c88:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <ssd1306_I2C_Write+0x38>)
 8001c8a:	f001 fbad 	bl	80033e8 <HAL_I2C_Master_Transmit>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002b0 	.word	0x200002b0

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_MspInit+0x8c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	4a20      	ldr	r2, [pc, #128]	@ (8001d28 <HAL_MspInit+0x8c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6193      	str	r3, [r2, #24]
 8001cae:	4b1e      	ldr	r3, [pc, #120]	@ (8001d28 <HAL_MspInit+0x8c>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_MspInit+0x8c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_MspInit+0x8c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_MspInit+0x8c>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f000 fc51 	bl	800257e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f000 fc6a 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2004      	movs	r0, #4
 8001ce8:	f000 fc49 	bl	800257e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001cec:	2004      	movs	r0, #4
 8001cee:	f000 fc62 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2005      	movs	r0, #5
 8001cf8:	f000 fc41 	bl	800257e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cfc:	2005      	movs	r0, #5
 8001cfe:	f000 fc5a 	bl	80025b6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_MspInit+0x90>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_MspInit+0x90>)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000

08001d30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_I2C_MspInit+0x90>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d133      	bne.n	8001db8 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <HAL_I2C_MspInit+0x94>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_I2C_MspInit+0x94>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_I2C_MspInit+0x94>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d68:	23c0      	movs	r3, #192	@ 0xc0
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4813      	ldr	r0, [pc, #76]	@ (8001dc8 <HAL_I2C_MspInit+0x98>)
 8001d7c:	f001 f826 	bl	8002dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_I2C_MspInit+0x94>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_I2C_MspInit+0x94>)
 8001d86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d8a:	61d3      	str	r3, [r2, #28]
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_I2C_MspInit+0x94>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	201f      	movs	r0, #31
 8001d9e:	f000 fbee 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001da2:	201f      	movs	r0, #31
 8001da4:	f000 fc07 	bl	80025b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	2020      	movs	r0, #32
 8001dae:	f000 fbe6 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001db2:	2020      	movs	r0, #32
 8001db4:	f000 fbff 	bl	80025b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010c00 	.word	0x40010c00

08001dcc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x108>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d156      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0xce>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a39      	ldr	r2, [pc, #228]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001df2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a33      	ldr	r2, [pc, #204]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0318 	add.w	r3, r7, #24
 8001e2e:	4619      	mov	r1, r3
 8001e30:	482a      	ldr	r0, [pc, #168]	@ (8001edc <HAL_TIM_Base_MspInit+0x110>)
 8001e32:	f000 ffcb 	bl	8002dcc <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e38:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee4 <HAL_TIM_Base_MspInit+0x118>)
 8001e3a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e54:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e5c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e60:	2220      	movs	r2, #32
 8001e62:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e66:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001e6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e6c:	481c      	ldr	r0, [pc, #112]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e6e:	f000 fbbd 	bl	80025ec <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8001e78:	f7ff fc48 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e82:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x114>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	201b      	movs	r0, #27
 8001e8e:	f000 fb76 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e92:	201b      	movs	r0, #27
 8001e94:	f000 fb8f 	bl	80025b6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e98:	e018      	b.n	8001ecc <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea2:	d113      	bne.n	8001ecc <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	61d3      	str	r3, [r2, #28]
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x10c>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	201c      	movs	r0, #28
 8001ec2:	f000 fb5c 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ec6:	201c      	movs	r0, #28
 8001ec8:	f000 fb75 	bl	80025b6 <HAL_NVIC_EnableIRQ>
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	@ 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010800 	.word	0x40010800
 8001ee0:	20000394 	.word	0x20000394
 8001ee4:	4002001c 	.word	0x4002001c

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <NMI_Handler+0x4>

08001ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <MemManage_Handler+0x4>

08001f00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 fa0a 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001f44:	f003 fbd0 	bl	80056e8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001f50:	f000 fdbe 	bl	8002ad0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA1_Channel2_IRQHandler+0x10>)
 8001f6a:	f000 fc71 	bl	8002850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */


  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000394 	.word	0x20000394

08001f78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <TIM1_CC_IRQHandler+0x10>)
 8001f7e:	f004 fb21 	bl	80065c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000304 	.word	0x20000304

08001f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <TIM2_IRQHandler+0x10>)
 8001f92:	f004 fb17 	bl	80065c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000034c 	.word	0x2000034c

08001fa0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <I2C1_EV_IRQHandler+0x10>)
 8001fa6:	f001 fc4b 	bl	8003840 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002b0 	.word	0x200002b0

08001fb4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <I2C1_ER_IRQHandler+0x10>)
 8001fba:	f001 fdb2 	bl	8003b22 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200002b0 	.word	0x200002b0

08001fc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd8:	d10f      	bne.n	8001ffa <HAL_TIM_PeriodElapsedCallback+0x32>
		HAL_TIM_Base_Start(&htim1);
 8001fda:	480a      	ldr	r0, [pc, #40]	@ (8002004 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001fdc:	f003 ffe8 	bl	8005fb0 <HAL_TIM_Base_Start>
		DHT22_Data data = DHT22_Read();
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe ffad 	bl	8000f44 <DHT22_Read>
		if(!data.status)
 8001fea:	7d3b      	ldrb	r3, [r7, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <HAL_TIM_PeriodElapsedCallback+0x32>
//			SSD1306_Puts (humStr, &Font_7x10, 1);
//			SSD1306_GotoXY (40, 50);
//			SSD1306_Puts ("24.5", &Font_7x10, 1);
//			SSD1306_UpdateScreen();

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ff0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ff6:	f001 f885 	bl	8003104 <HAL_GPIO_TogglePin>
		}

	}

}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000304 	.word	0x20000304
 8002008:	40011000 	.word	0x40011000

0800200c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2d      	ldr	r2, [pc, #180]	@ (80020d0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d153      	bne.n	80020c6 <HAL_TIM_IC_CaptureCallback+0xba>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d14f      	bne.n	80020c6 <HAL_TIM_IC_CaptureCallback+0xba>
	{
		//dataReady = 1;
		DHT22_Data data = DHT22_Decode();
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f80a 	bl	8001044 <DHT22_Decode>
		char tempStr[8];
		char humStr[8];
		SSD1306_Clear();
 8002030:	f7ff fd93 	bl	8001b5a <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 8002034:	2100      	movs	r1, #0
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fcd6 	bl	80019e8 <SSD1306_GotoXY>
		SSD1306_Puts ("Temp: ", &Font_7x10, 1);
 800203c:	2201      	movs	r2, #1
 800203e:	4925      	ldr	r1, [pc, #148]	@ (80020d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002040:	4825      	ldr	r0, [pc, #148]	@ (80020d8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002042:	f7ff fd65 	bl	8001b10 <SSD1306_Puts>
		sprintf(tempStr,  "%.1f", data.temperature);
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9ed 	bl	8000428 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	f107 0014 	add.w	r0, r7, #20
 8002056:	4921      	ldr	r1, [pc, #132]	@ (80020dc <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002058:	f005 fdd8 	bl	8007c0c <siprintf>
		SSD1306_GotoXY (40,0);
 800205c:	2100      	movs	r1, #0
 800205e:	2028      	movs	r0, #40	@ 0x28
 8002060:	f7ff fcc2 	bl	80019e8 <SSD1306_GotoXY>
		SSD1306_Puts (tempStr, &Font_7x10, 1);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2201      	movs	r2, #1
 800206a:	491a      	ldr	r1, [pc, #104]	@ (80020d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fd4f 	bl	8001b10 <SSD1306_Puts>
		SSD1306_GotoXY (0, 30);
 8002072:	211e      	movs	r1, #30
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff fcb7 	bl	80019e8 <SSD1306_GotoXY>
		SSD1306_Puts ("Hum: ", &Font_7x10, 1);
 800207a:	2201      	movs	r2, #1
 800207c:	4915      	ldr	r1, [pc, #84]	@ (80020d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800207e:	4818      	ldr	r0, [pc, #96]	@ (80020e0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8002080:	f7ff fd46 	bl	8001b10 <SSD1306_Puts>
		SSD1306_GotoXY (40, 30);
 8002084:	211e      	movs	r1, #30
 8002086:	2028      	movs	r0, #40	@ 0x28
 8002088:	f7ff fcae 	bl	80019e8 <SSD1306_GotoXY>
		sprintf(humStr, "%.1f", data.humidity);
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f9ca 	bl	8000428 <__aeabi_f2d>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	f107 000c 	add.w	r0, r7, #12
 800209c:	490f      	ldr	r1, [pc, #60]	@ (80020dc <HAL_TIM_IC_CaptureCallback+0xd0>)
 800209e:	f005 fdb5 	bl	8007c0c <siprintf>
		SSD1306_Puts (humStr, &Font_7x10, 1);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2201      	movs	r2, #1
 80020a8:	490a      	ldr	r1, [pc, #40]	@ (80020d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fd30 	bl	8001b10 <SSD1306_Puts>
		SSD1306_GotoXY (40, 50);
 80020b0:	2132      	movs	r1, #50	@ 0x32
 80020b2:	2028      	movs	r0, #40	@ 0x28
 80020b4:	f7ff fc98 	bl	80019e8 <SSD1306_GotoXY>
		SSD1306_Puts ("24.5", &Font_7x10, 1);
 80020b8:	2201      	movs	r2, #1
 80020ba:	4906      	ldr	r1, [pc, #24]	@ (80020d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80020be:	f7ff fd27 	bl	8001b10 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80020c2:	f7ff fbed 	bl	80018a0 <SSD1306_UpdateScreen>
	}
}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	@ 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	20000000 	.word	0x20000000
 80020d8:	08009eb4 	.word	0x08009eb4
 80020dc:	08009ebc 	.word	0x08009ebc
 80020e0:	08009ec4 	.word	0x08009ec4
 80020e4:	08009ecc 	.word	0x08009ecc

080020e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return 1;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <_kill>:

int _kill(int pid, int sig)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002100:	f005 fe3c 	bl	8007d7c <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	2216      	movs	r2, #22
 8002108:	601a      	str	r2, [r3, #0]
  return -1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_exit>:

void _exit (int status)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800211e:	f04f 31ff 	mov.w	r1, #4294967295
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffe7 	bl	80020f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <_exit+0x12>

0800212c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
  }

  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e009      	b.n	800218c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf1      	blt.n	8002178 <_write+0x12>
  }
  return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_close>:

int _close(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c4:	605a      	str	r2, [r3, #4]
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <_isatty>:

int _isatty(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f005 fda4 	bl	8007d7c <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20005000 	.word	0x20005000
 8002260:	00000400 	.word	0x00000400
 8002264:	200007e0 	.word	0x200007e0
 8002268:	20000958 	.word	0x20000958

0800226c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff fff8 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480b      	ldr	r0, [pc, #44]	@ (80022ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800227e:	490c      	ldr	r1, [pc, #48]	@ (80022b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002280:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002294:	4c09      	ldr	r4, [pc, #36]	@ (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f005 fd71 	bl	8007d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a6:	f7ff f815 	bl	80012d4 <main>
  bx lr
 80022aa:	4770      	bx	lr
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022b4:	0800b74c 	.word	0x0800b74c
  ldr r2, =_sbss
 80022b8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022bc:	20000954 	.word	0x20000954

080022c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_2_IRQHandler>
	...

080022c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <HAL_Init+0x28>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a07      	ldr	r2, [pc, #28]	@ (80022ec <HAL_Init+0x28>)
 80022ce:	f043 0310 	orr.w	r3, r3, #16
 80022d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 f947 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022da:	200f      	movs	r0, #15
 80022dc:	f000 f808 	bl	80022f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e0:	f7ff fcdc 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_InitTick+0x54>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_InitTick+0x58>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f95f 	bl	80025d2 <HAL_SYSTICK_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00e      	b.n	800233c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d80a      	bhi.n	800233a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f000 f927 	bl	800257e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4a06      	ldr	r2, [pc, #24]	@ (800234c <HAL_InitTick+0x5c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000010 	.word	0x20000010
 8002348:	20000018 	.word	0x20000018
 800234c:	20000014 	.word	0x20000014

08002350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <HAL_IncTick+0x1c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_IncTick+0x20>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a03      	ldr	r2, [pc, #12]	@ (8002370 <HAL_IncTick+0x20>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000018 	.word	0x20000018
 8002370:	200007e4 	.word	0x200007e4

08002374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b02      	ldr	r3, [pc, #8]	@ (8002384 <HAL_GetTick+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	200007e4 	.word	0x200007e4

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fff0 	bl	8002374 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffe0 	bl	8002374 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000018 	.word	0x20000018

080023d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <__NVIC_SetPriorityGrouping+0x44>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023ec:	4013      	ands	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002402:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <__NVIC_SetPriorityGrouping+0x44>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60d3      	str	r3, [r2, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <__NVIC_GetPriorityGrouping+0x18>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	f003 0307 	and.w	r3, r3, #7
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	2b00      	cmp	r3, #0
 8002444:	db0b      	blt.n	800245e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	4906      	ldr	r1, [pc, #24]	@ (8002468 <__NVIC_EnableIRQ+0x34>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	2001      	movs	r0, #1
 8002456:	fa00 f202 	lsl.w	r2, r0, r2
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	@ (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	@ (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	@ 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	@ 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f7ff ff90 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff2d 	bl	80023d0 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff42 	bl	8002418 <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff90 	bl	80024c0 <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff5f 	bl	800246c <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff35 	bl	8002434 <__NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffa2 	bl	8002524 <SysTick_Config>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e043      	b.n	800268a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <HAL_DMA_Init+0xa8>)
 800260a:	4413      	add	r3, r2
 800260c:	4a22      	ldr	r2, [pc, #136]	@ (8002698 <HAL_DMA_Init+0xac>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	009a      	lsls	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1f      	ldr	r2, [pc, #124]	@ (800269c <HAL_DMA_Init+0xb0>)
 800261e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002636:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800263a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	bffdfff8 	.word	0xbffdfff8
 8002698:	cccccccd 	.word	0xcccccccd
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Start_IT+0x20>
 80026bc:	2302      	movs	r3, #2
 80026be:	e04b      	b.n	8002758 <HAL_DMA_Start_IT+0xb8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d13a      	bne.n	800274a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f9bc 	bl	8002a76 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 020e 	orr.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00f      	b.n	8002738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 020a 	orr.w	r2, r2, #10
 8002736:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d005      	beq.n	8002784 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e051      	b.n	8002828 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 020e 	bic.w	r2, r2, #14
 8002792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a22      	ldr	r2, [pc, #136]	@ (8002834 <HAL_DMA_Abort_IT+0xd4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d029      	beq.n	8002802 <HAL_DMA_Abort_IT+0xa2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_DMA_Abort_IT+0xd8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_Abort_IT+0x9e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_DMA_Abort_IT+0xdc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01a      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x98>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_DMA_Abort_IT+0xe0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d012      	beq.n	80027f2 <HAL_DMA_Abort_IT+0x92>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <HAL_DMA_Abort_IT+0xe4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00a      	beq.n	80027ec <HAL_DMA_Abort_IT+0x8c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <HAL_DMA_Abort_IT+0xe8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d102      	bne.n	80027e6 <HAL_DMA_Abort_IT+0x86>
 80027e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027e4:	e00e      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ea:	e00b      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027f0:	e008      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f6:	e005      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027fc:	e002      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 80027fe:	2310      	movs	r3, #16
 8002800:	e000      	b.n	8002804 <HAL_DMA_Abort_IT+0xa4>
 8002802:	2301      	movs	r3, #1
 8002804:	4a11      	ldr	r2, [pc, #68]	@ (800284c <HAL_DMA_Abort_IT+0xec>)
 8002806:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
    } 
  }
  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	2204      	movs	r2, #4
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d04f      	beq.n	8002918 <HAL_DMA_IRQHandler+0xc8>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04a      	beq.n	8002918 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0204 	bic.w	r2, r2, #4
 800289e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a66      	ldr	r2, [pc, #408]	@ (8002a40 <HAL_DMA_IRQHandler+0x1f0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d029      	beq.n	80028fe <HAL_DMA_IRQHandler+0xae>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_DMA_IRQHandler+0x1f4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_DMA_IRQHandler+0xaa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a63      	ldr	r2, [pc, #396]	@ (8002a48 <HAL_DMA_IRQHandler+0x1f8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xa4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a62      	ldr	r2, [pc, #392]	@ (8002a4c <HAL_DMA_IRQHandler+0x1fc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d012      	beq.n	80028ee <HAL_DMA_IRQHandler+0x9e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a60      	ldr	r2, [pc, #384]	@ (8002a50 <HAL_DMA_IRQHandler+0x200>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00a      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x98>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002a54 <HAL_DMA_IRQHandler+0x204>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d102      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x92>
 80028dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028e0:	e00e      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80028e6:	e00b      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028ec:	e008      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028f2:	e005      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028f8:	e002      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028fa:	2340      	movs	r3, #64	@ 0x40
 80028fc:	e000      	b.n	8002900 <HAL_DMA_IRQHandler+0xb0>
 80028fe:	2304      	movs	r3, #4
 8002900:	4a55      	ldr	r2, [pc, #340]	@ (8002a58 <HAL_DMA_IRQHandler+0x208>)
 8002902:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8094 	beq.w	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002916:	e08e      	b.n	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	2202      	movs	r2, #2
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d056      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x186>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d051      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020a 	bic.w	r2, r2, #10
 800294e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a38      	ldr	r2, [pc, #224]	@ (8002a40 <HAL_DMA_IRQHandler+0x1f0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d029      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x166>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a37      	ldr	r2, [pc, #220]	@ (8002a44 <HAL_DMA_IRQHandler+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x162>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <HAL_DMA_IRQHandler+0x1f8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x15c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a34      	ldr	r2, [pc, #208]	@ (8002a4c <HAL_DMA_IRQHandler+0x1fc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d012      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x156>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a32      	ldr	r2, [pc, #200]	@ (8002a50 <HAL_DMA_IRQHandler+0x200>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x150>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a31      	ldr	r2, [pc, #196]	@ (8002a54 <HAL_DMA_IRQHandler+0x204>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_DMA_IRQHandler+0x14a>
 8002994:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002998:	e00e      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 800299a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800299e:	e00b      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a4:	e008      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029aa:	e005      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b0:	e002      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029b2:	2320      	movs	r3, #32
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_IRQHandler+0x168>
 80029b6:	2302      	movs	r3, #2
 80029b8:	4a27      	ldr	r2, [pc, #156]	@ (8002a58 <HAL_DMA_IRQHandler+0x208>)
 80029ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d034      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029d4:	e02f      	b.n	8002a36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2208      	movs	r2, #8
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1e8>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 020e 	bic.w	r2, r2, #14
 80029fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
    }
  }
  return;
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
}
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40020008 	.word	0x40020008
 8002a44:	4002001c 	.word	0x4002001c
 8002a48:	40020030 	.word	0x40020030
 8002a4c:	40020044 	.word	0x40020044
 8002a50:	40020058 	.word	0x40020058
 8002a54:	4002006c 	.word	0x4002006c
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a6a:	b2db      	uxtb	r3, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d108      	bne.n	8002ab6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ab4:	e007      	b.n	8002ac6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ada:	4b6b      	ldr	r3, [pc, #428]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <HAL_FLASH_IRQHandler+0x22>
 8002ae6:	4b68      	ldr	r3, [pc, #416]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002af2:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002af8:	4b64      	ldr	r3, [pc, #400]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295
 8002afe:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002b00:	f000 f8f4 	bl	8002cec <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8cc 	bl	8002ca2 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b0a:	4b60      	ldr	r3, [pc, #384]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002b10:	4b5d      	ldr	r3, [pc, #372]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a0 	beq.w	8002c5e <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b20:	2220      	movs	r2, #32
 8002b22:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002b24:	4b59      	ldr	r3, [pc, #356]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8097 	beq.w	8002c5e <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002b30:	4b56      	ldr	r3, [pc, #344]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d12d      	bne.n	8002b96 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002b3a:	4b54      	ldr	r3, [pc, #336]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4a52      	ldr	r2, [pc, #328]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b42:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002b44:	4b51      	ldr	r3, [pc, #324]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f89c 	bl	8002c90 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002b58:	4b4c      	ldr	r3, [pc, #304]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b60:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002b62:	4a4a      	ldr	r2, [pc, #296]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b68:	4b47      	ldr	r3, [pc, #284]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a46      	ldr	r2, [pc, #280]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002b6e:	f023 0302 	bic.w	r3, r3, #2
 8002b72:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f909 	bl	8002d8c <FLASH_PageErase>
 8002b7a:	e070      	b.n	8002c5e <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	4a42      	ldr	r2, [pc, #264]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b88:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f87e 	bl	8002c90 <HAL_FLASH_EndOfOperationCallback>
 8002b94:	e063      	b.n	8002c5e <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d10c      	bne.n	8002bba <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ba0:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a38      	ldr	r2, [pc, #224]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f000 f86f 	bl	8002c90 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002bb2:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e051      	b.n	8002c5e <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	4a32      	ldr	r2, [pc, #200]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bc2:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002bc4:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d024      	beq.n	8002c16 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bd4:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	0c02      	lsrs	r2, r0, #16
 8002bec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bf0:	0c0b      	lsrs	r3, r1, #16
 8002bf2:	4926      	ldr	r1, [pc, #152]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002bf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bf8:	4b23      	ldr	r3, [pc, #140]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002c04:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c0a:	b293      	uxth	r3, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f850 	bl	8002cb4 <FLASH_Program_HalfWord>
 8002c14:	e023      	b.n	8002c5e <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002c16:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d105      	bne.n	8002c2c <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002c20:	4b1a      	ldr	r3, [pc, #104]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f833 	bl	8002c90 <HAL_FLASH_EndOfOperationCallback>
 8002c2a:	e011      	b.n	8002c50 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002c2c:	4b17      	ldr	r3, [pc, #92]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d106      	bne.n	8002c44 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	3b02      	subs	r3, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f827 	bl	8002c90 <HAL_FLASH_EndOfOperationCallback>
 8002c42:	e005      	b.n	8002c50 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	3b06      	subs	r3, #6
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f820 	bl	8002c90 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002c50:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c52:	f04f 32ff 	mov.w	r2, #4294967295
 8002c56:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_FLASH_IRQHandler+0x1bc>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002c68:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	4a06      	ldr	r2, [pc, #24]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c6e:	f023 0307 	bic.w	r3, r3, #7
 8002c72:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4a03      	ldr	r2, [pc, #12]	@ (8002c88 <HAL_FLASH_IRQHandler+0x1b8>)
 8002c7a:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 8002c7e:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	200007e8 	.word	0x200007e8

08002c90 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cc0:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <FLASH_Program_HalfWord+0x30>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <FLASH_Program_HalfWord+0x34>)
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <FLASH_Program_HalfWord+0x34>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	801a      	strh	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	200007e8 	.word	0x200007e8
 8002ce8:	40022000 	.word	0x40022000

08002cec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d02:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <FLASH_SetErrorCode+0x9c>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <FLASH_SetErrorCode+0x9c>)
 8002d0c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d22:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <FLASH_SetErrorCode+0x9c>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <FLASH_SetErrorCode+0x9c>)
 8002d2c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <FLASH_SetErrorCode+0x9c>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d88 <FLASH_SetErrorCode+0x9c>)
 8002d4c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f240 1201 	movw	r2, #257	@ 0x101
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d106      	bne.n	8002d72 <FLASH_SetErrorCode+0x86>
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4a06      	ldr	r2, [pc, #24]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	61d3      	str	r3, [r2, #28]
}  
 8002d70:	e002      	b.n	8002d78 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d72:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <FLASH_SetErrorCode+0x98>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60d3      	str	r3, [r2, #12]
}  
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40022000 	.word	0x40022000
 8002d88:	200007e8 	.word	0x200007e8

08002d8c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <FLASH_PageErase+0x38>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <FLASH_PageErase+0x3c>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <FLASH_PageErase+0x3c>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002da6:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <FLASH_PageErase+0x3c>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <FLASH_PageErase+0x3c>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <FLASH_PageErase+0x3c>)
 8002db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002db6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200007e8 	.word	0x200007e8
 8002dc8:	40022000 	.word	0x40022000

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b08b      	sub	sp, #44	@ 0x2c
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dde:	e169      	b.n	80030b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de0:	2201      	movs	r2, #1
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f040 8158 	bne.w	80030ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a9a      	ldr	r2, [pc, #616]	@ (800306c <HAL_GPIO_Init+0x2a0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d05e      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e08:	4a98      	ldr	r2, [pc, #608]	@ (800306c <HAL_GPIO_Init+0x2a0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d875      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e0e:	4a98      	ldr	r2, [pc, #608]	@ (8003070 <HAL_GPIO_Init+0x2a4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d058      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e14:	4a96      	ldr	r2, [pc, #600]	@ (8003070 <HAL_GPIO_Init+0x2a4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d86f      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e1a:	4a96      	ldr	r2, [pc, #600]	@ (8003074 <HAL_GPIO_Init+0x2a8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d052      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e20:	4a94      	ldr	r2, [pc, #592]	@ (8003074 <HAL_GPIO_Init+0x2a8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d869      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e26:	4a94      	ldr	r2, [pc, #592]	@ (8003078 <HAL_GPIO_Init+0x2ac>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d04c      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e2c:	4a92      	ldr	r2, [pc, #584]	@ (8003078 <HAL_GPIO_Init+0x2ac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d863      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e32:	4a92      	ldr	r2, [pc, #584]	@ (800307c <HAL_GPIO_Init+0x2b0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d046      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e38:	4a90      	ldr	r2, [pc, #576]	@ (800307c <HAL_GPIO_Init+0x2b0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d85d      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e3e:	2b12      	cmp	r3, #18
 8002e40:	d82a      	bhi.n	8002e98 <HAL_GPIO_Init+0xcc>
 8002e42:	2b12      	cmp	r3, #18
 8002e44:	d859      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e46:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_GPIO_Init+0x80>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002ec7 	.word	0x08002ec7
 8002e50:	08002ea1 	.word	0x08002ea1
 8002e54:	08002eb3 	.word	0x08002eb3
 8002e58:	08002ef5 	.word	0x08002ef5
 8002e5c:	08002efb 	.word	0x08002efb
 8002e60:	08002efb 	.word	0x08002efb
 8002e64:	08002efb 	.word	0x08002efb
 8002e68:	08002efb 	.word	0x08002efb
 8002e6c:	08002efb 	.word	0x08002efb
 8002e70:	08002efb 	.word	0x08002efb
 8002e74:	08002efb 	.word	0x08002efb
 8002e78:	08002efb 	.word	0x08002efb
 8002e7c:	08002efb 	.word	0x08002efb
 8002e80:	08002efb 	.word	0x08002efb
 8002e84:	08002efb 	.word	0x08002efb
 8002e88:	08002efb 	.word	0x08002efb
 8002e8c:	08002efb 	.word	0x08002efb
 8002e90:	08002ea9 	.word	0x08002ea9
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	4a79      	ldr	r2, [pc, #484]	@ (8003080 <HAL_GPIO_Init+0x2b4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e9e:	e02c      	b.n	8002efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	623b      	str	r3, [r7, #32]
          break;
 8002ea6:	e029      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	3304      	adds	r3, #4
 8002eae:	623b      	str	r3, [r7, #32]
          break;
 8002eb0:	e024      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e01f      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	623b      	str	r3, [r7, #32]
          break;
 8002ec4:	e01a      	b.n	8002efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	623b      	str	r3, [r7, #32]
          break;
 8002ed2:	e013      	b.n	8002efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002edc:	2308      	movs	r3, #8
 8002ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	611a      	str	r2, [r3, #16]
          break;
 8002ee6:	e009      	b.n	8002efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	615a      	str	r2, [r3, #20]
          break;
 8002ef2:	e003      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
          break;
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x130>
          break;
 8002efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2bff      	cmp	r3, #255	@ 0xff
 8002f00:	d801      	bhi.n	8002f06 <HAL_GPIO_Init+0x13a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	e001      	b.n	8002f0a <HAL_GPIO_Init+0x13e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
 8002f10:	d802      	bhi.n	8002f18 <HAL_GPIO_Init+0x14c>
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	e002      	b.n	8002f1e <HAL_GPIO_Init+0x152>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	3b08      	subs	r3, #8
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	210f      	movs	r1, #15
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80b1 	beq.w	80030ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003084 <HAL_GPIO_Init+0x2b8>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a4c      	ldr	r2, [pc, #304]	@ (8003084 <HAL_GPIO_Init+0x2b8>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b4a      	ldr	r3, [pc, #296]	@ (8003084 <HAL_GPIO_Init+0x2b8>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f64:	4a48      	ldr	r2, [pc, #288]	@ (8003088 <HAL_GPIO_Init+0x2bc>)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a40      	ldr	r2, [pc, #256]	@ (800308c <HAL_GPIO_Init+0x2c0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_GPIO_Init+0x1ec>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3f      	ldr	r2, [pc, #252]	@ (8003090 <HAL_GPIO_Init+0x2c4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00d      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8003094 <HAL_GPIO_Init+0x2c8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <HAL_GPIO_Init+0x1e4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8003098 <HAL_GPIO_Init+0x2cc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_GPIO_Init+0x1e0>
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e004      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fca:	492f      	ldr	r1, [pc, #188]	@ (8003088 <HAL_GPIO_Init+0x2bc>)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	492c      	ldr	r1, [pc, #176]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4928      	ldr	r1, [pc, #160]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800300c:	4b23      	ldr	r3, [pc, #140]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4922      	ldr	r1, [pc, #136]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	43db      	mvns	r3, r3
 8003022:	491e      	ldr	r1, [pc, #120]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8003024:	4013      	ands	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4918      	ldr	r1, [pc, #96]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003042:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	43db      	mvns	r3, r3
 800304a:	4914      	ldr	r1, [pc, #80]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 800304c:	4013      	ands	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d021      	beq.n	80030a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	490e      	ldr	r1, [pc, #56]	@ (800309c <HAL_GPIO_Init+0x2d0>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e021      	b.n	80030ae <HAL_GPIO_Init+0x2e2>
 800306a:	bf00      	nop
 800306c:	10320000 	.word	0x10320000
 8003070:	10310000 	.word	0x10310000
 8003074:	10220000 	.word	0x10220000
 8003078:	10210000 	.word	0x10210000
 800307c:	10120000 	.word	0x10120000
 8003080:	10110000 	.word	0x10110000
 8003084:	40021000 	.word	0x40021000
 8003088:	40010000 	.word	0x40010000
 800308c:	40010800 	.word	0x40010800
 8003090:	40010c00 	.word	0x40010c00
 8003094:	40011000 	.word	0x40011000
 8003098:	40011400 	.word	0x40011400
 800309c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_GPIO_Init+0x304>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4909      	ldr	r1, [pc, #36]	@ (80030d0 <HAL_GPIO_Init+0x304>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f47f ae8e 	bne.w	8002de0 <HAL_GPIO_Init+0x14>
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	372c      	adds	r7, #44	@ 0x2c
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	40010400 	.word	0x40010400

080030d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
 80030e0:	4613      	mov	r3, r2
 80030e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030e4:	787b      	ldrb	r3, [r7, #1]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030f0:	e003      	b.n	80030fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	041a      	lsls	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4013      	ands	r3, r2
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43d9      	mvns	r1, r3
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	400b      	ands	r3, r1
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e12b      	b.n	80033a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fde6 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	@ 0x24
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800318a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800319a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800319c:	f002 fe86 	bl	8005eac <HAL_RCC_GetPCLK1Freq>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a81      	ldr	r2, [pc, #516]	@ (80033ac <HAL_I2C_Init+0x274>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d807      	bhi.n	80031bc <HAL_I2C_Init+0x84>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a80      	ldr	r2, [pc, #512]	@ (80033b0 <HAL_I2C_Init+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	bf94      	ite	ls
 80031b4:	2301      	movls	r3, #1
 80031b6:	2300      	movhi	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e006      	b.n	80031ca <HAL_I2C_Init+0x92>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a7d      	ldr	r2, [pc, #500]	@ (80033b4 <HAL_I2C_Init+0x27c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0e7      	b.n	80033a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a78      	ldr	r2, [pc, #480]	@ (80033b8 <HAL_I2C_Init+0x280>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0c9b      	lsrs	r3, r3, #18
 80031dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a6a      	ldr	r2, [pc, #424]	@ (80033ac <HAL_I2C_Init+0x274>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d802      	bhi.n	800320c <HAL_I2C_Init+0xd4>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	e009      	b.n	8003220 <HAL_I2C_Init+0xe8>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	4a69      	ldr	r2, [pc, #420]	@ (80033bc <HAL_I2C_Init+0x284>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	3301      	adds	r3, #1
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003232:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	495c      	ldr	r1, [pc, #368]	@ (80033ac <HAL_I2C_Init+0x274>)
 800323c:	428b      	cmp	r3, r1
 800323e:	d819      	bhi.n	8003274 <HAL_I2C_Init+0x13c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e59      	subs	r1, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fbb1 f3f3 	udiv	r3, r1, r3
 800324e:	1c59      	adds	r1, r3, #1
 8003250:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003254:	400b      	ands	r3, r1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_I2C_Init+0x138>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1e59      	subs	r1, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fbb1 f3f3 	udiv	r3, r1, r3
 8003268:	3301      	adds	r3, #1
 800326a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326e:	e051      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 8003270:	2304      	movs	r3, #4
 8003272:	e04f      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d111      	bne.n	80032a0 <HAL_I2C_Init+0x168>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e012      	b.n	80032c6 <HAL_I2C_Init+0x18e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	0099      	lsls	r1, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Init+0x196>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e022      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10e      	bne.n	80032f4 <HAL_I2C_Init+0x1bc>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e58      	subs	r0, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	440b      	add	r3, r1
 80032e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f2:	e00f      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	0099      	lsls	r1, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003342:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6911      	ldr	r1, [r2, #16]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	000186a0 	.word	0x000186a0
 80033b0:	001e847f 	.word	0x001e847f
 80033b4:	003d08ff 	.word	0x003d08ff
 80033b8:	431bde83 	.word	0x431bde83
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d2:	2b80      	cmp	r3, #128	@ 0x80
 80033d4:	d103      	bne.n	80033de <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  }
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	461a      	mov	r2, r3
 80033f4:	460b      	mov	r3, r1
 80033f6:	817b      	strh	r3, [r7, #10]
 80033f8:	4613      	mov	r3, r2
 80033fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7fe ffba 	bl	8002374 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80e0 	bne.w	80035d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	4970      	ldr	r1, [pc, #448]	@ (80035dc <HAL_I2C_Master_Transmit+0x1f4>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f001 ff40 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	e0d3      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_I2C_Master_Transmit+0x50>
 8003434:	2302      	movs	r3, #2
 8003436:	e0cc      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d007      	beq.n	800345e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800346c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	@ 0x21
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2210      	movs	r2, #16
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	893a      	ldrh	r2, [r7, #8]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a50      	ldr	r2, [pc, #320]	@ (80035e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a0:	8979      	ldrh	r1, [r7, #10]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f001 fdd0 	bl	800504c <I2C_MasterRequestWrite>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e08d      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034cc:	e066      	b.n	800359c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	6a39      	ldr	r1, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f001 fffe 	bl	80054d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06b      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d11b      	bne.n	8003570 <HAL_I2C_Master_Transmit+0x188>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f001 fff5 	bl	8005564 <I2C_WaitOnBTFFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2b04      	cmp	r3, #4
 8003586:	d107      	bne.n	8003598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01a      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d194      	bne.n	80034ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000

080035e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	460b      	mov	r3, r1
 80035f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7fe febe 	bl	8002374 <HAL_GetTick>
 80035f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	f040 8111 	bne.w	800382e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2319      	movs	r3, #25
 8003612:	2201      	movs	r2, #1
 8003614:	4988      	ldr	r1, [pc, #544]	@ (8003838 <HAL_I2C_IsDeviceReady+0x254>)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f001 fe42 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	e104      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_I2C_IsDeviceReady+0x50>
 8003630:	2302      	movs	r3, #2
 8003632:	e0fd      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d007      	beq.n	800365a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2224      	movs	r2, #36	@ 0x24
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a70      	ldr	r2, [pc, #448]	@ (800383c <HAL_I2C_IsDeviceReady+0x258>)
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2200      	movs	r2, #0
 8003696:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f001 fe00 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b4:	d103      	bne.n	80036be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0b6      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fe4f 	bl	8002374 <HAL_GetTick>
 80036d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003706:	e025      	b.n	8003754 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003708:	f7fe fe34 	bl	8002374 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d302      	bcc.n	800371e <HAL_I2C_IsDeviceReady+0x13a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22a0      	movs	r2, #160	@ 0xa0
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2ba0      	cmp	r3, #160	@ 0xa0
 800375e:	d005      	beq.n	800376c <HAL_I2C_IsDeviceReady+0x188>
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_I2C_IsDeviceReady+0x188>
 8003766:	7dbb      	ldrb	r3, [r7, #22]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0cd      	beq.n	8003708 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d129      	bne.n	80037d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003790:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2319      	movs	r3, #25
 80037ae:	2201      	movs	r2, #1
 80037b0:	4921      	ldr	r1, [pc, #132]	@ (8003838 <HAL_I2C_IsDeviceReady+0x254>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f001 fd74 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e036      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e02c      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2319      	movs	r3, #25
 80037f6:	2201      	movs	r2, #1
 80037f8:	490f      	ldr	r1, [pc, #60]	@ (8003838 <HAL_I2C_IsDeviceReady+0x254>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 fd50 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e012      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3301      	adds	r3, #1
 800380e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	f4ff af32 	bcc.w	800367e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	00100002 	.word	0x00100002
 800383c:	ffff0000 	.word	0xffff0000

08003840 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003858:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003860:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003868:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b10      	cmp	r3, #16
 800386e:	d003      	beq.n	8003878 <HAL_I2C_EV_IRQHandler+0x38>
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b40      	cmp	r3, #64	@ 0x40
 8003874:	f040 80c1 	bne.w	80039fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <HAL_I2C_EV_IRQHandler+0x6e>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003898:	d003      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x62>
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80038a0:	d101      	bne.n	80038a6 <HAL_I2C_EV_IRQHandler+0x66>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_I2C_EV_IRQHandler+0x68>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f000 8132 	beq.w	8003b12 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_I2C_EV_IRQHandler+0x92>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	0a5b      	lsrs	r3, r3, #9
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f001 fef5 	bl	80056b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fd99 	bl	8004402 <I2C_Master_SB>
 80038d0:	e092      	b.n	80039f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	0a5b      	lsrs	r3, r3, #9
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fe0e 	bl	800450c <I2C_Master_ADD10>
 80038f0:	e082      	b.n	80039f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_I2C_EV_IRQHandler+0xd2>
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	0a5b      	lsrs	r3, r3, #9
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fe27 	bl	800455e <I2C_Master_ADDR>
 8003910:	e072      	b.n	80039f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03b      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392c:	f000 80f3 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	09db      	lsrs	r3, r3, #7
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00f      	beq.n	800395c <HAL_I2C_EV_IRQHandler+0x11c>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_I2C_EV_IRQHandler+0x11c>
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f9f1 	bl	8003d3c <I2C_MasterTransmit_TXE>
 800395a:	e04d      	b.n	80039f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80d6 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	0a5b      	lsrs	r3, r3, #9
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80cf 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	2b21      	cmp	r3, #33	@ 0x21
 800397c:	d103      	bne.n	8003986 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa78 	bl	8003e74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003984:	e0c7      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	f040 80c4 	bne.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fae6 	bl	8003f60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003994:	e0bf      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a4:	f000 80b7 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <HAL_I2C_EV_IRQHandler+0x194>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <HAL_I2C_EV_IRQHandler+0x194>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fb5f 	bl	8004090 <I2C_MasterReceive_RXNE>
 80039d2:	e011      	b.n	80039f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 809a 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	0a5b      	lsrs	r3, r3, #9
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8093 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fc15 	bl	8004220 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f6:	e08e      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039f8:	e08d      	b.n	8003b16 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e007      	b.n	8003a1c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <HAL_I2C_EV_IRQHandler+0x20e>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	0a5b      	lsrs	r3, r3, #9
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00c      	beq.n	8003a4e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 ffe0 	bl	8004a0c <I2C_Slave_ADDR>
 8003a4c:	e066      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_I2C_EV_IRQHandler+0x22e>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	0a5b      	lsrs	r3, r3, #9
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f001 f81a 	bl	8004aa0 <I2C_Slave_STOPF>
 8003a6c:	e056      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a6e:	7bbb      	ldrb	r3, [r7, #14]
 8003a70:	2b21      	cmp	r3, #33	@ 0x21
 8003a72:	d002      	beq.n	8003a7a <HAL_I2C_EV_IRQHandler+0x23a>
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	2b29      	cmp	r3, #41	@ 0x29
 8003a78:	d125      	bne.n	8003ac6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	09db      	lsrs	r3, r3, #7
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x266>
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	0a9b      	lsrs	r3, r3, #10
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x266>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fef8 	bl	8004894 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa4:	e039      	b.n	8003b1a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d033      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0x2da>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	0a5b      	lsrs	r3, r3, #9
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d02d      	beq.n	8003b1a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 ff25 	bl	800490e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac4:	e029      	b.n	8003b1a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00f      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	0a9b      	lsrs	r3, r3, #10
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 ff2f 	bl	800494e <I2C_SlaveReceive_RXNE>
 8003af0:	e014      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	0a5b      	lsrs	r3, r3, #9
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 ff5d 	bl	80049ca <I2C_SlaveReceive_BTF>
 8003b10:	e004      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b1a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08a      	sub	sp, #40	@ 0x28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b44:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_I2C_ER_IRQHandler+0x5e>
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b6e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	0a5b      	lsrs	r3, r3, #9
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_I2C_ER_IRQHandler+0x88>
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003ba8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	0a9b      	lsrs	r3, r3, #10
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03f      	beq.n	8003c36 <HAL_I2C_ER_IRQHandler+0x114>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d039      	beq.n	8003c36 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003bc2:	7efb      	ldrb	r3, [r7, #27]
 8003bc4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bdc:	7ebb      	ldrb	r3, [r7, #26]
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d112      	bne.n	8003c08 <HAL_I2C_ER_IRQHandler+0xe6>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10f      	bne.n	8003c08 <HAL_I2C_ER_IRQHandler+0xe6>
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b21      	cmp	r3, #33	@ 0x21
 8003bec:	d008      	beq.n	8003c00 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	2b29      	cmp	r3, #41	@ 0x29
 8003bf2:	d005      	beq.n	8003c00 <HAL_I2C_ER_IRQHandler+0xde>
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b28      	cmp	r3, #40	@ 0x28
 8003bf8:	d106      	bne.n	8003c08 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b21      	cmp	r3, #33	@ 0x21
 8003bfe:	d103      	bne.n	8003c08 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f001 f87d 	bl	8004d00 <I2C_Slave_AF>
 8003c06:	e016      	b.n	8003c36 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c10:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c1a:	7efb      	ldrb	r3, [r7, #27]
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d002      	beq.n	8003c26 <HAL_I2C_ER_IRQHandler+0x104>
 8003c20:	7efb      	ldrb	r3, [r7, #27]
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d107      	bne.n	8003c36 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c34:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	0adb      	lsrs	r3, r3, #11
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <HAL_I2C_ER_IRQHandler+0x13e>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	f043 0308 	orr.w	r3, r3, #8
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003c5e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f001 f8b8 	bl	8004de8 <I2C_ITError>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d150      	bne.n	8003e04 <I2C_MasterTransmit_TXE+0xc8>
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b21      	cmp	r3, #33	@ 0x21
 8003d66:	d14d      	bne.n	8003e04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d01d      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d01a      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d7a:	d016      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2211      	movs	r2, #17
 8003d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff6c 	bl	8003c80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003da8:	e060      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003db8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b40      	cmp	r3, #64	@ 0x40
 8003de2:	d107      	bne.n	8003df4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff81 	bl	8003cf4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003df2:	e03b      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff3f 	bl	8003c80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e02:	e033      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b21      	cmp	r3, #33	@ 0x21
 8003e08:	d005      	beq.n	8003e16 <I2C_MasterTransmit_TXE+0xda>
 8003e0a:	7bbb      	ldrb	r3, [r7, #14]
 8003e0c:	2b40      	cmp	r3, #64	@ 0x40
 8003e0e:	d12d      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b22      	cmp	r3, #34	@ 0x22
 8003e14:	d12a      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e30:	e01c      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	d103      	bne.n	8003e46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f88e 	bl	8003f60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e44:	e012      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e6a:	e7ff      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b21      	cmp	r3, #33	@ 0x21
 8003e8c:	d164      	bne.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ebc:	e04c      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d01d      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d01a      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ed0:	d016      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ee0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2211      	movs	r2, #17
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fec1 	bl	8003c80 <HAL_I2C_MasterTxCpltCallback>
}
 8003efe:	e02b      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b40      	cmp	r3, #64	@ 0x40
 8003f38:	d107      	bne.n	8003f4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fed6 	bl	8003cf4 <HAL_I2C_MemTxCpltCallback>
}
 8003f48:	e006      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fe94 	bl	8003c80 <HAL_I2C_MasterTxCpltCallback>
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10b      	bne.n	8003f98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	1c9a      	adds	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003f96:	e077      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	121b      	asrs	r3, r3, #8
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fb2:	e069      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10b      	bne.n	8003fd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fd2:	e059      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d152      	bne.n	8004082 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b22      	cmp	r3, #34	@ 0x22
 8003fe0:	d10d      	bne.n	8003ffe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ffc:	e044      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b21      	cmp	r3, #33	@ 0x21
 800400c:	d112      	bne.n	8004034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004032:	e029      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d124      	bne.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b21      	cmp	r3, #33	@ 0x21
 8004042:	d121      	bne.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004052:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe3a 	bl	8003cf4 <HAL_I2C_MemTxCpltCallback>
}
 8004080:	e002      	b.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff f99c 	bl	80033c0 <I2C_Flush_DR>
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b22      	cmp	r3, #34	@ 0x22
 80040a2:	f040 80b9 	bne.w	8004218 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d921      	bls.n	80040fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	f040 8096 	bne.w	8004218 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80040fc:	e08c      	b.n	8004218 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	2b02      	cmp	r3, #2
 8004104:	d07f      	beq.n	8004206 <I2C_MasterReceive_RXNE+0x176>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d002      	beq.n	8004112 <I2C_MasterReceive_RXNE+0x82>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d179      	bne.n	8004206 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f001 fa6e 	bl	80055f4 <I2C_WaitOnSTOPRequestThroughIT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14c      	bne.n	80041b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800413c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d10a      	bne.n	800418e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fdbd 	bl	8003d06 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800418c:	e044      	b.n	8004218 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d002      	beq.n	80041a2 <I2C_MasterReceive_RXNE+0x112>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d103      	bne.n	80041aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80041a8:	e002      	b.n	80041b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2212      	movs	r2, #18
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fd6e 	bl	8003c92 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041b6:	e02f      	b.n	8004218 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fd8a 	bl	8003d18 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004204:	e008      	b.n	8004218 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004214:	605a      	str	r2, [r3, #4]
}
 8004216:	e7ff      	b.n	8004218 <I2C_MasterReceive_RXNE+0x188>
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b04      	cmp	r3, #4
 8004236:	d11b      	bne.n	8004270 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004246:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800426e:	e0c4      	b.n	80043fa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b03      	cmp	r3, #3
 8004278:	d129      	bne.n	80042ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004288:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00a      	beq.n	80042a6 <I2C_MasterReceive_BTF+0x86>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d007      	beq.n	80042a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042cc:	e095      	b.n	80043fa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d17d      	bne.n	80043d4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d002      	beq.n	80042e4 <I2C_MasterReceive_BTF+0xc4>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d108      	bne.n	80042f6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e016      	b.n	8004324 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d002      	beq.n	8004302 <I2C_MasterReceive_BTF+0xe2>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d108      	bne.n	8004314 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e007      	b.n	8004324 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004322:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800437e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d10a      	bne.n	80043aa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fcaf 	bl	8003d06 <HAL_I2C_MemRxCpltCallback>
}
 80043a8:	e027      	b.n	80043fa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d002      	beq.n	80043be <I2C_MasterReceive_BTF+0x19e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d103      	bne.n	80043c6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80043c4:	e002      	b.n	80043cc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2212      	movs	r2, #18
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fc60 	bl	8003c92 <HAL_I2C_MasterRxCpltCallback>
}
 80043d2:	e012      	b.n	80043fa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b40      	cmp	r3, #64	@ 0x40
 8004414:	d117      	bne.n	8004446 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800442e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004430:	e067      	b.n	8004502 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2da      	uxtb	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]
}
 8004444:	e05d      	b.n	8004502 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800444e:	d133      	bne.n	80044b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b21      	cmp	r3, #33	@ 0x21
 800445a:	d109      	bne.n	8004470 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	e008      	b.n	8004482 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <I2C_Master_SB+0x92>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d032      	beq.n	8004502 <I2C_Master_SB+0x100>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d02d      	beq.n	8004502 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b4:	605a      	str	r2, [r3, #4]
}
 80044b6:	e024      	b.n	8004502 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10e      	bne.n	80044de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	11db      	asrs	r3, r3, #7
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0306 	and.w	r3, r3, #6
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f063 030f 	orn	r3, r3, #15
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]
}
 80044dc:	e011      	b.n	8004502 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d10d      	bne.n	8004502 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	11db      	asrs	r3, r3, #7
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0306 	and.w	r3, r3, #6
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f063 030e 	orn	r3, r3, #14
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004518:	b2da      	uxtb	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <I2C_Master_ADD10+0x26>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <I2C_Master_ADD10+0x48>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004552:	605a      	str	r2, [r3, #4]
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800455e:	b480      	push	{r7}
 8004560:	b091      	sub	sp, #68	@ 0x44
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800456c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b22      	cmp	r3, #34	@ 0x22
 8004586:	f040 8174 	bne.w	8004872 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <I2C_Master_ADDR+0x54>
 8004592:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004596:	2b40      	cmp	r3, #64	@ 0x40
 8004598:	d10b      	bne.n	80045b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	633b      	str	r3, [r7, #48]	@ 0x30
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	e16b      	b.n	800488a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11d      	bne.n	80045f6 <I2C_Master_ADDR+0x98>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045c2:	d118      	bne.n	80045f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c4:	2300      	movs	r3, #0
 80045c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80045f4:	e149      	b.n	800488a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d113      	bne.n	8004628 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004600:	2300      	movs	r3, #0
 8004602:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e120      	b.n	800486a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	f040 808a 	bne.w	8004748 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004636:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800463a:	d137      	bne.n	80046ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800465a:	d113      	bne.n	8004684 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	e0f2      	b.n	800486a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	623b      	str	r3, [r7, #32]
 8004698:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e0de      	b.n	800486a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80046ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d02e      	beq.n	8004710 <I2C_Master_ADDR+0x1b2>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d02b      	beq.n	8004710 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80046b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ba:	2b12      	cmp	r3, #18
 80046bc:	d102      	bne.n	80046c4 <I2C_Master_ADDR+0x166>
 80046be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d125      	bne.n	8004710 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00e      	beq.n	80046e8 <I2C_Master_ADDR+0x18a>
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d00b      	beq.n	80046e8 <I2C_Master_ADDR+0x18a>
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d008      	beq.n	80046e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e007      	b.n	80046f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	e0ac      	b.n	800486a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e090      	b.n	800486a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d158      	bne.n	8004804 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	2b04      	cmp	r3, #4
 8004756:	d021      	beq.n	800479c <I2C_Master_ADDR+0x23e>
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	2b02      	cmp	r3, #2
 800475c:	d01e      	beq.n	800479c <I2C_Master_ADDR+0x23e>
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	2b10      	cmp	r3, #16
 8004762:	d01b      	beq.n	800479c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004772:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e012      	b.n	80047c2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047d0:	d14b      	bne.n	800486a <I2C_Master_ADDR+0x30c>
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d8:	d00b      	beq.n	80047f2 <I2C_Master_ADDR+0x294>
 80047da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d008      	beq.n	80047f2 <I2C_Master_ADDR+0x294>
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d005      	beq.n	80047f2 <I2C_Master_ADDR+0x294>
 80047e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d002      	beq.n	80047f2 <I2C_Master_ADDR+0x294>
 80047ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d13b      	bne.n	800486a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e032      	b.n	800486a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004812:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004822:	d117      	bne.n	8004854 <I2C_Master_ADDR+0x2f6>
 8004824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004826:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800482a:	d00b      	beq.n	8004844 <I2C_Master_ADDR+0x2e6>
 800482c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482e:	2b01      	cmp	r3, #1
 8004830:	d008      	beq.n	8004844 <I2C_Master_ADDR+0x2e6>
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	2b08      	cmp	r3, #8
 8004836:	d005      	beq.n	8004844 <I2C_Master_ADDR+0x2e6>
 8004838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483a:	2b10      	cmp	r3, #16
 800483c:	d002      	beq.n	8004844 <I2C_Master_ADDR+0x2e6>
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b20      	cmp	r3, #32
 8004842:	d107      	bne.n	8004854 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004852:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004870:	e00b      	b.n	800488a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
}
 8004888:	e7ff      	b.n	800488a <I2C_Master_ADDR+0x32c>
 800488a:	bf00      	nop
 800488c:	3744      	adds	r7, #68	@ 0x44
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02b      	beq.n	8004906 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d114      	bne.n	8004906 <I2C_SlaveTransmit_TXE+0x72>
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b29      	cmp	r3, #41	@ 0x29
 80048e0:	d111      	bne.n	8004906 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2221      	movs	r2, #33	@ 0x21
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2228      	movs	r2, #40	@ 0x28
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff f9cf 	bl	8003ca4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d011      	beq.n	8004944 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02c      	beq.n	80049c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d114      	bne.n	80049c2 <I2C_SlaveReceive_RXNE+0x74>
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b2a      	cmp	r3, #42	@ 0x2a
 800499c:	d111      	bne.n	80049c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2222      	movs	r2, #34	@ 0x22
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2228      	movs	r2, #40	@ 0x28
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff f97a 	bl	8003cb6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d012      	beq.n	8004a02 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a26:	2b28      	cmp	r3, #40	@ 0x28
 8004a28:	d127      	bne.n	8004a7a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a38:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	09db      	lsrs	r3, r3, #7
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	81bb      	strh	r3, [r7, #12]
 8004a5c:	e002      	b.n	8004a64 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a6c:	89ba      	ldrh	r2, [r7, #12]
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff f928 	bl	8003cc8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a78:	e00e      	b.n	8004a98 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004abe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afc:	d172      	bne.n	8004be4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b22      	cmp	r3, #34	@ 0x22
 8004b02:	d002      	beq.n	8004b0a <I2C_Slave_STOPF+0x6a>
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b08:	d135      	bne.n	8004b76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd ff8a 	bl	8002a5c <HAL_DMA_GetState>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d049      	beq.n	8004be2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	4a69      	ldr	r2, [pc, #420]	@ (8004cf8 <I2C_Slave_STOPF+0x258>)
 8004b54:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd fe00 	bl	8002760 <HAL_DMA_Abort_IT>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d03d      	beq.n	8004be2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b70:	4610      	mov	r0, r2
 8004b72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b74:	e035      	b.n	8004be2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f043 0204 	orr.w	r2, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd ff54 	bl	8002a5c <HAL_DMA_GetState>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d014      	beq.n	8004be4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf8 <I2C_Slave_STOPF+0x258>)
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fdca 	bl	8002760 <HAL_DMA_Abort_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4798      	blx	r3
 8004be0:	e000      	b.n	8004be4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004be2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d03e      	beq.n	8004c6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d112      	bne.n	8004c22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d112      	bne.n	8004c56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8b7 	bl	8004de8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c7a:	e039      	b.n	8004cf0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c80:	d109      	bne.n	8004c96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2228      	movs	r2, #40	@ 0x28
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff f810 	bl	8003cb6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b28      	cmp	r3, #40	@ 0x28
 8004ca0:	d111      	bne.n	8004cc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <I2C_Slave_STOPF+0x25c>)
 8004ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff f80f 	bl	8003ce2 <HAL_I2C_ListenCpltCallback>
}
 8004cc4:	e014      	b.n	8004cf0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	2b22      	cmp	r3, #34	@ 0x22
 8004ccc:	d002      	beq.n	8004cd4 <I2C_Slave_STOPF+0x234>
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b22      	cmp	r3, #34	@ 0x22
 8004cd2:	d10d      	bne.n	8004cf0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fe ffe3 	bl	8003cb6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	08005151 	.word	0x08005151
 8004cfc:	ffff0000 	.word	0xffff0000

08004d00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d002      	beq.n	8004d22 <I2C_Slave_AF+0x22>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d129      	bne.n	8004d76 <I2C_Slave_AF+0x76>
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b28      	cmp	r3, #40	@ 0x28
 8004d26:	d126      	bne.n	8004d76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004de4 <I2C_Slave_AF+0xe4>)
 8004d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fe ffb7 	bl	8003ce2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d74:	e031      	b.n	8004dda <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b21      	cmp	r3, #33	@ 0x21
 8004d7a:	d129      	bne.n	8004dd0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	@ (8004de4 <I2C_Slave_AF+0xe4>)
 8004d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2221      	movs	r2, #33	@ 0x21
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004da6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004db0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fe fafc 	bl	80033c0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fe ff6b 	bl	8003ca4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004dce:	e004      	b.n	8004dda <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dd8:	615a      	str	r2, [r3, #20]
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	ffff0000 	.word	0xffff0000

08004de8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d002      	beq.n	8004e0c <I2C_ITError+0x24>
 8004e06:	7bbb      	ldrb	r3, [r7, #14]
 8004e08:	2b40      	cmp	r3, #64	@ 0x40
 8004e0a:	d10a      	bne.n	8004e22 <I2C_ITError+0x3a>
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b22      	cmp	r3, #34	@ 0x22
 8004e10:	d107      	bne.n	8004e22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e28:	2b28      	cmp	r3, #40	@ 0x28
 8004e2a:	d107      	bne.n	8004e3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2228      	movs	r2, #40	@ 0x28
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e3a:	e015      	b.n	8004e68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e4a:	d00a      	beq.n	8004e62 <I2C_ITError+0x7a>
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b60      	cmp	r3, #96	@ 0x60
 8004e50:	d007      	beq.n	8004e62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e76:	d162      	bne.n	8004f3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d020      	beq.n	8004ed8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	4a6a      	ldr	r2, [pc, #424]	@ (8005044 <I2C_ITError+0x25c>)
 8004e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd fc5c 	bl	8002760 <HAL_DMA_Abort_IT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8089 	beq.w	8004fc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4798      	blx	r3
 8004ed6:	e074      	b.n	8004fc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004edc:	4a59      	ldr	r2, [pc, #356]	@ (8005044 <I2C_ITError+0x25c>)
 8004ede:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd fc3b 	bl	8002760 <HAL_DMA_Abort_IT>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d068      	beq.n	8004fc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d10b      	bne.n	8004f16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4798      	blx	r3
 8004f3c:	e041      	b.n	8004fc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b60      	cmp	r3, #96	@ 0x60
 8004f48:	d125      	bne.n	8004f96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f62:	2b40      	cmp	r3, #64	@ 0x40
 8004f64:	d10b      	bne.n	8004f7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fe fecb 	bl	8003d2a <HAL_I2C_AbortCpltCallback>
 8004f94:	e015      	b.n	8004fc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d10b      	bne.n	8004fbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fe feab 	bl	8003d18 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10e      	bne.n	8004ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d113      	bne.n	800503c <I2C_ITError+0x254>
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b28      	cmp	r3, #40	@ 0x28
 8005018:	d110      	bne.n	800503c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <I2C_ITError+0x260>)
 800501e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fe fe53 	bl	8003ce2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	08005151 	.word	0x08005151
 8005048:	ffff0000 	.word	0xffff0000

0800504c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d006      	beq.n	8005076 <I2C_MasterRequestWrite+0x2a>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d003      	beq.n	8005076 <I2C_MasterRequestWrite+0x2a>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005074:	d108      	bne.n	8005088 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e00b      	b.n	80050a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	2b12      	cmp	r3, #18
 800508e:	d107      	bne.n	80050a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8f7 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c6:	d103      	bne.n	80050d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e035      	b.n	8005140 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050dc:	d108      	bne.n	80050f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050de:	897b      	ldrh	r3, [r7, #10]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050ec:	611a      	str	r2, [r3, #16]
 80050ee:	e01b      	b.n	8005128 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	11db      	asrs	r3, r3, #7
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 0306 	and.w	r3, r3, #6
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f063 030f 	orn	r3, r3, #15
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	490e      	ldr	r1, [pc, #56]	@ (8005148 <I2C_MasterRequestWrite+0xfc>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f940 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e010      	b.n	8005140 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4907      	ldr	r1, [pc, #28]	@ (800514c <I2C_MasterRequestWrite+0x100>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f930 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	00010008 	.word	0x00010008
 800514c:	00010002 	.word	0x00010002

08005150 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005168:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800516a:	4b4b      	ldr	r3, [pc, #300]	@ (8005298 <I2C_DMAAbort+0x148>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	4a4a      	ldr	r2, [pc, #296]	@ (800529c <I2C_DMAAbort+0x14c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	0a1a      	lsrs	r2, r3, #8
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00da      	lsls	r2, r3, #3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005196:	e00a      	b.n	80051ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ac:	d0ea      	beq.n	8005184 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ba:	2200      	movs	r2, #0
 80051bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	2200      	movs	r2, #0
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f0:	2200      	movs	r2, #0
 80051f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	2200      	movs	r2, #0
 8005202:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b60      	cmp	r3, #96	@ 0x60
 800521e:	d10e      	bne.n	800523e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7fe fd77 	bl	8003d2a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800523c:	e027      	b.n	800528e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005244:	2b28      	cmp	r3, #40	@ 0x28
 8005246:	d117      	bne.n	8005278 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005266:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2228      	movs	r2, #40	@ 0x28
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005276:	e007      	b.n	8005288 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005288:	6978      	ldr	r0, [r7, #20]
 800528a:	f7fe fd45 	bl	8003d18 <HAL_I2C_ErrorCallback>
}
 800528e:	bf00      	nop
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000010 	.word	0x20000010
 800529c:	14f8b589 	.word	0x14f8b589

080052a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b0:	e048      	b.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d044      	beq.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fd f85b 	bl	8002374 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d139      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d10d      	bne.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	43da      	mvns	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4013      	ands	r3, r2
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	e00c      	b.n	8005310 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	43da      	mvns	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	d116      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e023      	b.n	800538c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10d      	bne.n	800536a <I2C_WaitOnFlagUntilTimeout+0xca>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	43da      	mvns	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	e00c      	b.n	8005384 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	43da      	mvns	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	429a      	cmp	r2, r3
 8005388:	d093      	beq.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a2:	e071      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d123      	bne.n	80053fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	f043 0204 	orr.w	r2, r3, #4
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e067      	b.n	80054cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d041      	beq.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fc ffb6 	bl	8002374 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d136      	bne.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	43da      	mvns	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e00b      	b.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	43da      	mvns	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d016      	beq.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e021      	b.n	80054cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10c      	bne.n	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	43da      	mvns	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4013      	ands	r3, r2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e00b      	b.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	43da      	mvns	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f47f af6d 	bne.w	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e0:	e034      	b.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f8b8 	bl	8005658 <I2C_IsAcknowledgeFailed>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e034      	b.n	800555c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d028      	beq.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fc ff3b 	bl	8002374 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11d      	bne.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551a:	2b80      	cmp	r3, #128	@ 0x80
 800551c:	d016      	beq.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d1c3      	bne.n	80054e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005570:	e034      	b.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f870 	bl	8005658 <I2C_IsAcknowledgeFailed>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e034      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d028      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fc fef3 	bl	8002374 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11d      	bne.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d016      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e007      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d1c3      	bne.n	8005572 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005600:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	08db      	lsrs	r3, r3, #3
 8005606:	4a13      	ldr	r2, [pc, #76]	@ (8005654 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	0a1a      	lsrs	r2, r3, #8
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b01      	subs	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d107      	bne.n	8005632 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f043 0220 	orr.w	r2, r3, #32
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e008      	b.n	8005644 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800563c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005640:	d0e9      	beq.n	8005616 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000010 	.word	0x20000010
 8005654:	14f8b589 	.word	0x14f8b589

08005658 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566e:	d11b      	bne.n	80056a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005678:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	f043 0204 	orr.w	r2, r3, #4
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80056c4:	d103      	bne.n	80056ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056cc:	e007      	b.n	80056de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056d6:	d102      	bne.n	80056de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2208      	movs	r2, #8
 80056dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_PWR_PVD_IRQHandler+0x20>)
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80056f8:	f000 f808 	bl	800570c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80056fc:	4b02      	ldr	r3, [pc, #8]	@ (8005708 <HAL_PWR_PVD_IRQHandler+0x20>)
 80056fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005702:	615a      	str	r2, [r3, #20]
  }
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40010400 	.word	0x40010400

0800570c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e272      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8087 	beq.w	8005846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005738:	4b92      	ldr	r3, [pc, #584]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b04      	cmp	r3, #4
 8005742:	d00c      	beq.n	800575e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005744:	4b8f      	ldr	r3, [pc, #572]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d112      	bne.n	8005776 <HAL_RCC_OscConfig+0x5e>
 8005750:	4b8c      	ldr	r3, [pc, #560]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800575c:	d10b      	bne.n	8005776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575e:	4b89      	ldr	r3, [pc, #548]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d06c      	beq.n	8005844 <HAL_RCC_OscConfig+0x12c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d168      	bne.n	8005844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e24c      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577e:	d106      	bne.n	800578e <HAL_RCC_OscConfig+0x76>
 8005780:	4b80      	ldr	r3, [pc, #512]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7f      	ldr	r2, [pc, #508]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e02e      	b.n	80057ec <HAL_RCC_OscConfig+0xd4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x98>
 8005796:	4b7b      	ldr	r3, [pc, #492]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a7a      	ldr	r2, [pc, #488]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 800579c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4b78      	ldr	r3, [pc, #480]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a77      	ldr	r2, [pc, #476]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e01d      	b.n	80057ec <HAL_RCC_OscConfig+0xd4>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCC_OscConfig+0xbc>
 80057ba:	4b72      	ldr	r3, [pc, #456]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a71      	ldr	r2, [pc, #452]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e00b      	b.n	80057ec <HAL_RCC_OscConfig+0xd4>
 80057d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b68      	ldr	r3, [pc, #416]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a67      	ldr	r2, [pc, #412]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80057e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fc fdbe 	bl	8002374 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fc fdba 	bl	8002374 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	@ 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e200      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	4b5d      	ldr	r3, [pc, #372]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0xe4>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fc fdaa 	bl	8002374 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fc fda6 	bl	8002374 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1ec      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	4b53      	ldr	r3, [pc, #332]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x10c>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d063      	beq.n	800591a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005852:	4b4c      	ldr	r3, [pc, #304]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800585e:	4b49      	ldr	r3, [pc, #292]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b08      	cmp	r3, #8
 8005868:	d11c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x18c>
 800586a:	4b46      	ldr	r3, [pc, #280]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d116      	bne.n	80058a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005876:	4b43      	ldr	r3, [pc, #268]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_RCC_OscConfig+0x176>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d001      	beq.n	800588e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e1c0      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588e:	4b3d      	ldr	r3, [pc, #244]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4939      	ldr	r1, [pc, #228]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a2:	e03a      	b.n	800591a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ac:	4b36      	ldr	r3, [pc, #216]	@ (8005988 <HAL_RCC_OscConfig+0x270>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b2:	f7fc fd5f 	bl	8002374 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ba:	f7fc fd5b 	bl	8002374 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e1a1      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4927      	ldr	r1, [pc, #156]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	e015      	b.n	800591a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ee:	4b26      	ldr	r3, [pc, #152]	@ (8005988 <HAL_RCC_OscConfig+0x270>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f4:	f7fc fd3e 	bl	8002374 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fc:	f7fc fd3a 	bl	8002374 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e180      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590e:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d03a      	beq.n	800599c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d019      	beq.n	8005962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800592e:	4b17      	ldr	r3, [pc, #92]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005934:	f7fc fd1e 	bl	8002374 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593c:	f7fc fd1a 	bl	8002374 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e160      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594e:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <HAL_RCC_OscConfig+0x26c>)
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800595a:	2001      	movs	r0, #1
 800595c:	f000 faba 	bl	8005ed4 <RCC_Delay>
 8005960:	e01c      	b.n	800599c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005968:	f7fc fd04 	bl	8002374 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800596e:	e00f      	b.n	8005990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005970:	f7fc fd00 	bl	8002374 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d908      	bls.n	8005990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e146      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	42420000 	.word	0x42420000
 800598c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	4b92      	ldr	r3, [pc, #584]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e9      	bne.n	8005970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80a6 	beq.w	8005af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ae:	4b8b      	ldr	r3, [pc, #556]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10d      	bne.n	80059d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	4b88      	ldr	r3, [pc, #544]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	4a87      	ldr	r2, [pc, #540]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c4:	61d3      	str	r3, [r2, #28]
 80059c6:	4b85      	ldr	r3, [pc, #532]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b82      	ldr	r3, [pc, #520]	@ (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d118      	bne.n	8005a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e2:	4b7f      	ldr	r3, [pc, #508]	@ (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7e      	ldr	r2, [pc, #504]	@ (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ee:	f7fc fcc1 	bl	8002374 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fc fcbd 	bl	8002374 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b64      	cmp	r3, #100	@ 0x64
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e103      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	4b75      	ldr	r3, [pc, #468]	@ (8005be0 <HAL_RCC_OscConfig+0x4c8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <HAL_RCC_OscConfig+0x312>
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	4a6e      	ldr	r2, [pc, #440]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6213      	str	r3, [r2, #32]
 8005a28:	e02d      	b.n	8005a86 <HAL_RCC_OscConfig+0x36e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCC_OscConfig+0x334>
 8005a32:	4b6a      	ldr	r3, [pc, #424]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	4a69      	ldr	r2, [pc, #420]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6213      	str	r3, [r2, #32]
 8005a3e:	4b67      	ldr	r3, [pc, #412]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a66      	ldr	r2, [pc, #408]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	6213      	str	r3, [r2, #32]
 8005a4a:	e01c      	b.n	8005a86 <HAL_RCC_OscConfig+0x36e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCC_OscConfig+0x356>
 8005a54:	4b61      	ldr	r3, [pc, #388]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	4a60      	ldr	r2, [pc, #384]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6213      	str	r3, [r2, #32]
 8005a60:	4b5e      	ldr	r3, [pc, #376]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	4a5d      	ldr	r2, [pc, #372]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6213      	str	r3, [r2, #32]
 8005a6c:	e00b      	b.n	8005a86 <HAL_RCC_OscConfig+0x36e>
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4a5a      	ldr	r2, [pc, #360]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	6213      	str	r3, [r2, #32]
 8005a7a:	4b58      	ldr	r3, [pc, #352]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a57      	ldr	r2, [pc, #348]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d015      	beq.n	8005aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a8e:	f7fc fc71 	bl	8002374 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fc fc6d 	bl	8002374 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e0b1      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	4b4b      	ldr	r3, [pc, #300]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ee      	beq.n	8005a96 <HAL_RCC_OscConfig+0x37e>
 8005ab8:	e014      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aba:	f7fc fc5b 	bl	8002374 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc fc57 	bl	8002374 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e09b      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad8:	4b40      	ldr	r3, [pc, #256]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aea:	4b3c      	ldr	r3, [pc, #240]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	4a3b      	ldr	r2, [pc, #236]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8087 	beq.w	8005c0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b00:	4b36      	ldr	r3, [pc, #216]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d061      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d146      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b14:	4b33      	ldr	r3, [pc, #204]	@ (8005be4 <HAL_RCC_OscConfig+0x4cc>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fc2b 	bl	8002374 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fc fc27 	bl	8002374 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e06d      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b34:	4b29      	ldr	r3, [pc, #164]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b48:	d108      	bne.n	8005b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b4a:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	4921      	ldr	r1, [pc, #132]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a19      	ldr	r1, [r3, #32]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	491b      	ldr	r1, [pc, #108]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b74:	4b1b      	ldr	r3, [pc, #108]	@ (8005be4 <HAL_RCC_OscConfig+0x4cc>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7a:	f7fc fbfb 	bl	8002374 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fc fbf7 	bl	8002374 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e03d      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b94:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x46a>
 8005ba0:	e035      	b.n	8005c0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b10      	ldr	r3, [pc, #64]	@ (8005be4 <HAL_RCC_OscConfig+0x4cc>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fc fbe4 	bl	8002374 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fc fbe0 	bl	8002374 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e026      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <HAL_RCC_OscConfig+0x4c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x498>
 8005bce:	e01e      	b.n	8005c0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e019      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40007000 	.word	0x40007000
 8005be4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCC_OscConfig+0x500>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d001      	beq.n	8005c0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000

08005c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0d0      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c30:	4b6a      	ldr	r3, [pc, #424]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d910      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b67      	ldr	r3, [pc, #412]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 0207 	bic.w	r2, r3, #7
 8005c46:	4965      	ldr	r1, [pc, #404]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4e:	4b63      	ldr	r3, [pc, #396]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0b8      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c78:	4b59      	ldr	r3, [pc, #356]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a58      	ldr	r2, [pc, #352]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c90:	4b53      	ldr	r3, [pc, #332]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a52      	ldr	r2, [pc, #328]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b50      	ldr	r3, [pc, #320]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	494d      	ldr	r1, [pc, #308]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d040      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc2:	4b47      	ldr	r3, [pc, #284]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d115      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e07f      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d107      	bne.n	8005cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cda:	4b41      	ldr	r3, [pc, #260]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e073      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cea:	4b3d      	ldr	r3, [pc, #244]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06b      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cfa:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f023 0203 	bic.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	4936      	ldr	r1, [pc, #216]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d0c:	f7fc fb32 	bl	8002374 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	e00a      	b.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d14:	f7fc fb2e 	bl	8002374 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e053      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 020c 	and.w	r2, r3, #12
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d1eb      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b27      	ldr	r3, [pc, #156]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d210      	bcs.n	8005d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b24      	ldr	r3, [pc, #144]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 0207 	bic.w	r2, r3, #7
 8005d52:	4922      	ldr	r1, [pc, #136]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e032      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d78:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4916      	ldr	r1, [pc, #88]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	490e      	ldr	r1, [pc, #56]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005daa:	f000 f821 	bl	8005df0 <HAL_RCC_GetSysClockFreq>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	091b      	lsrs	r3, r3, #4
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	490a      	ldr	r1, [pc, #40]	@ (8005de4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <HAL_RCC_ClockConfig+0x1cc>)
 8005dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dc6:	4b09      	ldr	r3, [pc, #36]	@ (8005dec <HAL_RCC_ClockConfig+0x1d0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fc fa90 	bl	80022f0 <HAL_InitTick>

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40021000 	.word	0x40021000
 8005de4:	0800b39c 	.word	0x0800b39c
 8005de8:	20000010 	.word	0x20000010
 8005dec:	20000014 	.word	0x20000014

08005df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d002      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x30>
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCC_GetSysClockFreq+0x36>
 8005e1e:	e027      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e20:	4b19      	ldr	r3, [pc, #100]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e22:	613b      	str	r3, [r7, #16]
      break;
 8005e24:	e027      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	0c9b      	lsrs	r3, r3, #18
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e30:	5cd3      	ldrb	r3, [r2, r3]
 8005e32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d010      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e3e:	4b11      	ldr	r3, [pc, #68]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	0c5b      	lsrs	r3, r3, #17
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	4a11      	ldr	r2, [pc, #68]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a0d      	ldr	r2, [pc, #52]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e52:	fb03 f202 	mul.w	r2, r3, r2
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e004      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0c      	ldr	r2, [pc, #48]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	613b      	str	r3, [r7, #16]
      break;
 8005e6e:	e002      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e72:	613b      	str	r3, [r7, #16]
      break;
 8005e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e76:	693b      	ldr	r3, [r7, #16]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	007a1200 	.word	0x007a1200
 8005e8c:	0800b3b4 	.word	0x0800b3b4
 8005e90:	0800b3c4 	.word	0x0800b3c4
 8005e94:	003d0900 	.word	0x003d0900

08005e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e9c:	4b02      	ldr	r3, [pc, #8]	@ (8005ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	20000010 	.word	0x20000010

08005eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005eb0:	f7ff fff2 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	4903      	ldr	r1, [pc, #12]	@ (8005ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	0800b3ac 	.word	0x0800b3ac

08005ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005edc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <RCC_Delay+0x34>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8005f0c <RCC_Delay+0x38>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0a5b      	lsrs	r3, r3, #9
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ef0:	bf00      	nop
  }
  while (Delay --);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	60fa      	str	r2, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f9      	bne.n	8005ef0 <RCC_Delay+0x1c>
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	20000010 	.word	0x20000010
 8005f0c:	10624dd3 	.word	0x10624dd3

08005f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e041      	b.n	8005fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb ff48 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 fe9a 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e032      	b.n	800602e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <HAL_TIM_Base_Start+0x88>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x48>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x48>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a14      	ldr	r2, [pc, #80]	@ (800603c <HAL_TIM_Base_Start+0x8c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x48>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a13      	ldr	r2, [pc, #76]	@ (8006040 <HAL_TIM_Base_Start+0x90>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d111      	bne.n	800601c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b06      	cmp	r3, #6
 8006008:	d010      	beq.n	800602c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	e007      	b.n	800602c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800

08006044 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10f      	bne.n	800607c <HAL_TIM_Base_Stop+0x38>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a1a      	ldr	r2, [r3, #32]
 8006062:	f240 4344 	movw	r3, #1092	@ 0x444
 8006066:	4013      	ands	r3, r2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <HAL_TIM_Base_Stop+0x38>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d001      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e03a      	b.n	800611e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <HAL_TIM_Base_Start_IT+0x98>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x58>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d2:	d009      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x58>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a14      	ldr	r2, [pc, #80]	@ (800612c <HAL_TIM_Base_Start_IT+0x9c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x58>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a13      	ldr	r2, [pc, #76]	@ (8006130 <HAL_TIM_Base_Start_IT+0xa0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d111      	bne.n	800610c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b06      	cmp	r3, #6
 80060f8:	d010      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610a:	e007      	b.n	800611c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800

08006134 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e041      	b.n	80061ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f839 	bl	80061d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f000 fd88 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2200      	movs	r2, #0
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 ff57 	bl	80070aa <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6a1a      	ldr	r2, [r3, #32]
 8006202:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10f      	bne.n	800622c <HAL_TIM_IC_Stop+0x48>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	f240 4344 	movw	r3, #1092	@ 0x444
 8006216:	4013      	ands	r3, r2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <HAL_TIM_IC_Stop+0x48>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_TIM_IC_Stop+0x58>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800623a:	e013      	b.n	8006264 <HAL_TIM_IC_Stop+0x80>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	d104      	bne.n	800624c <HAL_TIM_IC_Stop+0x68>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800624a:	e00b      	b.n	8006264 <HAL_TIM_IC_Stop+0x80>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b08      	cmp	r3, #8
 8006250:	d104      	bne.n	800625c <HAL_TIM_IC_Stop+0x78>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800625a:	e003      	b.n	8006264 <HAL_TIM_IC_Stop+0x80>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_TIM_IC_Stop+0x90>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006272:	e013      	b.n	800629c <HAL_TIM_IC_Stop+0xb8>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b04      	cmp	r3, #4
 8006278:	d104      	bne.n	8006284 <HAL_TIM_IC_Stop+0xa0>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006282:	e00b      	b.n	800629c <HAL_TIM_IC_Stop+0xb8>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b08      	cmp	r3, #8
 8006288:	d104      	bne.n	8006294 <HAL_TIM_IC_Stop+0xb0>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006292:	e003      	b.n	800629c <HAL_TIM_IC_Stop+0xb8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <HAL_TIM_IC_Start_DMA+0x22>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	e013      	b.n	80062f2 <HAL_TIM_IC_Start_DMA+0x4a>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d104      	bne.n	80062da <HAL_TIM_IC_Start_DMA+0x32>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e00b      	b.n	80062f2 <HAL_TIM_IC_Start_DMA+0x4a>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d104      	bne.n	80062ea <HAL_TIM_IC_Start_DMA+0x42>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	e003      	b.n	80062f2 <HAL_TIM_IC_Start_DMA+0x4a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_TIM_IC_Start_DMA+0x5c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e013      	b.n	800632c <HAL_TIM_IC_Start_DMA+0x84>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b04      	cmp	r3, #4
 8006308:	d104      	bne.n	8006314 <HAL_TIM_IC_Start_DMA+0x6c>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e00b      	b.n	800632c <HAL_TIM_IC_Start_DMA+0x84>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d104      	bne.n	8006324 <HAL_TIM_IC_Start_DMA+0x7c>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006320:	b2db      	uxtb	r3, r3
 8006322:	e003      	b.n	800632c <HAL_TIM_IC_Start_DMA+0x84>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800632a:	b2db      	uxtb	r3, r3
 800632c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800632e:	7dbb      	ldrb	r3, [r7, #22]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d002      	beq.n	800633a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006334:	7d7b      	ldrb	r3, [r7, #21]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d101      	bne.n	800633e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800633a:	2302      	movs	r3, #2
 800633c:	e132      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800633e:	7dbb      	ldrb	r3, [r7, #22]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d143      	bne.n	80063cc <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006344:	7d7b      	ldrb	r3, [r7, #21]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d140      	bne.n	80063cc <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_TIM_IC_Start_DMA+0xae>
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e124      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <HAL_TIM_IC_Start_DMA+0xc2>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006368:	e013      	b.n	8006392 <HAL_TIM_IC_Start_DMA+0xea>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b04      	cmp	r3, #4
 800636e:	d104      	bne.n	800637a <HAL_TIM_IC_Start_DMA+0xd2>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006378:	e00b      	b.n	8006392 <HAL_TIM_IC_Start_DMA+0xea>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d104      	bne.n	800638a <HAL_TIM_IC_Start_DMA+0xe2>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006388:	e003      	b.n	8006392 <HAL_TIM_IC_Start_DMA+0xea>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_IC_Start_DMA+0xfa>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 80063a0:	e016      	b.n	80063d0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_IC_Start_DMA+0x10a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 80063b0:	e00e      	b.n	80063d0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_IC_Start_DMA+0x11a>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80063c0:	e006      	b.n	80063d0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2202      	movs	r2, #2
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 80063ca:	e001      	b.n	80063d0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0e9      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2201      	movs	r2, #1
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fe66 	bl	80070aa <TIM_CCxChannelCmd>

  switch (Channel)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	f200 80ad 	bhi.w	8006540 <HAL_TIM_IC_Start_DMA+0x298>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <HAL_TIM_IC_Start_DMA+0x144>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006421 	.word	0x08006421
 80063f0:	08006541 	.word	0x08006541
 80063f4:	08006541 	.word	0x08006541
 80063f8:	08006541 	.word	0x08006541
 80063fc:	08006469 	.word	0x08006469
 8006400:	08006541 	.word	0x08006541
 8006404:	08006541 	.word	0x08006541
 8006408:	08006541 	.word	0x08006541
 800640c:	080064b1 	.word	0x080064b1
 8006410:	08006541 	.word	0x08006541
 8006414:	08006541 	.word	0x08006541
 8006418:	08006541 	.word	0x08006541
 800641c:	080064f9 	.word	0x080064f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	4a61      	ldr	r2, [pc, #388]	@ (80065ac <HAL_TIM_IC_Start_DMA+0x304>)
 8006426:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	4a60      	ldr	r2, [pc, #384]	@ (80065b0 <HAL_TIM_IC_Start_DMA+0x308>)
 800642e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006434:	4a5f      	ldr	r2, [pc, #380]	@ (80065b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3334      	adds	r3, #52	@ 0x34
 8006442:	4619      	mov	r1, r3
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	f7fc f92a 	bl	80026a0 <HAL_DMA_Start_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0a6      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006464:	60da      	str	r2, [r3, #12]
      break;
 8006466:	e06e      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646c:	4a4f      	ldr	r2, [pc, #316]	@ (80065ac <HAL_TIM_IC_Start_DMA+0x304>)
 800646e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	4a4e      	ldr	r2, [pc, #312]	@ (80065b0 <HAL_TIM_IC_Start_DMA+0x308>)
 8006476:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647c:	4a4d      	ldr	r2, [pc, #308]	@ (80065b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3338      	adds	r3, #56	@ 0x38
 800648a:	4619      	mov	r1, r3
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	887b      	ldrh	r3, [r7, #2]
 8006490:	f7fc f906 	bl	80026a0 <HAL_DMA_Start_IT>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e082      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064ac:	60da      	str	r2, [r3, #12]
      break;
 80064ae:	e04a      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	4a3d      	ldr	r2, [pc, #244]	@ (80065ac <HAL_TIM_IC_Start_DMA+0x304>)
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a3c      	ldr	r2, [pc, #240]	@ (80065b0 <HAL_TIM_IC_Start_DMA+0x308>)
 80064be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	4a3b      	ldr	r2, [pc, #236]	@ (80065b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	333c      	adds	r3, #60	@ 0x3c
 80064d2:	4619      	mov	r1, r3
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	887b      	ldrh	r3, [r7, #2]
 80064d8:	f7fc f8e2 	bl	80026a0 <HAL_DMA_Start_IT>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e05e      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064f4:	60da      	str	r2, [r3, #12]
      break;
 80064f6:	e026      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fc:	4a2b      	ldr	r2, [pc, #172]	@ (80065ac <HAL_TIM_IC_Start_DMA+0x304>)
 80064fe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	4a2a      	ldr	r2, [pc, #168]	@ (80065b0 <HAL_TIM_IC_Start_DMA+0x308>)
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650c:	4a29      	ldr	r2, [pc, #164]	@ (80065b4 <HAL_TIM_IC_Start_DMA+0x30c>)
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3340      	adds	r3, #64	@ 0x40
 800651a:	4619      	mov	r1, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	887b      	ldrh	r3, [r7, #2]
 8006520:	f7fc f8be 	bl	80026a0 <HAL_DMA_Start_IT>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e03a      	b.n	80065a4 <HAL_TIM_IC_Start_DMA+0x2fc>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800653c:	60da      	str	r2, [r3, #12]
      break;
 800653e:	e002      	b.n	8006546 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1b      	ldr	r2, [pc, #108]	@ (80065b8 <HAL_TIM_IC_Start_DMA+0x310>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00e      	beq.n	800656e <HAL_TIM_IC_Start_DMA+0x2c6>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006558:	d009      	beq.n	800656e <HAL_TIM_IC_Start_DMA+0x2c6>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a17      	ldr	r2, [pc, #92]	@ (80065bc <HAL_TIM_IC_Start_DMA+0x314>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_TIM_IC_Start_DMA+0x2c6>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <HAL_TIM_IC_Start_DMA+0x318>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d111      	bne.n	8006592 <HAL_TIM_IC_Start_DMA+0x2ea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b06      	cmp	r3, #6
 800657e:	d010      	beq.n	80065a2 <HAL_TIM_IC_Start_DMA+0x2fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	e007      	b.n	80065a2 <HAL_TIM_IC_Start_DMA+0x2fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0201 	orr.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	08006b57 	.word	0x08006b57
 80065b0:	08006c1f 	.word	0x08006c1f
 80065b4:	08006ac5 	.word	0x08006ac5
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800

080065c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d020      	beq.n	8006628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0202 	mvn.w	r2, #2
 80065f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fb fcfc 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa27 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa36 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d020      	beq.n	8006674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01b      	beq.n	8006674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0204 	mvn.w	r2, #4
 8006644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fb fcd6 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa01 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa10 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d020      	beq.n	80066c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0208 	mvn.w	r2, #8
 8006690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb fcb0 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9db 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f9ea 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01b      	beq.n	800670c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0210 	mvn.w	r2, #16
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2208      	movs	r2, #8
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fc8a 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f9b5 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f9c4 	bl	8006a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00c      	beq.n	8006730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0201 	mvn.w	r2, #1
 8006728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb fc4c 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00c      	beq.n	8006754 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800674c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fd37 	bl	80071c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00c      	beq.n	8006778 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f994 	bl	8006aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00c      	beq.n	800679c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0220 	mvn.w	r2, #32
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fd0a 	bl	80071b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80067be:	2302      	movs	r3, #2
 80067c0:	e088      	b.n	80068d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d11b      	bne.n	8006808 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80067e0:	f000 fac0 	bl	8006d64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 020c 	bic.w	r2, r2, #12
 80067f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6999      	ldr	r1, [r3, #24]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	619a      	str	r2, [r3, #24]
 8006806:	e060      	b.n	80068ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b04      	cmp	r3, #4
 800680c:	d11c      	bne.n	8006848 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800681e:	f000 fb29 	bl	8006e74 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006830:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6999      	ldr	r1, [r3, #24]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	021a      	lsls	r2, r3, #8
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	619a      	str	r2, [r3, #24]
 8006846:	e040      	b.n	80068ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b08      	cmp	r3, #8
 800684c:	d11b      	bne.n	8006886 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800685e:	f000 fb74 	bl	8006f4a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 020c 	bic.w	r2, r2, #12
 8006870:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69d9      	ldr	r1, [r3, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	61da      	str	r2, [r3, #28]
 8006884:	e021      	b.n	80068ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b0c      	cmp	r3, #12
 800688a:	d11c      	bne.n	80068c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800689c:	f000 fb90 	bl	8006fc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80068ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69d9      	ldr	r1, [r3, #28]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	021a      	lsls	r2, r3, #8
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	61da      	str	r2, [r3, #28]
 80068c4:	e001      	b.n	80068ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_ConfigClockSource+0x1c>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0b4      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x186>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800691e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006930:	d03e      	beq.n	80069b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006936:	f200 8087 	bhi.w	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800693e:	f000 8086 	beq.w	8006a4e <HAL_TIM_ConfigClockSource+0x172>
 8006942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006946:	d87f      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006948:	2b70      	cmp	r3, #112	@ 0x70
 800694a:	d01a      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xa6>
 800694c:	2b70      	cmp	r3, #112	@ 0x70
 800694e:	d87b      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006950:	2b60      	cmp	r3, #96	@ 0x60
 8006952:	d050      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006954:	2b60      	cmp	r3, #96	@ 0x60
 8006956:	d877      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b50      	cmp	r3, #80	@ 0x50
 800695a:	d03c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0xfa>
 800695c:	2b50      	cmp	r3, #80	@ 0x50
 800695e:	d873      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b40      	cmp	r3, #64	@ 0x40
 8006962:	d058      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x13a>
 8006964:	2b40      	cmp	r3, #64	@ 0x40
 8006966:	d86f      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b30      	cmp	r3, #48	@ 0x30
 800696a:	d064      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	2b30      	cmp	r3, #48	@ 0x30
 800696e:	d86b      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d060      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 8006974:	2b20      	cmp	r3, #32
 8006976:	d867      	bhi.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05c      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 800697c:	2b10      	cmp	r3, #16
 800697e:	d05a      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x15a>
 8006980:	e062      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006992:	f000 fb6b 	bl	800706c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
      break;
 80069ae:	e04f      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069c0:	f000 fb54 	bl	800706c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069d2:	609a      	str	r2, [r3, #8]
      break;
 80069d4:	e03c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 fa18 	bl	8006e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2150      	movs	r1, #80	@ 0x50
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fb22 	bl	8007038 <TIM_ITRx_SetConfig>
      break;
 80069f4:	e02c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a02:	461a      	mov	r2, r3
 8006a04:	f000 fa72 	bl	8006eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2160      	movs	r1, #96	@ 0x60
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fb12 	bl	8007038 <TIM_ITRx_SetConfig>
      break;
 8006a14:	e01c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 f9f8 	bl	8006e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2140      	movs	r1, #64	@ 0x40
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb02 	bl	8007038 <TIM_ITRx_SetConfig>
      break;
 8006a34:	e00c      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f000 faf9 	bl	8007038 <TIM_ITRx_SetConfig>
      break;
 8006a46:	e003      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4c:	e000      	b.n	8006a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d107      	bne.n	8006aec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aea:	e02a      	b.n	8006b42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d107      	bne.n	8006b06 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2202      	movs	r2, #2
 8006afa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b04:	e01d      	b.n	8006b42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d107      	bne.n	8006b20 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2204      	movs	r2, #4
 8006b14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b1e:	e010      	b.n	8006b42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d107      	bne.n	8006b3a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b38:	e003      	b.n	8006b42 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff ffb5 	bl	8006ab2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	771a      	strb	r2, [r3, #28]
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d10f      	bne.n	8006b8e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d146      	bne.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b8c:	e03d      	b.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d10f      	bne.n	8006bb8 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d131      	bne.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bb6:	e028      	b.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d10f      	bne.n	8006be2 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11c      	bne.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be0:	e013      	b.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d10e      	bne.n	8006c0a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2208      	movs	r2, #8
 8006bf0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d107      	bne.n	8006c0a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7fb f9fe 	bl	800200c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	771a      	strb	r2, [r3, #28]
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d103      	bne.n	8006c3e <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	771a      	strb	r2, [r3, #28]
 8006c3c:	e019      	b.n	8006c72 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d103      	bne.n	8006c50 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	771a      	strb	r2, [r3, #28]
 8006c4e:	e010      	b.n	8006c72 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d103      	bne.n	8006c62 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	771a      	strb	r2, [r3, #28]
 8006c60:	e007      	b.n	8006c72 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d102      	bne.n	8006c72 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2208      	movs	r2, #8
 8006c70:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff ff02 	bl	8006a7c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	771a      	strb	r2, [r3, #28]
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8006d58 <TIM_Base_SetConfig+0xd0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x30>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x30>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a2c      	ldr	r2, [pc, #176]	@ (8006d5c <TIM_Base_SetConfig+0xd4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x30>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d60 <TIM_Base_SetConfig+0xd8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a22      	ldr	r2, [pc, #136]	@ (8006d58 <TIM_Base_SetConfig+0xd0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00b      	beq.n	8006cea <TIM_Base_SetConfig+0x62>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd8:	d007      	beq.n	8006cea <TIM_Base_SetConfig+0x62>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <TIM_Base_SetConfig+0xd4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d003      	beq.n	8006cea <TIM_Base_SetConfig+0x62>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8006d60 <TIM_Base_SetConfig+0xd8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d108      	bne.n	8006cfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a0d      	ldr	r2, [pc, #52]	@ (8006d58 <TIM_Base_SetConfig+0xd0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d103      	bne.n	8006d30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	611a      	str	r2, [r3, #16]
  }
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800

08006d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f023 0201 	bic.w	r2, r3, #1
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e0c <TIM_TI1_SetConfig+0xa8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00b      	beq.n	8006daa <TIM_TI1_SetConfig+0x46>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d98:	d007      	beq.n	8006daa <TIM_TI1_SetConfig+0x46>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e10 <TIM_TI1_SetConfig+0xac>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_TI1_SetConfig+0x46>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e14 <TIM_TI1_SetConfig+0xb0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d101      	bne.n	8006dae <TIM_TI1_SetConfig+0x4a>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <TIM_TI1_SetConfig+0x4c>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e003      	b.n	8006dce <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f023 030a 	bic.w	r3, r3, #10
 8006de8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f003 030a 	and.w	r3, r3, #10
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800

08006e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f023 0201 	bic.w	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f023 030a 	bic.w	r3, r3, #10
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f023 0210 	bic.w	r2, r3, #16
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	031b      	lsls	r3, r3, #12
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0210 	bic.w	r2, r3, #16
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	031b      	lsls	r3, r3, #12
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	621a      	str	r2, [r3, #32]
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr

08006f4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b087      	sub	sp, #28
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f023 0303 	bic.w	r3, r3, #3
 8006f76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	021b      	lsls	r3, r3, #8
 8006fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bc80      	pop	{r7}
 8006fbe:	4770      	bx	lr

08006fc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	021b      	lsls	r3, r3, #8
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ffe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	031b      	lsls	r3, r3, #12
 8007004:	b29b      	uxth	r3, r3
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007012:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	031b      	lsls	r3, r3, #12
 8007018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	f043 0307 	orr.w	r3, r3, #7
 800705a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	609a      	str	r2, [r3, #8]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	021a      	lsls	r2, r3, #8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	431a      	orrs	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr

080070aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	2201      	movs	r2, #1
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a1a      	ldr	r2, [r3, #32]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	43db      	mvns	r3, r3
 80070cc:	401a      	ands	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	431a      	orrs	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
	...

080070f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007108:	2302      	movs	r3, #2
 800710a:	e046      	b.n	800719a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007158:	d009      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a12      	ldr	r2, [pc, #72]	@ (80071a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a10      	ldr	r2, [pc, #64]	@ (80071ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10c      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4313      	orrs	r3, r2
 800717e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800

080071b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr

080071c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <__cvt>:
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071da:	461d      	mov	r5, r3
 80071dc:	bfbb      	ittet	lt
 80071de:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80071e2:	461d      	movlt	r5, r3
 80071e4:	2300      	movge	r3, #0
 80071e6:	232d      	movlt	r3, #45	@ 0x2d
 80071e8:	b088      	sub	sp, #32
 80071ea:	4614      	mov	r4, r2
 80071ec:	bfb8      	it	lt
 80071ee:	4614      	movlt	r4, r2
 80071f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071f2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80071f4:	7013      	strb	r3, [r2, #0]
 80071f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80071fc:	f023 0820 	bic.w	r8, r3, #32
 8007200:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007204:	d005      	beq.n	8007212 <__cvt+0x3e>
 8007206:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800720a:	d100      	bne.n	800720e <__cvt+0x3a>
 800720c:	3601      	adds	r6, #1
 800720e:	2302      	movs	r3, #2
 8007210:	e000      	b.n	8007214 <__cvt+0x40>
 8007212:	2303      	movs	r3, #3
 8007214:	aa07      	add	r2, sp, #28
 8007216:	9204      	str	r2, [sp, #16]
 8007218:	aa06      	add	r2, sp, #24
 800721a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800721e:	e9cd 3600 	strd	r3, r6, [sp]
 8007222:	4622      	mov	r2, r4
 8007224:	462b      	mov	r3, r5
 8007226:	f000 fe6f 	bl	8007f08 <_dtoa_r>
 800722a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800722e:	4607      	mov	r7, r0
 8007230:	d119      	bne.n	8007266 <__cvt+0x92>
 8007232:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007234:	07db      	lsls	r3, r3, #31
 8007236:	d50e      	bpl.n	8007256 <__cvt+0x82>
 8007238:	eb00 0906 	add.w	r9, r0, r6
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	4620      	mov	r0, r4
 8007242:	4629      	mov	r1, r5
 8007244:	f7f9 fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8007248:	b108      	cbz	r0, 800724e <__cvt+0x7a>
 800724a:	f8cd 901c 	str.w	r9, [sp, #28]
 800724e:	2230      	movs	r2, #48	@ 0x30
 8007250:	9b07      	ldr	r3, [sp, #28]
 8007252:	454b      	cmp	r3, r9
 8007254:	d31e      	bcc.n	8007294 <__cvt+0xc0>
 8007256:	4638      	mov	r0, r7
 8007258:	9b07      	ldr	r3, [sp, #28]
 800725a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800725c:	1bdb      	subs	r3, r3, r7
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	b008      	add	sp, #32
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800726a:	eb00 0906 	add.w	r9, r0, r6
 800726e:	d1e5      	bne.n	800723c <__cvt+0x68>
 8007270:	7803      	ldrb	r3, [r0, #0]
 8007272:	2b30      	cmp	r3, #48	@ 0x30
 8007274:	d10a      	bne.n	800728c <__cvt+0xb8>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f7f9 fb93 	bl	80009a8 <__aeabi_dcmpeq>
 8007282:	b918      	cbnz	r0, 800728c <__cvt+0xb8>
 8007284:	f1c6 0601 	rsb	r6, r6, #1
 8007288:	f8ca 6000 	str.w	r6, [sl]
 800728c:	f8da 3000 	ldr.w	r3, [sl]
 8007290:	4499      	add	r9, r3
 8007292:	e7d3      	b.n	800723c <__cvt+0x68>
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	9107      	str	r1, [sp, #28]
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e7d9      	b.n	8007250 <__cvt+0x7c>

0800729c <__exponent>:
 800729c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729e:	2900      	cmp	r1, #0
 80072a0:	bfb6      	itet	lt
 80072a2:	232d      	movlt	r3, #45	@ 0x2d
 80072a4:	232b      	movge	r3, #43	@ 0x2b
 80072a6:	4249      	neglt	r1, r1
 80072a8:	2909      	cmp	r1, #9
 80072aa:	7002      	strb	r2, [r0, #0]
 80072ac:	7043      	strb	r3, [r0, #1]
 80072ae:	dd29      	ble.n	8007304 <__exponent+0x68>
 80072b0:	f10d 0307 	add.w	r3, sp, #7
 80072b4:	461d      	mov	r5, r3
 80072b6:	270a      	movs	r7, #10
 80072b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80072bc:	461a      	mov	r2, r3
 80072be:	fb07 1416 	mls	r4, r7, r6, r1
 80072c2:	3430      	adds	r4, #48	@ 0x30
 80072c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072c8:	460c      	mov	r4, r1
 80072ca:	2c63      	cmp	r4, #99	@ 0x63
 80072cc:	4631      	mov	r1, r6
 80072ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80072d2:	dcf1      	bgt.n	80072b8 <__exponent+0x1c>
 80072d4:	3130      	adds	r1, #48	@ 0x30
 80072d6:	1e94      	subs	r4, r2, #2
 80072d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072dc:	4623      	mov	r3, r4
 80072de:	1c41      	adds	r1, r0, #1
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	d30a      	bcc.n	80072fa <__exponent+0x5e>
 80072e4:	f10d 0309 	add.w	r3, sp, #9
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	42ac      	cmp	r4, r5
 80072ec:	bf88      	it	hi
 80072ee:	2300      	movhi	r3, #0
 80072f0:	3302      	adds	r3, #2
 80072f2:	4403      	add	r3, r0
 80072f4:	1a18      	subs	r0, r3, r0
 80072f6:	b003      	add	sp, #12
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007302:	e7ed      	b.n	80072e0 <__exponent+0x44>
 8007304:	2330      	movs	r3, #48	@ 0x30
 8007306:	3130      	adds	r1, #48	@ 0x30
 8007308:	7083      	strb	r3, [r0, #2]
 800730a:	70c1      	strb	r1, [r0, #3]
 800730c:	1d03      	adds	r3, r0, #4
 800730e:	e7f1      	b.n	80072f4 <__exponent+0x58>

08007310 <_printf_float>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	b091      	sub	sp, #68	@ 0x44
 8007316:	460c      	mov	r4, r1
 8007318:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800731c:	4616      	mov	r6, r2
 800731e:	461f      	mov	r7, r3
 8007320:	4605      	mov	r5, r0
 8007322:	f000 fce1 	bl	8007ce8 <_localeconv_r>
 8007326:	6803      	ldr	r3, [r0, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	f7f8 ff10 	bl	8000150 <strlen>
 8007330:	2300      	movs	r3, #0
 8007332:	930e      	str	r3, [sp, #56]	@ 0x38
 8007334:	f8d8 3000 	ldr.w	r3, [r8]
 8007338:	9009      	str	r0, [sp, #36]	@ 0x24
 800733a:	3307      	adds	r3, #7
 800733c:	f023 0307 	bic.w	r3, r3, #7
 8007340:	f103 0208 	add.w	r2, r3, #8
 8007344:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007348:	f8d4 b000 	ldr.w	fp, [r4]
 800734c:	f8c8 2000 	str.w	r2, [r8]
 8007350:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007354:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800735a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800735e:	f04f 32ff 	mov.w	r2, #4294967295
 8007362:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007366:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800736a:	4b9c      	ldr	r3, [pc, #624]	@ (80075dc <_printf_float+0x2cc>)
 800736c:	f7f9 fb4e 	bl	8000a0c <__aeabi_dcmpun>
 8007370:	bb70      	cbnz	r0, 80073d0 <_printf_float+0xc0>
 8007372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007376:	f04f 32ff 	mov.w	r2, #4294967295
 800737a:	4b98      	ldr	r3, [pc, #608]	@ (80075dc <_printf_float+0x2cc>)
 800737c:	f7f9 fb28 	bl	80009d0 <__aeabi_dcmple>
 8007380:	bb30      	cbnz	r0, 80073d0 <_printf_float+0xc0>
 8007382:	2200      	movs	r2, #0
 8007384:	2300      	movs	r3, #0
 8007386:	4640      	mov	r0, r8
 8007388:	4649      	mov	r1, r9
 800738a:	f7f9 fb17 	bl	80009bc <__aeabi_dcmplt>
 800738e:	b110      	cbz	r0, 8007396 <_printf_float+0x86>
 8007390:	232d      	movs	r3, #45	@ 0x2d
 8007392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007396:	4a92      	ldr	r2, [pc, #584]	@ (80075e0 <_printf_float+0x2d0>)
 8007398:	4b92      	ldr	r3, [pc, #584]	@ (80075e4 <_printf_float+0x2d4>)
 800739a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800739e:	bf8c      	ite	hi
 80073a0:	4690      	movhi	r8, r2
 80073a2:	4698      	movls	r8, r3
 80073a4:	2303      	movs	r3, #3
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	f02b 0304 	bic.w	r3, fp, #4
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	4633      	mov	r3, r6
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	9700      	str	r7, [sp, #0]
 80073ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80073bc:	f000 f9d4 	bl	8007768 <_printf_common>
 80073c0:	3001      	adds	r0, #1
 80073c2:	f040 8090 	bne.w	80074e6 <_printf_float+0x1d6>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	b011      	add	sp, #68	@ 0x44
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f9 fb18 	bl	8000a0c <__aeabi_dcmpun>
 80073dc:	b148      	cbz	r0, 80073f2 <_printf_float+0xe2>
 80073de:	464b      	mov	r3, r9
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfb8      	it	lt
 80073e4:	232d      	movlt	r3, #45	@ 0x2d
 80073e6:	4a80      	ldr	r2, [pc, #512]	@ (80075e8 <_printf_float+0x2d8>)
 80073e8:	bfb8      	it	lt
 80073ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073ee:	4b7f      	ldr	r3, [pc, #508]	@ (80075ec <_printf_float+0x2dc>)
 80073f0:	e7d3      	b.n	800739a <_printf_float+0x8a>
 80073f2:	6863      	ldr	r3, [r4, #4]
 80073f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	d13f      	bne.n	800747c <_printf_float+0x16c>
 80073fc:	2306      	movs	r3, #6
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	9206      	str	r2, [sp, #24]
 800740a:	aa0e      	add	r2, sp, #56	@ 0x38
 800740c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007410:	aa0d      	add	r2, sp, #52	@ 0x34
 8007412:	9203      	str	r2, [sp, #12]
 8007414:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007418:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	4642      	mov	r2, r8
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	4628      	mov	r0, r5
 8007424:	464b      	mov	r3, r9
 8007426:	910a      	str	r1, [sp, #40]	@ 0x28
 8007428:	f7ff fed4 	bl	80071d4 <__cvt>
 800742c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800742e:	4680      	mov	r8, r0
 8007430:	2947      	cmp	r1, #71	@ 0x47
 8007432:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007434:	d128      	bne.n	8007488 <_printf_float+0x178>
 8007436:	1cc8      	adds	r0, r1, #3
 8007438:	db02      	blt.n	8007440 <_printf_float+0x130>
 800743a:	6863      	ldr	r3, [r4, #4]
 800743c:	4299      	cmp	r1, r3
 800743e:	dd40      	ble.n	80074c2 <_printf_float+0x1b2>
 8007440:	f1aa 0a02 	sub.w	sl, sl, #2
 8007444:	fa5f fa8a 	uxtb.w	sl, sl
 8007448:	4652      	mov	r2, sl
 800744a:	3901      	subs	r1, #1
 800744c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007450:	910d      	str	r1, [sp, #52]	@ 0x34
 8007452:	f7ff ff23 	bl	800729c <__exponent>
 8007456:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007458:	4681      	mov	r9, r0
 800745a:	1813      	adds	r3, r2, r0
 800745c:	2a01      	cmp	r2, #1
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	dc02      	bgt.n	8007468 <_printf_float+0x158>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	07d2      	lsls	r2, r2, #31
 8007466:	d501      	bpl.n	800746c <_printf_float+0x15c>
 8007468:	3301      	adds	r3, #1
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007470:	2b00      	cmp	r3, #0
 8007472:	d09e      	beq.n	80073b2 <_printf_float+0xa2>
 8007474:	232d      	movs	r3, #45	@ 0x2d
 8007476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800747a:	e79a      	b.n	80073b2 <_printf_float+0xa2>
 800747c:	2947      	cmp	r1, #71	@ 0x47
 800747e:	d1bf      	bne.n	8007400 <_printf_float+0xf0>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1bd      	bne.n	8007400 <_printf_float+0xf0>
 8007484:	2301      	movs	r3, #1
 8007486:	e7ba      	b.n	80073fe <_printf_float+0xee>
 8007488:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800748c:	d9dc      	bls.n	8007448 <_printf_float+0x138>
 800748e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007492:	d118      	bne.n	80074c6 <_printf_float+0x1b6>
 8007494:	2900      	cmp	r1, #0
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	dd0b      	ble.n	80074b2 <_printf_float+0x1a2>
 800749a:	6121      	str	r1, [r4, #16]
 800749c:	b913      	cbnz	r3, 80074a4 <_printf_float+0x194>
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	07d0      	lsls	r0, r2, #31
 80074a2:	d502      	bpl.n	80074aa <_printf_float+0x19a>
 80074a4:	3301      	adds	r3, #1
 80074a6:	440b      	add	r3, r1
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074b0:	e7dc      	b.n	800746c <_printf_float+0x15c>
 80074b2:	b913      	cbnz	r3, 80074ba <_printf_float+0x1aa>
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	07d2      	lsls	r2, r2, #31
 80074b8:	d501      	bpl.n	80074be <_printf_float+0x1ae>
 80074ba:	3302      	adds	r3, #2
 80074bc:	e7f4      	b.n	80074a8 <_printf_float+0x198>
 80074be:	2301      	movs	r3, #1
 80074c0:	e7f2      	b.n	80074a8 <_printf_float+0x198>
 80074c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074c8:	4299      	cmp	r1, r3
 80074ca:	db05      	blt.n	80074d8 <_printf_float+0x1c8>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	6121      	str	r1, [r4, #16]
 80074d0:	07d8      	lsls	r0, r3, #31
 80074d2:	d5ea      	bpl.n	80074aa <_printf_float+0x19a>
 80074d4:	1c4b      	adds	r3, r1, #1
 80074d6:	e7e7      	b.n	80074a8 <_printf_float+0x198>
 80074d8:	2900      	cmp	r1, #0
 80074da:	bfcc      	ite	gt
 80074dc:	2201      	movgt	r2, #1
 80074de:	f1c1 0202 	rsble	r2, r1, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	e7e0      	b.n	80074a8 <_printf_float+0x198>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	055a      	lsls	r2, r3, #21
 80074ea:	d407      	bmi.n	80074fc <_printf_float+0x1ec>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	4642      	mov	r2, r8
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	d12b      	bne.n	8007552 <_printf_float+0x242>
 80074fa:	e764      	b.n	80073c6 <_printf_float+0xb6>
 80074fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007500:	f240 80dc 	bls.w	80076bc <_printf_float+0x3ac>
 8007504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007508:	2200      	movs	r2, #0
 800750a:	2300      	movs	r3, #0
 800750c:	f7f9 fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 8007510:	2800      	cmp	r0, #0
 8007512:	d033      	beq.n	800757c <_printf_float+0x26c>
 8007514:	2301      	movs	r3, #1
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	4a35      	ldr	r2, [pc, #212]	@ (80075f0 <_printf_float+0x2e0>)
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	f43f af51 	beq.w	80073c6 <_printf_float+0xb6>
 8007524:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007528:	4543      	cmp	r3, r8
 800752a:	db02      	blt.n	8007532 <_printf_float+0x222>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	07d8      	lsls	r0, r3, #31
 8007530:	d50f      	bpl.n	8007552 <_printf_float+0x242>
 8007532:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	f43f af42 	beq.w	80073c6 <_printf_float+0xb6>
 8007542:	f04f 0900 	mov.w	r9, #0
 8007546:	f108 38ff 	add.w	r8, r8, #4294967295
 800754a:	f104 0a1a 	add.w	sl, r4, #26
 800754e:	45c8      	cmp	r8, r9
 8007550:	dc09      	bgt.n	8007566 <_printf_float+0x256>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	079b      	lsls	r3, r3, #30
 8007556:	f100 8102 	bmi.w	800775e <_printf_float+0x44e>
 800755a:	68e0      	ldr	r0, [r4, #12]
 800755c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800755e:	4298      	cmp	r0, r3
 8007560:	bfb8      	it	lt
 8007562:	4618      	movlt	r0, r3
 8007564:	e731      	b.n	80073ca <_printf_float+0xba>
 8007566:	2301      	movs	r3, #1
 8007568:	4652      	mov	r2, sl
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	f43f af28 	beq.w	80073c6 <_printf_float+0xb6>
 8007576:	f109 0901 	add.w	r9, r9, #1
 800757a:	e7e8      	b.n	800754e <_printf_float+0x23e>
 800757c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800757e:	2b00      	cmp	r3, #0
 8007580:	dc38      	bgt.n	80075f4 <_printf_float+0x2e4>
 8007582:	2301      	movs	r3, #1
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	4a19      	ldr	r2, [pc, #100]	@ (80075f0 <_printf_float+0x2e0>)
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	f43f af1a 	beq.w	80073c6 <_printf_float+0xb6>
 8007592:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007596:	ea59 0303 	orrs.w	r3, r9, r3
 800759a:	d102      	bne.n	80075a2 <_printf_float+0x292>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	07d9      	lsls	r1, r3, #31
 80075a0:	d5d7      	bpl.n	8007552 <_printf_float+0x242>
 80075a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f af0a 	beq.w	80073c6 <_printf_float+0xb6>
 80075b2:	f04f 0a00 	mov.w	sl, #0
 80075b6:	f104 0b1a 	add.w	fp, r4, #26
 80075ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075bc:	425b      	negs	r3, r3
 80075be:	4553      	cmp	r3, sl
 80075c0:	dc01      	bgt.n	80075c6 <_printf_float+0x2b6>
 80075c2:	464b      	mov	r3, r9
 80075c4:	e793      	b.n	80074ee <_printf_float+0x1de>
 80075c6:	2301      	movs	r3, #1
 80075c8:	465a      	mov	r2, fp
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f aef8 	beq.w	80073c6 <_printf_float+0xb6>
 80075d6:	f10a 0a01 	add.w	sl, sl, #1
 80075da:	e7ee      	b.n	80075ba <_printf_float+0x2aa>
 80075dc:	7fefffff 	.word	0x7fefffff
 80075e0:	0800b3ca 	.word	0x0800b3ca
 80075e4:	0800b3c6 	.word	0x0800b3c6
 80075e8:	0800b3d2 	.word	0x0800b3d2
 80075ec:	0800b3ce 	.word	0x0800b3ce
 80075f0:	0800b3d6 	.word	0x0800b3d6
 80075f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80075fa:	4553      	cmp	r3, sl
 80075fc:	bfa8      	it	ge
 80075fe:	4653      	movge	r3, sl
 8007600:	2b00      	cmp	r3, #0
 8007602:	4699      	mov	r9, r3
 8007604:	dc36      	bgt.n	8007674 <_printf_float+0x364>
 8007606:	f04f 0b00 	mov.w	fp, #0
 800760a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760e:	f104 021a 	add.w	r2, r4, #26
 8007612:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007614:	930a      	str	r3, [sp, #40]	@ 0x28
 8007616:	eba3 0309 	sub.w	r3, r3, r9
 800761a:	455b      	cmp	r3, fp
 800761c:	dc31      	bgt.n	8007682 <_printf_float+0x372>
 800761e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007620:	459a      	cmp	sl, r3
 8007622:	dc3a      	bgt.n	800769a <_printf_float+0x38a>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d437      	bmi.n	800769a <_printf_float+0x38a>
 800762a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800762c:	ebaa 0903 	sub.w	r9, sl, r3
 8007630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007632:	ebaa 0303 	sub.w	r3, sl, r3
 8007636:	4599      	cmp	r9, r3
 8007638:	bfa8      	it	ge
 800763a:	4699      	movge	r9, r3
 800763c:	f1b9 0f00 	cmp.w	r9, #0
 8007640:	dc33      	bgt.n	80076aa <_printf_float+0x39a>
 8007642:	f04f 0800 	mov.w	r8, #0
 8007646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800764a:	f104 0b1a 	add.w	fp, r4, #26
 800764e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007650:	ebaa 0303 	sub.w	r3, sl, r3
 8007654:	eba3 0309 	sub.w	r3, r3, r9
 8007658:	4543      	cmp	r3, r8
 800765a:	f77f af7a 	ble.w	8007552 <_printf_float+0x242>
 800765e:	2301      	movs	r3, #1
 8007660:	465a      	mov	r2, fp
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	f43f aeac 	beq.w	80073c6 <_printf_float+0xb6>
 800766e:	f108 0801 	add.w	r8, r8, #1
 8007672:	e7ec      	b.n	800764e <_printf_float+0x33e>
 8007674:	4642      	mov	r2, r8
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	47b8      	blx	r7
 800767c:	3001      	adds	r0, #1
 800767e:	d1c2      	bne.n	8007606 <_printf_float+0x2f6>
 8007680:	e6a1      	b.n	80073c6 <_printf_float+0xb6>
 8007682:	2301      	movs	r3, #1
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	920a      	str	r2, [sp, #40]	@ 0x28
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f ae9a 	beq.w	80073c6 <_printf_float+0xb6>
 8007692:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007694:	f10b 0b01 	add.w	fp, fp, #1
 8007698:	e7bb      	b.n	8007612 <_printf_float+0x302>
 800769a:	4631      	mov	r1, r6
 800769c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	d1c0      	bne.n	800762a <_printf_float+0x31a>
 80076a8:	e68d      	b.n	80073c6 <_printf_float+0xb6>
 80076aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076ac:	464b      	mov	r3, r9
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	4442      	add	r2, r8
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	d1c3      	bne.n	8007642 <_printf_float+0x332>
 80076ba:	e684      	b.n	80073c6 <_printf_float+0xb6>
 80076bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80076c0:	f1ba 0f01 	cmp.w	sl, #1
 80076c4:	dc01      	bgt.n	80076ca <_printf_float+0x3ba>
 80076c6:	07db      	lsls	r3, r3, #31
 80076c8:	d536      	bpl.n	8007738 <_printf_float+0x428>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f ae76 	beq.w	80073c6 <_printf_float+0xb6>
 80076da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae6e 	beq.w	80073c6 <_printf_float+0xb6>
 80076ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076f6:	f7f9 f957 	bl	80009a8 <__aeabi_dcmpeq>
 80076fa:	b9c0      	cbnz	r0, 800772e <_printf_float+0x41e>
 80076fc:	4653      	mov	r3, sl
 80076fe:	f108 0201 	add.w	r2, r8, #1
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	d10c      	bne.n	8007726 <_printf_float+0x416>
 800770c:	e65b      	b.n	80073c6 <_printf_float+0xb6>
 800770e:	2301      	movs	r3, #1
 8007710:	465a      	mov	r2, fp
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f ae54 	beq.w	80073c6 <_printf_float+0xb6>
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	45d0      	cmp	r8, sl
 8007724:	dbf3      	blt.n	800770e <_printf_float+0x3fe>
 8007726:	464b      	mov	r3, r9
 8007728:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800772c:	e6e0      	b.n	80074f0 <_printf_float+0x1e0>
 800772e:	f04f 0800 	mov.w	r8, #0
 8007732:	f104 0b1a 	add.w	fp, r4, #26
 8007736:	e7f4      	b.n	8007722 <_printf_float+0x412>
 8007738:	2301      	movs	r3, #1
 800773a:	4642      	mov	r2, r8
 800773c:	e7e1      	b.n	8007702 <_printf_float+0x3f2>
 800773e:	2301      	movs	r3, #1
 8007740:	464a      	mov	r2, r9
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	f43f ae3c 	beq.w	80073c6 <_printf_float+0xb6>
 800774e:	f108 0801 	add.w	r8, r8, #1
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007756:	1a5b      	subs	r3, r3, r1
 8007758:	4543      	cmp	r3, r8
 800775a:	dcf0      	bgt.n	800773e <_printf_float+0x42e>
 800775c:	e6fd      	b.n	800755a <_printf_float+0x24a>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	f104 0919 	add.w	r9, r4, #25
 8007766:	e7f4      	b.n	8007752 <_printf_float+0x442>

08007768 <_printf_common>:
 8007768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	4616      	mov	r6, r2
 800776e:	4698      	mov	r8, r3
 8007770:	688a      	ldr	r2, [r1, #8]
 8007772:	690b      	ldr	r3, [r1, #16]
 8007774:	4607      	mov	r7, r0
 8007776:	4293      	cmp	r3, r2
 8007778:	bfb8      	it	lt
 800777a:	4613      	movlt	r3, r2
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007782:	460c      	mov	r4, r1
 8007784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007788:	b10a      	cbz	r2, 800778e <_printf_common+0x26>
 800778a:	3301      	adds	r3, #1
 800778c:	6033      	str	r3, [r6, #0]
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	0699      	lsls	r1, r3, #26
 8007792:	bf42      	ittt	mi
 8007794:	6833      	ldrmi	r3, [r6, #0]
 8007796:	3302      	addmi	r3, #2
 8007798:	6033      	strmi	r3, [r6, #0]
 800779a:	6825      	ldr	r5, [r4, #0]
 800779c:	f015 0506 	ands.w	r5, r5, #6
 80077a0:	d106      	bne.n	80077b0 <_printf_common+0x48>
 80077a2:	f104 0a19 	add.w	sl, r4, #25
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	6832      	ldr	r2, [r6, #0]
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	42ab      	cmp	r3, r5
 80077ae:	dc2b      	bgt.n	8007808 <_printf_common+0xa0>
 80077b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	3b00      	subs	r3, #0
 80077b8:	bf18      	it	ne
 80077ba:	2301      	movne	r3, #1
 80077bc:	0692      	lsls	r2, r2, #26
 80077be:	d430      	bmi.n	8007822 <_printf_common+0xba>
 80077c0:	4641      	mov	r1, r8
 80077c2:	4638      	mov	r0, r7
 80077c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077c8:	47c8      	blx	r9
 80077ca:	3001      	adds	r0, #1
 80077cc:	d023      	beq.n	8007816 <_printf_common+0xae>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	6922      	ldr	r2, [r4, #16]
 80077d2:	f003 0306 	and.w	r3, r3, #6
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	bf14      	ite	ne
 80077da:	2500      	movne	r5, #0
 80077dc:	6833      	ldreq	r3, [r6, #0]
 80077de:	f04f 0600 	mov.w	r6, #0
 80077e2:	bf08      	it	eq
 80077e4:	68e5      	ldreq	r5, [r4, #12]
 80077e6:	f104 041a 	add.w	r4, r4, #26
 80077ea:	bf08      	it	eq
 80077ec:	1aed      	subeq	r5, r5, r3
 80077ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80077f2:	bf08      	it	eq
 80077f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f8:	4293      	cmp	r3, r2
 80077fa:	bfc4      	itt	gt
 80077fc:	1a9b      	subgt	r3, r3, r2
 80077fe:	18ed      	addgt	r5, r5, r3
 8007800:	42b5      	cmp	r5, r6
 8007802:	d11a      	bne.n	800783a <_printf_common+0xd2>
 8007804:	2000      	movs	r0, #0
 8007806:	e008      	b.n	800781a <_printf_common+0xb2>
 8007808:	2301      	movs	r3, #1
 800780a:	4652      	mov	r2, sl
 800780c:	4641      	mov	r1, r8
 800780e:	4638      	mov	r0, r7
 8007810:	47c8      	blx	r9
 8007812:	3001      	adds	r0, #1
 8007814:	d103      	bne.n	800781e <_printf_common+0xb6>
 8007816:	f04f 30ff 	mov.w	r0, #4294967295
 800781a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781e:	3501      	adds	r5, #1
 8007820:	e7c1      	b.n	80077a6 <_printf_common+0x3e>
 8007822:	2030      	movs	r0, #48	@ 0x30
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007830:	4422      	add	r2, r4
 8007832:	3302      	adds	r3, #2
 8007834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007838:	e7c2      	b.n	80077c0 <_printf_common+0x58>
 800783a:	2301      	movs	r3, #1
 800783c:	4622      	mov	r2, r4
 800783e:	4641      	mov	r1, r8
 8007840:	4638      	mov	r0, r7
 8007842:	47c8      	blx	r9
 8007844:	3001      	adds	r0, #1
 8007846:	d0e6      	beq.n	8007816 <_printf_common+0xae>
 8007848:	3601      	adds	r6, #1
 800784a:	e7d9      	b.n	8007800 <_printf_common+0x98>

0800784c <_printf_i>:
 800784c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	7e0f      	ldrb	r7, [r1, #24]
 8007852:	4691      	mov	r9, r2
 8007854:	2f78      	cmp	r7, #120	@ 0x78
 8007856:	4680      	mov	r8, r0
 8007858:	460c      	mov	r4, r1
 800785a:	469a      	mov	sl, r3
 800785c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800785e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007862:	d807      	bhi.n	8007874 <_printf_i+0x28>
 8007864:	2f62      	cmp	r7, #98	@ 0x62
 8007866:	d80a      	bhi.n	800787e <_printf_i+0x32>
 8007868:	2f00      	cmp	r7, #0
 800786a:	f000 80d1 	beq.w	8007a10 <_printf_i+0x1c4>
 800786e:	2f58      	cmp	r7, #88	@ 0x58
 8007870:	f000 80b8 	beq.w	80079e4 <_printf_i+0x198>
 8007874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800787c:	e03a      	b.n	80078f4 <_printf_i+0xa8>
 800787e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007882:	2b15      	cmp	r3, #21
 8007884:	d8f6      	bhi.n	8007874 <_printf_i+0x28>
 8007886:	a101      	add	r1, pc, #4	@ (adr r1, 800788c <_printf_i+0x40>)
 8007888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800788c:	080078e5 	.word	0x080078e5
 8007890:	080078f9 	.word	0x080078f9
 8007894:	08007875 	.word	0x08007875
 8007898:	08007875 	.word	0x08007875
 800789c:	08007875 	.word	0x08007875
 80078a0:	08007875 	.word	0x08007875
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	08007875 	.word	0x08007875
 80078ac:	08007875 	.word	0x08007875
 80078b0:	08007875 	.word	0x08007875
 80078b4:	08007875 	.word	0x08007875
 80078b8:	080079f7 	.word	0x080079f7
 80078bc:	08007923 	.word	0x08007923
 80078c0:	080079b1 	.word	0x080079b1
 80078c4:	08007875 	.word	0x08007875
 80078c8:	08007875 	.word	0x08007875
 80078cc:	08007a19 	.word	0x08007a19
 80078d0:	08007875 	.word	0x08007875
 80078d4:	08007923 	.word	0x08007923
 80078d8:	08007875 	.word	0x08007875
 80078dc:	08007875 	.word	0x08007875
 80078e0:	080079b9 	.word	0x080079b9
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6032      	str	r2, [r6, #0]
 80078ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f4:	2301      	movs	r3, #1
 80078f6:	e09c      	b.n	8007a32 <_printf_i+0x1e6>
 80078f8:	6833      	ldr	r3, [r6, #0]
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	6031      	str	r1, [r6, #0]
 8007900:	0606      	lsls	r6, r0, #24
 8007902:	d501      	bpl.n	8007908 <_printf_i+0xbc>
 8007904:	681d      	ldr	r5, [r3, #0]
 8007906:	e003      	b.n	8007910 <_printf_i+0xc4>
 8007908:	0645      	lsls	r5, r0, #25
 800790a:	d5fb      	bpl.n	8007904 <_printf_i+0xb8>
 800790c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007910:	2d00      	cmp	r5, #0
 8007912:	da03      	bge.n	800791c <_printf_i+0xd0>
 8007914:	232d      	movs	r3, #45	@ 0x2d
 8007916:	426d      	negs	r5, r5
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800791c:	230a      	movs	r3, #10
 800791e:	4858      	ldr	r0, [pc, #352]	@ (8007a80 <_printf_i+0x234>)
 8007920:	e011      	b.n	8007946 <_printf_i+0xfa>
 8007922:	6821      	ldr	r1, [r4, #0]
 8007924:	6833      	ldr	r3, [r6, #0]
 8007926:	0608      	lsls	r0, r1, #24
 8007928:	f853 5b04 	ldr.w	r5, [r3], #4
 800792c:	d402      	bmi.n	8007934 <_printf_i+0xe8>
 800792e:	0649      	lsls	r1, r1, #25
 8007930:	bf48      	it	mi
 8007932:	b2ad      	uxthmi	r5, r5
 8007934:	2f6f      	cmp	r7, #111	@ 0x6f
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	bf14      	ite	ne
 800793a:	230a      	movne	r3, #10
 800793c:	2308      	moveq	r3, #8
 800793e:	4850      	ldr	r0, [pc, #320]	@ (8007a80 <_printf_i+0x234>)
 8007940:	2100      	movs	r1, #0
 8007942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007946:	6866      	ldr	r6, [r4, #4]
 8007948:	2e00      	cmp	r6, #0
 800794a:	60a6      	str	r6, [r4, #8]
 800794c:	db05      	blt.n	800795a <_printf_i+0x10e>
 800794e:	6821      	ldr	r1, [r4, #0]
 8007950:	432e      	orrs	r6, r5
 8007952:	f021 0104 	bic.w	r1, r1, #4
 8007956:	6021      	str	r1, [r4, #0]
 8007958:	d04b      	beq.n	80079f2 <_printf_i+0x1a6>
 800795a:	4616      	mov	r6, r2
 800795c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007960:	fb03 5711 	mls	r7, r3, r1, r5
 8007964:	5dc7      	ldrb	r7, [r0, r7]
 8007966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800796a:	462f      	mov	r7, r5
 800796c:	42bb      	cmp	r3, r7
 800796e:	460d      	mov	r5, r1
 8007970:	d9f4      	bls.n	800795c <_printf_i+0x110>
 8007972:	2b08      	cmp	r3, #8
 8007974:	d10b      	bne.n	800798e <_printf_i+0x142>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	07df      	lsls	r7, r3, #31
 800797a:	d508      	bpl.n	800798e <_printf_i+0x142>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	6861      	ldr	r1, [r4, #4]
 8007980:	4299      	cmp	r1, r3
 8007982:	bfde      	ittt	le
 8007984:	2330      	movle	r3, #48	@ 0x30
 8007986:	f806 3c01 	strble.w	r3, [r6, #-1]
 800798a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800798e:	1b92      	subs	r2, r2, r6
 8007990:	6122      	str	r2, [r4, #16]
 8007992:	464b      	mov	r3, r9
 8007994:	4621      	mov	r1, r4
 8007996:	4640      	mov	r0, r8
 8007998:	f8cd a000 	str.w	sl, [sp]
 800799c:	aa03      	add	r2, sp, #12
 800799e:	f7ff fee3 	bl	8007768 <_printf_common>
 80079a2:	3001      	adds	r0, #1
 80079a4:	d14a      	bne.n	8007a3c <_printf_i+0x1f0>
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	b004      	add	sp, #16
 80079ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	f043 0320 	orr.w	r3, r3, #32
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	2778      	movs	r7, #120	@ 0x78
 80079ba:	4832      	ldr	r0, [pc, #200]	@ (8007a84 <_printf_i+0x238>)
 80079bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	061f      	lsls	r7, r3, #24
 80079c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ca:	d402      	bmi.n	80079d2 <_printf_i+0x186>
 80079cc:	065f      	lsls	r7, r3, #25
 80079ce:	bf48      	it	mi
 80079d0:	b2ad      	uxthmi	r5, r5
 80079d2:	6031      	str	r1, [r6, #0]
 80079d4:	07d9      	lsls	r1, r3, #31
 80079d6:	bf44      	itt	mi
 80079d8:	f043 0320 	orrmi.w	r3, r3, #32
 80079dc:	6023      	strmi	r3, [r4, #0]
 80079de:	b11d      	cbz	r5, 80079e8 <_printf_i+0x19c>
 80079e0:	2310      	movs	r3, #16
 80079e2:	e7ad      	b.n	8007940 <_printf_i+0xf4>
 80079e4:	4826      	ldr	r0, [pc, #152]	@ (8007a80 <_printf_i+0x234>)
 80079e6:	e7e9      	b.n	80079bc <_printf_i+0x170>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	f023 0320 	bic.w	r3, r3, #32
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	e7f6      	b.n	80079e0 <_printf_i+0x194>
 80079f2:	4616      	mov	r6, r2
 80079f4:	e7bd      	b.n	8007972 <_printf_i+0x126>
 80079f6:	6833      	ldr	r3, [r6, #0]
 80079f8:	6825      	ldr	r5, [r4, #0]
 80079fa:	1d18      	adds	r0, r3, #4
 80079fc:	6961      	ldr	r1, [r4, #20]
 80079fe:	6030      	str	r0, [r6, #0]
 8007a00:	062e      	lsls	r6, r5, #24
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	d501      	bpl.n	8007a0a <_printf_i+0x1be>
 8007a06:	6019      	str	r1, [r3, #0]
 8007a08:	e002      	b.n	8007a10 <_printf_i+0x1c4>
 8007a0a:	0668      	lsls	r0, r5, #25
 8007a0c:	d5fb      	bpl.n	8007a06 <_printf_i+0x1ba>
 8007a0e:	8019      	strh	r1, [r3, #0]
 8007a10:	2300      	movs	r3, #0
 8007a12:	4616      	mov	r6, r2
 8007a14:	6123      	str	r3, [r4, #16]
 8007a16:	e7bc      	b.n	8007992 <_printf_i+0x146>
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	1d1a      	adds	r2, r3, #4
 8007a1e:	6032      	str	r2, [r6, #0]
 8007a20:	681e      	ldr	r6, [r3, #0]
 8007a22:	6862      	ldr	r2, [r4, #4]
 8007a24:	4630      	mov	r0, r6
 8007a26:	f000 f9d6 	bl	8007dd6 <memchr>
 8007a2a:	b108      	cbz	r0, 8007a30 <_printf_i+0x1e4>
 8007a2c:	1b80      	subs	r0, r0, r6
 8007a2e:	6060      	str	r0, [r4, #4]
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	2300      	movs	r3, #0
 8007a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3a:	e7aa      	b.n	8007992 <_printf_i+0x146>
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	4649      	mov	r1, r9
 8007a40:	4640      	mov	r0, r8
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	47d0      	blx	sl
 8007a46:	3001      	adds	r0, #1
 8007a48:	d0ad      	beq.n	80079a6 <_printf_i+0x15a>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	079b      	lsls	r3, r3, #30
 8007a4e:	d413      	bmi.n	8007a78 <_printf_i+0x22c>
 8007a50:	68e0      	ldr	r0, [r4, #12]
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	4298      	cmp	r0, r3
 8007a56:	bfb8      	it	lt
 8007a58:	4618      	movlt	r0, r3
 8007a5a:	e7a6      	b.n	80079aa <_printf_i+0x15e>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4649      	mov	r1, r9
 8007a62:	4640      	mov	r0, r8
 8007a64:	47d0      	blx	sl
 8007a66:	3001      	adds	r0, #1
 8007a68:	d09d      	beq.n	80079a6 <_printf_i+0x15a>
 8007a6a:	3501      	adds	r5, #1
 8007a6c:	68e3      	ldr	r3, [r4, #12]
 8007a6e:	9903      	ldr	r1, [sp, #12]
 8007a70:	1a5b      	subs	r3, r3, r1
 8007a72:	42ab      	cmp	r3, r5
 8007a74:	dcf2      	bgt.n	8007a5c <_printf_i+0x210>
 8007a76:	e7eb      	b.n	8007a50 <_printf_i+0x204>
 8007a78:	2500      	movs	r5, #0
 8007a7a:	f104 0619 	add.w	r6, r4, #25
 8007a7e:	e7f5      	b.n	8007a6c <_printf_i+0x220>
 8007a80:	0800b3d8 	.word	0x0800b3d8
 8007a84:	0800b3e9 	.word	0x0800b3e9

08007a88 <std>:
 8007a88:	2300      	movs	r3, #0
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a96:	6083      	str	r3, [r0, #8]
 8007a98:	8181      	strh	r1, [r0, #12]
 8007a9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a9c:	81c2      	strh	r2, [r0, #14]
 8007a9e:	6183      	str	r3, [r0, #24]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	305c      	adds	r0, #92	@ 0x5c
 8007aa6:	f000 f916 	bl	8007cd6 <memset>
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <std+0x58>)
 8007aac:	6224      	str	r4, [r4, #32]
 8007aae:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae4 <std+0x5c>)
 8007ab2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <std+0x60>)
 8007ab6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8007aec <std+0x64>)
 8007aba:	6323      	str	r3, [r4, #48]	@ 0x30
 8007abc:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <std+0x68>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d006      	beq.n	8007ad0 <std+0x48>
 8007ac2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ac6:	4294      	cmp	r4, r2
 8007ac8:	d002      	beq.n	8007ad0 <std+0x48>
 8007aca:	33d0      	adds	r3, #208	@ 0xd0
 8007acc:	429c      	cmp	r4, r3
 8007ace:	d105      	bne.n	8007adc <std+0x54>
 8007ad0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad8:	f000 b97a 	b.w	8007dd0 <__retarget_lock_init_recursive>
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	08007c51 	.word	0x08007c51
 8007ae4:	08007c73 	.word	0x08007c73
 8007ae8:	08007cab 	.word	0x08007cab
 8007aec:	08007ccf 	.word	0x08007ccf
 8007af0:	20000808 	.word	0x20000808

08007af4 <stdio_exit_handler>:
 8007af4:	4a02      	ldr	r2, [pc, #8]	@ (8007b00 <stdio_exit_handler+0xc>)
 8007af6:	4903      	ldr	r1, [pc, #12]	@ (8007b04 <stdio_exit_handler+0x10>)
 8007af8:	4803      	ldr	r0, [pc, #12]	@ (8007b08 <stdio_exit_handler+0x14>)
 8007afa:	f000 b869 	b.w	8007bd0 <_fwalk_sglue>
 8007afe:	bf00      	nop
 8007b00:	2000001c 	.word	0x2000001c
 8007b04:	08009751 	.word	0x08009751
 8007b08:	2000002c 	.word	0x2000002c

08007b0c <cleanup_stdio>:
 8007b0c:	6841      	ldr	r1, [r0, #4]
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b40 <cleanup_stdio+0x34>)
 8007b10:	b510      	push	{r4, lr}
 8007b12:	4299      	cmp	r1, r3
 8007b14:	4604      	mov	r4, r0
 8007b16:	d001      	beq.n	8007b1c <cleanup_stdio+0x10>
 8007b18:	f001 fe1a 	bl	8009750 <_fflush_r>
 8007b1c:	68a1      	ldr	r1, [r4, #8]
 8007b1e:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <cleanup_stdio+0x38>)
 8007b20:	4299      	cmp	r1, r3
 8007b22:	d002      	beq.n	8007b2a <cleanup_stdio+0x1e>
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 fe13 	bl	8009750 <_fflush_r>
 8007b2a:	68e1      	ldr	r1, [r4, #12]
 8007b2c:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <cleanup_stdio+0x3c>)
 8007b2e:	4299      	cmp	r1, r3
 8007b30:	d004      	beq.n	8007b3c <cleanup_stdio+0x30>
 8007b32:	4620      	mov	r0, r4
 8007b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b38:	f001 be0a 	b.w	8009750 <_fflush_r>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000808 	.word	0x20000808
 8007b44:	20000870 	.word	0x20000870
 8007b48:	200008d8 	.word	0x200008d8

08007b4c <global_stdio_init.part.0>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b7c <global_stdio_init.part.0+0x30>)
 8007b50:	4c0b      	ldr	r4, [pc, #44]	@ (8007b80 <global_stdio_init.part.0+0x34>)
 8007b52:	4a0c      	ldr	r2, [pc, #48]	@ (8007b84 <global_stdio_init.part.0+0x38>)
 8007b54:	4620      	mov	r0, r4
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	2104      	movs	r1, #4
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f7ff ff94 	bl	8007a88 <std>
 8007b60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b64:	2201      	movs	r2, #1
 8007b66:	2109      	movs	r1, #9
 8007b68:	f7ff ff8e 	bl	8007a88 <std>
 8007b6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b70:	2202      	movs	r2, #2
 8007b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b76:	2112      	movs	r1, #18
 8007b78:	f7ff bf86 	b.w	8007a88 <std>
 8007b7c:	20000940 	.word	0x20000940
 8007b80:	20000808 	.word	0x20000808
 8007b84:	08007af5 	.word	0x08007af5

08007b88 <__sfp_lock_acquire>:
 8007b88:	4801      	ldr	r0, [pc, #4]	@ (8007b90 <__sfp_lock_acquire+0x8>)
 8007b8a:	f000 b922 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8007b8e:	bf00      	nop
 8007b90:	20000949 	.word	0x20000949

08007b94 <__sfp_lock_release>:
 8007b94:	4801      	ldr	r0, [pc, #4]	@ (8007b9c <__sfp_lock_release+0x8>)
 8007b96:	f000 b91d 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	20000949 	.word	0x20000949

08007ba0 <__sinit>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f7ff fff0 	bl	8007b88 <__sfp_lock_acquire>
 8007ba8:	6a23      	ldr	r3, [r4, #32]
 8007baa:	b11b      	cbz	r3, 8007bb4 <__sinit+0x14>
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f7ff bff0 	b.w	8007b94 <__sfp_lock_release>
 8007bb4:	4b04      	ldr	r3, [pc, #16]	@ (8007bc8 <__sinit+0x28>)
 8007bb6:	6223      	str	r3, [r4, #32]
 8007bb8:	4b04      	ldr	r3, [pc, #16]	@ (8007bcc <__sinit+0x2c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f5      	bne.n	8007bac <__sinit+0xc>
 8007bc0:	f7ff ffc4 	bl	8007b4c <global_stdio_init.part.0>
 8007bc4:	e7f2      	b.n	8007bac <__sinit+0xc>
 8007bc6:	bf00      	nop
 8007bc8:	08007b0d 	.word	0x08007b0d
 8007bcc:	20000940 	.word	0x20000940

08007bd0 <_fwalk_sglue>:
 8007bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4688      	mov	r8, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	2600      	movs	r6, #0
 8007bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007be0:	f1b9 0901 	subs.w	r9, r9, #1
 8007be4:	d505      	bpl.n	8007bf2 <_fwalk_sglue+0x22>
 8007be6:	6824      	ldr	r4, [r4, #0]
 8007be8:	2c00      	cmp	r4, #0
 8007bea:	d1f7      	bne.n	8007bdc <_fwalk_sglue+0xc>
 8007bec:	4630      	mov	r0, r6
 8007bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d907      	bls.n	8007c08 <_fwalk_sglue+0x38>
 8007bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	d003      	beq.n	8007c08 <_fwalk_sglue+0x38>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4638      	mov	r0, r7
 8007c04:	47c0      	blx	r8
 8007c06:	4306      	orrs	r6, r0
 8007c08:	3568      	adds	r5, #104	@ 0x68
 8007c0a:	e7e9      	b.n	8007be0 <_fwalk_sglue+0x10>

08007c0c <siprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c12:	b510      	push	{r4, lr}
 8007c14:	2400      	movs	r4, #0
 8007c16:	b09d      	sub	sp, #116	@ 0x74
 8007c18:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007c1a:	9002      	str	r0, [sp, #8]
 8007c1c:	9006      	str	r0, [sp, #24]
 8007c1e:	9107      	str	r1, [sp, #28]
 8007c20:	9104      	str	r1, [sp, #16]
 8007c22:	4809      	ldr	r0, [pc, #36]	@ (8007c48 <siprintf+0x3c>)
 8007c24:	4909      	ldr	r1, [pc, #36]	@ (8007c4c <siprintf+0x40>)
 8007c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2a:	9105      	str	r1, [sp, #20]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	a902      	add	r1, sp, #8
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007c34:	f001 fc10 	bl	8009458 <_svfiprintf_r>
 8007c38:	9b02      	ldr	r3, [sp, #8]
 8007c3a:	701c      	strb	r4, [r3, #0]
 8007c3c:	b01d      	add	sp, #116	@ 0x74
 8007c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c42:	b003      	add	sp, #12
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000028 	.word	0x20000028
 8007c4c:	ffff0208 	.word	0xffff0208

08007c50 <__sread>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	460c      	mov	r4, r1
 8007c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c58:	f000 f86c 	bl	8007d34 <_read_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	bfab      	itete	ge
 8007c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c62:	89a3      	ldrhlt	r3, [r4, #12]
 8007c64:	181b      	addge	r3, r3, r0
 8007c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c6a:	bfac      	ite	ge
 8007c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c6e:	81a3      	strhlt	r3, [r4, #12]
 8007c70:	bd10      	pop	{r4, pc}

08007c72 <__swrite>:
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	461f      	mov	r7, r3
 8007c78:	898b      	ldrh	r3, [r1, #12]
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	05db      	lsls	r3, r3, #23
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4616      	mov	r6, r2
 8007c82:	d505      	bpl.n	8007c90 <__swrite+0x1e>
 8007c84:	2302      	movs	r3, #2
 8007c86:	2200      	movs	r2, #0
 8007c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8c:	f000 f840 	bl	8007d10 <_lseek_r>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	4632      	mov	r2, r6
 8007c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	f000 b857 	b.w	8007d58 <_write_r>

08007caa <__sseek>:
 8007caa:	b510      	push	{r4, lr}
 8007cac:	460c      	mov	r4, r1
 8007cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb2:	f000 f82d 	bl	8007d10 <_lseek_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	bf15      	itete	ne
 8007cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cc6:	81a3      	strheq	r3, [r4, #12]
 8007cc8:	bf18      	it	ne
 8007cca:	81a3      	strhne	r3, [r4, #12]
 8007ccc:	bd10      	pop	{r4, pc}

08007cce <__sclose>:
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 b80d 	b.w	8007cf0 <_close_r>

08007cd6 <memset>:
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4402      	add	r2, r0
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d100      	bne.n	8007ce0 <memset+0xa>
 8007cde:	4770      	bx	lr
 8007ce0:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce4:	e7f9      	b.n	8007cda <memset+0x4>
	...

08007ce8 <_localeconv_r>:
 8007ce8:	4800      	ldr	r0, [pc, #0]	@ (8007cec <_localeconv_r+0x4>)
 8007cea:	4770      	bx	lr
 8007cec:	20000168 	.word	0x20000168

08007cf0 <_close_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4d05      	ldr	r5, [pc, #20]	@ (8007d0c <_close_r+0x1c>)
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7fa fa4f 	bl	800219e <_close>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_close_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_close_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000944 	.word	0x20000944

08007d10 <_lseek_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4d05      	ldr	r5, [pc, #20]	@ (8007d30 <_lseek_r+0x20>)
 8007d1c:	602a      	str	r2, [r5, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f7fa fa61 	bl	80021e6 <_lseek>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_lseek_r+0x1e>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_lseek_r+0x1e>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000944 	.word	0x20000944

08007d34 <_read_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4d05      	ldr	r5, [pc, #20]	@ (8007d54 <_read_r+0x20>)
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f7fa f9f2 	bl	800212c <_read>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_read_r+0x1e>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_read_r+0x1e>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20000944 	.word	0x20000944

08007d58 <_write_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	4d05      	ldr	r5, [pc, #20]	@ (8007d78 <_write_r+0x20>)
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f7fa f9fd 	bl	8002166 <_write>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_write_r+0x1e>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_write_r+0x1e>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20000944 	.word	0x20000944

08007d7c <__errno>:
 8007d7c:	4b01      	ldr	r3, [pc, #4]	@ (8007d84 <__errno+0x8>)
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20000028 	.word	0x20000028

08007d88 <__libc_init_array>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	4d0c      	ldr	r5, [pc, #48]	@ (8007dc0 <__libc_init_array+0x38>)
 8007d8e:	4c0d      	ldr	r4, [pc, #52]	@ (8007dc4 <__libc_init_array+0x3c>)
 8007d90:	1b64      	subs	r4, r4, r5
 8007d92:	10a4      	asrs	r4, r4, #2
 8007d94:	42a6      	cmp	r6, r4
 8007d96:	d109      	bne.n	8007dac <__libc_init_array+0x24>
 8007d98:	f002 f876 	bl	8009e88 <_init>
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	4d0a      	ldr	r5, [pc, #40]	@ (8007dc8 <__libc_init_array+0x40>)
 8007da0:	4c0a      	ldr	r4, [pc, #40]	@ (8007dcc <__libc_init_array+0x44>)
 8007da2:	1b64      	subs	r4, r4, r5
 8007da4:	10a4      	asrs	r4, r4, #2
 8007da6:	42a6      	cmp	r6, r4
 8007da8:	d105      	bne.n	8007db6 <__libc_init_array+0x2e>
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db0:	4798      	blx	r3
 8007db2:	3601      	adds	r6, #1
 8007db4:	e7ee      	b.n	8007d94 <__libc_init_array+0xc>
 8007db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dba:	4798      	blx	r3
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	e7f2      	b.n	8007da6 <__libc_init_array+0x1e>
 8007dc0:	0800b744 	.word	0x0800b744
 8007dc4:	0800b744 	.word	0x0800b744
 8007dc8:	0800b744 	.word	0x0800b744
 8007dcc:	0800b748 	.word	0x0800b748

08007dd0 <__retarget_lock_init_recursive>:
 8007dd0:	4770      	bx	lr

08007dd2 <__retarget_lock_acquire_recursive>:
 8007dd2:	4770      	bx	lr

08007dd4 <__retarget_lock_release_recursive>:
 8007dd4:	4770      	bx	lr

08007dd6 <memchr>:
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	b2c9      	uxtb	r1, r1
 8007ddc:	4402      	add	r2, r0
 8007dde:	4293      	cmp	r3, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	d101      	bne.n	8007de8 <memchr+0x12>
 8007de4:	2000      	movs	r0, #0
 8007de6:	e003      	b.n	8007df0 <memchr+0x1a>
 8007de8:	7804      	ldrb	r4, [r0, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	428c      	cmp	r4, r1
 8007dee:	d1f6      	bne.n	8007dde <memchr+0x8>
 8007df0:	bd10      	pop	{r4, pc}

08007df2 <quorem>:
 8007df2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df6:	6903      	ldr	r3, [r0, #16]
 8007df8:	690c      	ldr	r4, [r1, #16]
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	db7e      	blt.n	8007efe <quorem+0x10c>
 8007e00:	3c01      	subs	r4, #1
 8007e02:	00a3      	lsls	r3, r4, #2
 8007e04:	f100 0514 	add.w	r5, r0, #20
 8007e08:	f101 0814 	add.w	r8, r1, #20
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e28:	d32e      	bcc.n	8007e88 <quorem+0x96>
 8007e2a:	f04f 0a00 	mov.w	sl, #0
 8007e2e:	46c4      	mov	ip, r8
 8007e30:	46ae      	mov	lr, r5
 8007e32:	46d3      	mov	fp, sl
 8007e34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e38:	b298      	uxth	r0, r3
 8007e3a:	fb06 a000 	mla	r0, r6, r0, sl
 8007e3e:	0c1b      	lsrs	r3, r3, #16
 8007e40:	0c02      	lsrs	r2, r0, #16
 8007e42:	fb06 2303 	mla	r3, r6, r3, r2
 8007e46:	f8de 2000 	ldr.w	r2, [lr]
 8007e4a:	b280      	uxth	r0, r0
 8007e4c:	b292      	uxth	r2, r2
 8007e4e:	1a12      	subs	r2, r2, r0
 8007e50:	445a      	add	r2, fp
 8007e52:	f8de 0000 	ldr.w	r0, [lr]
 8007e56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e64:	b292      	uxth	r2, r2
 8007e66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e6a:	45e1      	cmp	r9, ip
 8007e6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e70:	f84e 2b04 	str.w	r2, [lr], #4
 8007e74:	d2de      	bcs.n	8007e34 <quorem+0x42>
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	58eb      	ldr	r3, [r5, r3]
 8007e7a:	b92b      	cbnz	r3, 8007e88 <quorem+0x96>
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	429d      	cmp	r5, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	d32f      	bcc.n	8007ee6 <quorem+0xf4>
 8007e86:	613c      	str	r4, [r7, #16]
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f001 f981 	bl	8009190 <__mcmp>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	db25      	blt.n	8007ede <quorem+0xec>
 8007e92:	4629      	mov	r1, r5
 8007e94:	2000      	movs	r0, #0
 8007e96:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e9a:	f8d1 c000 	ldr.w	ip, [r1]
 8007e9e:	fa1f fe82 	uxth.w	lr, r2
 8007ea2:	fa1f f38c 	uxth.w	r3, ip
 8007ea6:	eba3 030e 	sub.w	r3, r3, lr
 8007eaa:	4403      	add	r3, r0
 8007eac:	0c12      	lsrs	r2, r2, #16
 8007eae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007eb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ebc:	45c1      	cmp	r9, r8
 8007ebe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ec2:	f841 3b04 	str.w	r3, [r1], #4
 8007ec6:	d2e6      	bcs.n	8007e96 <quorem+0xa4>
 8007ec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ed0:	b922      	cbnz	r2, 8007edc <quorem+0xea>
 8007ed2:	3b04      	subs	r3, #4
 8007ed4:	429d      	cmp	r5, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	d30b      	bcc.n	8007ef2 <quorem+0x100>
 8007eda:	613c      	str	r4, [r7, #16]
 8007edc:	3601      	adds	r6, #1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	b003      	add	sp, #12
 8007ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	d1cb      	bne.n	8007e86 <quorem+0x94>
 8007eee:	3c01      	subs	r4, #1
 8007ef0:	e7c6      	b.n	8007e80 <quorem+0x8e>
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	d1ef      	bne.n	8007eda <quorem+0xe8>
 8007efa:	3c01      	subs	r4, #1
 8007efc:	e7ea      	b.n	8007ed4 <quorem+0xe2>
 8007efe:	2000      	movs	r0, #0
 8007f00:	e7ee      	b.n	8007ee0 <quorem+0xee>
 8007f02:	0000      	movs	r0, r0
 8007f04:	0000      	movs	r0, r0
	...

08007f08 <_dtoa_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	461d      	mov	r5, r3
 8007f10:	69c7      	ldr	r7, [r0, #28]
 8007f12:	b097      	sub	sp, #92	@ 0x5c
 8007f14:	4681      	mov	r9, r0
 8007f16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007f1c:	b97f      	cbnz	r7, 8007f3e <_dtoa_r+0x36>
 8007f1e:	2010      	movs	r0, #16
 8007f20:	f000 fe0e 	bl	8008b40 <malloc>
 8007f24:	4602      	mov	r2, r0
 8007f26:	f8c9 001c 	str.w	r0, [r9, #28]
 8007f2a:	b920      	cbnz	r0, 8007f36 <_dtoa_r+0x2e>
 8007f2c:	21ef      	movs	r1, #239	@ 0xef
 8007f2e:	4bac      	ldr	r3, [pc, #688]	@ (80081e0 <_dtoa_r+0x2d8>)
 8007f30:	48ac      	ldr	r0, [pc, #688]	@ (80081e4 <_dtoa_r+0x2dc>)
 8007f32:	f001 fc6d 	bl	8009810 <__assert_func>
 8007f36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f3a:	6007      	str	r7, [r0, #0]
 8007f3c:	60c7      	str	r7, [r0, #12]
 8007f3e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	b159      	cbz	r1, 8007f5e <_dtoa_r+0x56>
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4093      	lsls	r3, r2
 8007f4c:	604a      	str	r2, [r1, #4]
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	4648      	mov	r0, r9
 8007f52:	f000 feeb 	bl	8008d2c <_Bfree>
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	1e2b      	subs	r3, r5, #0
 8007f60:	bfaf      	iteee	ge
 8007f62:	2300      	movge	r3, #0
 8007f64:	2201      	movlt	r2, #1
 8007f66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f6a:	9307      	strlt	r3, [sp, #28]
 8007f6c:	bfa8      	it	ge
 8007f6e:	6033      	strge	r3, [r6, #0]
 8007f70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007f74:	4b9c      	ldr	r3, [pc, #624]	@ (80081e8 <_dtoa_r+0x2e0>)
 8007f76:	bfb8      	it	lt
 8007f78:	6032      	strlt	r2, [r6, #0]
 8007f7a:	ea33 0308 	bics.w	r3, r3, r8
 8007f7e:	d112      	bne.n	8007fa6 <_dtoa_r+0x9e>
 8007f80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f8c:	4323      	orrs	r3, r4
 8007f8e:	f000 855e 	beq.w	8008a4e <_dtoa_r+0xb46>
 8007f92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80081ec <_dtoa_r+0x2e4>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 8560 	beq.w	8008a5e <_dtoa_r+0xb56>
 8007f9e:	f10a 0303 	add.w	r3, sl, #3
 8007fa2:	f000 bd5a 	b.w	8008a5a <_dtoa_r+0xb52>
 8007fa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007faa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f7f8 fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 8007fba:	4607      	mov	r7, r0
 8007fbc:	b158      	cbz	r0, 8007fd6 <_dtoa_r+0xce>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007fc6:	b113      	cbz	r3, 8007fce <_dtoa_r+0xc6>
 8007fc8:	4b89      	ldr	r3, [pc, #548]	@ (80081f0 <_dtoa_r+0x2e8>)
 8007fca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80081f4 <_dtoa_r+0x2ec>
 8007fd2:	f000 bd44 	b.w	8008a5e <_dtoa_r+0xb56>
 8007fd6:	ab14      	add	r3, sp, #80	@ 0x50
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	ab15      	add	r3, sp, #84	@ 0x54
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4648      	mov	r0, r9
 8007fe0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fe4:	f001 f984 	bl	80092f0 <__d2b>
 8007fe8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007fec:	9003      	str	r0, [sp, #12]
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d078      	beq.n	80080e4 <_dtoa_r+0x1dc>
 8007ff2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ff8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008000:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008004:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008008:	9712      	str	r7, [sp, #72]	@ 0x48
 800800a:	4619      	mov	r1, r3
 800800c:	2200      	movs	r2, #0
 800800e:	4b7a      	ldr	r3, [pc, #488]	@ (80081f8 <_dtoa_r+0x2f0>)
 8008010:	f7f8 f8aa 	bl	8000168 <__aeabi_dsub>
 8008014:	a36c      	add	r3, pc, #432	@ (adr r3, 80081c8 <_dtoa_r+0x2c0>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 fa5d 	bl	80004d8 <__aeabi_dmul>
 800801e:	a36c      	add	r3, pc, #432	@ (adr r3, 80081d0 <_dtoa_r+0x2c8>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 f8a2 	bl	800016c <__adddf3>
 8008028:	4604      	mov	r4, r0
 800802a:	4630      	mov	r0, r6
 800802c:	460d      	mov	r5, r1
 800802e:	f7f8 f9e9 	bl	8000404 <__aeabi_i2d>
 8008032:	a369      	add	r3, pc, #420	@ (adr r3, 80081d8 <_dtoa_r+0x2d0>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 fa4e 	bl	80004d8 <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	f7f8 f892 	bl	800016c <__adddf3>
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	f7f8 fcf4 	bl	8000a38 <__aeabi_d2iz>
 8008050:	2200      	movs	r2, #0
 8008052:	4607      	mov	r7, r0
 8008054:	2300      	movs	r3, #0
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fcaf 	bl	80009bc <__aeabi_dcmplt>
 800805e:	b140      	cbz	r0, 8008072 <_dtoa_r+0x16a>
 8008060:	4638      	mov	r0, r7
 8008062:	f7f8 f9cf 	bl	8000404 <__aeabi_i2d>
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	f7f8 fc9d 	bl	80009a8 <__aeabi_dcmpeq>
 800806e:	b900      	cbnz	r0, 8008072 <_dtoa_r+0x16a>
 8008070:	3f01      	subs	r7, #1
 8008072:	2f16      	cmp	r7, #22
 8008074:	d854      	bhi.n	8008120 <_dtoa_r+0x218>
 8008076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800807a:	4b60      	ldr	r3, [pc, #384]	@ (80081fc <_dtoa_r+0x2f4>)
 800807c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fc9a 	bl	80009bc <__aeabi_dcmplt>
 8008088:	2800      	cmp	r0, #0
 800808a:	d04b      	beq.n	8008124 <_dtoa_r+0x21c>
 800808c:	2300      	movs	r3, #0
 800808e:	3f01      	subs	r7, #1
 8008090:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008092:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008094:	1b9b      	subs	r3, r3, r6
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	bf49      	itett	mi
 800809a:	f1c3 0301 	rsbmi	r3, r3, #1
 800809e:	2300      	movpl	r3, #0
 80080a0:	9304      	strmi	r3, [sp, #16]
 80080a2:	2300      	movmi	r3, #0
 80080a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80080a6:	bf54      	ite	pl
 80080a8:	9304      	strpl	r3, [sp, #16]
 80080aa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	db3b      	blt.n	8008128 <_dtoa_r+0x220>
 80080b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b2:	970e      	str	r7, [sp, #56]	@ 0x38
 80080b4:	443b      	add	r3, r7
 80080b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b8:	2300      	movs	r3, #0
 80080ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80080bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d865      	bhi.n	800818e <_dtoa_r+0x286>
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	bfc4      	itt	gt
 80080c6:	3b04      	subgt	r3, #4
 80080c8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80080ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080cc:	bfc8      	it	gt
 80080ce:	2400      	movgt	r4, #0
 80080d0:	f1a3 0302 	sub.w	r3, r3, #2
 80080d4:	bfd8      	it	le
 80080d6:	2401      	movle	r4, #1
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d864      	bhi.n	80081a6 <_dtoa_r+0x29e>
 80080dc:	e8df f003 	tbb	[pc, r3]
 80080e0:	2c385553 	.word	0x2c385553
 80080e4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80080e8:	441e      	add	r6, r3
 80080ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	bfc1      	itttt	gt
 80080f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080f6:	fa08 f803 	lslgt.w	r8, r8, r3
 80080fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008102:	bfd6      	itet	le
 8008104:	f1c3 0320 	rsble	r3, r3, #32
 8008108:	ea48 0003 	orrgt.w	r0, r8, r3
 800810c:	fa04 f003 	lslle.w	r0, r4, r3
 8008110:	f7f8 f968 	bl	80003e4 <__aeabi_ui2d>
 8008114:	2201      	movs	r2, #1
 8008116:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800811a:	3e01      	subs	r6, #1
 800811c:	9212      	str	r2, [sp, #72]	@ 0x48
 800811e:	e774      	b.n	800800a <_dtoa_r+0x102>
 8008120:	2301      	movs	r3, #1
 8008122:	e7b5      	b.n	8008090 <_dtoa_r+0x188>
 8008124:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008126:	e7b4      	b.n	8008092 <_dtoa_r+0x18a>
 8008128:	9b04      	ldr	r3, [sp, #16]
 800812a:	1bdb      	subs	r3, r3, r7
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	427b      	negs	r3, r7
 8008130:	930a      	str	r3, [sp, #40]	@ 0x28
 8008132:	2300      	movs	r3, #0
 8008134:	930e      	str	r3, [sp, #56]	@ 0x38
 8008136:	e7c1      	b.n	80080bc <_dtoa_r+0x1b4>
 8008138:	2301      	movs	r3, #1
 800813a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800813c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800813e:	eb07 0b03 	add.w	fp, r7, r3
 8008142:	f10b 0301 	add.w	r3, fp, #1
 8008146:	2b01      	cmp	r3, #1
 8008148:	9308      	str	r3, [sp, #32]
 800814a:	bfb8      	it	lt
 800814c:	2301      	movlt	r3, #1
 800814e:	e006      	b.n	800815e <_dtoa_r+0x256>
 8008150:	2301      	movs	r3, #1
 8008152:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008154:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008156:	2b00      	cmp	r3, #0
 8008158:	dd28      	ble.n	80081ac <_dtoa_r+0x2a4>
 800815a:	469b      	mov	fp, r3
 800815c:	9308      	str	r3, [sp, #32]
 800815e:	2100      	movs	r1, #0
 8008160:	2204      	movs	r2, #4
 8008162:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008166:	f102 0514 	add.w	r5, r2, #20
 800816a:	429d      	cmp	r5, r3
 800816c:	d926      	bls.n	80081bc <_dtoa_r+0x2b4>
 800816e:	6041      	str	r1, [r0, #4]
 8008170:	4648      	mov	r0, r9
 8008172:	f000 fd9b 	bl	8008cac <_Balloc>
 8008176:	4682      	mov	sl, r0
 8008178:	2800      	cmp	r0, #0
 800817a:	d143      	bne.n	8008204 <_dtoa_r+0x2fc>
 800817c:	4602      	mov	r2, r0
 800817e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008182:	4b1f      	ldr	r3, [pc, #124]	@ (8008200 <_dtoa_r+0x2f8>)
 8008184:	e6d4      	b.n	8007f30 <_dtoa_r+0x28>
 8008186:	2300      	movs	r3, #0
 8008188:	e7e3      	b.n	8008152 <_dtoa_r+0x24a>
 800818a:	2300      	movs	r3, #0
 800818c:	e7d5      	b.n	800813a <_dtoa_r+0x232>
 800818e:	2401      	movs	r4, #1
 8008190:	2300      	movs	r3, #0
 8008192:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008194:	9320      	str	r3, [sp, #128]	@ 0x80
 8008196:	f04f 3bff 	mov.w	fp, #4294967295
 800819a:	2200      	movs	r2, #0
 800819c:	2312      	movs	r3, #18
 800819e:	f8cd b020 	str.w	fp, [sp, #32]
 80081a2:	9221      	str	r2, [sp, #132]	@ 0x84
 80081a4:	e7db      	b.n	800815e <_dtoa_r+0x256>
 80081a6:	2301      	movs	r3, #1
 80081a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081aa:	e7f4      	b.n	8008196 <_dtoa_r+0x28e>
 80081ac:	f04f 0b01 	mov.w	fp, #1
 80081b0:	465b      	mov	r3, fp
 80081b2:	f8cd b020 	str.w	fp, [sp, #32]
 80081b6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80081ba:	e7d0      	b.n	800815e <_dtoa_r+0x256>
 80081bc:	3101      	adds	r1, #1
 80081be:	0052      	lsls	r2, r2, #1
 80081c0:	e7d1      	b.n	8008166 <_dtoa_r+0x25e>
 80081c2:	bf00      	nop
 80081c4:	f3af 8000 	nop.w
 80081c8:	636f4361 	.word	0x636f4361
 80081cc:	3fd287a7 	.word	0x3fd287a7
 80081d0:	8b60c8b3 	.word	0x8b60c8b3
 80081d4:	3fc68a28 	.word	0x3fc68a28
 80081d8:	509f79fb 	.word	0x509f79fb
 80081dc:	3fd34413 	.word	0x3fd34413
 80081e0:	0800b407 	.word	0x0800b407
 80081e4:	0800b41e 	.word	0x0800b41e
 80081e8:	7ff00000 	.word	0x7ff00000
 80081ec:	0800b403 	.word	0x0800b403
 80081f0:	0800b3d7 	.word	0x0800b3d7
 80081f4:	0800b3d6 	.word	0x0800b3d6
 80081f8:	3ff80000 	.word	0x3ff80000
 80081fc:	0800b570 	.word	0x0800b570
 8008200:	0800b476 	.word	0x0800b476
 8008204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008208:	6018      	str	r0, [r3, #0]
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	2b0e      	cmp	r3, #14
 800820e:	f200 80a1 	bhi.w	8008354 <_dtoa_r+0x44c>
 8008212:	2c00      	cmp	r4, #0
 8008214:	f000 809e 	beq.w	8008354 <_dtoa_r+0x44c>
 8008218:	2f00      	cmp	r7, #0
 800821a:	dd33      	ble.n	8008284 <_dtoa_r+0x37c>
 800821c:	4b9c      	ldr	r3, [pc, #624]	@ (8008490 <_dtoa_r+0x588>)
 800821e:	f007 020f 	and.w	r2, r7, #15
 8008222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008226:	05f8      	lsls	r0, r7, #23
 8008228:	e9d3 3400 	ldrd	r3, r4, [r3]
 800822c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008234:	d516      	bpl.n	8008264 <_dtoa_r+0x35c>
 8008236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800823a:	4b96      	ldr	r3, [pc, #600]	@ (8008494 <_dtoa_r+0x58c>)
 800823c:	2603      	movs	r6, #3
 800823e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008242:	f7f8 fa73 	bl	800072c <__aeabi_ddiv>
 8008246:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800824a:	f004 040f 	and.w	r4, r4, #15
 800824e:	4d91      	ldr	r5, [pc, #580]	@ (8008494 <_dtoa_r+0x58c>)
 8008250:	b954      	cbnz	r4, 8008268 <_dtoa_r+0x360>
 8008252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800825a:	f7f8 fa67 	bl	800072c <__aeabi_ddiv>
 800825e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008262:	e028      	b.n	80082b6 <_dtoa_r+0x3ae>
 8008264:	2602      	movs	r6, #2
 8008266:	e7f2      	b.n	800824e <_dtoa_r+0x346>
 8008268:	07e1      	lsls	r1, r4, #31
 800826a:	d508      	bpl.n	800827e <_dtoa_r+0x376>
 800826c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008274:	f7f8 f930 	bl	80004d8 <__aeabi_dmul>
 8008278:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800827c:	3601      	adds	r6, #1
 800827e:	1064      	asrs	r4, r4, #1
 8008280:	3508      	adds	r5, #8
 8008282:	e7e5      	b.n	8008250 <_dtoa_r+0x348>
 8008284:	f000 80af 	beq.w	80083e6 <_dtoa_r+0x4de>
 8008288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800828c:	427c      	negs	r4, r7
 800828e:	4b80      	ldr	r3, [pc, #512]	@ (8008490 <_dtoa_r+0x588>)
 8008290:	f004 020f 	and.w	r2, r4, #15
 8008294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 f91c 	bl	80004d8 <__aeabi_dmul>
 80082a0:	2602      	movs	r6, #2
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082a8:	4d7a      	ldr	r5, [pc, #488]	@ (8008494 <_dtoa_r+0x58c>)
 80082aa:	1124      	asrs	r4, r4, #4
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	f040 808f 	bne.w	80083d0 <_dtoa_r+0x4c8>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1d3      	bne.n	800825e <_dtoa_r+0x356>
 80082b6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80082ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8094 	beq.w	80083ea <_dtoa_r+0x4e2>
 80082c2:	2200      	movs	r2, #0
 80082c4:	4620      	mov	r0, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	4b73      	ldr	r3, [pc, #460]	@ (8008498 <_dtoa_r+0x590>)
 80082ca:	f7f8 fb77 	bl	80009bc <__aeabi_dcmplt>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	f000 808b 	beq.w	80083ea <_dtoa_r+0x4e2>
 80082d4:	9b08      	ldr	r3, [sp, #32]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8087 	beq.w	80083ea <_dtoa_r+0x4e2>
 80082dc:	f1bb 0f00 	cmp.w	fp, #0
 80082e0:	dd34      	ble.n	800834c <_dtoa_r+0x444>
 80082e2:	4620      	mov	r0, r4
 80082e4:	2200      	movs	r2, #0
 80082e6:	4629      	mov	r1, r5
 80082e8:	4b6c      	ldr	r3, [pc, #432]	@ (800849c <_dtoa_r+0x594>)
 80082ea:	f7f8 f8f5 	bl	80004d8 <__aeabi_dmul>
 80082ee:	465c      	mov	r4, fp
 80082f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80082f8:	3601      	adds	r6, #1
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7f8 f882 	bl	8000404 <__aeabi_i2d>
 8008300:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	2200      	movs	r2, #0
 800830a:	4b65      	ldr	r3, [pc, #404]	@ (80084a0 <_dtoa_r+0x598>)
 800830c:	f7f7 ff2e 	bl	800016c <__adddf3>
 8008310:	4605      	mov	r5, r0
 8008312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008316:	2c00      	cmp	r4, #0
 8008318:	d16a      	bne.n	80083f0 <_dtoa_r+0x4e8>
 800831a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800831e:	2200      	movs	r2, #0
 8008320:	4b60      	ldr	r3, [pc, #384]	@ (80084a4 <_dtoa_r+0x59c>)
 8008322:	f7f7 ff21 	bl	8000168 <__aeabi_dsub>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800832e:	462a      	mov	r2, r5
 8008330:	4633      	mov	r3, r6
 8008332:	f7f8 fb61 	bl	80009f8 <__aeabi_dcmpgt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f040 8298 	bne.w	800886c <_dtoa_r+0x964>
 800833c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008340:	462a      	mov	r2, r5
 8008342:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008346:	f7f8 fb39 	bl	80009bc <__aeabi_dcmplt>
 800834a:	bb38      	cbnz	r0, 800839c <_dtoa_r+0x494>
 800834c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008350:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008356:	2b00      	cmp	r3, #0
 8008358:	f2c0 8157 	blt.w	800860a <_dtoa_r+0x702>
 800835c:	2f0e      	cmp	r7, #14
 800835e:	f300 8154 	bgt.w	800860a <_dtoa_r+0x702>
 8008362:	4b4b      	ldr	r3, [pc, #300]	@ (8008490 <_dtoa_r+0x588>)
 8008364:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800836c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008370:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008372:	2b00      	cmp	r3, #0
 8008374:	f280 80e5 	bge.w	8008542 <_dtoa_r+0x63a>
 8008378:	9b08      	ldr	r3, [sp, #32]
 800837a:	2b00      	cmp	r3, #0
 800837c:	f300 80e1 	bgt.w	8008542 <_dtoa_r+0x63a>
 8008380:	d10c      	bne.n	800839c <_dtoa_r+0x494>
 8008382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008386:	2200      	movs	r2, #0
 8008388:	4b46      	ldr	r3, [pc, #280]	@ (80084a4 <_dtoa_r+0x59c>)
 800838a:	f7f8 f8a5 	bl	80004d8 <__aeabi_dmul>
 800838e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008392:	f7f8 fb27 	bl	80009e4 <__aeabi_dcmpge>
 8008396:	2800      	cmp	r0, #0
 8008398:	f000 8266 	beq.w	8008868 <_dtoa_r+0x960>
 800839c:	2400      	movs	r4, #0
 800839e:	4625      	mov	r5, r4
 80083a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083a2:	4656      	mov	r6, sl
 80083a4:	ea6f 0803 	mvn.w	r8, r3
 80083a8:	2700      	movs	r7, #0
 80083aa:	4621      	mov	r1, r4
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fcbd 	bl	8008d2c <_Bfree>
 80083b2:	2d00      	cmp	r5, #0
 80083b4:	f000 80bd 	beq.w	8008532 <_dtoa_r+0x62a>
 80083b8:	b12f      	cbz	r7, 80083c6 <_dtoa_r+0x4be>
 80083ba:	42af      	cmp	r7, r5
 80083bc:	d003      	beq.n	80083c6 <_dtoa_r+0x4be>
 80083be:	4639      	mov	r1, r7
 80083c0:	4648      	mov	r0, r9
 80083c2:	f000 fcb3 	bl	8008d2c <_Bfree>
 80083c6:	4629      	mov	r1, r5
 80083c8:	4648      	mov	r0, r9
 80083ca:	f000 fcaf 	bl	8008d2c <_Bfree>
 80083ce:	e0b0      	b.n	8008532 <_dtoa_r+0x62a>
 80083d0:	07e2      	lsls	r2, r4, #31
 80083d2:	d505      	bpl.n	80083e0 <_dtoa_r+0x4d8>
 80083d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083d8:	f7f8 f87e 	bl	80004d8 <__aeabi_dmul>
 80083dc:	2301      	movs	r3, #1
 80083de:	3601      	adds	r6, #1
 80083e0:	1064      	asrs	r4, r4, #1
 80083e2:	3508      	adds	r5, #8
 80083e4:	e762      	b.n	80082ac <_dtoa_r+0x3a4>
 80083e6:	2602      	movs	r6, #2
 80083e8:	e765      	b.n	80082b6 <_dtoa_r+0x3ae>
 80083ea:	46b8      	mov	r8, r7
 80083ec:	9c08      	ldr	r4, [sp, #32]
 80083ee:	e784      	b.n	80082fa <_dtoa_r+0x3f2>
 80083f0:	4b27      	ldr	r3, [pc, #156]	@ (8008490 <_dtoa_r+0x588>)
 80083f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083fc:	4454      	add	r4, sl
 80083fe:	2900      	cmp	r1, #0
 8008400:	d054      	beq.n	80084ac <_dtoa_r+0x5a4>
 8008402:	2000      	movs	r0, #0
 8008404:	4928      	ldr	r1, [pc, #160]	@ (80084a8 <_dtoa_r+0x5a0>)
 8008406:	f7f8 f991 	bl	800072c <__aeabi_ddiv>
 800840a:	4633      	mov	r3, r6
 800840c:	462a      	mov	r2, r5
 800840e:	f7f7 feab 	bl	8000168 <__aeabi_dsub>
 8008412:	4656      	mov	r6, sl
 8008414:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841c:	f7f8 fb0c 	bl	8000a38 <__aeabi_d2iz>
 8008420:	4605      	mov	r5, r0
 8008422:	f7f7 ffef 	bl	8000404 <__aeabi_i2d>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800842e:	f7f7 fe9b 	bl	8000168 <__aeabi_dsub>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	3530      	adds	r5, #48	@ 0x30
 8008438:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800843c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008440:	f806 5b01 	strb.w	r5, [r6], #1
 8008444:	f7f8 faba 	bl	80009bc <__aeabi_dcmplt>
 8008448:	2800      	cmp	r0, #0
 800844a:	d172      	bne.n	8008532 <_dtoa_r+0x62a>
 800844c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008450:	2000      	movs	r0, #0
 8008452:	4911      	ldr	r1, [pc, #68]	@ (8008498 <_dtoa_r+0x590>)
 8008454:	f7f7 fe88 	bl	8000168 <__aeabi_dsub>
 8008458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800845c:	f7f8 faae 	bl	80009bc <__aeabi_dcmplt>
 8008460:	2800      	cmp	r0, #0
 8008462:	f040 80b4 	bne.w	80085ce <_dtoa_r+0x6c6>
 8008466:	42a6      	cmp	r6, r4
 8008468:	f43f af70 	beq.w	800834c <_dtoa_r+0x444>
 800846c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008470:	2200      	movs	r2, #0
 8008472:	4b0a      	ldr	r3, [pc, #40]	@ (800849c <_dtoa_r+0x594>)
 8008474:	f7f8 f830 	bl	80004d8 <__aeabi_dmul>
 8008478:	2200      	movs	r2, #0
 800847a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800847e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008482:	4b06      	ldr	r3, [pc, #24]	@ (800849c <_dtoa_r+0x594>)
 8008484:	f7f8 f828 	bl	80004d8 <__aeabi_dmul>
 8008488:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800848c:	e7c4      	b.n	8008418 <_dtoa_r+0x510>
 800848e:	bf00      	nop
 8008490:	0800b570 	.word	0x0800b570
 8008494:	0800b548 	.word	0x0800b548
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	40240000 	.word	0x40240000
 80084a0:	401c0000 	.word	0x401c0000
 80084a4:	40140000 	.word	0x40140000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7f8 f812 	bl	80004d8 <__aeabi_dmul>
 80084b4:	4656      	mov	r6, sl
 80084b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80084bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084c0:	f7f8 faba 	bl	8000a38 <__aeabi_d2iz>
 80084c4:	4605      	mov	r5, r0
 80084c6:	f7f7 ff9d 	bl	8000404 <__aeabi_i2d>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084d2:	f7f7 fe49 	bl	8000168 <__aeabi_dsub>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	3530      	adds	r5, #48	@ 0x30
 80084dc:	f806 5b01 	strb.w	r5, [r6], #1
 80084e0:	42a6      	cmp	r6, r4
 80084e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	d124      	bne.n	8008536 <_dtoa_r+0x62e>
 80084ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084f0:	4bae      	ldr	r3, [pc, #696]	@ (80087ac <_dtoa_r+0x8a4>)
 80084f2:	f7f7 fe3b 	bl	800016c <__adddf3>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084fe:	f7f8 fa7b 	bl	80009f8 <__aeabi_dcmpgt>
 8008502:	2800      	cmp	r0, #0
 8008504:	d163      	bne.n	80085ce <_dtoa_r+0x6c6>
 8008506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800850a:	2000      	movs	r0, #0
 800850c:	49a7      	ldr	r1, [pc, #668]	@ (80087ac <_dtoa_r+0x8a4>)
 800850e:	f7f7 fe2b 	bl	8000168 <__aeabi_dsub>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800851a:	f7f8 fa4f 	bl	80009bc <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f43f af14 	beq.w	800834c <_dtoa_r+0x444>
 8008524:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008526:	1e73      	subs	r3, r6, #1
 8008528:	9313      	str	r3, [sp, #76]	@ 0x4c
 800852a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800852e:	2b30      	cmp	r3, #48	@ 0x30
 8008530:	d0f8      	beq.n	8008524 <_dtoa_r+0x61c>
 8008532:	4647      	mov	r7, r8
 8008534:	e03b      	b.n	80085ae <_dtoa_r+0x6a6>
 8008536:	4b9e      	ldr	r3, [pc, #632]	@ (80087b0 <_dtoa_r+0x8a8>)
 8008538:	f7f7 ffce 	bl	80004d8 <__aeabi_dmul>
 800853c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008540:	e7bc      	b.n	80084bc <_dtoa_r+0x5b4>
 8008542:	4656      	mov	r6, sl
 8008544:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f8 f8ec 	bl	800072c <__aeabi_ddiv>
 8008554:	f7f8 fa70 	bl	8000a38 <__aeabi_d2iz>
 8008558:	4680      	mov	r8, r0
 800855a:	f7f7 ff53 	bl	8000404 <__aeabi_i2d>
 800855e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008562:	f7f7 ffb9 	bl	80004d8 <__aeabi_dmul>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	f7f7 fdfb 	bl	8000168 <__aeabi_dsub>
 8008572:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008576:	9d08      	ldr	r5, [sp, #32]
 8008578:	f806 4b01 	strb.w	r4, [r6], #1
 800857c:	eba6 040a 	sub.w	r4, r6, sl
 8008580:	42a5      	cmp	r5, r4
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	d133      	bne.n	80085f0 <_dtoa_r+0x6e8>
 8008588:	f7f7 fdf0 	bl	800016c <__adddf3>
 800858c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	f7f8 fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8008598:	b9c0      	cbnz	r0, 80085cc <_dtoa_r+0x6c4>
 800859a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f8 fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80085a6:	b110      	cbz	r0, 80085ae <_dtoa_r+0x6a6>
 80085a8:	f018 0f01 	tst.w	r8, #1
 80085ac:	d10e      	bne.n	80085cc <_dtoa_r+0x6c4>
 80085ae:	4648      	mov	r0, r9
 80085b0:	9903      	ldr	r1, [sp, #12]
 80085b2:	f000 fbbb 	bl	8008d2c <_Bfree>
 80085b6:	2300      	movs	r3, #0
 80085b8:	7033      	strb	r3, [r6, #0]
 80085ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085bc:	3701      	adds	r7, #1
 80085be:	601f      	str	r7, [r3, #0]
 80085c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 824b 	beq.w	8008a5e <_dtoa_r+0xb56>
 80085c8:	601e      	str	r6, [r3, #0]
 80085ca:	e248      	b.n	8008a5e <_dtoa_r+0xb56>
 80085cc:	46b8      	mov	r8, r7
 80085ce:	4633      	mov	r3, r6
 80085d0:	461e      	mov	r6, r3
 80085d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085d6:	2a39      	cmp	r2, #57	@ 0x39
 80085d8:	d106      	bne.n	80085e8 <_dtoa_r+0x6e0>
 80085da:	459a      	cmp	sl, r3
 80085dc:	d1f8      	bne.n	80085d0 <_dtoa_r+0x6c8>
 80085de:	2230      	movs	r2, #48	@ 0x30
 80085e0:	f108 0801 	add.w	r8, r8, #1
 80085e4:	f88a 2000 	strb.w	r2, [sl]
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	3201      	adds	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e7a0      	b.n	8008532 <_dtoa_r+0x62a>
 80085f0:	2200      	movs	r2, #0
 80085f2:	4b6f      	ldr	r3, [pc, #444]	@ (80087b0 <_dtoa_r+0x8a8>)
 80085f4:	f7f7 ff70 	bl	80004d8 <__aeabi_dmul>
 80085f8:	2200      	movs	r2, #0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4604      	mov	r4, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	f7f8 f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 8008604:	2800      	cmp	r0, #0
 8008606:	d09f      	beq.n	8008548 <_dtoa_r+0x640>
 8008608:	e7d1      	b.n	80085ae <_dtoa_r+0x6a6>
 800860a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800860c:	2a00      	cmp	r2, #0
 800860e:	f000 80ea 	beq.w	80087e6 <_dtoa_r+0x8de>
 8008612:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008614:	2a01      	cmp	r2, #1
 8008616:	f300 80cd 	bgt.w	80087b4 <_dtoa_r+0x8ac>
 800861a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800861c:	2a00      	cmp	r2, #0
 800861e:	f000 80c1 	beq.w	80087a4 <_dtoa_r+0x89c>
 8008622:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008626:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008628:	9e04      	ldr	r6, [sp, #16]
 800862a:	9a04      	ldr	r2, [sp, #16]
 800862c:	2101      	movs	r1, #1
 800862e:	441a      	add	r2, r3
 8008630:	9204      	str	r2, [sp, #16]
 8008632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008634:	4648      	mov	r0, r9
 8008636:	441a      	add	r2, r3
 8008638:	9209      	str	r2, [sp, #36]	@ 0x24
 800863a:	f000 fc2b 	bl	8008e94 <__i2b>
 800863e:	4605      	mov	r5, r0
 8008640:	b166      	cbz	r6, 800865c <_dtoa_r+0x754>
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd09      	ble.n	800865c <_dtoa_r+0x754>
 8008648:	42b3      	cmp	r3, r6
 800864a:	bfa8      	it	ge
 800864c:	4633      	movge	r3, r6
 800864e:	9a04      	ldr	r2, [sp, #16]
 8008650:	1af6      	subs	r6, r6, r3
 8008652:	1ad2      	subs	r2, r2, r3
 8008654:	9204      	str	r2, [sp, #16]
 8008656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	9309      	str	r3, [sp, #36]	@ 0x24
 800865c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865e:	b30b      	cbz	r3, 80086a4 <_dtoa_r+0x79c>
 8008660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 80c6 	beq.w	80087f4 <_dtoa_r+0x8ec>
 8008668:	2c00      	cmp	r4, #0
 800866a:	f000 80c0 	beq.w	80087ee <_dtoa_r+0x8e6>
 800866e:	4629      	mov	r1, r5
 8008670:	4622      	mov	r2, r4
 8008672:	4648      	mov	r0, r9
 8008674:	f000 fcc6 	bl	8009004 <__pow5mult>
 8008678:	9a03      	ldr	r2, [sp, #12]
 800867a:	4601      	mov	r1, r0
 800867c:	4605      	mov	r5, r0
 800867e:	4648      	mov	r0, r9
 8008680:	f000 fc1e 	bl	8008ec0 <__multiply>
 8008684:	9903      	ldr	r1, [sp, #12]
 8008686:	4680      	mov	r8, r0
 8008688:	4648      	mov	r0, r9
 800868a:	f000 fb4f 	bl	8008d2c <_Bfree>
 800868e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008690:	1b1b      	subs	r3, r3, r4
 8008692:	930a      	str	r3, [sp, #40]	@ 0x28
 8008694:	f000 80b1 	beq.w	80087fa <_dtoa_r+0x8f2>
 8008698:	4641      	mov	r1, r8
 800869a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800869c:	4648      	mov	r0, r9
 800869e:	f000 fcb1 	bl	8009004 <__pow5mult>
 80086a2:	9003      	str	r0, [sp, #12]
 80086a4:	2101      	movs	r1, #1
 80086a6:	4648      	mov	r0, r9
 80086a8:	f000 fbf4 	bl	8008e94 <__i2b>
 80086ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ae:	4604      	mov	r4, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 81d8 	beq.w	8008a66 <_dtoa_r+0xb5e>
 80086b6:	461a      	mov	r2, r3
 80086b8:	4601      	mov	r1, r0
 80086ba:	4648      	mov	r0, r9
 80086bc:	f000 fca2 	bl	8009004 <__pow5mult>
 80086c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086c2:	4604      	mov	r4, r0
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	f300 809f 	bgt.w	8008808 <_dtoa_r+0x900>
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 8097 	bne.w	8008800 <_dtoa_r+0x8f8>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f040 8093 	bne.w	8008804 <_dtoa_r+0x8fc>
 80086de:	9b07      	ldr	r3, [sp, #28]
 80086e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086e4:	0d1b      	lsrs	r3, r3, #20
 80086e6:	051b      	lsls	r3, r3, #20
 80086e8:	b133      	cbz	r3, 80086f8 <_dtoa_r+0x7f0>
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	3301      	adds	r3, #1
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f2:	3301      	adds	r3, #1
 80086f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f6:	2301      	movs	r3, #1
 80086f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80086fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 81b8 	beq.w	8008a72 <_dtoa_r+0xb6a>
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f000 fb77 	bl	8008dfc <__hi0bits>
 800870e:	f1c0 0020 	rsb	r0, r0, #32
 8008712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008714:	4418      	add	r0, r3
 8008716:	f010 001f 	ands.w	r0, r0, #31
 800871a:	f000 8082 	beq.w	8008822 <_dtoa_r+0x91a>
 800871e:	f1c0 0320 	rsb	r3, r0, #32
 8008722:	2b04      	cmp	r3, #4
 8008724:	dd73      	ble.n	800880e <_dtoa_r+0x906>
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	f1c0 001c 	rsb	r0, r0, #28
 800872c:	4403      	add	r3, r0
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008732:	4406      	add	r6, r0
 8008734:	4403      	add	r3, r0
 8008736:	9309      	str	r3, [sp, #36]	@ 0x24
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dd05      	ble.n	800874a <_dtoa_r+0x842>
 800873e:	461a      	mov	r2, r3
 8008740:	4648      	mov	r0, r9
 8008742:	9903      	ldr	r1, [sp, #12]
 8008744:	f000 fcb8 	bl	80090b8 <__lshift>
 8008748:	9003      	str	r0, [sp, #12]
 800874a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd05      	ble.n	800875c <_dtoa_r+0x854>
 8008750:	4621      	mov	r1, r4
 8008752:	461a      	mov	r2, r3
 8008754:	4648      	mov	r0, r9
 8008756:	f000 fcaf 	bl	80090b8 <__lshift>
 800875a:	4604      	mov	r4, r0
 800875c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d061      	beq.n	8008826 <_dtoa_r+0x91e>
 8008762:	4621      	mov	r1, r4
 8008764:	9803      	ldr	r0, [sp, #12]
 8008766:	f000 fd13 	bl	8009190 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	da5b      	bge.n	8008826 <_dtoa_r+0x91e>
 800876e:	2300      	movs	r3, #0
 8008770:	220a      	movs	r2, #10
 8008772:	4648      	mov	r0, r9
 8008774:	9903      	ldr	r1, [sp, #12]
 8008776:	f000 fafb 	bl	8008d70 <__multadd>
 800877a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800877c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008780:	9003      	str	r0, [sp, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8177 	beq.w	8008a76 <_dtoa_r+0xb6e>
 8008788:	4629      	mov	r1, r5
 800878a:	2300      	movs	r3, #0
 800878c:	220a      	movs	r2, #10
 800878e:	4648      	mov	r0, r9
 8008790:	f000 faee 	bl	8008d70 <__multadd>
 8008794:	f1bb 0f00 	cmp.w	fp, #0
 8008798:	4605      	mov	r5, r0
 800879a:	dc6f      	bgt.n	800887c <_dtoa_r+0x974>
 800879c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800879e:	2b02      	cmp	r3, #2
 80087a0:	dc49      	bgt.n	8008836 <_dtoa_r+0x92e>
 80087a2:	e06b      	b.n	800887c <_dtoa_r+0x974>
 80087a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80087aa:	e73c      	b.n	8008626 <_dtoa_r+0x71e>
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	40240000 	.word	0x40240000
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	1e5c      	subs	r4, r3, #1
 80087b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	db09      	blt.n	80087d2 <_dtoa_r+0x8ca>
 80087be:	1b1c      	subs	r4, r3, r4
 80087c0:	9b08      	ldr	r3, [sp, #32]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f6bf af30 	bge.w	8008628 <_dtoa_r+0x720>
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	9a08      	ldr	r2, [sp, #32]
 80087cc:	1a9e      	subs	r6, r3, r2
 80087ce:	2300      	movs	r3, #0
 80087d0:	e72b      	b.n	800862a <_dtoa_r+0x722>
 80087d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087d6:	1ae3      	subs	r3, r4, r3
 80087d8:	441a      	add	r2, r3
 80087da:	940a      	str	r4, [sp, #40]	@ 0x28
 80087dc:	9e04      	ldr	r6, [sp, #16]
 80087de:	2400      	movs	r4, #0
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80087e4:	e721      	b.n	800862a <_dtoa_r+0x722>
 80087e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087e8:	9e04      	ldr	r6, [sp, #16]
 80087ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80087ec:	e728      	b.n	8008640 <_dtoa_r+0x738>
 80087ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087f2:	e751      	b.n	8008698 <_dtoa_r+0x790>
 80087f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087f6:	9903      	ldr	r1, [sp, #12]
 80087f8:	e750      	b.n	800869c <_dtoa_r+0x794>
 80087fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80087fe:	e751      	b.n	80086a4 <_dtoa_r+0x79c>
 8008800:	2300      	movs	r3, #0
 8008802:	e779      	b.n	80086f8 <_dtoa_r+0x7f0>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	e777      	b.n	80086f8 <_dtoa_r+0x7f0>
 8008808:	2300      	movs	r3, #0
 800880a:	930a      	str	r3, [sp, #40]	@ 0x28
 800880c:	e779      	b.n	8008702 <_dtoa_r+0x7fa>
 800880e:	d093      	beq.n	8008738 <_dtoa_r+0x830>
 8008810:	9a04      	ldr	r2, [sp, #16]
 8008812:	331c      	adds	r3, #28
 8008814:	441a      	add	r2, r3
 8008816:	9204      	str	r2, [sp, #16]
 8008818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800881a:	441e      	add	r6, r3
 800881c:	441a      	add	r2, r3
 800881e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008820:	e78a      	b.n	8008738 <_dtoa_r+0x830>
 8008822:	4603      	mov	r3, r0
 8008824:	e7f4      	b.n	8008810 <_dtoa_r+0x908>
 8008826:	9b08      	ldr	r3, [sp, #32]
 8008828:	46b8      	mov	r8, r7
 800882a:	2b00      	cmp	r3, #0
 800882c:	dc20      	bgt.n	8008870 <_dtoa_r+0x968>
 800882e:	469b      	mov	fp, r3
 8008830:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008832:	2b02      	cmp	r3, #2
 8008834:	dd1e      	ble.n	8008874 <_dtoa_r+0x96c>
 8008836:	f1bb 0f00 	cmp.w	fp, #0
 800883a:	f47f adb1 	bne.w	80083a0 <_dtoa_r+0x498>
 800883e:	4621      	mov	r1, r4
 8008840:	465b      	mov	r3, fp
 8008842:	2205      	movs	r2, #5
 8008844:	4648      	mov	r0, r9
 8008846:	f000 fa93 	bl	8008d70 <__multadd>
 800884a:	4601      	mov	r1, r0
 800884c:	4604      	mov	r4, r0
 800884e:	9803      	ldr	r0, [sp, #12]
 8008850:	f000 fc9e 	bl	8009190 <__mcmp>
 8008854:	2800      	cmp	r0, #0
 8008856:	f77f ada3 	ble.w	80083a0 <_dtoa_r+0x498>
 800885a:	4656      	mov	r6, sl
 800885c:	2331      	movs	r3, #49	@ 0x31
 800885e:	f108 0801 	add.w	r8, r8, #1
 8008862:	f806 3b01 	strb.w	r3, [r6], #1
 8008866:	e59f      	b.n	80083a8 <_dtoa_r+0x4a0>
 8008868:	46b8      	mov	r8, r7
 800886a:	9c08      	ldr	r4, [sp, #32]
 800886c:	4625      	mov	r5, r4
 800886e:	e7f4      	b.n	800885a <_dtoa_r+0x952>
 8008870:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8101 	beq.w	8008a7e <_dtoa_r+0xb76>
 800887c:	2e00      	cmp	r6, #0
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x984>
 8008880:	4629      	mov	r1, r5
 8008882:	4632      	mov	r2, r6
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fc17 	bl	80090b8 <__lshift>
 800888a:	4605      	mov	r5, r0
 800888c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d05c      	beq.n	800894c <_dtoa_r+0xa44>
 8008892:	4648      	mov	r0, r9
 8008894:	6869      	ldr	r1, [r5, #4]
 8008896:	f000 fa09 	bl	8008cac <_Balloc>
 800889a:	4606      	mov	r6, r0
 800889c:	b928      	cbnz	r0, 80088aa <_dtoa_r+0x9a2>
 800889e:	4602      	mov	r2, r0
 80088a0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088a4:	4b80      	ldr	r3, [pc, #512]	@ (8008aa8 <_dtoa_r+0xba0>)
 80088a6:	f7ff bb43 	b.w	8007f30 <_dtoa_r+0x28>
 80088aa:	692a      	ldr	r2, [r5, #16]
 80088ac:	f105 010c 	add.w	r1, r5, #12
 80088b0:	3202      	adds	r2, #2
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	300c      	adds	r0, #12
 80088b6:	f000 ff9d 	bl	80097f4 <memcpy>
 80088ba:	2201      	movs	r2, #1
 80088bc:	4631      	mov	r1, r6
 80088be:	4648      	mov	r0, r9
 80088c0:	f000 fbfa 	bl	80090b8 <__lshift>
 80088c4:	462f      	mov	r7, r5
 80088c6:	4605      	mov	r5, r0
 80088c8:	f10a 0301 	add.w	r3, sl, #1
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	eb0a 030b 	add.w	r3, sl, fp
 80088d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	9309      	str	r3, [sp, #36]	@ 0x24
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	4621      	mov	r1, r4
 80088e0:	9803      	ldr	r0, [sp, #12]
 80088e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80088e6:	f7ff fa84 	bl	8007df2 <quorem>
 80088ea:	4603      	mov	r3, r0
 80088ec:	4639      	mov	r1, r7
 80088ee:	3330      	adds	r3, #48	@ 0x30
 80088f0:	9006      	str	r0, [sp, #24]
 80088f2:	9803      	ldr	r0, [sp, #12]
 80088f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f6:	f000 fc4b 	bl	8009190 <__mcmp>
 80088fa:	462a      	mov	r2, r5
 80088fc:	9008      	str	r0, [sp, #32]
 80088fe:	4621      	mov	r1, r4
 8008900:	4648      	mov	r0, r9
 8008902:	f000 fc61 	bl	80091c8 <__mdiff>
 8008906:	68c2      	ldr	r2, [r0, #12]
 8008908:	4606      	mov	r6, r0
 800890a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800890c:	bb02      	cbnz	r2, 8008950 <_dtoa_r+0xa48>
 800890e:	4601      	mov	r1, r0
 8008910:	9803      	ldr	r0, [sp, #12]
 8008912:	f000 fc3d 	bl	8009190 <__mcmp>
 8008916:	4602      	mov	r2, r0
 8008918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800891a:	4631      	mov	r1, r6
 800891c:	4648      	mov	r0, r9
 800891e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008922:	f000 fa03 	bl	8008d2c <_Bfree>
 8008926:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008928:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800892a:	9e04      	ldr	r6, [sp, #16]
 800892c:	ea42 0103 	orr.w	r1, r2, r3
 8008930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008932:	4319      	orrs	r1, r3
 8008934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008936:	d10d      	bne.n	8008954 <_dtoa_r+0xa4c>
 8008938:	2b39      	cmp	r3, #57	@ 0x39
 800893a:	d027      	beq.n	800898c <_dtoa_r+0xa84>
 800893c:	9a08      	ldr	r2, [sp, #32]
 800893e:	2a00      	cmp	r2, #0
 8008940:	dd01      	ble.n	8008946 <_dtoa_r+0xa3e>
 8008942:	9b06      	ldr	r3, [sp, #24]
 8008944:	3331      	adds	r3, #49	@ 0x31
 8008946:	f88b 3000 	strb.w	r3, [fp]
 800894a:	e52e      	b.n	80083aa <_dtoa_r+0x4a2>
 800894c:	4628      	mov	r0, r5
 800894e:	e7b9      	b.n	80088c4 <_dtoa_r+0x9bc>
 8008950:	2201      	movs	r2, #1
 8008952:	e7e2      	b.n	800891a <_dtoa_r+0xa12>
 8008954:	9908      	ldr	r1, [sp, #32]
 8008956:	2900      	cmp	r1, #0
 8008958:	db04      	blt.n	8008964 <_dtoa_r+0xa5c>
 800895a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800895c:	4301      	orrs	r1, r0
 800895e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008960:	4301      	orrs	r1, r0
 8008962:	d120      	bne.n	80089a6 <_dtoa_r+0xa9e>
 8008964:	2a00      	cmp	r2, #0
 8008966:	ddee      	ble.n	8008946 <_dtoa_r+0xa3e>
 8008968:	2201      	movs	r2, #1
 800896a:	9903      	ldr	r1, [sp, #12]
 800896c:	4648      	mov	r0, r9
 800896e:	9304      	str	r3, [sp, #16]
 8008970:	f000 fba2 	bl	80090b8 <__lshift>
 8008974:	4621      	mov	r1, r4
 8008976:	9003      	str	r0, [sp, #12]
 8008978:	f000 fc0a 	bl	8009190 <__mcmp>
 800897c:	2800      	cmp	r0, #0
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	dc02      	bgt.n	8008988 <_dtoa_r+0xa80>
 8008982:	d1e0      	bne.n	8008946 <_dtoa_r+0xa3e>
 8008984:	07da      	lsls	r2, r3, #31
 8008986:	d5de      	bpl.n	8008946 <_dtoa_r+0xa3e>
 8008988:	2b39      	cmp	r3, #57	@ 0x39
 800898a:	d1da      	bne.n	8008942 <_dtoa_r+0xa3a>
 800898c:	2339      	movs	r3, #57	@ 0x39
 800898e:	f88b 3000 	strb.w	r3, [fp]
 8008992:	4633      	mov	r3, r6
 8008994:	461e      	mov	r6, r3
 8008996:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800899a:	3b01      	subs	r3, #1
 800899c:	2a39      	cmp	r2, #57	@ 0x39
 800899e:	d04e      	beq.n	8008a3e <_dtoa_r+0xb36>
 80089a0:	3201      	adds	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e501      	b.n	80083aa <_dtoa_r+0x4a2>
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	dd03      	ble.n	80089b2 <_dtoa_r+0xaaa>
 80089aa:	2b39      	cmp	r3, #57	@ 0x39
 80089ac:	d0ee      	beq.n	800898c <_dtoa_r+0xa84>
 80089ae:	3301      	adds	r3, #1
 80089b0:	e7c9      	b.n	8008946 <_dtoa_r+0xa3e>
 80089b2:	9a04      	ldr	r2, [sp, #16]
 80089b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089ba:	428a      	cmp	r2, r1
 80089bc:	d028      	beq.n	8008a10 <_dtoa_r+0xb08>
 80089be:	2300      	movs	r3, #0
 80089c0:	220a      	movs	r2, #10
 80089c2:	9903      	ldr	r1, [sp, #12]
 80089c4:	4648      	mov	r0, r9
 80089c6:	f000 f9d3 	bl	8008d70 <__multadd>
 80089ca:	42af      	cmp	r7, r5
 80089cc:	9003      	str	r0, [sp, #12]
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	f04f 020a 	mov.w	r2, #10
 80089d6:	4639      	mov	r1, r7
 80089d8:	4648      	mov	r0, r9
 80089da:	d107      	bne.n	80089ec <_dtoa_r+0xae4>
 80089dc:	f000 f9c8 	bl	8008d70 <__multadd>
 80089e0:	4607      	mov	r7, r0
 80089e2:	4605      	mov	r5, r0
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	3301      	adds	r3, #1
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	e777      	b.n	80088dc <_dtoa_r+0x9d4>
 80089ec:	f000 f9c0 	bl	8008d70 <__multadd>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4607      	mov	r7, r0
 80089f4:	2300      	movs	r3, #0
 80089f6:	220a      	movs	r2, #10
 80089f8:	4648      	mov	r0, r9
 80089fa:	f000 f9b9 	bl	8008d70 <__multadd>
 80089fe:	4605      	mov	r5, r0
 8008a00:	e7f0      	b.n	80089e4 <_dtoa_r+0xadc>
 8008a02:	f1bb 0f00 	cmp.w	fp, #0
 8008a06:	bfcc      	ite	gt
 8008a08:	465e      	movgt	r6, fp
 8008a0a:	2601      	movle	r6, #1
 8008a0c:	2700      	movs	r7, #0
 8008a0e:	4456      	add	r6, sl
 8008a10:	2201      	movs	r2, #1
 8008a12:	9903      	ldr	r1, [sp, #12]
 8008a14:	4648      	mov	r0, r9
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	f000 fb4e 	bl	80090b8 <__lshift>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	9003      	str	r0, [sp, #12]
 8008a20:	f000 fbb6 	bl	8009190 <__mcmp>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	dcb4      	bgt.n	8008992 <_dtoa_r+0xa8a>
 8008a28:	d102      	bne.n	8008a30 <_dtoa_r+0xb28>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	07db      	lsls	r3, r3, #31
 8008a2e:	d4b0      	bmi.n	8008992 <_dtoa_r+0xa8a>
 8008a30:	4633      	mov	r3, r6
 8008a32:	461e      	mov	r6, r3
 8008a34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a38:	2a30      	cmp	r2, #48	@ 0x30
 8008a3a:	d0fa      	beq.n	8008a32 <_dtoa_r+0xb2a>
 8008a3c:	e4b5      	b.n	80083aa <_dtoa_r+0x4a2>
 8008a3e:	459a      	cmp	sl, r3
 8008a40:	d1a8      	bne.n	8008994 <_dtoa_r+0xa8c>
 8008a42:	2331      	movs	r3, #49	@ 0x31
 8008a44:	f108 0801 	add.w	r8, r8, #1
 8008a48:	f88a 3000 	strb.w	r3, [sl]
 8008a4c:	e4ad      	b.n	80083aa <_dtoa_r+0x4a2>
 8008a4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008aac <_dtoa_r+0xba4>
 8008a54:	b11b      	cbz	r3, 8008a5e <_dtoa_r+0xb56>
 8008a56:	f10a 0308 	add.w	r3, sl, #8
 8008a5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4650      	mov	r0, sl
 8008a60:	b017      	add	sp, #92	@ 0x5c
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	f77f ae2e 	ble.w	80086ca <_dtoa_r+0x7c2>
 8008a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a72:	2001      	movs	r0, #1
 8008a74:	e64d      	b.n	8008712 <_dtoa_r+0x80a>
 8008a76:	f1bb 0f00 	cmp.w	fp, #0
 8008a7a:	f77f aed9 	ble.w	8008830 <_dtoa_r+0x928>
 8008a7e:	4656      	mov	r6, sl
 8008a80:	4621      	mov	r1, r4
 8008a82:	9803      	ldr	r0, [sp, #12]
 8008a84:	f7ff f9b5 	bl	8007df2 <quorem>
 8008a88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a90:	eba6 020a 	sub.w	r2, r6, sl
 8008a94:	4593      	cmp	fp, r2
 8008a96:	ddb4      	ble.n	8008a02 <_dtoa_r+0xafa>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	220a      	movs	r2, #10
 8008a9c:	4648      	mov	r0, r9
 8008a9e:	9903      	ldr	r1, [sp, #12]
 8008aa0:	f000 f966 	bl	8008d70 <__multadd>
 8008aa4:	9003      	str	r0, [sp, #12]
 8008aa6:	e7eb      	b.n	8008a80 <_dtoa_r+0xb78>
 8008aa8:	0800b476 	.word	0x0800b476
 8008aac:	0800b3fa 	.word	0x0800b3fa

08008ab0 <_free_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	d040      	beq.n	8008b3a <_free_r+0x8a>
 8008ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abc:	1f0c      	subs	r4, r1, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfb8      	it	lt
 8008ac2:	18e4      	addlt	r4, r4, r3
 8008ac4:	f000 f8e6 	bl	8008c94 <__malloc_lock>
 8008ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b3c <_free_r+0x8c>)
 8008aca:	6813      	ldr	r3, [r2, #0]
 8008acc:	b933      	cbnz	r3, 8008adc <_free_r+0x2c>
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	6014      	str	r4, [r2, #0]
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad8:	f000 b8e2 	b.w	8008ca0 <__malloc_unlock>
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	d908      	bls.n	8008af2 <_free_r+0x42>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	1821      	adds	r1, r4, r0
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf01      	itttt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	1809      	addeq	r1, r1, r0
 8008aee:	6021      	streq	r1, [r4, #0]
 8008af0:	e7ed      	b.n	8008ace <_free_r+0x1e>
 8008af2:	461a      	mov	r2, r3
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b10b      	cbz	r3, 8008afc <_free_r+0x4c>
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	d9fa      	bls.n	8008af2 <_free_r+0x42>
 8008afc:	6811      	ldr	r1, [r2, #0]
 8008afe:	1850      	adds	r0, r2, r1
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d10b      	bne.n	8008b1c <_free_r+0x6c>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	4401      	add	r1, r0
 8008b08:	1850      	adds	r0, r2, r1
 8008b0a:	4283      	cmp	r3, r0
 8008b0c:	6011      	str	r1, [r2, #0]
 8008b0e:	d1e0      	bne.n	8008ad2 <_free_r+0x22>
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4408      	add	r0, r1
 8008b16:	6010      	str	r0, [r2, #0]
 8008b18:	6053      	str	r3, [r2, #4]
 8008b1a:	e7da      	b.n	8008ad2 <_free_r+0x22>
 8008b1c:	d902      	bls.n	8008b24 <_free_r+0x74>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	e7d6      	b.n	8008ad2 <_free_r+0x22>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	1821      	adds	r1, r4, r0
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf01      	itttt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	1809      	addeq	r1, r1, r0
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	6054      	str	r4, [r2, #4]
 8008b38:	e7cb      	b.n	8008ad2 <_free_r+0x22>
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20000950 	.word	0x20000950

08008b40 <malloc>:
 8008b40:	4b02      	ldr	r3, [pc, #8]	@ (8008b4c <malloc+0xc>)
 8008b42:	4601      	mov	r1, r0
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	f000 b825 	b.w	8008b94 <_malloc_r>
 8008b4a:	bf00      	nop
 8008b4c:	20000028 	.word	0x20000028

08008b50 <sbrk_aligned>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4e0f      	ldr	r6, [pc, #60]	@ (8008b90 <sbrk_aligned+0x40>)
 8008b54:	460c      	mov	r4, r1
 8008b56:	6831      	ldr	r1, [r6, #0]
 8008b58:	4605      	mov	r5, r0
 8008b5a:	b911      	cbnz	r1, 8008b62 <sbrk_aligned+0x12>
 8008b5c:	f000 fe3a 	bl	80097d4 <_sbrk_r>
 8008b60:	6030      	str	r0, [r6, #0]
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 fe35 	bl	80097d4 <_sbrk_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d103      	bne.n	8008b76 <sbrk_aligned+0x26>
 8008b6e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b72:	4620      	mov	r0, r4
 8008b74:	bd70      	pop	{r4, r5, r6, pc}
 8008b76:	1cc4      	adds	r4, r0, #3
 8008b78:	f024 0403 	bic.w	r4, r4, #3
 8008b7c:	42a0      	cmp	r0, r4
 8008b7e:	d0f8      	beq.n	8008b72 <sbrk_aligned+0x22>
 8008b80:	1a21      	subs	r1, r4, r0
 8008b82:	4628      	mov	r0, r5
 8008b84:	f000 fe26 	bl	80097d4 <_sbrk_r>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d1f2      	bne.n	8008b72 <sbrk_aligned+0x22>
 8008b8c:	e7ef      	b.n	8008b6e <sbrk_aligned+0x1e>
 8008b8e:	bf00      	nop
 8008b90:	2000094c 	.word	0x2000094c

08008b94 <_malloc_r>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	1ccd      	adds	r5, r1, #3
 8008b9a:	f025 0503 	bic.w	r5, r5, #3
 8008b9e:	3508      	adds	r5, #8
 8008ba0:	2d0c      	cmp	r5, #12
 8008ba2:	bf38      	it	cc
 8008ba4:	250c      	movcc	r5, #12
 8008ba6:	2d00      	cmp	r5, #0
 8008ba8:	4606      	mov	r6, r0
 8008baa:	db01      	blt.n	8008bb0 <_malloc_r+0x1c>
 8008bac:	42a9      	cmp	r1, r5
 8008bae:	d904      	bls.n	8008bba <_malloc_r+0x26>
 8008bb0:	230c      	movs	r3, #12
 8008bb2:	6033      	str	r3, [r6, #0]
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c90 <_malloc_r+0xfc>
 8008bbe:	f000 f869 	bl	8008c94 <__malloc_lock>
 8008bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc6:	461c      	mov	r4, r3
 8008bc8:	bb44      	cbnz	r4, 8008c1c <_malloc_r+0x88>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f7ff ffbf 	bl	8008b50 <sbrk_aligned>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	d158      	bne.n	8008c8a <_malloc_r+0xf6>
 8008bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bdc:	4627      	mov	r7, r4
 8008bde:	2f00      	cmp	r7, #0
 8008be0:	d143      	bne.n	8008c6a <_malloc_r+0xd6>
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	d04b      	beq.n	8008c7e <_malloc_r+0xea>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	4639      	mov	r1, r7
 8008bea:	4630      	mov	r0, r6
 8008bec:	eb04 0903 	add.w	r9, r4, r3
 8008bf0:	f000 fdf0 	bl	80097d4 <_sbrk_r>
 8008bf4:	4581      	cmp	r9, r0
 8008bf6:	d142      	bne.n	8008c7e <_malloc_r+0xea>
 8008bf8:	6821      	ldr	r1, [r4, #0]
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	1a6d      	subs	r5, r5, r1
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7ff ffa6 	bl	8008b50 <sbrk_aligned>
 8008c04:	3001      	adds	r0, #1
 8008c06:	d03a      	beq.n	8008c7e <_malloc_r+0xea>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	442b      	add	r3, r5
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	bb62      	cbnz	r2, 8008c70 <_malloc_r+0xdc>
 8008c16:	f8c8 7000 	str.w	r7, [r8]
 8008c1a:	e00f      	b.n	8008c3c <_malloc_r+0xa8>
 8008c1c:	6822      	ldr	r2, [r4, #0]
 8008c1e:	1b52      	subs	r2, r2, r5
 8008c20:	d420      	bmi.n	8008c64 <_malloc_r+0xd0>
 8008c22:	2a0b      	cmp	r2, #11
 8008c24:	d917      	bls.n	8008c56 <_malloc_r+0xc2>
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	6025      	str	r5, [r4, #0]
 8008c2c:	bf18      	it	ne
 8008c2e:	6059      	strne	r1, [r3, #4]
 8008c30:	6863      	ldr	r3, [r4, #4]
 8008c32:	bf08      	it	eq
 8008c34:	f8c8 1000 	streq.w	r1, [r8]
 8008c38:	5162      	str	r2, [r4, r5]
 8008c3a:	604b      	str	r3, [r1, #4]
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 f82f 	bl	8008ca0 <__malloc_unlock>
 8008c42:	f104 000b 	add.w	r0, r4, #11
 8008c46:	1d23      	adds	r3, r4, #4
 8008c48:	f020 0007 	bic.w	r0, r0, #7
 8008c4c:	1ac2      	subs	r2, r0, r3
 8008c4e:	bf1c      	itt	ne
 8008c50:	1a1b      	subne	r3, r3, r0
 8008c52:	50a3      	strne	r3, [r4, r2]
 8008c54:	e7af      	b.n	8008bb6 <_malloc_r+0x22>
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	bf0c      	ite	eq
 8008c5c:	f8c8 2000 	streq.w	r2, [r8]
 8008c60:	605a      	strne	r2, [r3, #4]
 8008c62:	e7eb      	b.n	8008c3c <_malloc_r+0xa8>
 8008c64:	4623      	mov	r3, r4
 8008c66:	6864      	ldr	r4, [r4, #4]
 8008c68:	e7ae      	b.n	8008bc8 <_malloc_r+0x34>
 8008c6a:	463c      	mov	r4, r7
 8008c6c:	687f      	ldr	r7, [r7, #4]
 8008c6e:	e7b6      	b.n	8008bde <_malloc_r+0x4a>
 8008c70:	461a      	mov	r2, r3
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	d1fb      	bne.n	8008c70 <_malloc_r+0xdc>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	6053      	str	r3, [r2, #4]
 8008c7c:	e7de      	b.n	8008c3c <_malloc_r+0xa8>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	4630      	mov	r0, r6
 8008c82:	6033      	str	r3, [r6, #0]
 8008c84:	f000 f80c 	bl	8008ca0 <__malloc_unlock>
 8008c88:	e794      	b.n	8008bb4 <_malloc_r+0x20>
 8008c8a:	6005      	str	r5, [r0, #0]
 8008c8c:	e7d6      	b.n	8008c3c <_malloc_r+0xa8>
 8008c8e:	bf00      	nop
 8008c90:	20000950 	.word	0x20000950

08008c94 <__malloc_lock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	@ (8008c9c <__malloc_lock+0x8>)
 8008c96:	f7ff b89c 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20000948 	.word	0x20000948

08008ca0 <__malloc_unlock>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	@ (8008ca8 <__malloc_unlock+0x8>)
 8008ca2:	f7ff b897 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20000948 	.word	0x20000948

08008cac <_Balloc>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	69c6      	ldr	r6, [r0, #28]
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	b976      	cbnz	r6, 8008cd4 <_Balloc+0x28>
 8008cb6:	2010      	movs	r0, #16
 8008cb8:	f7ff ff42 	bl	8008b40 <malloc>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	61e0      	str	r0, [r4, #28]
 8008cc0:	b920      	cbnz	r0, 8008ccc <_Balloc+0x20>
 8008cc2:	216b      	movs	r1, #107	@ 0x6b
 8008cc4:	4b17      	ldr	r3, [pc, #92]	@ (8008d24 <_Balloc+0x78>)
 8008cc6:	4818      	ldr	r0, [pc, #96]	@ (8008d28 <_Balloc+0x7c>)
 8008cc8:	f000 fda2 	bl	8009810 <__assert_func>
 8008ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cd0:	6006      	str	r6, [r0, #0]
 8008cd2:	60c6      	str	r6, [r0, #12]
 8008cd4:	69e6      	ldr	r6, [r4, #28]
 8008cd6:	68f3      	ldr	r3, [r6, #12]
 8008cd8:	b183      	cbz	r3, 8008cfc <_Balloc+0x50>
 8008cda:	69e3      	ldr	r3, [r4, #28]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ce2:	b9b8      	cbnz	r0, 8008d14 <_Balloc+0x68>
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8008cea:	1d72      	adds	r2, r6, #5
 8008cec:	4620      	mov	r0, r4
 8008cee:	0092      	lsls	r2, r2, #2
 8008cf0:	f000 fdac 	bl	800984c <_calloc_r>
 8008cf4:	b160      	cbz	r0, 8008d10 <_Balloc+0x64>
 8008cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cfa:	e00e      	b.n	8008d1a <_Balloc+0x6e>
 8008cfc:	2221      	movs	r2, #33	@ 0x21
 8008cfe:	2104      	movs	r1, #4
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fda3 	bl	800984c <_calloc_r>
 8008d06:	69e3      	ldr	r3, [r4, #28]
 8008d08:	60f0      	str	r0, [r6, #12]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e4      	bne.n	8008cda <_Balloc+0x2e>
 8008d10:	2000      	movs	r0, #0
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	6802      	ldr	r2, [r0, #0]
 8008d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d20:	e7f7      	b.n	8008d12 <_Balloc+0x66>
 8008d22:	bf00      	nop
 8008d24:	0800b407 	.word	0x0800b407
 8008d28:	0800b487 	.word	0x0800b487

08008d2c <_Bfree>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	69c6      	ldr	r6, [r0, #28]
 8008d30:	4605      	mov	r5, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	b976      	cbnz	r6, 8008d54 <_Bfree+0x28>
 8008d36:	2010      	movs	r0, #16
 8008d38:	f7ff ff02 	bl	8008b40 <malloc>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	61e8      	str	r0, [r5, #28]
 8008d40:	b920      	cbnz	r0, 8008d4c <_Bfree+0x20>
 8008d42:	218f      	movs	r1, #143	@ 0x8f
 8008d44:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <_Bfree+0x3c>)
 8008d46:	4809      	ldr	r0, [pc, #36]	@ (8008d6c <_Bfree+0x40>)
 8008d48:	f000 fd62 	bl	8009810 <__assert_func>
 8008d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d50:	6006      	str	r6, [r0, #0]
 8008d52:	60c6      	str	r6, [r0, #12]
 8008d54:	b13c      	cbz	r4, 8008d66 <_Bfree+0x3a>
 8008d56:	69eb      	ldr	r3, [r5, #28]
 8008d58:	6862      	ldr	r2, [r4, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d60:	6021      	str	r1, [r4, #0]
 8008d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	0800b407 	.word	0x0800b407
 8008d6c:	0800b487 	.word	0x0800b487

08008d70 <__multadd>:
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	4607      	mov	r7, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	461e      	mov	r6, r3
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	690d      	ldr	r5, [r1, #16]
 8008d7e:	f101 0c14 	add.w	ip, r1, #20
 8008d82:	f8dc 3000 	ldr.w	r3, [ip]
 8008d86:	3001      	adds	r0, #1
 8008d88:	b299      	uxth	r1, r3
 8008d8a:	fb02 6101 	mla	r1, r2, r1, r6
 8008d8e:	0c1e      	lsrs	r6, r3, #16
 8008d90:	0c0b      	lsrs	r3, r1, #16
 8008d92:	fb02 3306 	mla	r3, r2, r6, r3
 8008d96:	b289      	uxth	r1, r1
 8008d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d9c:	4285      	cmp	r5, r0
 8008d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008da2:	f84c 1b04 	str.w	r1, [ip], #4
 8008da6:	dcec      	bgt.n	8008d82 <__multadd+0x12>
 8008da8:	b30e      	cbz	r6, 8008dee <__multadd+0x7e>
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	42ab      	cmp	r3, r5
 8008dae:	dc19      	bgt.n	8008de4 <__multadd+0x74>
 8008db0:	6861      	ldr	r1, [r4, #4]
 8008db2:	4638      	mov	r0, r7
 8008db4:	3101      	adds	r1, #1
 8008db6:	f7ff ff79 	bl	8008cac <_Balloc>
 8008dba:	4680      	mov	r8, r0
 8008dbc:	b928      	cbnz	r0, 8008dca <__multadd+0x5a>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	21ba      	movs	r1, #186	@ 0xba
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008df4 <__multadd+0x84>)
 8008dc4:	480c      	ldr	r0, [pc, #48]	@ (8008df8 <__multadd+0x88>)
 8008dc6:	f000 fd23 	bl	8009810 <__assert_func>
 8008dca:	6922      	ldr	r2, [r4, #16]
 8008dcc:	f104 010c 	add.w	r1, r4, #12
 8008dd0:	3202      	adds	r2, #2
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	300c      	adds	r0, #12
 8008dd6:	f000 fd0d 	bl	80097f4 <memcpy>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff ffa5 	bl	8008d2c <_Bfree>
 8008de2:	4644      	mov	r4, r8
 8008de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008de8:	3501      	adds	r5, #1
 8008dea:	615e      	str	r6, [r3, #20]
 8008dec:	6125      	str	r5, [r4, #16]
 8008dee:	4620      	mov	r0, r4
 8008df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df4:	0800b476 	.word	0x0800b476
 8008df8:	0800b487 	.word	0x0800b487

08008dfc <__hi0bits>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e02:	bf3a      	itte	cc
 8008e04:	0403      	lslcc	r3, r0, #16
 8008e06:	2010      	movcc	r0, #16
 8008e08:	2000      	movcs	r0, #0
 8008e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e0e:	bf3c      	itt	cc
 8008e10:	021b      	lslcc	r3, r3, #8
 8008e12:	3008      	addcc	r0, #8
 8008e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e18:	bf3c      	itt	cc
 8008e1a:	011b      	lslcc	r3, r3, #4
 8008e1c:	3004      	addcc	r0, #4
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e22:	bf3c      	itt	cc
 8008e24:	009b      	lslcc	r3, r3, #2
 8008e26:	3002      	addcc	r0, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	db05      	blt.n	8008e38 <__hi0bits+0x3c>
 8008e2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e30:	f100 0001 	add.w	r0, r0, #1
 8008e34:	bf08      	it	eq
 8008e36:	2020      	moveq	r0, #32
 8008e38:	4770      	bx	lr

08008e3a <__lo0bits>:
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	f013 0007 	ands.w	r0, r3, #7
 8008e42:	d00b      	beq.n	8008e5c <__lo0bits+0x22>
 8008e44:	07d9      	lsls	r1, r3, #31
 8008e46:	d421      	bmi.n	8008e8c <__lo0bits+0x52>
 8008e48:	0798      	lsls	r0, r3, #30
 8008e4a:	bf49      	itett	mi
 8008e4c:	085b      	lsrmi	r3, r3, #1
 8008e4e:	089b      	lsrpl	r3, r3, #2
 8008e50:	2001      	movmi	r0, #1
 8008e52:	6013      	strmi	r3, [r2, #0]
 8008e54:	bf5c      	itt	pl
 8008e56:	2002      	movpl	r0, #2
 8008e58:	6013      	strpl	r3, [r2, #0]
 8008e5a:	4770      	bx	lr
 8008e5c:	b299      	uxth	r1, r3
 8008e5e:	b909      	cbnz	r1, 8008e64 <__lo0bits+0x2a>
 8008e60:	2010      	movs	r0, #16
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	b2d9      	uxtb	r1, r3
 8008e66:	b909      	cbnz	r1, 8008e6c <__lo0bits+0x32>
 8008e68:	3008      	adds	r0, #8
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	0719      	lsls	r1, r3, #28
 8008e6e:	bf04      	itt	eq
 8008e70:	091b      	lsreq	r3, r3, #4
 8008e72:	3004      	addeq	r0, #4
 8008e74:	0799      	lsls	r1, r3, #30
 8008e76:	bf04      	itt	eq
 8008e78:	089b      	lsreq	r3, r3, #2
 8008e7a:	3002      	addeq	r0, #2
 8008e7c:	07d9      	lsls	r1, r3, #31
 8008e7e:	d403      	bmi.n	8008e88 <__lo0bits+0x4e>
 8008e80:	085b      	lsrs	r3, r3, #1
 8008e82:	f100 0001 	add.w	r0, r0, #1
 8008e86:	d003      	beq.n	8008e90 <__lo0bits+0x56>
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	4770      	bx	lr
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	4770      	bx	lr
 8008e90:	2020      	movs	r0, #32
 8008e92:	4770      	bx	lr

08008e94 <__i2b>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	460c      	mov	r4, r1
 8008e98:	2101      	movs	r1, #1
 8008e9a:	f7ff ff07 	bl	8008cac <_Balloc>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	b928      	cbnz	r0, 8008eae <__i2b+0x1a>
 8008ea2:	f240 1145 	movw	r1, #325	@ 0x145
 8008ea6:	4b04      	ldr	r3, [pc, #16]	@ (8008eb8 <__i2b+0x24>)
 8008ea8:	4804      	ldr	r0, [pc, #16]	@ (8008ebc <__i2b+0x28>)
 8008eaa:	f000 fcb1 	bl	8009810 <__assert_func>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	6144      	str	r4, [r0, #20]
 8008eb2:	6103      	str	r3, [r0, #16]
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop
 8008eb8:	0800b476 	.word	0x0800b476
 8008ebc:	0800b487 	.word	0x0800b487

08008ec0 <__multiply>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	4617      	mov	r7, r2
 8008ec6:	690a      	ldr	r2, [r1, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4689      	mov	r9, r1
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	bfa2      	ittt	ge
 8008ed0:	463b      	movge	r3, r7
 8008ed2:	460f      	movge	r7, r1
 8008ed4:	4699      	movge	r9, r3
 8008ed6:	693d      	ldr	r5, [r7, #16]
 8008ed8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	eb05 060a 	add.w	r6, r5, sl
 8008ee4:	42b3      	cmp	r3, r6
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	bfb8      	it	lt
 8008eea:	3101      	addlt	r1, #1
 8008eec:	f7ff fede 	bl	8008cac <_Balloc>
 8008ef0:	b930      	cbnz	r0, 8008f00 <__multiply+0x40>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ef8:	4b40      	ldr	r3, [pc, #256]	@ (8008ffc <__multiply+0x13c>)
 8008efa:	4841      	ldr	r0, [pc, #260]	@ (8009000 <__multiply+0x140>)
 8008efc:	f000 fc88 	bl	8009810 <__assert_func>
 8008f00:	f100 0414 	add.w	r4, r0, #20
 8008f04:	4623      	mov	r3, r4
 8008f06:	2200      	movs	r2, #0
 8008f08:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f0c:	4573      	cmp	r3, lr
 8008f0e:	d320      	bcc.n	8008f52 <__multiply+0x92>
 8008f10:	f107 0814 	add.w	r8, r7, #20
 8008f14:	f109 0114 	add.w	r1, r9, #20
 8008f18:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f1c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	1beb      	subs	r3, r5, r7
 8008f24:	3b15      	subs	r3, #21
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	3715      	adds	r7, #21
 8008f2e:	42bd      	cmp	r5, r7
 8008f30:	bf38      	it	cc
 8008f32:	2304      	movcc	r3, #4
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	9103      	str	r1, [sp, #12]
 8008f3a:	428b      	cmp	r3, r1
 8008f3c:	d80c      	bhi.n	8008f58 <__multiply+0x98>
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	dd03      	ble.n	8008f4a <__multiply+0x8a>
 8008f42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d055      	beq.n	8008ff6 <__multiply+0x136>
 8008f4a:	6106      	str	r6, [r0, #16]
 8008f4c:	b005      	add	sp, #20
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	f843 2b04 	str.w	r2, [r3], #4
 8008f56:	e7d9      	b.n	8008f0c <__multiply+0x4c>
 8008f58:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f5c:	f1ba 0f00 	cmp.w	sl, #0
 8008f60:	d01f      	beq.n	8008fa2 <__multiply+0xe2>
 8008f62:	46c4      	mov	ip, r8
 8008f64:	46a1      	mov	r9, r4
 8008f66:	2700      	movs	r7, #0
 8008f68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f6c:	f8d9 3000 	ldr.w	r3, [r9]
 8008f70:	fa1f fb82 	uxth.w	fp, r2
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f7a:	443b      	add	r3, r7
 8008f7c:	f8d9 7000 	ldr.w	r7, [r9]
 8008f80:	0c12      	lsrs	r2, r2, #16
 8008f82:	0c3f      	lsrs	r7, r7, #16
 8008f84:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f88:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f92:	4565      	cmp	r5, ip
 8008f94:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f98:	f849 3b04 	str.w	r3, [r9], #4
 8008f9c:	d8e4      	bhi.n	8008f68 <__multiply+0xa8>
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	50e7      	str	r7, [r4, r3]
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	3104      	adds	r1, #4
 8008fa6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008faa:	f1b9 0f00 	cmp.w	r9, #0
 8008fae:	d020      	beq.n	8008ff2 <__multiply+0x132>
 8008fb0:	4647      	mov	r7, r8
 8008fb2:	46a4      	mov	ip, r4
 8008fb4:	f04f 0a00 	mov.w	sl, #0
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	f8b7 b000 	ldrh.w	fp, [r7]
 8008fbe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	fb09 220b 	mla	r2, r9, fp, r2
 8008fc8:	4452      	add	r2, sl
 8008fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fce:	f84c 3b04 	str.w	r3, [ip], #4
 8008fd2:	f857 3b04 	ldr.w	r3, [r7], #4
 8008fd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fda:	f8bc 3000 	ldrh.w	r3, [ip]
 8008fde:	42bd      	cmp	r5, r7
 8008fe0:	fb09 330a 	mla	r3, r9, sl, r3
 8008fe4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008fe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fec:	d8e5      	bhi.n	8008fba <__multiply+0xfa>
 8008fee:	9a01      	ldr	r2, [sp, #4]
 8008ff0:	50a3      	str	r3, [r4, r2]
 8008ff2:	3404      	adds	r4, #4
 8008ff4:	e79f      	b.n	8008f36 <__multiply+0x76>
 8008ff6:	3e01      	subs	r6, #1
 8008ff8:	e7a1      	b.n	8008f3e <__multiply+0x7e>
 8008ffa:	bf00      	nop
 8008ffc:	0800b476 	.word	0x0800b476
 8009000:	0800b487 	.word	0x0800b487

08009004 <__pow5mult>:
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009008:	4615      	mov	r5, r2
 800900a:	f012 0203 	ands.w	r2, r2, #3
 800900e:	4607      	mov	r7, r0
 8009010:	460e      	mov	r6, r1
 8009012:	d007      	beq.n	8009024 <__pow5mult+0x20>
 8009014:	4c25      	ldr	r4, [pc, #148]	@ (80090ac <__pow5mult+0xa8>)
 8009016:	3a01      	subs	r2, #1
 8009018:	2300      	movs	r3, #0
 800901a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800901e:	f7ff fea7 	bl	8008d70 <__multadd>
 8009022:	4606      	mov	r6, r0
 8009024:	10ad      	asrs	r5, r5, #2
 8009026:	d03d      	beq.n	80090a4 <__pow5mult+0xa0>
 8009028:	69fc      	ldr	r4, [r7, #28]
 800902a:	b97c      	cbnz	r4, 800904c <__pow5mult+0x48>
 800902c:	2010      	movs	r0, #16
 800902e:	f7ff fd87 	bl	8008b40 <malloc>
 8009032:	4602      	mov	r2, r0
 8009034:	61f8      	str	r0, [r7, #28]
 8009036:	b928      	cbnz	r0, 8009044 <__pow5mult+0x40>
 8009038:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800903c:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <__pow5mult+0xac>)
 800903e:	481d      	ldr	r0, [pc, #116]	@ (80090b4 <__pow5mult+0xb0>)
 8009040:	f000 fbe6 	bl	8009810 <__assert_func>
 8009044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009048:	6004      	str	r4, [r0, #0]
 800904a:	60c4      	str	r4, [r0, #12]
 800904c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009054:	b94c      	cbnz	r4, 800906a <__pow5mult+0x66>
 8009056:	f240 2171 	movw	r1, #625	@ 0x271
 800905a:	4638      	mov	r0, r7
 800905c:	f7ff ff1a 	bl	8008e94 <__i2b>
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	f8c8 0008 	str.w	r0, [r8, #8]
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	07eb      	lsls	r3, r5, #31
 8009070:	d50a      	bpl.n	8009088 <__pow5mult+0x84>
 8009072:	4631      	mov	r1, r6
 8009074:	4622      	mov	r2, r4
 8009076:	4638      	mov	r0, r7
 8009078:	f7ff ff22 	bl	8008ec0 <__multiply>
 800907c:	4680      	mov	r8, r0
 800907e:	4631      	mov	r1, r6
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff fe53 	bl	8008d2c <_Bfree>
 8009086:	4646      	mov	r6, r8
 8009088:	106d      	asrs	r5, r5, #1
 800908a:	d00b      	beq.n	80090a4 <__pow5mult+0xa0>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	b938      	cbnz	r0, 80090a0 <__pow5mult+0x9c>
 8009090:	4622      	mov	r2, r4
 8009092:	4621      	mov	r1, r4
 8009094:	4638      	mov	r0, r7
 8009096:	f7ff ff13 	bl	8008ec0 <__multiply>
 800909a:	6020      	str	r0, [r4, #0]
 800909c:	f8c0 9000 	str.w	r9, [r0]
 80090a0:	4604      	mov	r4, r0
 80090a2:	e7e4      	b.n	800906e <__pow5mult+0x6a>
 80090a4:	4630      	mov	r0, r6
 80090a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090aa:	bf00      	nop
 80090ac:	0800b538 	.word	0x0800b538
 80090b0:	0800b407 	.word	0x0800b407
 80090b4:	0800b487 	.word	0x0800b487

080090b8 <__lshift>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	460c      	mov	r4, r1
 80090be:	4607      	mov	r7, r0
 80090c0:	4691      	mov	r9, r2
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	6849      	ldr	r1, [r1, #4]
 80090c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090d0:	f108 0601 	add.w	r6, r8, #1
 80090d4:	42b3      	cmp	r3, r6
 80090d6:	db0b      	blt.n	80090f0 <__lshift+0x38>
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff fde7 	bl	8008cac <_Balloc>
 80090de:	4605      	mov	r5, r0
 80090e0:	b948      	cbnz	r0, 80090f6 <__lshift+0x3e>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090e8:	4b27      	ldr	r3, [pc, #156]	@ (8009188 <__lshift+0xd0>)
 80090ea:	4828      	ldr	r0, [pc, #160]	@ (800918c <__lshift+0xd4>)
 80090ec:	f000 fb90 	bl	8009810 <__assert_func>
 80090f0:	3101      	adds	r1, #1
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	e7ee      	b.n	80090d4 <__lshift+0x1c>
 80090f6:	2300      	movs	r3, #0
 80090f8:	f100 0114 	add.w	r1, r0, #20
 80090fc:	f100 0210 	add.w	r2, r0, #16
 8009100:	4618      	mov	r0, r3
 8009102:	4553      	cmp	r3, sl
 8009104:	db33      	blt.n	800916e <__lshift+0xb6>
 8009106:	6920      	ldr	r0, [r4, #16]
 8009108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800910c:	f104 0314 	add.w	r3, r4, #20
 8009110:	f019 091f 	ands.w	r9, r9, #31
 8009114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009118:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800911c:	d02b      	beq.n	8009176 <__lshift+0xbe>
 800911e:	468a      	mov	sl, r1
 8009120:	2200      	movs	r2, #0
 8009122:	f1c9 0e20 	rsb	lr, r9, #32
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	fa00 f009 	lsl.w	r0, r0, r9
 800912c:	4310      	orrs	r0, r2
 800912e:	f84a 0b04 	str.w	r0, [sl], #4
 8009132:	f853 2b04 	ldr.w	r2, [r3], #4
 8009136:	459c      	cmp	ip, r3
 8009138:	fa22 f20e 	lsr.w	r2, r2, lr
 800913c:	d8f3      	bhi.n	8009126 <__lshift+0x6e>
 800913e:	ebac 0304 	sub.w	r3, ip, r4
 8009142:	3b15      	subs	r3, #21
 8009144:	f023 0303 	bic.w	r3, r3, #3
 8009148:	3304      	adds	r3, #4
 800914a:	f104 0015 	add.w	r0, r4, #21
 800914e:	4560      	cmp	r0, ip
 8009150:	bf88      	it	hi
 8009152:	2304      	movhi	r3, #4
 8009154:	50ca      	str	r2, [r1, r3]
 8009156:	b10a      	cbz	r2, 800915c <__lshift+0xa4>
 8009158:	f108 0602 	add.w	r6, r8, #2
 800915c:	3e01      	subs	r6, #1
 800915e:	4638      	mov	r0, r7
 8009160:	4621      	mov	r1, r4
 8009162:	612e      	str	r6, [r5, #16]
 8009164:	f7ff fde2 	bl	8008d2c <_Bfree>
 8009168:	4628      	mov	r0, r5
 800916a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009172:	3301      	adds	r3, #1
 8009174:	e7c5      	b.n	8009102 <__lshift+0x4a>
 8009176:	3904      	subs	r1, #4
 8009178:	f853 2b04 	ldr.w	r2, [r3], #4
 800917c:	459c      	cmp	ip, r3
 800917e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009182:	d8f9      	bhi.n	8009178 <__lshift+0xc0>
 8009184:	e7ea      	b.n	800915c <__lshift+0xa4>
 8009186:	bf00      	nop
 8009188:	0800b476 	.word	0x0800b476
 800918c:	0800b487 	.word	0x0800b487

08009190 <__mcmp>:
 8009190:	4603      	mov	r3, r0
 8009192:	690a      	ldr	r2, [r1, #16]
 8009194:	6900      	ldr	r0, [r0, #16]
 8009196:	b530      	push	{r4, r5, lr}
 8009198:	1a80      	subs	r0, r0, r2
 800919a:	d10e      	bne.n	80091ba <__mcmp+0x2a>
 800919c:	3314      	adds	r3, #20
 800919e:	3114      	adds	r1, #20
 80091a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091b0:	4295      	cmp	r5, r2
 80091b2:	d003      	beq.n	80091bc <__mcmp+0x2c>
 80091b4:	d205      	bcs.n	80091c2 <__mcmp+0x32>
 80091b6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d3f3      	bcc.n	80091a8 <__mcmp+0x18>
 80091c0:	e7fb      	b.n	80091ba <__mcmp+0x2a>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7f9      	b.n	80091ba <__mcmp+0x2a>
	...

080091c8 <__mdiff>:
 80091c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	4689      	mov	r9, r1
 80091ce:	4606      	mov	r6, r0
 80091d0:	4611      	mov	r1, r2
 80091d2:	4648      	mov	r0, r9
 80091d4:	4614      	mov	r4, r2
 80091d6:	f7ff ffdb 	bl	8009190 <__mcmp>
 80091da:	1e05      	subs	r5, r0, #0
 80091dc:	d112      	bne.n	8009204 <__mdiff+0x3c>
 80091de:	4629      	mov	r1, r5
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff fd63 	bl	8008cac <_Balloc>
 80091e6:	4602      	mov	r2, r0
 80091e8:	b928      	cbnz	r0, 80091f6 <__mdiff+0x2e>
 80091ea:	f240 2137 	movw	r1, #567	@ 0x237
 80091ee:	4b3e      	ldr	r3, [pc, #248]	@ (80092e8 <__mdiff+0x120>)
 80091f0:	483e      	ldr	r0, [pc, #248]	@ (80092ec <__mdiff+0x124>)
 80091f2:	f000 fb0d 	bl	8009810 <__assert_func>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091fc:	4610      	mov	r0, r2
 80091fe:	b003      	add	sp, #12
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	bfbc      	itt	lt
 8009206:	464b      	movlt	r3, r9
 8009208:	46a1      	movlt	r9, r4
 800920a:	4630      	mov	r0, r6
 800920c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009210:	bfba      	itte	lt
 8009212:	461c      	movlt	r4, r3
 8009214:	2501      	movlt	r5, #1
 8009216:	2500      	movge	r5, #0
 8009218:	f7ff fd48 	bl	8008cac <_Balloc>
 800921c:	4602      	mov	r2, r0
 800921e:	b918      	cbnz	r0, 8009228 <__mdiff+0x60>
 8009220:	f240 2145 	movw	r1, #581	@ 0x245
 8009224:	4b30      	ldr	r3, [pc, #192]	@ (80092e8 <__mdiff+0x120>)
 8009226:	e7e3      	b.n	80091f0 <__mdiff+0x28>
 8009228:	f100 0b14 	add.w	fp, r0, #20
 800922c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009230:	f109 0310 	add.w	r3, r9, #16
 8009234:	60c5      	str	r5, [r0, #12]
 8009236:	f04f 0c00 	mov.w	ip, #0
 800923a:	f109 0514 	add.w	r5, r9, #20
 800923e:	46d9      	mov	r9, fp
 8009240:	6926      	ldr	r6, [r4, #16]
 8009242:	f104 0e14 	add.w	lr, r4, #20
 8009246:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800924a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009256:	f853 af04 	ldr.w	sl, [r3, #4]!
 800925a:	b281      	uxth	r1, r0
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	fa1f f38a 	uxth.w	r3, sl
 8009262:	1a5b      	subs	r3, r3, r1
 8009264:	0c00      	lsrs	r0, r0, #16
 8009266:	4463      	add	r3, ip
 8009268:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800926c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009270:	b29b      	uxth	r3, r3
 8009272:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009276:	4576      	cmp	r6, lr
 8009278:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800927c:	f849 3b04 	str.w	r3, [r9], #4
 8009280:	d8e6      	bhi.n	8009250 <__mdiff+0x88>
 8009282:	1b33      	subs	r3, r6, r4
 8009284:	3b15      	subs	r3, #21
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	3415      	adds	r4, #21
 800928c:	3304      	adds	r3, #4
 800928e:	42a6      	cmp	r6, r4
 8009290:	bf38      	it	cc
 8009292:	2304      	movcc	r3, #4
 8009294:	441d      	add	r5, r3
 8009296:	445b      	add	r3, fp
 8009298:	461e      	mov	r6, r3
 800929a:	462c      	mov	r4, r5
 800929c:	4544      	cmp	r4, r8
 800929e:	d30e      	bcc.n	80092be <__mdiff+0xf6>
 80092a0:	f108 0103 	add.w	r1, r8, #3
 80092a4:	1b49      	subs	r1, r1, r5
 80092a6:	f021 0103 	bic.w	r1, r1, #3
 80092aa:	3d03      	subs	r5, #3
 80092ac:	45a8      	cmp	r8, r5
 80092ae:	bf38      	it	cc
 80092b0:	2100      	movcc	r1, #0
 80092b2:	440b      	add	r3, r1
 80092b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092b8:	b199      	cbz	r1, 80092e2 <__mdiff+0x11a>
 80092ba:	6117      	str	r7, [r2, #16]
 80092bc:	e79e      	b.n	80091fc <__mdiff+0x34>
 80092be:	46e6      	mov	lr, ip
 80092c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80092c4:	fa1f fc81 	uxth.w	ip, r1
 80092c8:	44f4      	add	ip, lr
 80092ca:	0c08      	lsrs	r0, r1, #16
 80092cc:	4471      	add	r1, lr
 80092ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092d2:	b289      	uxth	r1, r1
 80092d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092dc:	f846 1b04 	str.w	r1, [r6], #4
 80092e0:	e7dc      	b.n	800929c <__mdiff+0xd4>
 80092e2:	3f01      	subs	r7, #1
 80092e4:	e7e6      	b.n	80092b4 <__mdiff+0xec>
 80092e6:	bf00      	nop
 80092e8:	0800b476 	.word	0x0800b476
 80092ec:	0800b487 	.word	0x0800b487

080092f0 <__d2b>:
 80092f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80092f4:	2101      	movs	r1, #1
 80092f6:	4690      	mov	r8, r2
 80092f8:	4699      	mov	r9, r3
 80092fa:	9e08      	ldr	r6, [sp, #32]
 80092fc:	f7ff fcd6 	bl	8008cac <_Balloc>
 8009300:	4604      	mov	r4, r0
 8009302:	b930      	cbnz	r0, 8009312 <__d2b+0x22>
 8009304:	4602      	mov	r2, r0
 8009306:	f240 310f 	movw	r1, #783	@ 0x30f
 800930a:	4b23      	ldr	r3, [pc, #140]	@ (8009398 <__d2b+0xa8>)
 800930c:	4823      	ldr	r0, [pc, #140]	@ (800939c <__d2b+0xac>)
 800930e:	f000 fa7f 	bl	8009810 <__assert_func>
 8009312:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009316:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800931a:	b10d      	cbz	r5, 8009320 <__d2b+0x30>
 800931c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	f1b8 0300 	subs.w	r3, r8, #0
 8009326:	d024      	beq.n	8009372 <__d2b+0x82>
 8009328:	4668      	mov	r0, sp
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	f7ff fd85 	bl	8008e3a <__lo0bits>
 8009330:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009334:	b1d8      	cbz	r0, 800936e <__d2b+0x7e>
 8009336:	f1c0 0320 	rsb	r3, r0, #32
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	430b      	orrs	r3, r1
 8009340:	40c2      	lsrs	r2, r0
 8009342:	6163      	str	r3, [r4, #20]
 8009344:	9201      	str	r2, [sp, #4]
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bf0c      	ite	eq
 800934c:	2201      	moveq	r2, #1
 800934e:	2202      	movne	r2, #2
 8009350:	61a3      	str	r3, [r4, #24]
 8009352:	6122      	str	r2, [r4, #16]
 8009354:	b1ad      	cbz	r5, 8009382 <__d2b+0x92>
 8009356:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800935a:	4405      	add	r5, r0
 800935c:	6035      	str	r5, [r6, #0]
 800935e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009364:	6018      	str	r0, [r3, #0]
 8009366:	4620      	mov	r0, r4
 8009368:	b002      	add	sp, #8
 800936a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800936e:	6161      	str	r1, [r4, #20]
 8009370:	e7e9      	b.n	8009346 <__d2b+0x56>
 8009372:	a801      	add	r0, sp, #4
 8009374:	f7ff fd61 	bl	8008e3a <__lo0bits>
 8009378:	9b01      	ldr	r3, [sp, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	6163      	str	r3, [r4, #20]
 800937e:	3020      	adds	r0, #32
 8009380:	e7e7      	b.n	8009352 <__d2b+0x62>
 8009382:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800938a:	6030      	str	r0, [r6, #0]
 800938c:	6918      	ldr	r0, [r3, #16]
 800938e:	f7ff fd35 	bl	8008dfc <__hi0bits>
 8009392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009396:	e7e4      	b.n	8009362 <__d2b+0x72>
 8009398:	0800b476 	.word	0x0800b476
 800939c:	0800b487 	.word	0x0800b487

080093a0 <__ssputs_r>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	461f      	mov	r7, r3
 80093a6:	688e      	ldr	r6, [r1, #8]
 80093a8:	4682      	mov	sl, r0
 80093aa:	42be      	cmp	r6, r7
 80093ac:	460c      	mov	r4, r1
 80093ae:	4690      	mov	r8, r2
 80093b0:	680b      	ldr	r3, [r1, #0]
 80093b2:	d82d      	bhi.n	8009410 <__ssputs_r+0x70>
 80093b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093bc:	d026      	beq.n	800940c <__ssputs_r+0x6c>
 80093be:	6965      	ldr	r5, [r4, #20]
 80093c0:	6909      	ldr	r1, [r1, #16]
 80093c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093c6:	eba3 0901 	sub.w	r9, r3, r1
 80093ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093ce:	1c7b      	adds	r3, r7, #1
 80093d0:	444b      	add	r3, r9
 80093d2:	106d      	asrs	r5, r5, #1
 80093d4:	429d      	cmp	r5, r3
 80093d6:	bf38      	it	cc
 80093d8:	461d      	movcc	r5, r3
 80093da:	0553      	lsls	r3, r2, #21
 80093dc:	d527      	bpl.n	800942e <__ssputs_r+0x8e>
 80093de:	4629      	mov	r1, r5
 80093e0:	f7ff fbd8 	bl	8008b94 <_malloc_r>
 80093e4:	4606      	mov	r6, r0
 80093e6:	b360      	cbz	r0, 8009442 <__ssputs_r+0xa2>
 80093e8:	464a      	mov	r2, r9
 80093ea:	6921      	ldr	r1, [r4, #16]
 80093ec:	f000 fa02 	bl	80097f4 <memcpy>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fa:	81a3      	strh	r3, [r4, #12]
 80093fc:	6126      	str	r6, [r4, #16]
 80093fe:	444e      	add	r6, r9
 8009400:	6026      	str	r6, [r4, #0]
 8009402:	463e      	mov	r6, r7
 8009404:	6165      	str	r5, [r4, #20]
 8009406:	eba5 0509 	sub.w	r5, r5, r9
 800940a:	60a5      	str	r5, [r4, #8]
 800940c:	42be      	cmp	r6, r7
 800940e:	d900      	bls.n	8009412 <__ssputs_r+0x72>
 8009410:	463e      	mov	r6, r7
 8009412:	4632      	mov	r2, r6
 8009414:	4641      	mov	r1, r8
 8009416:	6820      	ldr	r0, [r4, #0]
 8009418:	f000 f9c2 	bl	80097a0 <memmove>
 800941c:	2000      	movs	r0, #0
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	1b9b      	subs	r3, r3, r6
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	4433      	add	r3, r6
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942e:	462a      	mov	r2, r5
 8009430:	f000 fa32 	bl	8009898 <_realloc_r>
 8009434:	4606      	mov	r6, r0
 8009436:	2800      	cmp	r0, #0
 8009438:	d1e0      	bne.n	80093fc <__ssputs_r+0x5c>
 800943a:	4650      	mov	r0, sl
 800943c:	6921      	ldr	r1, [r4, #16]
 800943e:	f7ff fb37 	bl	8008ab0 <_free_r>
 8009442:	230c      	movs	r3, #12
 8009444:	f8ca 3000 	str.w	r3, [sl]
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	f04f 30ff 	mov.w	r0, #4294967295
 800944e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	e7e9      	b.n	800942a <__ssputs_r+0x8a>
	...

08009458 <_svfiprintf_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	4698      	mov	r8, r3
 800945e:	898b      	ldrh	r3, [r1, #12]
 8009460:	4607      	mov	r7, r0
 8009462:	061b      	lsls	r3, r3, #24
 8009464:	460d      	mov	r5, r1
 8009466:	4614      	mov	r4, r2
 8009468:	b09d      	sub	sp, #116	@ 0x74
 800946a:	d510      	bpl.n	800948e <_svfiprintf_r+0x36>
 800946c:	690b      	ldr	r3, [r1, #16]
 800946e:	b973      	cbnz	r3, 800948e <_svfiprintf_r+0x36>
 8009470:	2140      	movs	r1, #64	@ 0x40
 8009472:	f7ff fb8f 	bl	8008b94 <_malloc_r>
 8009476:	6028      	str	r0, [r5, #0]
 8009478:	6128      	str	r0, [r5, #16]
 800947a:	b930      	cbnz	r0, 800948a <_svfiprintf_r+0x32>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	b01d      	add	sp, #116	@ 0x74
 8009486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948a:	2340      	movs	r3, #64	@ 0x40
 800948c:	616b      	str	r3, [r5, #20]
 800948e:	2300      	movs	r3, #0
 8009490:	9309      	str	r3, [sp, #36]	@ 0x24
 8009492:	2320      	movs	r3, #32
 8009494:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009498:	2330      	movs	r3, #48	@ 0x30
 800949a:	f04f 0901 	mov.w	r9, #1
 800949e:	f8cd 800c 	str.w	r8, [sp, #12]
 80094a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800963c <_svfiprintf_r+0x1e4>
 80094a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094aa:	4623      	mov	r3, r4
 80094ac:	469a      	mov	sl, r3
 80094ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094b2:	b10a      	cbz	r2, 80094b8 <_svfiprintf_r+0x60>
 80094b4:	2a25      	cmp	r2, #37	@ 0x25
 80094b6:	d1f9      	bne.n	80094ac <_svfiprintf_r+0x54>
 80094b8:	ebba 0b04 	subs.w	fp, sl, r4
 80094bc:	d00b      	beq.n	80094d6 <_svfiprintf_r+0x7e>
 80094be:	465b      	mov	r3, fp
 80094c0:	4622      	mov	r2, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	4638      	mov	r0, r7
 80094c6:	f7ff ff6b 	bl	80093a0 <__ssputs_r>
 80094ca:	3001      	adds	r0, #1
 80094cc:	f000 80a7 	beq.w	800961e <_svfiprintf_r+0x1c6>
 80094d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d2:	445a      	add	r2, fp
 80094d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094d6:	f89a 3000 	ldrb.w	r3, [sl]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 809f 	beq.w	800961e <_svfiprintf_r+0x1c6>
 80094e0:	2300      	movs	r3, #0
 80094e2:	f04f 32ff 	mov.w	r2, #4294967295
 80094e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ea:	f10a 0a01 	add.w	sl, sl, #1
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80094f8:	4654      	mov	r4, sl
 80094fa:	2205      	movs	r2, #5
 80094fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009500:	484e      	ldr	r0, [pc, #312]	@ (800963c <_svfiprintf_r+0x1e4>)
 8009502:	f7fe fc68 	bl	8007dd6 <memchr>
 8009506:	9a04      	ldr	r2, [sp, #16]
 8009508:	b9d8      	cbnz	r0, 8009542 <_svfiprintf_r+0xea>
 800950a:	06d0      	lsls	r0, r2, #27
 800950c:	bf44      	itt	mi
 800950e:	2320      	movmi	r3, #32
 8009510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009514:	0711      	lsls	r1, r2, #28
 8009516:	bf44      	itt	mi
 8009518:	232b      	movmi	r3, #43	@ 0x2b
 800951a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800951e:	f89a 3000 	ldrb.w	r3, [sl]
 8009522:	2b2a      	cmp	r3, #42	@ 0x2a
 8009524:	d015      	beq.n	8009552 <_svfiprintf_r+0xfa>
 8009526:	4654      	mov	r4, sl
 8009528:	2000      	movs	r0, #0
 800952a:	f04f 0c0a 	mov.w	ip, #10
 800952e:	9a07      	ldr	r2, [sp, #28]
 8009530:	4621      	mov	r1, r4
 8009532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009536:	3b30      	subs	r3, #48	@ 0x30
 8009538:	2b09      	cmp	r3, #9
 800953a:	d94b      	bls.n	80095d4 <_svfiprintf_r+0x17c>
 800953c:	b1b0      	cbz	r0, 800956c <_svfiprintf_r+0x114>
 800953e:	9207      	str	r2, [sp, #28]
 8009540:	e014      	b.n	800956c <_svfiprintf_r+0x114>
 8009542:	eba0 0308 	sub.w	r3, r0, r8
 8009546:	fa09 f303 	lsl.w	r3, r9, r3
 800954a:	4313      	orrs	r3, r2
 800954c:	46a2      	mov	sl, r4
 800954e:	9304      	str	r3, [sp, #16]
 8009550:	e7d2      	b.n	80094f8 <_svfiprintf_r+0xa0>
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	1d19      	adds	r1, r3, #4
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	9103      	str	r1, [sp, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	bfbb      	ittet	lt
 800955e:	425b      	neglt	r3, r3
 8009560:	f042 0202 	orrlt.w	r2, r2, #2
 8009564:	9307      	strge	r3, [sp, #28]
 8009566:	9307      	strlt	r3, [sp, #28]
 8009568:	bfb8      	it	lt
 800956a:	9204      	strlt	r2, [sp, #16]
 800956c:	7823      	ldrb	r3, [r4, #0]
 800956e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009570:	d10a      	bne.n	8009588 <_svfiprintf_r+0x130>
 8009572:	7863      	ldrb	r3, [r4, #1]
 8009574:	2b2a      	cmp	r3, #42	@ 0x2a
 8009576:	d132      	bne.n	80095de <_svfiprintf_r+0x186>
 8009578:	9b03      	ldr	r3, [sp, #12]
 800957a:	3402      	adds	r4, #2
 800957c:	1d1a      	adds	r2, r3, #4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	9203      	str	r2, [sp, #12]
 8009582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009586:	9305      	str	r3, [sp, #20]
 8009588:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009640 <_svfiprintf_r+0x1e8>
 800958c:	2203      	movs	r2, #3
 800958e:	4650      	mov	r0, sl
 8009590:	7821      	ldrb	r1, [r4, #0]
 8009592:	f7fe fc20 	bl	8007dd6 <memchr>
 8009596:	b138      	cbz	r0, 80095a8 <_svfiprintf_r+0x150>
 8009598:	2240      	movs	r2, #64	@ 0x40
 800959a:	9b04      	ldr	r3, [sp, #16]
 800959c:	eba0 000a 	sub.w	r0, r0, sl
 80095a0:	4082      	lsls	r2, r0
 80095a2:	4313      	orrs	r3, r2
 80095a4:	3401      	adds	r4, #1
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ac:	2206      	movs	r2, #6
 80095ae:	4825      	ldr	r0, [pc, #148]	@ (8009644 <_svfiprintf_r+0x1ec>)
 80095b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095b4:	f7fe fc0f 	bl	8007dd6 <memchr>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d036      	beq.n	800962a <_svfiprintf_r+0x1d2>
 80095bc:	4b22      	ldr	r3, [pc, #136]	@ (8009648 <_svfiprintf_r+0x1f0>)
 80095be:	bb1b      	cbnz	r3, 8009608 <_svfiprintf_r+0x1b0>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	3307      	adds	r3, #7
 80095c4:	f023 0307 	bic.w	r3, r3, #7
 80095c8:	3308      	adds	r3, #8
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ce:	4433      	add	r3, r6
 80095d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d2:	e76a      	b.n	80094aa <_svfiprintf_r+0x52>
 80095d4:	460c      	mov	r4, r1
 80095d6:	2001      	movs	r0, #1
 80095d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095dc:	e7a8      	b.n	8009530 <_svfiprintf_r+0xd8>
 80095de:	2300      	movs	r3, #0
 80095e0:	f04f 0c0a 	mov.w	ip, #10
 80095e4:	4619      	mov	r1, r3
 80095e6:	3401      	adds	r4, #1
 80095e8:	9305      	str	r3, [sp, #20]
 80095ea:	4620      	mov	r0, r4
 80095ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f0:	3a30      	subs	r2, #48	@ 0x30
 80095f2:	2a09      	cmp	r2, #9
 80095f4:	d903      	bls.n	80095fe <_svfiprintf_r+0x1a6>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0c6      	beq.n	8009588 <_svfiprintf_r+0x130>
 80095fa:	9105      	str	r1, [sp, #20]
 80095fc:	e7c4      	b.n	8009588 <_svfiprintf_r+0x130>
 80095fe:	4604      	mov	r4, r0
 8009600:	2301      	movs	r3, #1
 8009602:	fb0c 2101 	mla	r1, ip, r1, r2
 8009606:	e7f0      	b.n	80095ea <_svfiprintf_r+0x192>
 8009608:	ab03      	add	r3, sp, #12
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	462a      	mov	r2, r5
 800960e:	4638      	mov	r0, r7
 8009610:	4b0e      	ldr	r3, [pc, #56]	@ (800964c <_svfiprintf_r+0x1f4>)
 8009612:	a904      	add	r1, sp, #16
 8009614:	f7fd fe7c 	bl	8007310 <_printf_float>
 8009618:	1c42      	adds	r2, r0, #1
 800961a:	4606      	mov	r6, r0
 800961c:	d1d6      	bne.n	80095cc <_svfiprintf_r+0x174>
 800961e:	89ab      	ldrh	r3, [r5, #12]
 8009620:	065b      	lsls	r3, r3, #25
 8009622:	f53f af2d 	bmi.w	8009480 <_svfiprintf_r+0x28>
 8009626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009628:	e72c      	b.n	8009484 <_svfiprintf_r+0x2c>
 800962a:	ab03      	add	r3, sp, #12
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	462a      	mov	r2, r5
 8009630:	4638      	mov	r0, r7
 8009632:	4b06      	ldr	r3, [pc, #24]	@ (800964c <_svfiprintf_r+0x1f4>)
 8009634:	a904      	add	r1, sp, #16
 8009636:	f7fe f909 	bl	800784c <_printf_i>
 800963a:	e7ed      	b.n	8009618 <_svfiprintf_r+0x1c0>
 800963c:	0800b4e0 	.word	0x0800b4e0
 8009640:	0800b4e6 	.word	0x0800b4e6
 8009644:	0800b4ea 	.word	0x0800b4ea
 8009648:	08007311 	.word	0x08007311
 800964c:	080093a1 	.word	0x080093a1

08009650 <__sflush_r>:
 8009650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	0716      	lsls	r6, r2, #28
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	d454      	bmi.n	8009708 <__sflush_r+0xb8>
 800965e:	684b      	ldr	r3, [r1, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	dc02      	bgt.n	800966a <__sflush_r+0x1a>
 8009664:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd48      	ble.n	80096fc <__sflush_r+0xac>
 800966a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800966c:	2e00      	cmp	r6, #0
 800966e:	d045      	beq.n	80096fc <__sflush_r+0xac>
 8009670:	2300      	movs	r3, #0
 8009672:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009676:	682f      	ldr	r7, [r5, #0]
 8009678:	6a21      	ldr	r1, [r4, #32]
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	d030      	beq.n	80096e0 <__sflush_r+0x90>
 800967e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	0759      	lsls	r1, r3, #29
 8009684:	d505      	bpl.n	8009692 <__sflush_r+0x42>
 8009686:	6863      	ldr	r3, [r4, #4]
 8009688:	1ad2      	subs	r2, r2, r3
 800968a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800968c:	b10b      	cbz	r3, 8009692 <__sflush_r+0x42>
 800968e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009690:	1ad2      	subs	r2, r2, r3
 8009692:	2300      	movs	r3, #0
 8009694:	4628      	mov	r0, r5
 8009696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009698:	6a21      	ldr	r1, [r4, #32]
 800969a:	47b0      	blx	r6
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	d106      	bne.n	80096b0 <__sflush_r+0x60>
 80096a2:	6829      	ldr	r1, [r5, #0]
 80096a4:	291d      	cmp	r1, #29
 80096a6:	d82b      	bhi.n	8009700 <__sflush_r+0xb0>
 80096a8:	4a28      	ldr	r2, [pc, #160]	@ (800974c <__sflush_r+0xfc>)
 80096aa:	40ca      	lsrs	r2, r1
 80096ac:	07d6      	lsls	r6, r2, #31
 80096ae:	d527      	bpl.n	8009700 <__sflush_r+0xb0>
 80096b0:	2200      	movs	r2, #0
 80096b2:	6062      	str	r2, [r4, #4]
 80096b4:	6922      	ldr	r2, [r4, #16]
 80096b6:	04d9      	lsls	r1, r3, #19
 80096b8:	6022      	str	r2, [r4, #0]
 80096ba:	d504      	bpl.n	80096c6 <__sflush_r+0x76>
 80096bc:	1c42      	adds	r2, r0, #1
 80096be:	d101      	bne.n	80096c4 <__sflush_r+0x74>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b903      	cbnz	r3, 80096c6 <__sflush_r+0x76>
 80096c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80096c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096c8:	602f      	str	r7, [r5, #0]
 80096ca:	b1b9      	cbz	r1, 80096fc <__sflush_r+0xac>
 80096cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d002      	beq.n	80096da <__sflush_r+0x8a>
 80096d4:	4628      	mov	r0, r5
 80096d6:	f7ff f9eb 	bl	8008ab0 <_free_r>
 80096da:	2300      	movs	r3, #0
 80096dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80096de:	e00d      	b.n	80096fc <__sflush_r+0xac>
 80096e0:	2301      	movs	r3, #1
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b0      	blx	r6
 80096e6:	4602      	mov	r2, r0
 80096e8:	1c50      	adds	r0, r2, #1
 80096ea:	d1c9      	bne.n	8009680 <__sflush_r+0x30>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0c6      	beq.n	8009680 <__sflush_r+0x30>
 80096f2:	2b1d      	cmp	r3, #29
 80096f4:	d001      	beq.n	80096fa <__sflush_r+0xaa>
 80096f6:	2b16      	cmp	r3, #22
 80096f8:	d11d      	bne.n	8009736 <__sflush_r+0xe6>
 80096fa:	602f      	str	r7, [r5, #0]
 80096fc:	2000      	movs	r0, #0
 80096fe:	e021      	b.n	8009744 <__sflush_r+0xf4>
 8009700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009704:	b21b      	sxth	r3, r3
 8009706:	e01a      	b.n	800973e <__sflush_r+0xee>
 8009708:	690f      	ldr	r7, [r1, #16]
 800970a:	2f00      	cmp	r7, #0
 800970c:	d0f6      	beq.n	80096fc <__sflush_r+0xac>
 800970e:	0793      	lsls	r3, r2, #30
 8009710:	bf18      	it	ne
 8009712:	2300      	movne	r3, #0
 8009714:	680e      	ldr	r6, [r1, #0]
 8009716:	bf08      	it	eq
 8009718:	694b      	ldreq	r3, [r1, #20]
 800971a:	1bf6      	subs	r6, r6, r7
 800971c:	600f      	str	r7, [r1, #0]
 800971e:	608b      	str	r3, [r1, #8]
 8009720:	2e00      	cmp	r6, #0
 8009722:	ddeb      	ble.n	80096fc <__sflush_r+0xac>
 8009724:	4633      	mov	r3, r6
 8009726:	463a      	mov	r2, r7
 8009728:	4628      	mov	r0, r5
 800972a:	6a21      	ldr	r1, [r4, #32]
 800972c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009730:	47e0      	blx	ip
 8009732:	2800      	cmp	r0, #0
 8009734:	dc07      	bgt.n	8009746 <__sflush_r+0xf6>
 8009736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800973e:	f04f 30ff 	mov.w	r0, #4294967295
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009746:	4407      	add	r7, r0
 8009748:	1a36      	subs	r6, r6, r0
 800974a:	e7e9      	b.n	8009720 <__sflush_r+0xd0>
 800974c:	20400001 	.word	0x20400001

08009750 <_fflush_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	690b      	ldr	r3, [r1, #16]
 8009754:	4605      	mov	r5, r0
 8009756:	460c      	mov	r4, r1
 8009758:	b913      	cbnz	r3, 8009760 <_fflush_r+0x10>
 800975a:	2500      	movs	r5, #0
 800975c:	4628      	mov	r0, r5
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	b118      	cbz	r0, 800976a <_fflush_r+0x1a>
 8009762:	6a03      	ldr	r3, [r0, #32]
 8009764:	b90b      	cbnz	r3, 800976a <_fflush_r+0x1a>
 8009766:	f7fe fa1b 	bl	8007ba0 <__sinit>
 800976a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f3      	beq.n	800975a <_fflush_r+0xa>
 8009772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009774:	07d0      	lsls	r0, r2, #31
 8009776:	d404      	bmi.n	8009782 <_fflush_r+0x32>
 8009778:	0599      	lsls	r1, r3, #22
 800977a:	d402      	bmi.n	8009782 <_fflush_r+0x32>
 800977c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800977e:	f7fe fb28 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 8009782:	4628      	mov	r0, r5
 8009784:	4621      	mov	r1, r4
 8009786:	f7ff ff63 	bl	8009650 <__sflush_r>
 800978a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800978c:	4605      	mov	r5, r0
 800978e:	07da      	lsls	r2, r3, #31
 8009790:	d4e4      	bmi.n	800975c <_fflush_r+0xc>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	059b      	lsls	r3, r3, #22
 8009796:	d4e1      	bmi.n	800975c <_fflush_r+0xc>
 8009798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800979a:	f7fe fb1b 	bl	8007dd4 <__retarget_lock_release_recursive>
 800979e:	e7dd      	b.n	800975c <_fflush_r+0xc>

080097a0 <memmove>:
 80097a0:	4288      	cmp	r0, r1
 80097a2:	b510      	push	{r4, lr}
 80097a4:	eb01 0402 	add.w	r4, r1, r2
 80097a8:	d902      	bls.n	80097b0 <memmove+0x10>
 80097aa:	4284      	cmp	r4, r0
 80097ac:	4623      	mov	r3, r4
 80097ae:	d807      	bhi.n	80097c0 <memmove+0x20>
 80097b0:	1e43      	subs	r3, r0, #1
 80097b2:	42a1      	cmp	r1, r4
 80097b4:	d008      	beq.n	80097c8 <memmove+0x28>
 80097b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097be:	e7f8      	b.n	80097b2 <memmove+0x12>
 80097c0:	4601      	mov	r1, r0
 80097c2:	4402      	add	r2, r0
 80097c4:	428a      	cmp	r2, r1
 80097c6:	d100      	bne.n	80097ca <memmove+0x2a>
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097d2:	e7f7      	b.n	80097c4 <memmove+0x24>

080097d4 <_sbrk_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	2300      	movs	r3, #0
 80097d8:	4d05      	ldr	r5, [pc, #20]	@ (80097f0 <_sbrk_r+0x1c>)
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	f7f8 fd0e 	bl	8002200 <_sbrk>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_sbrk_r+0x1a>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_sbrk_r+0x1a>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	20000944 	.word	0x20000944

080097f4 <memcpy>:
 80097f4:	440a      	add	r2, r1
 80097f6:	4291      	cmp	r1, r2
 80097f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097fc:	d100      	bne.n	8009800 <memcpy+0xc>
 80097fe:	4770      	bx	lr
 8009800:	b510      	push	{r4, lr}
 8009802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009806:	4291      	cmp	r1, r2
 8009808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800980c:	d1f9      	bne.n	8009802 <memcpy+0xe>
 800980e:	bd10      	pop	{r4, pc}

08009810 <__assert_func>:
 8009810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009812:	4614      	mov	r4, r2
 8009814:	461a      	mov	r2, r3
 8009816:	4b09      	ldr	r3, [pc, #36]	@ (800983c <__assert_func+0x2c>)
 8009818:	4605      	mov	r5, r0
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68d8      	ldr	r0, [r3, #12]
 800981e:	b14c      	cbz	r4, 8009834 <__assert_func+0x24>
 8009820:	4b07      	ldr	r3, [pc, #28]	@ (8009840 <__assert_func+0x30>)
 8009822:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009826:	9100      	str	r1, [sp, #0]
 8009828:	462b      	mov	r3, r5
 800982a:	4906      	ldr	r1, [pc, #24]	@ (8009844 <__assert_func+0x34>)
 800982c:	f000 f870 	bl	8009910 <fiprintf>
 8009830:	f000 f880 	bl	8009934 <abort>
 8009834:	4b04      	ldr	r3, [pc, #16]	@ (8009848 <__assert_func+0x38>)
 8009836:	461c      	mov	r4, r3
 8009838:	e7f3      	b.n	8009822 <__assert_func+0x12>
 800983a:	bf00      	nop
 800983c:	20000028 	.word	0x20000028
 8009840:	0800b4fb 	.word	0x0800b4fb
 8009844:	0800b508 	.word	0x0800b508
 8009848:	0800b536 	.word	0x0800b536

0800984c <_calloc_r>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	fba1 5402 	umull	r5, r4, r1, r2
 8009852:	b934      	cbnz	r4, 8009862 <_calloc_r+0x16>
 8009854:	4629      	mov	r1, r5
 8009856:	f7ff f99d 	bl	8008b94 <_malloc_r>
 800985a:	4606      	mov	r6, r0
 800985c:	b928      	cbnz	r0, 800986a <_calloc_r+0x1e>
 800985e:	4630      	mov	r0, r6
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	220c      	movs	r2, #12
 8009864:	2600      	movs	r6, #0
 8009866:	6002      	str	r2, [r0, #0]
 8009868:	e7f9      	b.n	800985e <_calloc_r+0x12>
 800986a:	462a      	mov	r2, r5
 800986c:	4621      	mov	r1, r4
 800986e:	f7fe fa32 	bl	8007cd6 <memset>
 8009872:	e7f4      	b.n	800985e <_calloc_r+0x12>

08009874 <__ascii_mbtowc>:
 8009874:	b082      	sub	sp, #8
 8009876:	b901      	cbnz	r1, 800987a <__ascii_mbtowc+0x6>
 8009878:	a901      	add	r1, sp, #4
 800987a:	b142      	cbz	r2, 800988e <__ascii_mbtowc+0x1a>
 800987c:	b14b      	cbz	r3, 8009892 <__ascii_mbtowc+0x1e>
 800987e:	7813      	ldrb	r3, [r2, #0]
 8009880:	600b      	str	r3, [r1, #0]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	1e10      	subs	r0, r2, #0
 8009886:	bf18      	it	ne
 8009888:	2001      	movne	r0, #1
 800988a:	b002      	add	sp, #8
 800988c:	4770      	bx	lr
 800988e:	4610      	mov	r0, r2
 8009890:	e7fb      	b.n	800988a <__ascii_mbtowc+0x16>
 8009892:	f06f 0001 	mvn.w	r0, #1
 8009896:	e7f8      	b.n	800988a <__ascii_mbtowc+0x16>

08009898 <_realloc_r>:
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	4607      	mov	r7, r0
 800989e:	4614      	mov	r4, r2
 80098a0:	460d      	mov	r5, r1
 80098a2:	b921      	cbnz	r1, 80098ae <_realloc_r+0x16>
 80098a4:	4611      	mov	r1, r2
 80098a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098aa:	f7ff b973 	b.w	8008b94 <_malloc_r>
 80098ae:	b92a      	cbnz	r2, 80098bc <_realloc_r+0x24>
 80098b0:	f7ff f8fe 	bl	8008ab0 <_free_r>
 80098b4:	4625      	mov	r5, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098bc:	f000 f841 	bl	8009942 <_malloc_usable_size_r>
 80098c0:	4284      	cmp	r4, r0
 80098c2:	4606      	mov	r6, r0
 80098c4:	d802      	bhi.n	80098cc <_realloc_r+0x34>
 80098c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098ca:	d8f4      	bhi.n	80098b6 <_realloc_r+0x1e>
 80098cc:	4621      	mov	r1, r4
 80098ce:	4638      	mov	r0, r7
 80098d0:	f7ff f960 	bl	8008b94 <_malloc_r>
 80098d4:	4680      	mov	r8, r0
 80098d6:	b908      	cbnz	r0, 80098dc <_realloc_r+0x44>
 80098d8:	4645      	mov	r5, r8
 80098da:	e7ec      	b.n	80098b6 <_realloc_r+0x1e>
 80098dc:	42b4      	cmp	r4, r6
 80098de:	4622      	mov	r2, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	bf28      	it	cs
 80098e4:	4632      	movcs	r2, r6
 80098e6:	f7ff ff85 	bl	80097f4 <memcpy>
 80098ea:	4629      	mov	r1, r5
 80098ec:	4638      	mov	r0, r7
 80098ee:	f7ff f8df 	bl	8008ab0 <_free_r>
 80098f2:	e7f1      	b.n	80098d8 <_realloc_r+0x40>

080098f4 <__ascii_wctomb>:
 80098f4:	4603      	mov	r3, r0
 80098f6:	4608      	mov	r0, r1
 80098f8:	b141      	cbz	r1, 800990c <__ascii_wctomb+0x18>
 80098fa:	2aff      	cmp	r2, #255	@ 0xff
 80098fc:	d904      	bls.n	8009908 <__ascii_wctomb+0x14>
 80098fe:	228a      	movs	r2, #138	@ 0x8a
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	4770      	bx	lr
 8009908:	2001      	movs	r0, #1
 800990a:	700a      	strb	r2, [r1, #0]
 800990c:	4770      	bx	lr
	...

08009910 <fiprintf>:
 8009910:	b40e      	push	{r1, r2, r3}
 8009912:	b503      	push	{r0, r1, lr}
 8009914:	4601      	mov	r1, r0
 8009916:	ab03      	add	r3, sp, #12
 8009918:	4805      	ldr	r0, [pc, #20]	@ (8009930 <fiprintf+0x20>)
 800991a:	f853 2b04 	ldr.w	r2, [r3], #4
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f000 f83d 	bl	80099a0 <_vfiprintf_r>
 8009926:	b002      	add	sp, #8
 8009928:	f85d eb04 	ldr.w	lr, [sp], #4
 800992c:	b003      	add	sp, #12
 800992e:	4770      	bx	lr
 8009930:	20000028 	.word	0x20000028

08009934 <abort>:
 8009934:	2006      	movs	r0, #6
 8009936:	b508      	push	{r3, lr}
 8009938:	f000 fa06 	bl	8009d48 <raise>
 800993c:	2001      	movs	r0, #1
 800993e:	f7f8 fbea 	bl	8002116 <_exit>

08009942 <_malloc_usable_size_r>:
 8009942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009946:	1f18      	subs	r0, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfbc      	itt	lt
 800994c:	580b      	ldrlt	r3, [r1, r0]
 800994e:	18c0      	addlt	r0, r0, r3
 8009950:	4770      	bx	lr

08009952 <__sfputc_r>:
 8009952:	6893      	ldr	r3, [r2, #8]
 8009954:	b410      	push	{r4}
 8009956:	3b01      	subs	r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	6093      	str	r3, [r2, #8]
 800995c:	da07      	bge.n	800996e <__sfputc_r+0x1c>
 800995e:	6994      	ldr	r4, [r2, #24]
 8009960:	42a3      	cmp	r3, r4
 8009962:	db01      	blt.n	8009968 <__sfputc_r+0x16>
 8009964:	290a      	cmp	r1, #10
 8009966:	d102      	bne.n	800996e <__sfputc_r+0x1c>
 8009968:	bc10      	pop	{r4}
 800996a:	f000 b931 	b.w	8009bd0 <__swbuf_r>
 800996e:	6813      	ldr	r3, [r2, #0]
 8009970:	1c58      	adds	r0, r3, #1
 8009972:	6010      	str	r0, [r2, #0]
 8009974:	7019      	strb	r1, [r3, #0]
 8009976:	4608      	mov	r0, r1
 8009978:	bc10      	pop	{r4}
 800997a:	4770      	bx	lr

0800997c <__sfputs_r>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	4606      	mov	r6, r0
 8009980:	460f      	mov	r7, r1
 8009982:	4614      	mov	r4, r2
 8009984:	18d5      	adds	r5, r2, r3
 8009986:	42ac      	cmp	r4, r5
 8009988:	d101      	bne.n	800998e <__sfputs_r+0x12>
 800998a:	2000      	movs	r0, #0
 800998c:	e007      	b.n	800999e <__sfputs_r+0x22>
 800998e:	463a      	mov	r2, r7
 8009990:	4630      	mov	r0, r6
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	f7ff ffdc 	bl	8009952 <__sfputc_r>
 800999a:	1c43      	adds	r3, r0, #1
 800999c:	d1f3      	bne.n	8009986 <__sfputs_r+0xa>
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099a0 <_vfiprintf_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	460d      	mov	r5, r1
 80099a6:	4614      	mov	r4, r2
 80099a8:	4698      	mov	r8, r3
 80099aa:	4606      	mov	r6, r0
 80099ac:	b09d      	sub	sp, #116	@ 0x74
 80099ae:	b118      	cbz	r0, 80099b8 <_vfiprintf_r+0x18>
 80099b0:	6a03      	ldr	r3, [r0, #32]
 80099b2:	b90b      	cbnz	r3, 80099b8 <_vfiprintf_r+0x18>
 80099b4:	f7fe f8f4 	bl	8007ba0 <__sinit>
 80099b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099ba:	07d9      	lsls	r1, r3, #31
 80099bc:	d405      	bmi.n	80099ca <_vfiprintf_r+0x2a>
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	059a      	lsls	r2, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_vfiprintf_r+0x2a>
 80099c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099c6:	f7fe fa04 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	071b      	lsls	r3, r3, #28
 80099ce:	d501      	bpl.n	80099d4 <_vfiprintf_r+0x34>
 80099d0:	692b      	ldr	r3, [r5, #16]
 80099d2:	b99b      	cbnz	r3, 80099fc <_vfiprintf_r+0x5c>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4630      	mov	r0, r6
 80099d8:	f000 f938 	bl	8009c4c <__swsetup_r>
 80099dc:	b170      	cbz	r0, 80099fc <_vfiprintf_r+0x5c>
 80099de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099e0:	07dc      	lsls	r4, r3, #31
 80099e2:	d504      	bpl.n	80099ee <_vfiprintf_r+0x4e>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	b01d      	add	sp, #116	@ 0x74
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	89ab      	ldrh	r3, [r5, #12]
 80099f0:	0598      	lsls	r0, r3, #22
 80099f2:	d4f7      	bmi.n	80099e4 <_vfiprintf_r+0x44>
 80099f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099f6:	f7fe f9ed 	bl	8007dd4 <__retarget_lock_release_recursive>
 80099fa:	e7f3      	b.n	80099e4 <_vfiprintf_r+0x44>
 80099fc:	2300      	movs	r3, #0
 80099fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a00:	2320      	movs	r3, #32
 8009a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a06:	2330      	movs	r3, #48	@ 0x30
 8009a08:	f04f 0901 	mov.w	r9, #1
 8009a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009bbc <_vfiprintf_r+0x21c>
 8009a14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a18:	4623      	mov	r3, r4
 8009a1a:	469a      	mov	sl, r3
 8009a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a20:	b10a      	cbz	r2, 8009a26 <_vfiprintf_r+0x86>
 8009a22:	2a25      	cmp	r2, #37	@ 0x25
 8009a24:	d1f9      	bne.n	8009a1a <_vfiprintf_r+0x7a>
 8009a26:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2a:	d00b      	beq.n	8009a44 <_vfiprintf_r+0xa4>
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7ff ffa2 	bl	800997c <__sfputs_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	f000 80a7 	beq.w	8009b8c <_vfiprintf_r+0x1ec>
 8009a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a40:	445a      	add	r2, fp
 8009a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a44:	f89a 3000 	ldrb.w	r3, [sl]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 809f 	beq.w	8009b8c <_vfiprintf_r+0x1ec>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f04f 32ff 	mov.w	r2, #4294967295
 8009a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a58:	f10a 0a01 	add.w	sl, sl, #1
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	9307      	str	r3, [sp, #28]
 8009a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a66:	4654      	mov	r4, sl
 8009a68:	2205      	movs	r2, #5
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	4853      	ldr	r0, [pc, #332]	@ (8009bbc <_vfiprintf_r+0x21c>)
 8009a70:	f7fe f9b1 	bl	8007dd6 <memchr>
 8009a74:	9a04      	ldr	r2, [sp, #16]
 8009a76:	b9d8      	cbnz	r0, 8009ab0 <_vfiprintf_r+0x110>
 8009a78:	06d1      	lsls	r1, r2, #27
 8009a7a:	bf44      	itt	mi
 8009a7c:	2320      	movmi	r3, #32
 8009a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a82:	0713      	lsls	r3, r2, #28
 8009a84:	bf44      	itt	mi
 8009a86:	232b      	movmi	r3, #43	@ 0x2b
 8009a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a92:	d015      	beq.n	8009ac0 <_vfiprintf_r+0x120>
 8009a94:	4654      	mov	r4, sl
 8009a96:	2000      	movs	r0, #0
 8009a98:	f04f 0c0a 	mov.w	ip, #10
 8009a9c:	9a07      	ldr	r2, [sp, #28]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa4:	3b30      	subs	r3, #48	@ 0x30
 8009aa6:	2b09      	cmp	r3, #9
 8009aa8:	d94b      	bls.n	8009b42 <_vfiprintf_r+0x1a2>
 8009aaa:	b1b0      	cbz	r0, 8009ada <_vfiprintf_r+0x13a>
 8009aac:	9207      	str	r2, [sp, #28]
 8009aae:	e014      	b.n	8009ada <_vfiprintf_r+0x13a>
 8009ab0:	eba0 0308 	sub.w	r3, r0, r8
 8009ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	46a2      	mov	sl, r4
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	e7d2      	b.n	8009a66 <_vfiprintf_r+0xc6>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	1d19      	adds	r1, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	9103      	str	r1, [sp, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfbb      	ittet	lt
 8009acc:	425b      	neglt	r3, r3
 8009ace:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad2:	9307      	strge	r3, [sp, #28]
 8009ad4:	9307      	strlt	r3, [sp, #28]
 8009ad6:	bfb8      	it	lt
 8009ad8:	9204      	strlt	r2, [sp, #16]
 8009ada:	7823      	ldrb	r3, [r4, #0]
 8009adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ade:	d10a      	bne.n	8009af6 <_vfiprintf_r+0x156>
 8009ae0:	7863      	ldrb	r3, [r4, #1]
 8009ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae4:	d132      	bne.n	8009b4c <_vfiprintf_r+0x1ac>
 8009ae6:	9b03      	ldr	r3, [sp, #12]
 8009ae8:	3402      	adds	r4, #2
 8009aea:	1d1a      	adds	r2, r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	9203      	str	r2, [sp, #12]
 8009af0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009bc0 <_vfiprintf_r+0x220>
 8009afa:	2203      	movs	r2, #3
 8009afc:	4650      	mov	r0, sl
 8009afe:	7821      	ldrb	r1, [r4, #0]
 8009b00:	f7fe f969 	bl	8007dd6 <memchr>
 8009b04:	b138      	cbz	r0, 8009b16 <_vfiprintf_r+0x176>
 8009b06:	2240      	movs	r2, #64	@ 0x40
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	eba0 000a 	sub.w	r0, r0, sl
 8009b0e:	4082      	lsls	r2, r0
 8009b10:	4313      	orrs	r3, r2
 8009b12:	3401      	adds	r4, #1
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	4829      	ldr	r0, [pc, #164]	@ (8009bc4 <_vfiprintf_r+0x224>)
 8009b1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b22:	f7fe f958 	bl	8007dd6 <memchr>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d03f      	beq.n	8009baa <_vfiprintf_r+0x20a>
 8009b2a:	4b27      	ldr	r3, [pc, #156]	@ (8009bc8 <_vfiprintf_r+0x228>)
 8009b2c:	bb1b      	cbnz	r3, 8009b76 <_vfiprintf_r+0x1d6>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	3307      	adds	r3, #7
 8009b32:	f023 0307 	bic.w	r3, r3, #7
 8009b36:	3308      	adds	r3, #8
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3c:	443b      	add	r3, r7
 8009b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b40:	e76a      	b.n	8009a18 <_vfiprintf_r+0x78>
 8009b42:	460c      	mov	r4, r1
 8009b44:	2001      	movs	r0, #1
 8009b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b4a:	e7a8      	b.n	8009a9e <_vfiprintf_r+0xfe>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f04f 0c0a 	mov.w	ip, #10
 8009b52:	4619      	mov	r1, r3
 8009b54:	3401      	adds	r4, #1
 8009b56:	9305      	str	r3, [sp, #20]
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b5e:	3a30      	subs	r2, #48	@ 0x30
 8009b60:	2a09      	cmp	r2, #9
 8009b62:	d903      	bls.n	8009b6c <_vfiprintf_r+0x1cc>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0c6      	beq.n	8009af6 <_vfiprintf_r+0x156>
 8009b68:	9105      	str	r1, [sp, #20]
 8009b6a:	e7c4      	b.n	8009af6 <_vfiprintf_r+0x156>
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	2301      	movs	r3, #1
 8009b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b74:	e7f0      	b.n	8009b58 <_vfiprintf_r+0x1b8>
 8009b76:	ab03      	add	r3, sp, #12
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	4b13      	ldr	r3, [pc, #76]	@ (8009bcc <_vfiprintf_r+0x22c>)
 8009b80:	a904      	add	r1, sp, #16
 8009b82:	f7fd fbc5 	bl	8007310 <_printf_float>
 8009b86:	4607      	mov	r7, r0
 8009b88:	1c78      	adds	r0, r7, #1
 8009b8a:	d1d6      	bne.n	8009b3a <_vfiprintf_r+0x19a>
 8009b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b8e:	07d9      	lsls	r1, r3, #31
 8009b90:	d405      	bmi.n	8009b9e <_vfiprintf_r+0x1fe>
 8009b92:	89ab      	ldrh	r3, [r5, #12]
 8009b94:	059a      	lsls	r2, r3, #22
 8009b96:	d402      	bmi.n	8009b9e <_vfiprintf_r+0x1fe>
 8009b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b9a:	f7fe f91b 	bl	8007dd4 <__retarget_lock_release_recursive>
 8009b9e:	89ab      	ldrh	r3, [r5, #12]
 8009ba0:	065b      	lsls	r3, r3, #25
 8009ba2:	f53f af1f 	bmi.w	80099e4 <_vfiprintf_r+0x44>
 8009ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ba8:	e71e      	b.n	80099e8 <_vfiprintf_r+0x48>
 8009baa:	ab03      	add	r3, sp, #12
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	462a      	mov	r2, r5
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <_vfiprintf_r+0x22c>)
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	f7fd fe49 	bl	800784c <_printf_i>
 8009bba:	e7e4      	b.n	8009b86 <_vfiprintf_r+0x1e6>
 8009bbc:	0800b4e0 	.word	0x0800b4e0
 8009bc0:	0800b4e6 	.word	0x0800b4e6
 8009bc4:	0800b4ea 	.word	0x0800b4ea
 8009bc8:	08007311 	.word	0x08007311
 8009bcc:	0800997d 	.word	0x0800997d

08009bd0 <__swbuf_r>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	460e      	mov	r6, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	b118      	cbz	r0, 8009be2 <__swbuf_r+0x12>
 8009bda:	6a03      	ldr	r3, [r0, #32]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <__swbuf_r+0x12>
 8009bde:	f7fd ffdf 	bl	8007ba0 <__sinit>
 8009be2:	69a3      	ldr	r3, [r4, #24]
 8009be4:	60a3      	str	r3, [r4, #8]
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	071a      	lsls	r2, r3, #28
 8009bea:	d501      	bpl.n	8009bf0 <__swbuf_r+0x20>
 8009bec:	6923      	ldr	r3, [r4, #16]
 8009bee:	b943      	cbnz	r3, 8009c02 <__swbuf_r+0x32>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 f82a 	bl	8009c4c <__swsetup_r>
 8009bf8:	b118      	cbz	r0, 8009c02 <__swbuf_r+0x32>
 8009bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8009bfe:	4638      	mov	r0, r7
 8009c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	6922      	ldr	r2, [r4, #16]
 8009c06:	b2f6      	uxtb	r6, r6
 8009c08:	1a98      	subs	r0, r3, r2
 8009c0a:	6963      	ldr	r3, [r4, #20]
 8009c0c:	4637      	mov	r7, r6
 8009c0e:	4283      	cmp	r3, r0
 8009c10:	dc05      	bgt.n	8009c1e <__swbuf_r+0x4e>
 8009c12:	4621      	mov	r1, r4
 8009c14:	4628      	mov	r0, r5
 8009c16:	f7ff fd9b 	bl	8009750 <_fflush_r>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d1ed      	bne.n	8009bfa <__swbuf_r+0x2a>
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	701e      	strb	r6, [r3, #0]
 8009c2c:	6962      	ldr	r2, [r4, #20]
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d004      	beq.n	8009c3e <__swbuf_r+0x6e>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	07db      	lsls	r3, r3, #31
 8009c38:	d5e1      	bpl.n	8009bfe <__swbuf_r+0x2e>
 8009c3a:	2e0a      	cmp	r6, #10
 8009c3c:	d1df      	bne.n	8009bfe <__swbuf_r+0x2e>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4628      	mov	r0, r5
 8009c42:	f7ff fd85 	bl	8009750 <_fflush_r>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0d9      	beq.n	8009bfe <__swbuf_r+0x2e>
 8009c4a:	e7d6      	b.n	8009bfa <__swbuf_r+0x2a>

08009c4c <__swsetup_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4b29      	ldr	r3, [pc, #164]	@ (8009cf4 <__swsetup_r+0xa8>)
 8009c50:	4605      	mov	r5, r0
 8009c52:	6818      	ldr	r0, [r3, #0]
 8009c54:	460c      	mov	r4, r1
 8009c56:	b118      	cbz	r0, 8009c60 <__swsetup_r+0x14>
 8009c58:	6a03      	ldr	r3, [r0, #32]
 8009c5a:	b90b      	cbnz	r3, 8009c60 <__swsetup_r+0x14>
 8009c5c:	f7fd ffa0 	bl	8007ba0 <__sinit>
 8009c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c64:	0719      	lsls	r1, r3, #28
 8009c66:	d422      	bmi.n	8009cae <__swsetup_r+0x62>
 8009c68:	06da      	lsls	r2, r3, #27
 8009c6a:	d407      	bmi.n	8009c7c <__swsetup_r+0x30>
 8009c6c:	2209      	movs	r2, #9
 8009c6e:	602a      	str	r2, [r5, #0]
 8009c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	e033      	b.n	8009ce4 <__swsetup_r+0x98>
 8009c7c:	0758      	lsls	r0, r3, #29
 8009c7e:	d512      	bpl.n	8009ca6 <__swsetup_r+0x5a>
 8009c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c82:	b141      	cbz	r1, 8009c96 <__swsetup_r+0x4a>
 8009c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c88:	4299      	cmp	r1, r3
 8009c8a:	d002      	beq.n	8009c92 <__swsetup_r+0x46>
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7fe ff0f 	bl	8008ab0 <_free_r>
 8009c92:	2300      	movs	r3, #0
 8009c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	6063      	str	r3, [r4, #4]
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f043 0308 	orr.w	r3, r3, #8
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	b94b      	cbnz	r3, 8009cc6 <__swsetup_r+0x7a>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cbc:	d003      	beq.n	8009cc6 <__swsetup_r+0x7a>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f000 f882 	bl	8009dca <__smakebuf_r>
 8009cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cca:	f013 0201 	ands.w	r2, r3, #1
 8009cce:	d00a      	beq.n	8009ce6 <__swsetup_r+0x9a>
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	60a2      	str	r2, [r4, #8]
 8009cd4:	6962      	ldr	r2, [r4, #20]
 8009cd6:	4252      	negs	r2, r2
 8009cd8:	61a2      	str	r2, [r4, #24]
 8009cda:	6922      	ldr	r2, [r4, #16]
 8009cdc:	b942      	cbnz	r2, 8009cf0 <__swsetup_r+0xa4>
 8009cde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ce2:	d1c5      	bne.n	8009c70 <__swsetup_r+0x24>
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	0799      	lsls	r1, r3, #30
 8009ce8:	bf58      	it	pl
 8009cea:	6962      	ldrpl	r2, [r4, #20]
 8009cec:	60a2      	str	r2, [r4, #8]
 8009cee:	e7f4      	b.n	8009cda <__swsetup_r+0x8e>
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	e7f7      	b.n	8009ce4 <__swsetup_r+0x98>
 8009cf4:	20000028 	.word	0x20000028

08009cf8 <_raise_r>:
 8009cf8:	291f      	cmp	r1, #31
 8009cfa:	b538      	push	{r3, r4, r5, lr}
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	d904      	bls.n	8009d0c <_raise_r+0x14>
 8009d02:	2316      	movs	r3, #22
 8009d04:	6003      	str	r3, [r0, #0]
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d0e:	b112      	cbz	r2, 8009d16 <_raise_r+0x1e>
 8009d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d14:	b94b      	cbnz	r3, 8009d2a <_raise_r+0x32>
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f830 	bl	8009d7c <_getpid_r>
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4601      	mov	r1, r0
 8009d20:	4628      	mov	r0, r5
 8009d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d26:	f000 b817 	b.w	8009d58 <_kill_r>
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d00a      	beq.n	8009d44 <_raise_r+0x4c>
 8009d2e:	1c59      	adds	r1, r3, #1
 8009d30:	d103      	bne.n	8009d3a <_raise_r+0x42>
 8009d32:	2316      	movs	r3, #22
 8009d34:	6003      	str	r3, [r0, #0]
 8009d36:	2001      	movs	r0, #1
 8009d38:	e7e7      	b.n	8009d0a <_raise_r+0x12>
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d42:	4798      	blx	r3
 8009d44:	2000      	movs	r0, #0
 8009d46:	e7e0      	b.n	8009d0a <_raise_r+0x12>

08009d48 <raise>:
 8009d48:	4b02      	ldr	r3, [pc, #8]	@ (8009d54 <raise+0xc>)
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	f7ff bfd3 	b.w	8009cf8 <_raise_r>
 8009d52:	bf00      	nop
 8009d54:	20000028 	.word	0x20000028

08009d58 <_kill_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4d06      	ldr	r5, [pc, #24]	@ (8009d78 <_kill_r+0x20>)
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	4611      	mov	r1, r2
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	f7f8 f9c6 	bl	80020f6 <_kill>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d102      	bne.n	8009d74 <_kill_r+0x1c>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	b103      	cbz	r3, 8009d74 <_kill_r+0x1c>
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop
 8009d78:	20000944 	.word	0x20000944

08009d7c <_getpid_r>:
 8009d7c:	f7f8 b9b4 	b.w	80020e8 <_getpid>

08009d80 <__swhatbuf_r>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	460c      	mov	r4, r1
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	4615      	mov	r5, r2
 8009d8a:	2900      	cmp	r1, #0
 8009d8c:	461e      	mov	r6, r3
 8009d8e:	b096      	sub	sp, #88	@ 0x58
 8009d90:	da0c      	bge.n	8009dac <__swhatbuf_r+0x2c>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	2100      	movs	r1, #0
 8009d96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d9a:	bf14      	ite	ne
 8009d9c:	2340      	movne	r3, #64	@ 0x40
 8009d9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009da2:	2000      	movs	r0, #0
 8009da4:	6031      	str	r1, [r6, #0]
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	b016      	add	sp, #88	@ 0x58
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	466a      	mov	r2, sp
 8009dae:	f000 f849 	bl	8009e44 <_fstat_r>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	dbed      	blt.n	8009d92 <__swhatbuf_r+0x12>
 8009db6:	9901      	ldr	r1, [sp, #4]
 8009db8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dbc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009dc0:	4259      	negs	r1, r3
 8009dc2:	4159      	adcs	r1, r3
 8009dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dc8:	e7eb      	b.n	8009da2 <__swhatbuf_r+0x22>

08009dca <__smakebuf_r>:
 8009dca:	898b      	ldrh	r3, [r1, #12]
 8009dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dce:	079d      	lsls	r5, r3, #30
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	d507      	bpl.n	8009de6 <__smakebuf_r+0x1c>
 8009dd6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dda:	6023      	str	r3, [r4, #0]
 8009ddc:	6123      	str	r3, [r4, #16]
 8009dde:	2301      	movs	r3, #1
 8009de0:	6163      	str	r3, [r4, #20]
 8009de2:	b003      	add	sp, #12
 8009de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de6:	466a      	mov	r2, sp
 8009de8:	ab01      	add	r3, sp, #4
 8009dea:	f7ff ffc9 	bl	8009d80 <__swhatbuf_r>
 8009dee:	9f00      	ldr	r7, [sp, #0]
 8009df0:	4605      	mov	r5, r0
 8009df2:	4639      	mov	r1, r7
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7fe fecd 	bl	8008b94 <_malloc_r>
 8009dfa:	b948      	cbnz	r0, 8009e10 <__smakebuf_r+0x46>
 8009dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d4ee      	bmi.n	8009de2 <__smakebuf_r+0x18>
 8009e04:	f023 0303 	bic.w	r3, r3, #3
 8009e08:	f043 0302 	orr.w	r3, r3, #2
 8009e0c:	81a3      	strh	r3, [r4, #12]
 8009e0e:	e7e2      	b.n	8009dd6 <__smakebuf_r+0xc>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	6020      	str	r0, [r4, #0]
 8009e20:	b15b      	cbz	r3, 8009e3a <__smakebuf_r+0x70>
 8009e22:	4630      	mov	r0, r6
 8009e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e28:	f000 f81e 	bl	8009e68 <_isatty_r>
 8009e2c:	b128      	cbz	r0, 8009e3a <__smakebuf_r+0x70>
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	f043 0301 	orr.w	r3, r3, #1
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	431d      	orrs	r5, r3
 8009e3e:	81a5      	strh	r5, [r4, #12]
 8009e40:	e7cf      	b.n	8009de2 <__smakebuf_r+0x18>
	...

08009e44 <_fstat_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	2300      	movs	r3, #0
 8009e48:	4d06      	ldr	r5, [pc, #24]	@ (8009e64 <_fstat_r+0x20>)
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	f7f8 f9af 	bl	80021b4 <_fstat>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	d102      	bne.n	8009e60 <_fstat_r+0x1c>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	b103      	cbz	r3, 8009e60 <_fstat_r+0x1c>
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	bd38      	pop	{r3, r4, r5, pc}
 8009e62:	bf00      	nop
 8009e64:	20000944 	.word	0x20000944

08009e68 <_isatty_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4d05      	ldr	r5, [pc, #20]	@ (8009e84 <_isatty_r+0x1c>)
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4608      	mov	r0, r1
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	f7f8 f9ad 	bl	80021d2 <_isatty>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	d102      	bne.n	8009e82 <_isatty_r+0x1a>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	b103      	cbz	r3, 8009e82 <_isatty_r+0x1a>
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	20000944 	.word	0x20000944

08009e88 <_init>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr

08009e94 <_fini>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr
